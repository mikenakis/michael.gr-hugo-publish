<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Grumpy on Michael&#39;s Blog</title>
        <link>//localhost:1313/tags/grumpy/</link>
        <description>Recent content in Grumpy on Michael&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Michael Belivanakis (a.k.a. Mike Nakis)</copyright>
        <lastBuildDate>Thu, 23 Oct 2025 19:32:12 +0200</lastBuildDate><atom:link href="//localhost:1313/tags/grumpy/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>How to organize a Visual Studio Solution</title>
        <link>//localhost:1313/post/2024-06-visual-studio-solutions/</link>
        <pubDate>Fri, 07 Jun 2024 15:58:23 +0000</pubDate>
        
        <guid>//localhost:1313/post/2024-06-visual-studio-solutions/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2024-06-visual-studio-solutions/images/microsoft-visual-studio-2022-logo.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;

Visual Studio is a capricious product, and its &amp;ldquo;Solution&amp;rdquo; subsystem is especially capricious. When you look at what options are available you might think you have a great degree of freedom to structure things the way you want, but as you will inevitably (and painfully) find out later, many things have to be done in precisely one, entirely undocumented way, or else there will be pain of the worst kind: Visual Studio will malfunction either without any error message, or with error messages that are completely unhelpful for locating and fixing the problem.&lt;/p&gt;
&lt;p&gt;Here is a list of things I have (painfully) found out over the years.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/post/2022-11-about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;the-project-directory-structure-must-be-entirely-flat&#34;&gt;The project directory structure must be entirely flat.
&lt;/h3&gt;&lt;p&gt;All project files must reside in directories that are immediate sub-directories of the solution directory. When adding a project you are given the freedom to put it in a directory anywhere you want, but if you don&amp;rsquo;t put it in a directory exactly under the solution directory, you are going to run into trouble later.&lt;/p&gt;
&lt;p&gt;If you have hundreds of projects, and you are thinking that putting them all in one directory is insane, welcome to the Microsoft world, where insane is the order of the day.&lt;/p&gt;
&lt;p&gt;From within Visual Studio, you can create what Microsoft calls &amp;ldquo;Solution Folders&amp;rdquo; to arrange your projects in a hierarchy at least within Visual
Studio&amp;rsquo;s &amp;ldquo;Solution Explorer&amp;rdquo; panel, but even this has a caveat, keep reading.&lt;/p&gt;
&lt;h3 id=&#34;the-startup-project-must-be-listed-first-in-the-solution-file&#34;&gt;The startup project must be listed first in the solution file.
&lt;/h3&gt;&lt;p&gt;Solution files are, luckily, text files. Solution files with the .sln extension are in a ridiculous ad-hoc format consisting of, among other things, entries delimited with &amp;ldquo;Project&amp;rdquo; and &amp;ldquo;EndProject&amp;rdquo; and making use of GUIDs to discourage anyone from touching it or even looking at it. Luckily they have now introduced .slnx files, which are a bit more lean, but they are now in XML, (Microsoft seems to be stuck in the 1980&amp;rsquo;s,) so they are still far more verbose than necessary, and they still contain GUIDs here and there. Regardless of the file format, you are free to edit the solution file and re-order these entries in any way you like, and it seems to have absolutely no effect because the Visual Studio Solution Explorer will sort them alphabetically anyway, but there is one kind of re-ordering that you can do which actually matters: The entry which stands for your startup project must be the first entry.&lt;/p&gt;
&lt;p&gt;If you do not do this, then each time you delete the .vs directory, restart Visual Studio, and try to launch your solution, you will be greeted with the all too familiar, extremely annoying, and extremely stupid message which says that you cannot launch a project which builds a library instead of an executable. This is happening because when the .vs directory is deleted, Visual Studio forgets the startup project, and when Visual Studio is launched with no startup project configured it absolutely has to establish a startup project, and it absolutely has to do this automatically, without asking you. In doing so, it picks the first project that it finds in the solution file, and it is not smart enough to skip projects that build libraries instead of executables.&lt;/p&gt;
&lt;h3 id=&#34;the-startup-project-must-not-be-nested-in-a-solution-folder&#34;&gt;The startup project must not be nested in a solution folder.
&lt;/h3&gt;&lt;p&gt;As mentioned earlier, you can use &amp;ldquo;Solution Folders&amp;rdquo; to arrange your projects in a hierarchy; however, the project that you usually want to have as the startup project must not be nested in a solution folder, it must be placed right under the root node of the solution.&lt;/p&gt;
&lt;p&gt;If you nest your startup project in a solution folder, then Visual Studio will again, entirely capriciously, ignore it when automatically selecting a project as the startup project each time you delete the .vs directory.&lt;/p&gt;
&lt;h3 id=&#34;test-projects-must-be-given-names-that-end-in--test-yes-that-is-a-space&#34;&gt;Test projects must be given names that end in &amp;quot; Test&amp;quot;. (Yes, that is a space.)
&lt;/h3&gt;&lt;p&gt;Usually, projects come in pairs: there is a production project, and a test project. Usually, we give the test project the same name as the production
project, with a suitable suffix to indicate that this is a test project. If your production project is called &amp;ldquo;Covfefe&amp;rdquo;, you might think that you have
plenty of options to call your test project: &amp;ldquo;CovfefeTest&amp;rdquo;, &amp;ldquo;Covfefe.Test&amp;rdquo;, &amp;ldquo;Covfefe-Test&amp;rdquo;, &amp;ldquo;Covfefe_Test&amp;rdquo;, etc. Actually, none of these will work. You have to call it &amp;ldquo;Covfefe Test&amp;rdquo;, with a space before &amp;ldquo;Test&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This is because the Visual Studio Solution Explorer uses different sorting rules from Windows File Explorer, so if you use anything but &amp;quot; Test&amp;quot; as a suffix for test projects you will find your projects listed in a different order between the Solution Explorer and the File Explorer. Depending on what you choose, your test projects will appear either before or after your production projects, either in Solution Explorer or in File Explorer, but not in both. The only trick I have been able to find which causes the test projects to always be listed after the production projects both in Solution Explorer and in File Explorer is to make each test project name consist of the production project name suffixed with &amp;quot; Test&amp;quot; (with a space.)&lt;/p&gt;
&lt;p&gt;Aaaand, of course, even with this, there is a catch: if you name your projects as I suggested, they will appear in the wrong order when viewing your solution directory on GitHub. Because GitHub uses yet different sorting rules. So, there is no way to achieve a consistent look both in Windows File Explorer, and Visual Studio Solution Explorer, and GitHub.&lt;/p&gt;
&lt;h4 id=&#34;solution-items-must-be-placed-in-a-custom-_solution-items-folder&#34;&gt;Solution items must be placed in a custom &amp;ldquo;_Solution Items&amp;rdquo; folder.
&lt;/h4&gt;&lt;p&gt;Solution-level items are a fiasco to begin with; they only exist because the Visual Studio Solution Explorer capriciously hides solution-level files from the user. Instead, Visual Studio offers the &amp;ldquo;Solution Items&amp;rdquo; workaround, which is a solution folder under the solution node where you can manually place links to solution-level files that you want to be able to access. (Because having to manually create links to your own files so that you can access them is always fun.)&lt;/p&gt;
&lt;p&gt;The default name that Visual Studio gives to this folder is &amp;ldquo;Solution Items&amp;rdquo;. The first thing you must do with it is to rename it to &amp;ldquo;_Solution Items&amp;rdquo;, so that it will be sorted first in the list, otherwise it will be hidden among other solution folders.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2024-12-27 16:05:14 UTC&lt;/p&gt;
&lt;p&gt;Thank you for sharing your experiences and all the useful info.
Visual Studio is increasingly becoming such a bloatware, while still missing quite a lot of basic fundamental functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Incident Impact Calculation Formula</title>
        <link>//localhost:1313/post/2024-05-incident-impact-calculation/</link>
        <pubDate>Fri, 31 May 2024 12:53:30 +0000</pubDate>
        
        <guid>//localhost:1313/post/2024-05-incident-impact-calculation/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2024-05-incident-impact-calculation/images/titanic.jpg&#34;
	width=&#34;2000&#34;
	height=&#34;1324&#34;
	srcset=&#34;//localhost:1313/post/2024-05-incident-impact-calculation/images/titanic_hu_a174135a2296b398.jpg 480w, //localhost:1313/post/2024-05-incident-impact-calculation/images/titanic_hu_d680cbb4b8484329.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;151&#34;
		data-flex-basis=&#34;362px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;The Mike Nakis formula for calculating the impact of an incident:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I = S × G × T&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I is the impact of the incident.&lt;/li&gt;
&lt;li&gt;S is the severity of the incident.&lt;/li&gt;
&lt;li&gt;G is the geographic pervasiveness of the incident.&lt;/li&gt;
&lt;li&gt;T is the temporal pervasiveness of the incident.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An incident of high severity does not have high impact if it happens rarely and in only a few places.&lt;/li&gt;
&lt;li&gt;An incident of low severity can have high impact if it is persistent and widespread.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;The sinking of the Titanic was certainly a disaster, but it was largely an isolated incident: it happened only once, on the 15th of April 1912, and only in one place, at 41°43&#39;32&amp;rsquo;&amp;lsquo;N 49°56&#39;49&amp;rsquo;&amp;lsquo;W; we have not had anything quite like that happening before, and we have been doing a decent job at avoiding similar incidents ever since, so in the big picture, it is not of particularly high impact.&lt;/p&gt;
&lt;p&gt;On the other hand:&lt;/p&gt;
&lt;p&gt;A modern computer taking several long seconds to reboot, despite having a multi-core, multi-gigahertz, hyper-threaded and pipelined CPU with multi-level cache and solid-state storage, is something that affects &lt;em&gt;&lt;strong&gt;everyone&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;everywhere, every day&lt;/strong&gt;&lt;/em&gt;, so it does in fact have &lt;em&gt;quite a high impact.&lt;/em&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>On Dotfuscator by PreEmptive Solutions</title>
        <link>//localhost:1313/post/2023-08-15-on-dotfuscator-by-preemptive/</link>
        <pubDate>Tue, 15 Aug 2023 12:29:37 +0000</pubDate>
        
        <guid>//localhost:1313/post/2023-08-15-on-dotfuscator-by-preemptive/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2023-08-15-on-dotfuscator-by-preemptive/images/dotfuscator.png&#34;
	width=&#34;598&#34;
	height=&#34;253&#34;
	srcset=&#34;//localhost:1313/post/2023-08-15-on-dotfuscator-by-preemptive/images/dotfuscator_hu_11bee5a46dfe251e.png 480w, //localhost:1313/post/2023-08-15-on-dotfuscator-by-preemptive/images/dotfuscator_hu_d63b329b1fdab07c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;567px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;I am giving this tool a try at work, and I am encountering a great many problems with it. I decided to publicly document my findings.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You launch their GUI application by going to the &amp;ldquo;Tools&amp;rdquo; menu of Visual Studio and selecting &amp;ldquo;Preemptive Protection - Dotfuscator Community&amp;rdquo;. At first it seems like nothing happens, but the application does appear a couple of incredibly long seconds later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every single time you launch their GUI application you are presented with their &amp;ldquo;Dotfuscator Community Registration&amp;rdquo; dialog, which you have to cancel in order to proceed. &lt;strong&gt;Every. Single. Time.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While looking at the front page of their GUI, there are &lt;strong&gt;no fewer than 3 nags to buy visible&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One that says &amp;ldquo;Try Dotfuscator Professional&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Another that says &amp;ldquo;Evaluate Dotfuscator Professional now&amp;rdquo;&lt;/li&gt;
&lt;li&gt;And one more which says &amp;ldquo;A new version of Dotfuscator is available. Upgrade Now&amp;rdquo;,
which, as I will show, is a lie to trick you into visiting their web site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upon every single startup of either the GUI or the command-line it says &amp;ldquo;a newer version is available, please download it from the downloads page of our website&amp;rdquo;. So, if you want to ignore the newer version, you can&amp;rsquo;t, &lt;strong&gt;you will always be pestered to download the newer version.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obviously, it calls home, but &lt;strong&gt;it did not first ask for permission to call home.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you go to the downloads page of their website to download the latest version, the only downloads available are for versions of Visual Studio that are older than the latest version, which is 2022, which is what I am using, &lt;strong&gt;and which is what Dotfuscator came bundled in&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They do not say what the latest version number is on their web site, so &lt;strong&gt;you cannot compare it against the one you already have.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I downloaded the latest version they offered on their web-site, and when I tried to install it, it said that it cannot find any compatible version of Visual Studio to install itself into. &lt;strong&gt;So, the &amp;ldquo;newer version is available&amp;rdquo; message is just a damned lie to lure you into visiting their website.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each time you launch their GUI application, it says &amp;ldquo;Dotfuscator1.xml&amp;rdquo; on its titlebar, which is the filename of the configuration file I created, &lt;strong&gt;but it has not loaded that file, because the &amp;ldquo;Inputs&amp;rdquo; page is empty.&lt;/strong&gt;
Furthermore, it shows an asterisk next to the filename, meaning that the file has been modified, even before I have performed any actions that would have modified it. (And if I exit their GUI application, it does not ask whether I want to save any changes.)&lt;/p&gt;
&lt;p&gt;As it turns out, this &amp;ldquo;Dotfuscator1.xml&amp;rdquo; is just the default settings filename that it uses so that it does not start completely empty, and it is just a coincidence that it has the same name as my actual configuration file. This explains a lot of the observed behavior, but the fact still remains that this is the default settings filename, so my first settings file is likely to have this name, and then things are bound to get mighty confusing, because &lt;strong&gt;&amp;ldquo;Dotfuscator1.xml&amp;rdquo; will sometimes refer to the default unsaved settings file, and sometimes it will refer to my actual settings file.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Their GUI application remembers the size and position of its main window only on the primary monitor; if you move it to another monitor, &lt;strong&gt;next time it starts it will appear on the primary monitor again.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user interface of their GUI application is clunky, inelegant, nonsensical, and results in a very poor user experience. As a small example,
on the &amp;ldquo;Inputs&amp;rdquo; tab they show a red exclamation mark next to every single one of my DLLs, but  &lt;strong&gt;they don&amp;rsquo;t give the slightest hint as to what the exclamation mark means or why it is being shown.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Dotfuscator1.xaml file generated by their GUI application is completely unusable because it contains &lt;strong&gt;absolute pathnames.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have to manually edit the file to convert them to pathnames relative to the root of the solution.&lt;/li&gt;
&lt;li&gt;Of course, in doing so, you will be blatantly disregarding the auto-generated comment at the top of the file which says that to edit this
file, you supposedly have to use their GUI application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But it is okay, we live in the 3rd millenium, we do our builds on continuous build servers, so all of our build tools are command-line tools, and nobody cares about their crappy GUI application.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s use the command-line tool, shall we?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you try to use the command-line tool, it says:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;You must register Dotfuscator Community in order to execute command line builds. Run the Dotfuscator GUI which will explain how to register.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the &amp;ldquo;community edition&amp;rdquo; product name is marketing deceit; this is not a community edition, this is a completely useless &lt;strong&gt;advertisement&lt;/strong&gt; of a product. It becomes an evaluation version once you have completed registration, where &amp;ldquo;registration&amp;rdquo; is a euphemism for &lt;strong&gt;personal information phishing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So, in order to proceed we have no option but to register.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s register, shall we?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their &amp;ldquo;Dotfuscator Community Registration&amp;rdquo; dialog says &amp;ldquo;PreEmptive Solutions will notify you by email with news, updated products and services (you may opt-out of being contacted).&amp;rdquo; There is no checkbox to control whether this will happen; you are just being informed that it will happen. So, &lt;strong&gt;beware, you are being opted-in.&lt;/strong&gt; (I think this violates a bunch of European Union regulations, doesn&amp;rsquo;t it?)&lt;/li&gt;
&lt;li&gt;Their &amp;ldquo;Dotfuscator Community Registration&amp;rdquo; dialog has a &amp;ldquo;Read our online privacy policy&amp;rdquo; link.
&lt;ul&gt;
&lt;li&gt;If you click that link, it takes you to some &amp;ldquo;Policies &amp;amp; Procedures&amp;rdquo; page, &lt;strong&gt;it does not take you to their privacy policy page.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;On that &amp;ldquo;Policies &amp;amp; Procedures&amp;rdquo; page, if you search among the many links that are completely unrelated to privacy, you might find a link to the page they have about their privacy policy. The title of that page is &amp;ldquo;Privacy Policy under Privacy Shield&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;The contemptible disgrace known as the &amp;ldquo;EU-US Privacy Shield&amp;rdquo; was &lt;strong&gt;declared invalid by the European Court of Justice on 16 July 2020.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Their software shows me a &amp;ldquo;Serial Number&amp;rdquo; but in the e-mail that they sent me &lt;strong&gt;they call the same thing &amp;ldquo;license key&amp;rdquo; instead.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Their software asks me for a &amp;ldquo;Confirmation Code&amp;rdquo; but in the e-mail that they sent me &lt;strong&gt;they call the same thing &amp;ldquo;confirmation number&amp;rdquo; instead.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;After registration, each time you launch their command-line tool, it displays the following message:
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;For personal use only. Please refer to the EULA distributed with The Software for details&amp;rdquo;
Indeed, on their &amp;ldquo;Command Line Interface&amp;rdquo; page they have a &amp;ldquo;License Restrictions&amp;rdquo; section which states:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The Dotfuscator Community license expressly prohibits the use of the product by commercial organizations for anything other than personal research and education. If you would like to use Dotfuscator on commercial projects, please consider evaluating Dotfuscator Professional.&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Again, this is even further proof that the &amp;ldquo;Dotfuscator Community&amp;rdquo; product title is nothing but a euphemism for &amp;ldquo;limited evaluation version&amp;rdquo;;
&lt;strong&gt;in other words, marketing deceit.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Both the &amp;ldquo;for personal use only&amp;rdquo; and the &amp;ldquo;newer version available&amp;rdquo; messages keep appearing even if you supply the /q (quiet) flag, so &lt;strong&gt;there is no way to suppress them.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;When the command-line tool encounters an error, including normal usage error, it often displays not just an error message, but also a stack
trace. This tells me that &lt;strong&gt;the tool is still at a highly experimental and immature stage of development.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Furthermore, the class names and method names in the stack trace are obfuscated, &lt;strong&gt;so they are doubly useless.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The command-line tool may also fail with &lt;strong&gt;error messages that are extremely cryptic and completely unhelpful.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;For example, on one occasion where a nuget package sources server was unavailable, the dotfuscator command-line tool failed with the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Metadata Root has bad signature at 219f8&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;In their Dotfuscator.xml configuration file they make use of guids and other hashes, which render it &lt;strong&gt;extremely hostile to humans.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;For example:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;inputassembly refid=&amp;quot;1639ab18-0eb8-4c8c-ba6c-9eab6d8a740d&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;referencerule rulekey=&amp;quot;{6655B10A-FD58-462d-8D4F-5B1316DFF0FF}&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;While running, the commandline tool spews out an incredible amount of messages. A few of those messages are useful, for example the ones about each output file that it creates; the rest, which is 99.9% of them, are &lt;strong&gt;entirely useless&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If you use the /q (quiet) flag, &lt;strong&gt;the only messages that are suppressed are those few useful ones&lt;/strong&gt;; &lt;strong&gt;the 99.9% of entirely useless messages are still spewed.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A great many lines of output spewed out by the command line tool are prefixed with the string &amp;ldquo;[Build Output]&amp;rdquo;, which is a statement in direct
conflict with fact: &lt;strong&gt;this is definitely not build output, this is obfuscator output.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If you run the command-line tool without any options, it gives usage information. The usage information says that it supports a
&lt;code&gt;/p=outdir=&amp;lt;directory&amp;gt;&lt;/code&gt; option. &lt;strong&gt;This option has absolutely no effect.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If you run the command-line tool with the /?? option to see the &amp;ldquo;extended&amp;rdquo; options, there is another &lt;code&gt;/out:&amp;lt;directory&amp;gt;&lt;/code&gt; option, and that one works.&lt;/li&gt;
&lt;li&gt;The tool systematically utilizes &lt;strong&gt;silent failure&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;As a result, it either issues no error messages where it should, or it issues misleading error messages. Both of these behaviors constitute &lt;strong&gt;sabotage against the developer.&lt;/strong&gt; For example:
&lt;ul&gt;
&lt;li&gt;If it cannot find one or more of the input assemblies specified in the configuration, it will not complain at all. This means that I may be under the impression that a certain assembly is being obfuscated, while in fact it is being shipped to customers completely unobfuscated, due to a simple spelling mistake, and &lt;strong&gt;the tool did not give me the slightest warning or hint that this is          happening.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If all input assemblies are missing, then it says &amp;ldquo;There are no assemblies to process. Stopping the build.&amp;rdquo; The problem here is that the message suggests that I invoked the tool without giving it any work to do, while in fact I did invoke the tool with specific work to do, which &lt;strong&gt;the tool did not do&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Within the torrent of output lines that are prefixed with &amp;ldquo;[Build Output]&amp;rdquo; no distinction is made between lines that are frivolous spam which has to be filtered away and lines that contain error messages, such as &amp;ldquo;no assemblies found to process&amp;rdquo;. Thus, in order to avoid missing any error messages, we are &lt;strong&gt;forced to see all the frivolous spam every single time we launch the tool&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;So, after all this, I could verify that I can use the tool from my build server, and that name mangling works. But what about code mangling,
otherwise known as flow control obfuscation? Well, as it turns out, that is beyond the scope of the &amp;ldquo;Community&amp;rdquo; edition; you have to buy the
&amp;ldquo;Professional&amp;rdquo; edition if you want to have that.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, let&amp;rsquo;s give &amp;ldquo;Dotfuscator professional&amp;rdquo; a try, shall we?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the confirmation e-mail that I received when I registered my &amp;ldquo;Community&amp;rdquo; edition there was a link to &amp;ldquo;Visit My Account&amp;rdquo;. When I click on this link, it takes me to a page which asks for a user-name and password. However, when I registered, they did not say anything about any user-name nor password; I just received a &amp;ldquo;confirmation code&amp;rdquo;. This is mighty confusing, annoying, and frustrating. So, it appears that I am going to have to register again, this time with a user-name and password.&lt;/li&gt;
&lt;li&gt;After registering again, and clicking on &amp;ldquo;Try Dotfuscator Professional&amp;rdquo;, and filling in their mandatory survey form, and receiving the installer, and installing it, I am presented with a &amp;ldquo;Click here to activate Dotfuscator&amp;rdquo; dialog. So, besides &amp;ldquo;registering&amp;rdquo; in order to try their useless advertisement, and then &amp;ldquo;registering&amp;rdquo; again in order to start a free trial of their actual product, I now have to &amp;ldquo;activate&amp;rdquo; the free trial. This was done by entering a key that they sent me by e-mail.&lt;/li&gt;
&lt;li&gt;From the looks of it, if I decide to continue using this product after the trial, I am going to have to purchase what they call a &amp;ldquo;Build License&amp;rdquo;. This build license will have to somehow be added to the build server, which I am not in control of, and will have to somehow be updated each time the build server changes; we will see about that when we get there.&lt;/li&gt;
&lt;li&gt;Neither on their web-site, nor during the entire process of starting the free trial, do they seem to mention how long this free trial lasts. It might be one month, it might be one week, it might be one day. They just don&amp;rsquo;t say. It is a secret.&lt;/li&gt;
&lt;li&gt;Nowhere in their communications do they seem to mention how much their product costs. It might be 100 bucks, it might be 1000 bucks, it might be 10000 bucks. The only thing they say is &amp;ldquo;Request a Quote&amp;rdquo;, which to me means a few things:
&lt;ul&gt;
&lt;li&gt;They are going to be eyeballing me and tailoring their price according to how deep they estimate my pocket to be.&lt;/li&gt;
&lt;li&gt;Someone else will get a different price, which is unfair.&lt;/li&gt;
&lt;li&gt;I might get a different price if I bargain, which I hate to do.&lt;/li&gt;
&lt;li&gt;They are an inefficiently run company that relies on salesperson labor.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On their &amp;ldquo;Request a Quote&amp;rdquo; page they have a spelling mistake, &amp;ldquo;Xamarian&amp;rdquo; instead of &amp;ldquo;Xamarin&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Their &amp;ldquo;Request-a-quote&amp;rdquo; page does not work. When I click the &amp;ldquo;submit&amp;rdquo; button, the button becomes slightly faded out, and nothing else happens. Of course I had to waste my time reloading the page, re-filling all of my information, re-solving the captcha, and re-submitting the form 3 times before deciding that it just does not work. So, PreEmptive Solutions is proving to be very good at one thing: wasting my time.&lt;/li&gt;
&lt;li&gt;They called me. On the phone. Just at the exact moment that their request-a-quote page was proving to be a fiasco, my phone rang. It was a guy speaking with a thick French accent, allegedly making a follow-up call after my registration. I would bet that their seemingly out-of-order request-a-quote page contained just enough functionality to alert him that I tried to use it. I asked him how much it costs to have a license for one team, one application. He said 4250 euros per year. I also asked how long the evaluation lasts, he said that it is 14 days. Since they are not posting this information on their web site, I am taking the liberty to post what they said to me in person. You might get different answers. The date today is 2023-08-16. When I run the tool, it says &amp;ldquo;Your subscription expires in 15 days.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;During the evaluation I was able to determine that the tool does actually work; &lt;em&gt;&lt;strong&gt;if used correctly,&lt;/strong&gt;&lt;/em&gt; it does those things that I would want from such a tool:
&lt;ul&gt;
&lt;li&gt;It can be used as a command-line tool on a build server.&lt;/li&gt;
&lt;li&gt;It provides code mangling that is so strong that the reverse-engineered code produced by ILSpy does not compile, and even if it did compile, my guess is that it would probably not run.&lt;/li&gt;
&lt;li&gt;It provides name mangling, not only within individual assemblies, but also across assemblies if requested. (Mangling of public identifiers.)&lt;/li&gt;
&lt;li&gt;The tool also has many other features, for example string encryption.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While working with this tool I encountered the following additional problems:&lt;/p&gt;
&lt;p&gt;Their command-line tool requires an internet connection in order to work.  If your internet connection is out of order while trying to use it, the tool will fail with the following error messages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error: Could not contact the activation server. An error occurred while sending the request. The remote name could not be resolved: &amp;rsquo;licensing.preemptive.com&#39;&lt;/p&gt;
&lt;p&gt;Retrying the connection in 30 seconds.&lt;/p&gt;
&lt;p&gt;Retrying connection&amp;hellip;&lt;/p&gt;
&lt;p&gt;Retry failed.&lt;/p&gt;
&lt;p&gt;Error: Could not contact the activation server. An error occurred while sending the request. The remote name could not be resolved: &amp;rsquo;licensing.preemptive.com&#39;&lt;/p&gt;&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>[SOLVED] Maven deploy fails with status 422 unprocessable entity</title>
        <link>//localhost:1313/post/2023-07-06-solved-maven-deploy-fails-with-status/</link>
        <pubDate>Thu, 06 Jul 2023 09:21:20 +0000</pubDate>
        
        <guid>//localhost:1313/post/2023-07-06-solved-maven-deploy-fails-with-status/</guid>
        <description>&lt;p&gt;It has been more than a year since I created this question on GitHub Community; a couple of days after that I found the solution by myself, so I answered my own question, and to this date comments keep being added by people who were helped by my post.&lt;/p&gt;
&lt;p&gt;When I look at it today, I notice that my answer has this particular style, this grumpy indignation which has become so characteristic of me, after a lifetime of battling with lame software, and even worse, with lame error messages.&lt;/p&gt;
&lt;p&gt;I thought I should share this on my blog for posterity.&lt;/p&gt;
&lt;p&gt;Here is the link:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/orgs/community/discussions/23474&#34; target=&#34;_blank&#34;
   &gt;https://github.com/orgs/community/discussions/23474&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And here is the question:&lt;/p&gt;
&lt;p&gt;GitHub Community&lt;/p&gt;
&lt;p&gt;Maven deploy fails with status 422 unprocessable entity #23474&lt;/p&gt;
&lt;p&gt;Asked by Mikenakis on May 27, 2022&lt;/p&gt;
&lt;p&gt;I have this repository: &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/Bathyscaphe&#34; target=&#34;_blank&#34;
   &gt;GitHub - mikenakis/Bathyscaphe: Deep immutability and thread-safety assessment for Java objects&lt;/a&gt; in which both my CI-Workflow and my Release-Workflow work fine.&lt;/p&gt;
&lt;p&gt;Now I am trying to extract a sub-module from that repository into a new repository.&lt;/p&gt;
&lt;p&gt;So, I created this repository: &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/BathyscapheClaims&#34; target=&#34;_blank&#34;
   &gt;GitHub - mikenakis/BathyscapheClaims&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The CI-Workflow works, but when I try to launch the Relase-Workflow, I get the following error:&lt;/p&gt;
&lt;p&gt;Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M2:deploy (default-deploy) on project bathyscaphe-claims: ArtifactDeployerException: Failed to deploy artifacts: Could not transfer artifact io.github.mikenakis:bathyscaphe-claims:jar:1.3 from/to github (&lt;a class=&#34;external&#34; 
   href=&#34;https://maven.pkg.github.com/mikenakis/BathyscapheClaims%29&#34; target=&#34;_blank&#34;
   &gt;https://maven.pkg.github.com/mikenakis/BathyscapheClaims)&lt;/a&gt;: transfer failed for &lt;a class=&#34;external&#34; 
   href=&#34;https://maven.pkg.github.com/mikenakis/BathyscapheClaims/io/github/mikenakis/bathyscaphe-claims/1.3/bathyscaphe-claims-1.3.jar&#34; target=&#34;_blank&#34;
   &gt;https://maven.pkg.github.com/mikenakis/BathyscapheClaims/io/github/mikenakis/bathyscaphe-claims/1.3/bathyscaphe-claims-1.3.jar&lt;/a&gt;, status: 422 Unprocessable Entity → [Help 1]&lt;/p&gt;
&lt;p&gt;I have already seen the issues that appear to be similar; most of them have no answer, one of them (&lt;a class=&#34;external&#34; 
   href=&#34;https://github.community/t/maven-deploy-fails-with-http-422-unprocessable-entity/119670&#34; target=&#34;_blank&#34;
   &gt;Maven deploy fails with HTTP 422 Unprocessable Entity&lt;/a&gt;) has an extensive discussion, but it does not seem to apply in my case.&lt;/p&gt;
&lt;p&gt;Can someone please help me? It is probably something silly, but I only have one pair of eyes, while this obviously needs two! (-:=&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;p&gt;And here is the answer:&lt;/p&gt;
&lt;p&gt;Answered by mikenakis on May 29, 2022&lt;/p&gt;
&lt;p&gt;I figured this one out too by myself.
(Hey community, you are not helping much!)&lt;/p&gt;
&lt;p&gt;What happened is that GitHub apparently has some monstrous bug which causes artifact deployment to fail if some other repository (only by the same owner, I hope!) has already deployed an artifact with the exact same name.&lt;/p&gt;
&lt;p&gt;In this case, one repository was called Bathyscaphe, the other was called BathyscapheClaims, but each repository was trying to deploy an artifact called bathyscaphe-claims.&lt;/p&gt;
&lt;p&gt;I changed the name of the artifact in the second repository from bathyscaphe-claims to bathyscaphe-claims2 and it worked.&lt;/p&gt;
&lt;p&gt;The situation was certainly made worse by this contemptible monstrosity that goes by the name of “maven”, which never gives any meaningful error message whatsoever when the slightest thing goes wrong. I mean, “unprocessable entity”? Really? It must have been some very special kind of idiot who came up with this error message.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Program Code is Uncountable</title>
        <link>//localhost:1313/post/2023-05-26-code-is-uncountable/</link>
        <pubDate>Fri, 26 May 2023 07:44:24 +0000</pubDate>
        
        <guid>//localhost:1313/post/2023-05-26-code-is-uncountable/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2023-05-26-code-is-uncountable/images/code.jpg&#34;
	width=&#34;800&#34;
	height=&#34;331&#34;
	srcset=&#34;//localhost:1313/post/2023-05-26-code-is-uncountable/images/code_hu_f0a5e6162c5554.jpg 480w, //localhost:1313/post/2023-05-26-code-is-uncountable/images/code_hu_34c59bcd7cb70c1f.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;580px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;There are some words in English that are uncountable. For example: &lt;em&gt;cheese&lt;/em&gt;, &lt;em&gt;furniture&lt;/em&gt;, &lt;em&gt;music&lt;/em&gt;, &lt;em&gt;evidence&lt;/em&gt;, &lt;em&gt;research&lt;/em&gt;, &lt;em&gt;knowledge&lt;/em&gt;, &lt;em&gt;information&lt;/em&gt;, etc. When we speak of those things in plural, we still use the singular form: &amp;ldquo;I would like to order a four-&lt;em&gt;&lt;strong&gt;cheese&lt;/strong&gt;&lt;/em&gt; pizza&amp;rdquo;, &amp;ldquo;Let me give you some of my &lt;em&gt;&lt;strong&gt;furniture&lt;/strong&gt;&lt;/em&gt;&amp;rdquo;, &amp;ldquo;We need to consider all the &lt;em&gt;&lt;strong&gt;evidence&lt;/strong&gt;&lt;/em&gt;&amp;rdquo;, etc.&lt;/p&gt;
&lt;p&gt;Another such word is &lt;em&gt;&lt;strong&gt;code&lt;/strong&gt;&lt;/em&gt;, in the context of programming.&lt;/p&gt;
&lt;p&gt;When referring to program code, the word &lt;em&gt;code&lt;/em&gt; is uncountable. &amp;ldquo;I wrote the code for all those apps&amp;rdquo;, &amp;ldquo;You have a lot of code to review&amp;rdquo;, &amp;ldquo;We write new code every day&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;There are certain &lt;em&gt;&lt;strong&gt;other&lt;/strong&gt;&lt;/em&gt; meanings of the word &lt;em&gt;code&lt;/em&gt; that do have a plural form; for example, &amp;ldquo;Give me the access codes&amp;rdquo; or &amp;ldquo;See the list of HTTP status codes&amp;rdquo;; but these meanings refer to numbers, or ciphers, in other words data, not program code. &lt;strong&gt;Program code is always uncountable.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Reference: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.oxfordlearnersdictionaries.com/definition/english/code&#34; target=&#34;_blank&#34;
   &gt;Oxford Learner&amp;rsquo;s Dictionaries - English - Code&lt;/a&gt; (Scroll down to meaning 3, &amp;ldquo;programming&amp;rdquo;.)&lt;/p&gt;
&lt;p&gt;Now, we live in free societies where everyone enjoys freedom of speech, and more generally, freedom of expression. You can choose to say whatever you like, just as you can choose to dress in whatever way you like.&lt;/p&gt;
&lt;p&gt;But when you say &amp;ldquo;codes&amp;rdquo; referring to program code, please do keep in mind that you come across like this complete idiot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2023-05-26-code-is-uncountable/images/saggy.jpg&#34;
	width=&#34;600&#34;
	height=&#34;900&#34;
	srcset=&#34;//localhost:1313/post/2023-05-26-code-is-uncountable/images/saggy_hu_9b0ece5b469d5054.jpg 480w, //localhost:1313/post/2023-05-26-code-is-uncountable/images/saggy_hu_a55983757e3a6195.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;160px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Or like this complete idiot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2023-05-26-code-is-uncountable/images/hat-fail.jpg&#34;
	width=&#34;600&#34;
	height=&#34;768&#34;
	srcset=&#34;//localhost:1313/post/2023-05-26-code-is-uncountable/images/hat-fail_hu_c5d3462460a7d4f4.jpg 480w, //localhost:1313/post/2023-05-26-code-is-uncountable/images/hat-fail_hu_b1bbf3addb44a36e.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;78&#34;
		data-flex-basis=&#34;187px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Do you want to come across like a complete idiot?&lt;/p&gt;
&lt;p&gt;The choice is yours.&lt;/p&gt;
&lt;p&gt;(Grumpy cat meme unnecessary; this was grumpy enough by itself.)&lt;/p&gt;</description>
        </item>
        <item>
        <title>If you are using mock objects you are doing it wrong</title>
        <link>//localhost:1313/post/2023-01-14-mocking/</link>
        <pubDate>Sat, 14 Jan 2023 14:13:37 +0000</pubDate>
        
        <guid>//localhost:1313/post/2023-01-14-mocking/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2023-01-14-mocking/images/mocking.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;h4 id=&#34;abstract&#34;&gt;Abstract:
&lt;/h4&gt;&lt;p&gt;The practice of using Mock Objects in automated software testing is examined from a critical point of view and found to be highly problematic. Opinions of some well known industry speakers are cited. The supposed benefits of Mock Objects are shown to be either no real benefits, or achievable via alternative means.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/post/2022-11-about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction
&lt;/h3&gt;&lt;p&gt;The automated software testing technique which is predominant in the industry today is Unit Testing. The goal of Unit Testing is to achieve defect localization, and to this effect it requires each component to be tested in strict isolation from its collaborators.&lt;/p&gt;
&lt;p&gt;Testing components in isolation from each other poses certain challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;While being tested, the component-under-test makes invocations to collaborator interfaces; since the collaborator components are not present, some kind of substitute must be there to implement the collaborator interfaces and receive those invocations.&lt;/li&gt;
&lt;li&gt;For each invocation that the component-under-test makes to a collaborator, it expects to receive back some result; therefore, the substitute receiving the invocation must be capable of generating a result that matches the result that would be generated by the real collaborator.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The technique which is predominant in the industry today for providing the component-under-test with substitutes of its collaborators is &lt;em&gt;&lt;strong&gt;Mock Objects&lt;/strong&gt;&lt;/em&gt;, or just mocks.&lt;/p&gt;
&lt;h3 id=&#34;how-do-mocks-work&#34;&gt;How do mocks work?
&lt;/h3&gt;&lt;p&gt;Mocks are based on the premise that the real work done by collaborators in a production environment is irrelevant during testing, and all that the component-under-test really needs from them is the results that they return when invoked. A test exercises the component-under-test in a specific way, therefore the component-under-test is expected to invoke its collaborators in ways which are known in advance; thus, regardless of how the real collaborators would work, the mocks which replace them do not need to contain any functionality; all they need to do is to yield the same results that the real collaborators would have returned, which are also known in advance.&lt;/p&gt;
&lt;p&gt;To this effect, each test dynamically creates and configures as many mocks as necessary to substitute each one of the collaborators of the component-under-test, with the help of some mocking framework. These frameworks are so popular that there exists a proliferation of them: JMock, EasyMock, Mockito, NMock, Moq, JustMock, and the list goes on.&lt;/p&gt;
&lt;p&gt;A mock object is configured to expose the same interface as the real collaborator that it substitutes, and to expect specific methods of this interface to be invoked, with specific argument values, sometimes even in a specific order of invocation. If anything goes wrong, such as an unexpected method being invoked, or a parameter having an unexpected value, the mock fails the test. A very common practice is to also fail the test if an expected method is &lt;em&gt;not&lt;/em&gt; invoked.&lt;/p&gt;
&lt;p&gt;For each one of the expected methods, the mock is configured to yield a prefabricated result which is intended to match the result that the real collaborator would have produced if it was being used, and if it was working exactly according to its specification.&lt;/p&gt;
&lt;p&gt;Or at least, that is the intention.&lt;/p&gt;
&lt;h4 id=&#34;drawbacks-of-mocks&#34;&gt;Drawbacks of Mocks
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complex and laborious&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;In each test it is not enough to invoke the component-under-test to perform a computation and check the results; we also have to configure a mock for each one of the collaborators of the component, to anticipate every single call that the component will be making to them while performing the computation, and for each call to fabricate a result which matches the result that the real collaborator would have returned from that call.&lt;/li&gt;
&lt;li&gt;Luckily, mocking frameworks lessen the amount of code necessary to accomplish this, but no matter how terse the mocking code is, the fact still remains that it constitutes substantial additional functionality which represents considerable additional complexity.&lt;/li&gt;
&lt;li&gt;One of the well-known caveats of software testing is that a test failure does not necessarily indicate a defect in the production code; it always indicates a defect either in the production code or in the test itself, and the only way to know is to troubleshoot. Thus, the more code we put in tests, and the more complex this code is, the more time we end up wasting in chasing and fixing bugs in the tests themselves rather than in the code that they are meant to test.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Over-specified&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;By anticipating every single call that the component-under-test makes to its collaborators, we are claiming to have detailed knowledge of the inner workings of the component-under-test, and we are concerned not only with what it accomplishes, but also with every little detail about how it goes on about accomplishing it. Essentially, we are implementing all of our application logic twice: once with production code expressing the logic in imperative mode, and once more with testing code expressing the same logic in expectational mode. In both cases, we write copious amounts of code describing what should happen in excruciatingly meticulous detail.&lt;/li&gt;
&lt;li&gt;Note that over-specification might not even be a goal in and of itself in some cases, but with mocking it is unavoidable in all cases: Each request that the component-under-test sends to its collaborators could conceivably be ignored, but the component-under-test still needs to receive some meaningful result in response to that request, so as to continue functioning during the remainder of the test; unfortunately, the only way that mocks can fabricate individual responses is by anticipating individual requests, even if the intention of the test is not to verify whether the requests are being made.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Presumptuous&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;When using mocks we are claiming to not only have detailed knowledge of the calls that the component-under-test makes to its collaborators, but also detailed knowledge of the results that would be returned by the real collaborators in a production environment.&lt;/li&gt;
&lt;li&gt;Furthermore, the results returned by a collaborator depend on the state that the collaborator is in, which in turn depends on previous calls made to it, but a mock is by its nature incapable of emulating state, so when using mocks we are also claiming to have knowledge of the state transitions that the real collaborators undergo in a production environment, and of the effect that these state transitions have on the results that they return.&lt;/li&gt;
&lt;li&gt;Such exorbitant presumptuousness might be okay if we are building high-criticality software, where each collaborator is likely to have requirements and specification that are well-defined and unlikely to change; however, in all other software, which is regular, commercial, non-high-criticality software, things are a lot less strict: not only the requirements and specifications change all the time, but also, by established practice, both the requirements, and the specification, and even the documentation, tend to be the code itself, and the code changes every time a new commit is made to the source code repository. Thus, the only way to know exactly how a collaborator behaves tends to be to actually invoke it and see what it does, while the mechanism which ensures that it does what it is supposed to do is the tests of that collaborator itself, which are unrelated to the tests of components that invoke it.&lt;/li&gt;
&lt;li&gt;As a result of all this, the practice of mocking often places us in the all too familiar situation where our Unit Tests all pass with flying colors, but our Integration Tests miserably fail because the behavior of the real collaborators turns out to be different from what the mocks assumed it would be.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fragile&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;By its nature, a mock object has no option but to fail the test if the interactions between the component under test and its collaborators deviate from what it expects. However, these interactions may legitimately change as software evolves. This may happen due to the application of a bug-fix, due to refactoring, or simply because as we write new code we invariably have to also modify existing code to interact with the new code that we are adding. Thus, when using mocks, every time we change the behavior of production code, we also have to fix tests to expect the new behavior. (Not only do we have to write all of our application logic twice, we also have to perform all of its maintenance twice.)&lt;/li&gt;
&lt;li&gt;The original promise of Automated Software Testing was to enable us to continuously evolve our software without fear of breaking it. The idea is that whenever you modify the production code, you can re-run the tests to ensure that everything still works. When using mocks this does not work, because every time you change the slightest thing in the production code, the tests break. As a result, many programmers are hesitant to make needed changes to production code because of all the changes in testing code that would be required. The understanding is growing within the software engineering community that mock objects actually hinder software development instead of facilitating it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-reusable&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Mocks exercise the implementation of a component rather than its interface. Thus, when using mocks, it is impossible to reuse the same testing code to validate multiple different components that implement the same public interface but employ different collaborators. For example:
&lt;ul&gt;
&lt;li&gt;It is impossible to completely rewrite the component and reuse the old tests to make sure that the new implementation works exactly as the old one did.&lt;/li&gt;
&lt;li&gt;It is impossible to use a single test suite to exercise both a real component and its fake.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unenlightening&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Ideally, a set of tests for a certain component should act as sample code demonstrating usage scenarios of that component. A programmer who is not familiar with a particular component should be able to read the tests of that component and gain a fairly good idea of what it can do, what it cannot do, and how to write production code that interacts with it.&lt;/li&gt;
&lt;li&gt;Unfortunately, when using mocks, the tests are full of cryptic mock-related jabber, which obscures the actual usage of the component-under-test, and so the enlightening bits are lost in the noise.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;what-do-others-say&#34;&gt;What do others say?
&lt;/h4&gt;&lt;p&gt;I am certainly not the only one to voice dissatisfaction with mocks. People have been noticing that although automated software testing is intended to facilitate refactoring by ensuring that the code still works after each change that we make, the use of mocks often hinders refactoring, because the tests are so tied to the implementation that you cannot change anything without breaking the tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the video &lt;em&gt;Thoughtworks - TW Hangouts: Is TDD dead?&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=z9quxZsLcfo&#34; target=&#34;_blank&#34;
   &gt;youtube&lt;/a&gt;, &lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/articles/is-tdd-dead/&#34; target=&#34;_blank&#34;
   &gt;text digest&lt;/a&gt;) at 21&amp;rsquo;:10&amp;rsquo;&amp;rsquo; Kent Beck states &amp;ldquo;My personal practice is I mock almost nothing.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In the same video, at 23&amp;rsquo;:56&amp;rsquo;&amp;rsquo; Martin Fowler adds &amp;ldquo;I&amp;rsquo;m with Kent, I hardly ever use mocks.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Fragile Test&lt;/em&gt; section of his book &lt;em&gt;xUnit Test Patterns: Refactoring Test Code&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://xunitpatterns.com/&#34; target=&#34;_blank&#34;
   &gt;xunitpatterns.com&lt;/a&gt;) author Gerard Meszaros admits that &amp;ldquo;extensive use of Mock Objects causes overcoupled tests.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In his presentation &lt;em&gt;TDD, where did it all go wrong?&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.infoq.com/presentations/tdd-original/&#34; target=&#34;_blank&#34;
   &gt;InfoQ&lt;/a&gt;, &lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=EZ05e7EMOLM&#34; target=&#34;_blank&#34;
   &gt;YouTube&lt;/a&gt;) at 49&amp;rsquo;:32&amp;rsquo;&amp;rsquo; Ian Cooper states &amp;ldquo;I argue quite heavily against mocks because they are overspecified.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that in an attempt to avoid sounding too blasphemous, these people refrain from suggesting that mocks should be abolished; however, it is evident that 3 out of 4 of them are strongly against mocks, and we do not need to read much between the lines to figure out that they would probably be calling for the complete abolition of mocks if they had a viable and universally applicable alternative to propose.&lt;/p&gt;
&lt;h4 id=&#34;so-if-not-mocking-then-what&#34;&gt;So, if not mocking, then what?
&lt;/h4&gt;&lt;p&gt;Mocking has been such a great hit with the software industry because it achieves multiple different goals at once. Here is a list of the supposed benefits of mocking, and for each one of them an explanation of why it is not really a benefit, or how it can be achieved without mocking:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mocking achieves defect localization by eliminating collaborators from the picture and allowing components to be tested in strict isolation from each other.
&lt;ul&gt;
&lt;li&gt;Defect localization is useful, but it is not an absolute necessity, and it does not have to be done to absolute perfection as mocking aims to do; we can achieve more than good enough defect localization by testing each component in integration with its collaborators, simply by arranging the order in which tests are executed to ensure that by the time a component gets tested, all of its collaborators have already passed their tests. See &lt;a 
   href=&#34;//localhost:1313/post/2022-10-incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking allows a component to be tested without the performance overhead of instantiating and invoking its real collaborators.
&lt;ul&gt;
&lt;li&gt;The performance overhead of instantiating and invoking the real collaborators is not always prohibitive, or even noticeable, so in many cases it is perfectly fine to test a component in integration with its real collaborators. See &lt;a 
   href=&#34;//localhost:1313/post/2022-10-incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In the limited number of cases where the performance overhead is indeed prohibitive, it can be avoided with the use of Fakes instead of Mocks. See &lt;a 
   href=&#34;//localhost:1313/post/2022-10-testing-with-fakes/&#34;
   &gt;Testing with Fakes instead of Mocks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking allows us to examine invocations being made by the component-under-test to its collaborators, to ensure that they are issued exactly as expected.
&lt;ul&gt;
&lt;li&gt;In most cases, examining the invocations made by the component-under-test to its collaborators is in fact bad practice, because it constitutes white-box testing. The only reason why this is being widely practiced in the industry is because mocking does not work otherwise, so in this regard mocking contains a certain element of a self-serving paradigm.&lt;/li&gt;
&lt;li&gt;In those rare cases where examining the invocations is in fact necessary, it is still bad practice to do so programmatically, because it results in tests that are over-specified and fragile.&lt;/li&gt;
&lt;li&gt;What we can do instead is to record the interactions during each test run, visually compare the latest recording with that of the last known good run, and decide whether the differences match our expectations; if they do not match, then we must keep working on our code; but if they do match, then we are done without the need to go fixing any tests. See &lt;a 
   href=&#34;//localhost:1313/post/2024-04-audit-testing/&#34;
   &gt;Audit Testing&lt;/a&gt; and &lt;a 
   href=&#34;//localhost:1313/post/2023-01-06-collaboration-monitoring/&#34;
   &gt;Collaboration Monitoring&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking allows us to fabricate the results returned from a collaborator to the component-under-test, so as to guarantee that they are free from defects that could be caused by bugs in the implementation of the real collaborator.
&lt;ul&gt;
&lt;li&gt;Fabricating the results that would have been returned by a real collaborator is in fact bad practice, because it will not magically make any bugs go away, (in this sense it can be likened to ostrich policy,) and because as I have already explained, it is highly presumptuous. The definitive authority on what results are returned by a certain collaborator is the real implementation of that collaborator, or a fake thereof, which in turn necessitates integration testing. See &lt;a 
   href=&#34;//localhost:1313/post/2022-10-incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking allows us to verify the correctness of components that generate their output by means of forwarding results to collaborators rather than by returning results from invocations.
&lt;ul&gt;
&lt;li&gt;Even in this case, &lt;em&gt;Collaboration Monitoring&lt;/em&gt; can be used instead of mocking, to verify that the results are generated as expected without having to programmatically describe what the results should be and without having to go fixing tests each time we modify the component under test and deliberately change something about the results it generates. See &lt;a 
   href=&#34;//localhost:1313/post/2024-04-audit-testing/&#34;
   &gt;Audit Testing&lt;/a&gt; and &lt;a 
   href=&#34;//localhost:1313/post/2023-01-06-collaboration-monitoring/&#34;
   &gt;Collaboration Monitoring&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking allows us to start testing a component while one or more of its collaborators are not ready yet for integration because they are still in development, and no fakes of them are available either.
&lt;ul&gt;
&lt;li&gt;This is true, but once the collaborators (or fakes thereof) become available, it is best to integrate them in the tests, and to unceremoniously throw away the mocks. See &lt;a 
   href=&#34;//localhost:1313/post/2022-10-incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking allows us to develop a component without depending on factors that we have no control over, such as the time of delivery of collaborators, the quality of their implementation, and the quality of their testing. With the use of Mocks we can claim that our component is complete and fully tested, based on nothing but the specification of its collaborators, and we can claim that it should work fine in integration with its collaborators when they happen to be delivered, and if they happen to work according to spec.
&lt;ul&gt;
&lt;li&gt;True, but this implies a very bureaucratic way of working, and utter lack of trust towards the developers of the collaborators; it is best if it never comes to that.&lt;/li&gt;
&lt;li&gt;We can still avoid the use of mocks by creating fakes of the collaborators ourselves. See &lt;a 
   href=&#34;//localhost:1313/post/2022-10-testing-with-fakes/&#34;
   &gt;Testing with Fakes instead of Mocks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize, mocks can always be replaced with one or more of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fakes (see &lt;a 
   href=&#34;//localhost:1313/post/2022-10-testing-with-fakes/&#34;
   &gt;Testing with Fakes instead of Mocks&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Incremental Integration Testing (see &lt;a 
   href=&#34;//localhost:1313/post/2022-10-incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Audit Testing (see &lt;a 
   href=&#34;//localhost:1313/post/2024-04-audit-testing/&#34;
   &gt;Audit Testing&lt;/a&gt;) and Collaboration Monitoring (see &lt;a 
   href=&#34;//localhost:1313/post/2023-01-06-collaboration-monitoring/&#34;
   &gt;Collaboration Monitoring&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;As we have shown, the practice of using Mock Objects in automated software testing is laborious, over-specified, presumptuous, and leads to tests that are fragile and non-reusable, while each of the alleged benefits of using mocks is either not a real benefit, or can be realized by other means, which we have named.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/post/2023-01-14-mocking/images/grumpy-cat-mock-objects.jpg&#34;
	width=&#34;797&#34;
	height=&#34;1024&#34;
	srcset=&#34;//localhost:1313/post/2023-01-14-mocking/images/grumpy-cat-mock-objects_hu_8156248a341d61af.jpg 480w, //localhost:1313/post/2023-01-14-mocking/images/grumpy-cat-mock-objects_hu_5b4ff396469f2342.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;186px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Mandatory grumpy cat meme - &amp;ldquo;Mock objects - they are horrible&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: &amp;ldquo;Mocking&amp;rdquo; by michael.gr, based on &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/icon/mock-2657532/&#34; target=&#34;_blank&#34;
   &gt;&amp;lsquo;mock&amp;rsquo; by &amp;lsquo;Iconbox&amp;rsquo; from the noun project.&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>On messages and message-passing</title>
        <link>//localhost:1313/post/2022-12-messages-and-message-passing/</link>
        <pubDate>Sun, 18 Dec 2022 08:59:25 +0000</pubDate>
        
        <guid>//localhost:1313/post/2022-12-messages-and-message-passing/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2022-12-messages-and-message-passing/media/message-passing.png&#34;
	width=&#34;2673&#34;
	height=&#34;1494&#34;
	srcset=&#34;//localhost:1313/post/2022-12-messages-and-message-passing/media/message-passing_hu_cac0be91696add81.png 480w, //localhost:1313/post/2022-12-messages-and-message-passing/media/message-passing_hu_4c50d0e4091ea6ab.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;429px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Over the decades, numerous software system architectures have emerged which require invocations across subsystems to be done via message-passing instead of programmatic interface method calls. Such architectures are so common that many programmers have come to regard message-passing as an end in and of itself, oblivious of the fact that it is nothing but a (poor) technical mechanism for accomplishing a certain architectural goal.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/post/2022-11-about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The architectural goal is to be able to perform general-purpose operations on invocations, for example routing the invocations according to configuration, or queuing the invocations for delivery on a different thread. In order to be able to do things like that, the invocations must first be expressed in a general-purpose form.&lt;/p&gt;
&lt;p&gt;Message-passing is simply the only general-purpose form that could be imagined by the pioneers who built the first asynchronous event-driven systems, or perhaps the only form that could readily be implemented using the programming languages available back then. However, in succeeding decades our thinking and our tools have advanced considerably, to the point where we now have much better ways of achieving things technically, so it might be worth taking a moment to re-examine the concept of message-passing.&lt;/p&gt;
&lt;p&gt;Here is a list of problems with message passing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Custom message classes have to be written and maintained, usually in large numbers, constituting nothing but incidental complexity which steers focus away from the class hierarchy of the problem domain, and towards the class hierarchy of the overelaborate inter-module communication apparatus.&lt;/li&gt;
&lt;li&gt;For each invocation, a message class needs to be instantiated, filled, and submitted, requiring several lines of custom-written code. This is also nothing but incidental complexity, diverting the attention of programmers from solving the problem at hand to negotiating the trifling technicalities of placing invocations.&lt;/li&gt;
&lt;li&gt;On the receiving end, each message must be examined in order to determine what kind of message it is, usually by means of an unwieldy switch statement, and its contents have to be extracted before any useful work can be done. Again, this is all incidental complexity, contributing nothing towards the end-goal of the software system; its sole purpose is to serve the message-passing bureaucracy.&lt;/li&gt;
&lt;li&gt;In order to reduce the total number of different message classes that need to be defined, programmers often reuse message classes for different purposes, filling different parts according to each purpose. This habit further increases the total amount of incidental complexity both at the sending and at the receiving end, and very often leads to bugs due to wrongly packed or wrongly unpacked messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, message-passing exists for the sole purpose of expressing invocations in a general-purpose form, but as it turns out, its use is laborious, and it tends to flood systems with debilitating amounts of incidental complexity.&lt;/p&gt;
&lt;p&gt;The most natural, simple, convenient, straightforward, robust, maintainable, and self-documenting paradigm for making and receiving invocations, which facilitates problem-solving instead of hindering it, is programmatic interface method calls. Unfortunately, interfaces are not general-purpose in and of themselves, because each interface constitutes a unique type, requiring custom-written code to place calls to it and custom-written code to receive calls for it, thus preventing us from applying general-purpose operations on it.  So, we have two separate and seemingly conflicting concerns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to express invocations in the most convenient way&lt;/li&gt;
&lt;li&gt;How to perform general-purpose operations on the invocations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ideally, separate concerns should not be mixed; the need to somehow apply general-purpose operations on invocations should not be dictating how we write code, and it should certainly not be making our job harder. Therein lies perhaps the biggest objection to message-passing: they are an onerous contrivance that programmers by themselves would never opt to use out of their own free will, but usually gets imposed on them by software architects who do not actually have to write code using this contrivance.&lt;/p&gt;
&lt;p&gt;Message-passing has enjoyed widespread use mainly due to the historical inability of application programmers to think in terms of abstractions: it is always possible, even in systems that require message-passing, to write all application code so that it never deals with any messages at all, and uses nothing but application-specific programmatic interfaces instead; the trick is to create packaging and unpackaging adaptors, where on the sending side we are simply invoking a programmatic interface which is implemented by a packaging adaptor that creates messages, packs them, and sends them off to be enqueued, while on the receiving side a corresponding unpackaging adaptor is fed with messages from the queue, unpacks them, and calls the corresponding implementation of the interface. Alas, this arrangement requires a modicum of abstract thinking, and application programmers are generally not into that sort of thing.&lt;/p&gt;
&lt;p&gt;Furthermore, if we bother creating such packaging and unpackaging adaptors, the realization quickly starts to sink-in that all the message classes are irrelevant; there is no need to define a special message class containing a separate field for each parameter of each method, because the only code that would ever deal with such a class would be the corresponding pair of packaging and unpackaging adaptors; so, the adaptors might as well use a single universal message class which simply stores all parameters in an array of object, and voila, the entire menagerie of message classes becomes entirely unnecessary.&lt;/p&gt;
&lt;p&gt;Thus, it becomes evident that what we are really after is not message-passing per se; it is some general-purpose form of expressing invocations, so that general-purpose operations can be performed on them, and some mechanism for converting back and forth between this general-purpose form and the natural form, which is programmatic interface method calls, so that we can write code naturally. Ideally, the conversion mechanism would be automatic and transparent, so that we do not even have to write those adaptors. Messages have only existed due to the historical absence of such an automatic and transparent mechanism.&lt;/p&gt;
&lt;p&gt;Fortunately, with modern reflecting, intermediate-code-based, just-in-time compiled programming languages, today we have at our disposal all that is necessary  to build such mechanisms. For more information see &lt;a 
   href=&#34;//localhost:1313/post/2022-12-intertwine/&#34;
   &gt;Intertwine&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/post/2022-12-messages-and-message-passing/media/grumpy-cat-message-passing.jpg&#34;
	width=&#34;493&#34;
	height=&#34;555&#34;
	srcset=&#34;//localhost:1313/post/2022-12-messages-and-message-passing/media/grumpy-cat-message-passing_hu_292667b1799fe58a.jpg 480w, //localhost:1313/post/2022-12-messages-and-message-passing/media/grumpy-cat-message-passing_hu_6ad615b796b41427.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;213px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Mandatory grumpy cat meme: &amp;ldquo;Message-Passing: it&amp;rsquo;s awful&amp;rdquo; by michael.gr&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: Conceptual illustration of message-passing, by michael.gr, based on original art by Youmena and Made from the Noun Project.&lt;/p&gt;</description>
        </item>
        <item>
        <title>On UML (oh, do not get me started)</title>
        <link>//localhost:1313/post/2022-08-uml/</link>
        <pubDate>Tue, 16 Aug 2022 09:20:46 +0000</pubDate>
        
        <guid>//localhost:1313/post/2022-08-uml/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2022-08-uml/media/uml-logo.png&#34;
	width=&#34;824&#34;
	height=&#34;548&#34;
	srcset=&#34;//localhost:1313/post/2022-08-uml/media/uml-logo_hu_de0c20afdc618ca9.png 480w, //localhost:1313/post/2022-08-uml/media/uml-logo_hu_f720d5921c77bad1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;This post is intended as support material for another post of mine; see &lt;a 
   href=&#34;//localhost:1313/post/2023-12-09-authoritative-technical-design/&#34;
   &gt;Towards Authoritative Software Design&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Universal Modeling Language (UML) (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Unified_Modeling_Language&#34; target=&#34;_blank&#34;
   &gt;Wikipedia&lt;/a&gt;) was intended to be a standard notation for expressing software designs, and to replace the multitude of ad-hoc notations that software architects have been using on various mediums such as whiteboard, paper, and general-purpose box-and-arrow diagram-drawing software. The idea was that by following a standard notation which prescribes a specific way of expressing each concept, every diagram would be readily and unambiguously understood by everyone.&lt;/p&gt;
&lt;p&gt;It has miserably failed.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/post/2022-11-about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;UML is probably very close to the top of the list of things that everyone mentions, but nobody uses, and this is due to a number of good reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is incredibly comprehensive, to the point where its sheer size acts as a very strong deterrent to most people attempting to learn it. There are about 20 different types of diagrams for different purposes, each with its own complete set of meticulously detailed notation and rules. UML actually begins to make sense once you realize that it has mostly been an effort to catalogue every imaginable type of diagram used in software development, and standardize the notation used in it, while most of these diagram types are actually irrelevant, or very seldom relevant, to our daily job. However, even if you pick a single diagram type that you happen to have some use for, and decide to learn just that one, the notation is still so comprehensive that the task is daunting.&lt;/li&gt;
&lt;li&gt;Most of UML is so rarely useful that it is not worth the learning effort. In the extremely rare event that a software development team is to have a meeting in which they could benefit from having an &lt;em&gt;&lt;strong&gt;Interaction Overview Diagram&lt;/strong&gt;&lt;/em&gt; to point at, it will be a lot easier to use some ad-hoc but intuitive notation to get the point across, than to only schedule the meeting &lt;em&gt;&lt;strong&gt;after&lt;/strong&gt;&lt;/em&gt; every single one of the attendees has completed a UML course to refresh upon the intricacies of the &lt;em&gt;UML Interaction Overview Diagram&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The type of UML diagram that has received most attention in the software engineering profession is the &lt;em&gt;&lt;strong&gt;UML Class Diagram&lt;/strong&gt;&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Class_diagram&#34; target=&#34;_blank&#34;
   &gt;see Wikipedia&lt;/a&gt;) which deals with representing a class, the structure of a class, and its relationships with other classes. Unfortunately:
&lt;ul&gt;
&lt;li&gt;The UML Class Diagram insists on prescribing a very specific type of notation for everything about a class, and this notation is not always intuitive, thus posing the same obstacles to understanding as posed by program code written in apocryphal syntax and convoluted structure: in both cases, it is all jargon. This might not be an issue for those who have already gone through the trouble of learning the jargon, but the uninitiated are bound to question the usefulness of the entire exercise.&lt;/li&gt;
&lt;li&gt;The UML Class Diagram prescribes its notation in excruciatingly meticulous detail, so there is no information hiding, and no abstraction: the amount of information contained in a UML Class Diagram is roughly the same as the amount of information contained in a C or C++ header file, or in a Java Interface, so there is virtually nothing to be gained by looking at one vs. looking at the other, which in turn seriously begs the question of why should we be doing double book-keeping.&lt;/li&gt;
&lt;li&gt;The UML Class Diagram is much too low-level and too finely detailed to be pertinent to software systems design, where the unit of interest is the system component, corresponding to an entire module, rather than to individual classes within a module. It is also becoming even less pertinent as classes are becoming less important in programming due to the modern shift towards functional rather than object-oriented programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UML is mostly used as documentation, meaning that its role tends to be indicative or suggestive, and usually non-enforceable and non-materializable. This means that mistakes made in the use of the meticulously detailed notation generally go undetected, or might be detected by colleagues, but not by automated validation tools, because for most types of UML diagrams, there exist no such tools.&lt;/li&gt;
&lt;li&gt;UML is trying to solve problems which do not exist: When a human needs to communicate something to a machine, this has to be done in a perfectly inambiguous fashion, which makes special notation necessary, i.e. jargon. However, when there is no machine involved, and a human simply needs to communicate something to other humans, what matters most is to get the point across, so jargon is actually undesirable, despite the unambiguousness that it would bring. That is okay, because humans thrive in ambiguity. In other words, UML is an attempt to apply a rigid engineering discipline to a form of communication which is fine as it is: free and fluid. (One of the &amp;ldquo;Three Amigos&amp;rdquo; that created UML had a military background; coincidence? maybe.)&lt;/li&gt;
&lt;li&gt;In an attempt to make UML more pertinent to the software development process, some UML tools offer some automatic code generation features. Unfortunately, automatic code generation is almost always a bad idea, because each time the design changes, code generation must be re-applied, but this invariably results in the following bad things happening to code that has already been hand-written by programmers:
&lt;ul&gt;
&lt;li&gt;Hand-written code is overwritten with auto-generated code and thus forever lost, or&lt;/li&gt;
&lt;li&gt;Hand-written code does not compile anymore due to dependencies on automatically generated definitions which have now changed, or, more often,&lt;/li&gt;
&lt;li&gt;Both of the above.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The idea that you can apply automatic code generation once and never repeat it stems from the &amp;ldquo;all design up-front&amp;rdquo; doctrine, which may have been strong back in the 1990s when the foundations of UML were laid down, but the doctrine died soon thereafter, and it has been dead for decades now.&lt;/li&gt;
&lt;li&gt;From the plethora of diagram types offered by UML, the only one that could perhaps be useful in our daily jobs is the &lt;em&gt;&lt;strong&gt;UML Component Diagram&lt;/strong&gt;&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Component_diagram&#34; target=&#34;_blank&#34;
   &gt;see Wikipedia&lt;/a&gt;) but there exist no tools that I am aware of that are capable of either guiding the composition of such a diagram from existing software components, or materializing such a diagram into a running system. Furthermore, if any such tools were to be introduced, they are unlikely to be well-received, because by now people have developed a distaste towards UML and anything associated with it.&lt;/li&gt;
&lt;li&gt;UML literature follows a lofty &lt;em&gt;&lt;strong&gt;standardspeak&lt;/strong&gt;&lt;/em&gt; writing style which is incomprehensible. I tried looking up the term &amp;ldquo;collaboration&amp;rdquo; and here is what I found &lt;a class=&#34;external&#34; 
   href=&#34;https://www.ibm.com/docs/en/idsa?topic=diagrams-collaborations&#34; target=&#34;_blank&#34;
   &gt;in IBM literature&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In UML diagrams, a collaboration is a type of structured classifier in which roles and attributes co-operate to define the internal structure of  a classifier.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There are two problems with this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The definition depends on other definitions. This happens everywhere in UML. So, in order to understand a certain term you first have to understand other terms, and quite often the definitions make circles, so in order to understand anything you have to have superpowers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This kind of looks like a recursive definition. They may be implying that there is something hierarchical in the nature of the concept, but they are not saying it. Definitions are written with the goal of being correct, not with the goal of being understood.  (And since we do not understand them, we cannot tell whether they are correct.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, let&amp;rsquo;s look at the next sentence:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You use a collaboration when you want to define only the roles and connections that are required to accomplish a specific goal of the collaboration.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Surprise! Recursion again. Sorry, but now it makes absolutely no sense. And that&amp;rsquo;s how it goes with UML.&lt;/p&gt;
&lt;p&gt;To summarize:&lt;/p&gt;
&lt;p&gt;UML is &lt;em&gt;&lt;strong&gt;insufferably baroque&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It should have never been, and it should cease to be.&lt;/p&gt;
&lt;p&gt;It should be let go into the good night.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2022-08-uml/media/grumpy-cat-uml.jpg&#34;
	width=&#34;1715&#34;
	height=&#34;1553&#34;
	srcset=&#34;//localhost:1313/post/2022-08-uml/media/grumpy-cat-uml_hu_bef019e84b4ea75.jpg 480w, //localhost:1313/post/2022-08-uml/media/grumpy-cat-uml_hu_1719cd72479ad91e.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;110&#34;
		data-flex-basis=&#34;265px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Mandatory Grumpy Cat Meme. &amp;ldquo;UML: I hate it.&amp;rdquo;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: The UML logo, by Object Management Group®, Inc. from &lt;a class=&#34;external&#34; 
   href=&#34;https://www.uml.org/&#34; target=&#34;_blank&#34;
   &gt;uml.org&lt;/a&gt;; Public Domain.&lt;/p&gt;</description>
        </item>
        <item>
        <title>So the &#34;master&#34; branch is not kosher anymore</title>
        <link>//localhost:1313/post/2022-12-master-branch-not-kosher/</link>
        <pubDate>Fri, 27 May 2022 09:12:37 +0000</pubDate>
        
        <guid>//localhost:1313/post/2022-12-master-branch-not-kosher/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2022-12-master-branch-not-kosher/media/slavery-cropped.jpg&#34;
	width=&#34;2775&#34;
	height=&#34;1684&#34;
	srcset=&#34;//localhost:1313/post/2022-12-master-branch-not-kosher/media/slavery-cropped_hu_8ae04781ddc88246.jpg 480w, //localhost:1313/post/2022-12-master-branch-not-kosher/media/slavery-cropped_hu_58a6348cfbae9cec.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;395px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;The origins of the debate go so far back that they are lost in the mists of time, but a good starting point (which contains references to prior debate) is an Internet Draft from 2018 titled &lt;em&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://datatracker.ietf.org/doc/draft-knodel-terminology/&#34; target=&#34;_blank&#34;
   &gt;Terminology, Power, and Inclusive Language in Internet-Drafts and RFCs&lt;/a&gt;&lt;/em&gt;. Some especially &lt;a class=&#34;external&#34; 
   href=&#34;https://www.urbandictionary.com/define.php?term=woke&#34; target=&#34;_blank&#34;
   &gt;woke&lt;/a&gt; communities like the Python community had already started applying some of the recommendations in this draft as early as 2019, but things really picked up steam in 2020, with &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Murder_of_George_Floyd&#34; target=&#34;_blank&#34;
   &gt;the murder of George Floyd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/post/2022-11-about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Programmers all over the world, the overwhelming majority of whom are white boys, wanted to feel like they are doing something about the whole &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Black_Lives_Matter&#34; target=&#34;_blank&#34;
   &gt;Black Lives Matter&lt;/a&gt; thing, but killing cops is a bit difficult, let alone messy, not to mention risky, and what if there is one good cop in the USA and we kill him? &amp;ndash; so they resorted to the next best thing: &lt;em&gt;using more sensitive language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Naturally, every company that caters to &lt;a class=&#34;external&#34; 
   href=&#34;https://www.urbandictionary.com/define.php?term=Wokey&#34; target=&#34;_blank&#34;
   &gt;wokeys&lt;/a&gt; needed to show that they are more woke than the next one, and changing terminology is such a cheap and easy thing to do compared to the amount of good publicity it generates that it is actually a bargain; thus, all mega-corporations were suddenly competing on who will revise more politically incorrect terms faster. This involved the identification of politically incorrect terms that we were previously unaware of, and in some cases even the invention of some.&lt;/p&gt;
&lt;p&gt;The 2018 Internet Draft about inclusive language says nothing about the master branch; it suggests, among other things, to rename the term master/slave to something else, e.g. primary/secondary. This change is arguably worth making; not so much because of its inherent merit, (it has very little of that,) but because we have to acknowledge the possibility that we are unable to put ourselves in the shoes of people who might be hurt by the use of the term. Rumor has it that if you ask actual black people about this issue, they are likely to tell you that they don&amp;rsquo;t give a damn, but this is destined to slide by. Making this change also presupposes that we feel compelled to go out of our way to ease the pain of people who for whatever reasons feel hurt by various things, but that can also arguably be regarded as a reasonable thing to do.&lt;/p&gt;
&lt;p&gt;I am worried that one day people might start feeling hurt by the fact that I am sporting a beard, due to the unbearably toxic masculinity that it exudes and what not, but I guess I will deal with that when the day comes.&lt;/p&gt;
&lt;p&gt;Now, if the abolition of master/slave hardly had any real grounds to stand on, the abolition of the master branch is absolutely groundless, because in this case the word &amp;ldquo;master&amp;rdquo; is used in the sense of &amp;ldquo;original&amp;rdquo;, as in &amp;ldquo;master recording&amp;rdquo;. (See&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wiktionary.org/wiki/master&#34; target=&#34;_blank&#34;
   &gt;&amp;ldquo;master&amp;rdquo; in wiktionary.org&lt;/a&gt;.) However, if we acknowledge someone the right to be offended by master/slave, then who are we to take away their right to also be offended by master branch? After all, don&amp;rsquo;t forget that we have already established that we are incapable of putting ourselves in their shoes, right?&lt;/p&gt;
&lt;p&gt;So, once the abolition of &amp;ldquo;master/slave&amp;rdquo; was unanimously agreed upon, the master branch was naturally next. It was just a matter of &lt;em&gt;the innocent paying along with the guilty&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;After some debate, (see &lt;a class=&#34;external&#34; 
   href=&#34;https://git.github.io/rev_news/2020/07/29/edition-65/&#34; target=&#34;_blank&#34;
   &gt;Git Rev News: Edition 65&lt;/a&gt;) both git and GitHub announced in 2020 that they were moving in the direction of renaming the default branch from &amp;ldquo;master&amp;rdquo; to main. In October of that year, GitHub &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/github/renaming&#34; target=&#34;_blank&#34;
   &gt;proceeded with the change&lt;/a&gt;. Lots of other mega-corporations followed suit. One article which skips the whys and the why-nots and just talks about the technical aspects of this transition is &lt;a class=&#34;external&#34; 
   href=&#34;https://www.biteinteractive.com/of-git-and-github-master-and-main/&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Of Git and GitHub, Master and Main&lt;/em&gt; by Matt Neuburg, 2021&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, we shall all rename our &amp;ldquo;master&amp;rdquo; branches to &amp;ldquo;main&amp;rdquo;. You might &lt;em&gt;think&lt;/em&gt; that you can get away with using &amp;ldquo;main&amp;rdquo; only for new projects and leaving old projects alone, but that will not quite cut it, because then you will be left with eternal confusion since you will have different projects with different default branch names and you will have to always remember which is which. Trying to remember things is the stuff mistakes are made of, and mistakes with branches tend to have very severe consequences. So, all master branches will have to be renamed to main everywhere.&lt;/p&gt;
&lt;p&gt;Is it silly? Yes. Is it a waste of time? Yes. Is it giving in to &lt;a class=&#34;external&#34; 
   href=&#34;https://www.urbandictionary.com/define.php?term=Wokeism&#34; target=&#34;_blank&#34;
   &gt;wokeism&lt;/a&gt;? Yes. But you have to pick your battles. You have to question whether you want to engage in an argument with a broader cause that you are already in alignment with anyway. As a manager, it is easier to suffer the small technical pain of transitioning from &amp;ldquo;master&amp;rdquo; to main&amp;quot; than to spend valuable time debating the whole silly thing, and running the risk of appearing as a bigot in the process.&lt;/p&gt;
&lt;p&gt;Having said all that, let me state that on the broad picture, I am completely with Bill Maher on this: the liberal world is going mad with political correctness, sense of entitlement, &lt;a class=&#34;external&#34; 
   href=&#34;https://www.urbandictionary.com/define.php?term=snowflakeism&#34; target=&#34;_blank&#34;
   &gt;snowflakeism&lt;/a&gt;, and &lt;a class=&#34;external&#34; 
   href=&#34;https://www.urbandictionary.com/define.php?term=wokeness&#34; target=&#34;_blank&#34;
   &gt;wokeness&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/post/2022-12-master-branch-not-kosher/media/grumpy-cat-wokeness.jpg&#34;
	width=&#34;843&#34;
	height=&#34;565&#34;
	srcset=&#34;//localhost:1313/post/2022-12-master-branch-not-kosher/media/grumpy-cat-wokeness_hu_bfd19a0acccbf67b.jpg 480w, //localhost:1313/post/2022-12-master-branch-not-kosher/media/grumpy-cat-wokeness_hu_6dd0e5589091004e.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;358px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Mandatory grumpy cat meme: Wokeness? How About NO.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</description>
        </item>
        <item>
        <title>The famous &#34;Could not load file or assembly or one of its dependencies&#34; error message</title>
        <link>//localhost:1313/post/2020-12-16-the-famous-could-not-load-file-or/</link>
        <pubDate>Wed, 16 Dec 2020 12:15:11 +0000</pubDate>
        
        <guid>//localhost:1313/post/2020-12-16-the-famous-could-not-load-file-or/</guid>
        <description>&lt;p&gt;If you have ever done any software development under Microsoft Windows you have probably come across this famous error message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;System.IO.FileNotFoundException : Could not load file or assembly &amp;lsquo;Acme.dll&amp;rsquo; or one of its dependencies. The specified module could not be found.&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Modern software makes heavy use of dynamic link libraries, and the problem with this kind of libraries is that for various reasons they might not be there when you need them, resulting in runtime errors. This is the runtime error you get under Windows when this happens.&lt;/p&gt;
&lt;p&gt;Naturally, when you see this message, the first thing to do is to check whether Acme.dll is there, and what you usually discover is that the file is indeed there. When dealing with computers, most error messages that you come across tend to leave some room for troubleshooting, but when the system is reporting that a certain file does not exist on your very own filesystem, while the file is most certainly there, the situation seems really hopeless. You are stymied.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading:  &lt;a 
   href=&#34;//localhost:1313/post/2022-11-about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;At this point you are likely to start shot-gunning the problem by trying various random tricks in the hope that one of them will magically make the problem go away: you try running the application again just in case it was a glitch, you try obtaining a fresh copy of the library in case this one somehow got corrupted, you restart Windows because we always try that, right? &amp;ndash; and none of these attempts yields any results.&lt;/p&gt;
&lt;p&gt;Finally, when you have exhausted all other possibilities, you decide to take a closer look at the error message again. You notice that it says that it could not load Acme.dll &amp;ldquo;or one of its dependencies&amp;rdquo;, so you start with a new hypothesis: what cannot be found is not Acme.dll itself, it is one of the libraries that Acme.dll in turn tries to load. But which one? The next sentence says &amp;ldquo;the specified module could not be found&amp;rdquo;, but which module is the specified module? There is only one module being named in the error message, and that is Acme.dll, so this must be the specified module, right?&lt;/p&gt;
&lt;p&gt;What is happening here is that this error message is a notorious instance of trolling with which Microsoft has been torturing software professionals for decades now by telling them lies instead of reporting the actual problem. The problem is indeed that one of the dependencies of the library in question could not be found, but Windows will not tell you which one. Instead, it will give you this insidiously worded message which will send you looking for the problem in wrong directions.&lt;/p&gt;
&lt;p&gt;There is probably some programmer who worked at Microsoft some 30 years ago and is probably a pensioner by now, who has a permanent evil grin on his face knowing that he has personally caused millions of work hours wasted all over the planet over the course of several decades simply by creating this particular error message in this particular way. (Or, perhaps, he told his manager that the task he was working on would need to take a little longer because he had to collect all necessary information to produce a useful error message, and his manager told him to not do that because deadlines.)&lt;/p&gt;
&lt;p&gt;To fix this problem you have to use some special software called a &amp;ldquo;Dependency Analyzer&amp;rdquo; to trace all the dependencies of your application and locate the one that fails to load.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2020-12-16-the-famous-could-not-load-file-or/images/grumpy-cat-lame-error-messages.jpg&#34;
	width=&#34;324&#34;
	height=&#34;400&#34;
	srcset=&#34;//localhost:1313/post/2020-12-16-the-famous-could-not-load-file-or/images/grumpy-cat-lame-error-messages_hu_ec275663cd84d572.jpg 480w, //localhost:1313/post/2020-12-16-the-famous-could-not-load-file-or/images/grumpy-cat-lame-error-messages_hu_a00e6a61b605d2db.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;81&#34;
		data-flex-basis=&#34;194px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;the-msvcr100dll-sub-problem&#34;&gt;The msvcr100.dll sub-problem
&lt;/h3&gt;&lt;p&gt;Quite often the dependency analyzer finds that the culprit is msvcr100.dll or something similar, which you might be completely unaware of. This msvcr100.dll is the dynamically linkable runtime library for software written using some old version of Microsoft Visual C++, which is a very popular language for writing all sorts of software under Windows, so if your application is using any third-party libraries, then one or more of them have almost certainly been written in MSVC. For some reason, many developers of libraries choose to make their product depend on an external instance of the MSVC runtime library instead of statically linking the MSVC runtime library into their product, and this creates an extra moving part which must be dealt with by others, like you.&lt;/p&gt;
&lt;p&gt;What is especially treacherous about msvcr100.dll in particular is that most large commercial applications contain it and install it in your Windows/System32 folder, so once you have installed a few commonly used apps on your machine you almost certainly have msvcr100.dll. This causes two major problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are completely oblivious to the fact that the application that you are developing indirectly depends on msvcr100.dll without including it in its own installer. You only discover this problem when you try to run your application on a relatively fresh installation of Windows.&lt;/li&gt;
&lt;li&gt;Not only you are oblivious about the msvcr100.dll problem, but also, the developers of libraries that you use might also be oblivious to it. For example, HDF5DotNet.dll is a popular library used by DotNet applications for reading and writing HDF5 files. This library depends on msvcr100.dll but does not include it in its installable package, nor is there any mention in their documentation about the fact that msvcr100.dll must be present in order for their library to successfully load.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that an msvcr100.dll with a size of 773968 bytes may exist under C:\Windows\SysWOW64, but it may not necessarily be the one you need. Your application might instead depend on another msvcr100.dll with a size of 829264 bytes under C:\Windows\System32.&lt;/p&gt;
&lt;p&gt;The approach recommended by Microsoft for solving this kind of problem is to include the &amp;ldquo;Microsoft Visual C++ Redistributable&amp;rdquo; installable package, and install it as part of the application&amp;rsquo;s installation process.  An easier way is to simply include a copy of msvcr100.dll in the directory from which your application launches.&lt;/p&gt;</description>
        </item>
        <item>
        <title>The Wild, Wild Web</title>
        <link>//localhost:1313/post/2020-10-19-the-wild-wild-web/</link>
        <pubDate>Mon, 19 Oct 2020 15:05:21 +0000</pubDate>
        
        <guid>//localhost:1313/post/2020-10-19-the-wild-wild-web/</guid>
        <description>&lt;p&gt;This is a little history of the early World Wide Web (WWW) for the benefit of the younger generation which may have not experienced the Internet in its infancy and therefore might not be aware of the horrors that it involved, and why certain things have come to be the way they are today.&lt;/p&gt;
&lt;p&gt;As you are reading this, and thinking to yourself that it could not possibly have been as bad as I am describing it, remember, the general public was experiencing it using 2400 baud modems.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/post/2022-11-about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The World Wide Web was created in 1989 at &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/CERN&#34; target=&#34;_blank&#34;
   &gt;CERN&lt;/a&gt; to facilitate the sharing of information between universities and scientific institutes around the world. It was still not much more than an academic prototype when two years later, in 1991, it was made generally available outside of the educational and scientific institution. As soon as that happened, both the general public and the commercial sector started very eagerly embracing it, and this was the firing shot for the technology companies to start a big race for market share grab.&lt;/p&gt;
&lt;p&gt;The World Wide Web was quite unlike anything that humanity had ever seen before: it was not an incremental improvement upon some pre-existing technology that the public was already familiar with, but a totally new thing; it was not another novelty that some might like and some might just not develop a taste for, it was going to be everywhere, used by everyone, and affect everything. It was clear from the beginning that it was going to be big.&lt;/p&gt;
&lt;p&gt;Unfortunately, the people who originally came up with the &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&#34; target=&#34;_blank&#34;
   &gt;HTTP protocol&lt;/a&gt;, which is what makes the WWW possible, had a very limited idea of how it was going to be used, so their original prototype was woefully inadequate. Thus, in the years following the introduction of the WWW there was a massive effort to improve and extend the protocol. However, there were no standards in place, and no agreement on what should be done and how it should be done. The market demanded functionality much faster than the technologists could create it, and not a single company was in favor of things being done the way a competitor company was suggesting.&lt;/p&gt;
&lt;p&gt;Decisions were made, based not on scientific or technological merit, but on burning market demand and market dominance aspirations. This led to many haphazard solutions being put into place to quickly cover immediate needs without any long-term vision. There was a lot of &amp;ldquo;I don&amp;rsquo;t care if it is good, I want it yesterday&amp;rdquo; going on. Features were being implemented in hacky ways because nobody could wait for the protocol to be amended to accommodate them.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The web was originally intended only for displaying text, so the prototype did not include any provision for displaying images inside web pages. Support for images was added as an afterthought, and in an entirely ad-hoc way, without first making the necessary amendments to the protocol to accommodate them, so the result greatly suffered in terms of performance, because a new connection had to be established between the browser and the server for every single image on a page. I kid you not, there was a period of time in the early nineties when you would visit a page, and instead of images in it, you would see placeholders. Then, as you patiently waited, one by one the placeholders would be replaced by actual images. The protocol was later amended to address this problem.&lt;/li&gt;
&lt;li&gt;The web was originally intended to be used only by anonymous users, so the prototype had no provision for visitors being remembered by the server when they come again another day, or even as they navigate from page to page during a single visit. There were some simple forms that could be filled in, but since the server had no idea who was submitting these forms, they could only be used for perfectly anonymous surveys. (And not even perfectly: the server could always take note of the user&amp;rsquo;s IP address.) Support for identifying visitors was hacked into the protocol as a half-baked afterthought as late as in 1994, and only with the narrow-minded goal of enabling a rudimentary shopping cart, after much pressure from the commercial sector, which of course needed to use the web to sell stuff. That half-baked afterthought was the now infamous &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/HTTP_cookie&#34; target=&#34;_blank&#34;
   &gt;cookies&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The web was originally intended only for navigating from static page to static page, so the prototype had no provision for dynamically changing page content. This was remedied as late as 1995 when Netscape introduced JavaScript on their browser. Despite its name, JavaScript had absolutely nothing to do with the Java Programming Language; the name was a marketing ploy. JavaScript was terribly bad as a language, and even its creator, Brendan Eich, later admitted so. Since Netscape was the predominant browser at that time, the use of JavaScript caught on, and then other browsers started supporting it so as to not appear incompatible with web sites that were already working with Netscape. So, JavaScript became the de facto standard. For a short while during the late nineties Microsoft tried to push their own scripting languages like VBScript and JScript running on their own browser, but luckily nobody cared.&lt;/li&gt;
&lt;li&gt;Once we had scripts running on the browser, these scripts needed to be able to exchange data with the server, but there was no provision for such a thing in the HTTP protocol. To make matters worse, in the mass security hysteria that followed the realization that in a connected world, everyone was hackable by anyone, all TCP/IP ports across the world had been hastily blocked, except for SMTP and POP3 for e-mail, and HTTP for the web. So, HTTP was practically the only protocol available, despite being unsuitable. For this reason, the monstrosity known as REST was concocted to allow page scripts to communicate over HTTP, and the specification of REST was made to look as if it underlies HTTP, even though it was entirely an afterthought built on top of HTTP. Since then, REST has had a big impact on the way of thinking of web developers, by introducing the notion of a network that spans the globe and consists of resources identifiable by universal locators. Nobody seems to find it the slightest bit suspicious that this world-view was not intentionally designed this way, but came about purely by historical accident.&lt;/li&gt;
&lt;li&gt;Web sites needed to be able to show new information on a web page not only as a result of user actions, but also as a result of events happening on the server. For example, a chat system would need to show new chat messages to the user as they arrive, without requiring the user to refresh the page. Unfortunately, the HTTP protocol had not been designed for this purpose at all. It was left up to the developers to overcome this limitation by bending and twisting the protocol in ways quite different from how it was designed to be used, namely with this formidable hack known as &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Ajax_%28programming%29&#34; target=&#34;_blank&#34;
   &gt;ajax&lt;/a&gt;. It was only in 2009 that the &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/WebSocket&#34; target=&#34;_blank&#34;
   &gt;WebSocket&lt;/a&gt; standard was introduced, and it was again of course an afterthought, as evidenced by the HTTP &amp;ldquo;&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header&#34; target=&#34;_blank&#34;
   &gt;Upgrade Header&lt;/a&gt;&amp;rdquo; hack. It is just that the hack is now built into the protocol, so it is official.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Essentially, the protocol was being amended to include ad hoc features that had gained traction because the company introducing them had a big market share. The &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Internet_Engineering_Task_Force&#34; target=&#34;_blank&#34;
   &gt;IETF&lt;/a&gt; even stated it as their official philosophy &amp;ldquo;to keep basing standards upon successful prototypes&amp;rdquo;, which is another way of saying &amp;ldquo;we will wait for someone to hack something together, and if it catches on, we will call it part of the standard.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The original technologies that comprised the WWW were so simple that one could barely say that they constituted inventions, but many of the hacks that had to be introduced later in order to accomplish something useful with it, such as cookies and ajax, had to be so ingenious that they could arguably be classified as inventions.&lt;/p&gt;
&lt;p&gt;There were also many opportunities for improvement that were lost due to lack of consensus, because consensus is very hard to reach among companies at cut-throat competition against each other. So, many things were done incredibly backwards and certainly not in the best interest of the public.&lt;/p&gt;
&lt;p&gt;We should not be too hard on the original creators of the WWW; after all, experimental prototypes are supposed to be just that: good enough to demonstrate an idea, but woefully inadequate in all other respects. The mistake was the release of the WWW to the public when it was clearly too early, and the initial lack of an arbitrating body, leaving all innovation up to relentlessly competing market forces. Business people are to blame for everything, as always.&lt;/p&gt;
&lt;p&gt;Unfortunately, the rate of adoption of any newly introduced technology appears to depend not so much on its technical merit, but on how successful it is in covering narrow-minded immediate needs at hand. Sometimes, the technology that wins is the one that gets introduced first, despite being vastly inferior to a technology introduced shortly afterwards. Once a certain technology becomes widely adopted, it entrenches itself into the technological landscape, and it stays with us for a very long time, no matter how ill-conceived it was. Any attempt to improve an existing technology must always be backwards compatible, so as to ensure continuity in the transition from the old to the new, otherwise it has no chances of becoming a success, which means that you can never actually change the old technology, you can only add to it. The old problems will always be there, and the new solutions will always suffer to a smaller or larger extent due to those old problems. Thus, the echoes of the unhealthy Wild, Wild Web era of the Internet still linger in the technological landscape even today, some 30 years later.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;w3c.org - &lt;a class=&#34;external&#34; 
   href=&#34;https://www.w3.org/People/Raggett/book4/ch02.html&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Raggett on HTML 4&lt;/em&gt; - chapter 2 - &lt;em&gt;A history of HTML&lt;/em&gt;&lt;/a&gt; by Dave Raggett&lt;/p&gt;</description>
        </item>
        <item>
        <title>On JUnit&#39;s random order of test method execution</title>
        <link>//localhost:1313/post/2018-04-random-order-of-tests/</link>
        <pubDate>Sun, 08 Apr 2018 20:15:05 +0000</pubDate>
        
        <guid>//localhost:1313/post/2018-04-random-order-of-tests/</guid>
        <description>&lt;p&gt;This is a rant about JUnit, or more precisely, a rant about JUnit&amp;rsquo;s inability to execute test methods in natural method order.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Definition: Natural method order is the order in which methods appear in the source file.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;what-is-the-problem&#34;&gt;What is the problem?
&lt;/h3&gt;&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/post/2022-11-about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Up until and including Java 6, when enumerating the methods of a java class, the JVM would yield them in natural order. However, when Java 7 came out, Oracle changed something in the internals of the JVM, and this operation started yielding methods in random order.&lt;/p&gt;
&lt;p&gt;Apparently, JUnit was executing methods in the order in which the JVM was yielding them, so as a result of upgrading to Java 7, everybody&amp;rsquo;s tests started running in random order. This caused considerable ruffling of feathers all over the world.&lt;/p&gt;
&lt;p&gt;Now, the creators of the Java language are presumably running unit tests just like everyone else, so they probably noticed that their own tests started running in random order before releasing Java 7 to the world, but apparently they did not care.&lt;/p&gt;
&lt;p&gt;Luckily, the methods are still being stored in natural order in the class file, they only get garbled as they are being loaded by the class loader, so you can still discover the natural method order if you are willing to get just a little bit messy with bytecode.&lt;/p&gt;
&lt;p&gt;However, that&amp;rsquo;s too much work, and it is especially frustrating since the class loader is in a much better position to correct this problem, but it doesn&amp;rsquo;t.  (The class loader messes up the method order probably because it stores them in a HashMap, which yields its contents in Hash order, which is essentially random. So, fixing the problem would probably have been as simple as using a LinkedHashMap instead of a HashMap.)&lt;/p&gt;
&lt;p&gt;People asked the creators of JUnit to provide a solution, but nothing was being done for a long time, allegedly because &lt;em&gt;if You Do Unit Testing Properly?, you should not need to run your tests in any particular order, since there should be no dependencies among them&lt;/em&gt;. So, the creators of JUnit are under the incredibly short-sighted impression that if you want your tests to run in a particular order, it must be because you have tests that depend on other tests.&lt;/p&gt;
&lt;p&gt;When the creators of JUnit finally &lt;em&gt;did&lt;/em&gt; something to address the issue, (it did not take them long, only, oh, until Java 8 came out,) their solution was completely half-baked: the default mode of operation was &lt;em&gt;still&lt;/em&gt; random method order, but with the introduction of a special annotation one could coerce JUnit to run test methods either in alphabetic order, (which is nearly useless,) or in some other weird, ill-defined, so-called &amp;ldquo;fixed&amp;rdquo; order, which is not alphabetic, nor is it the natural order, but according to them it guarantees that the methods will be executed in the same order from test run to test run. (And is &lt;em&gt;completely&lt;/em&gt; useless.)&lt;/p&gt;
&lt;p&gt;So, apparently, the creators of JUnit were willing to do anything except the right thing, and even though JUnit 5 is said to have been re-written from scratch, the exact same problem persists.&lt;/p&gt;
&lt;h3 id=&#34;why-is-this-a-problem&#34;&gt;Why is this a problem?
&lt;/h3&gt;&lt;p&gt;Well, let me tell you why running tests in natural method order is important:&lt;/p&gt;
&lt;p&gt;We tend to test fundamental features of our software before we test features that depend upon them, so if a fundamental feature fails, we want that to be the very first error that will be reported. (Note: it is the features under test that depend upon each other, not the tests themselves!)&lt;/p&gt;
&lt;p&gt;The test of a feature that relies upon a more fundamental feature whose test has already failed might as well be skipped, because it can be expected to fail, but if it does run, reporting that failure before the failure of the more fundamental feature is an act of sabotage against the developer: it is sending us looking for problems in places where there are no problems to be found, and it is making it more difficult to locate the real problem, which usually lies in the test that failed first &lt;strong&gt;in the source file&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To give an example, if I am writing a test for my awesome collection class, I will presumably first write a test for the insertion function, and further down I will write a test for the removal function. If the insertion test fails, the removal test does not even need to run, but if it does run, it is completely counter-productive to be shown the results of the removal test before I am shown the results of the insertion test. If the insertion test fails, it is game over. As they say in the far west, there is no point beating a dead horse. How hard is this to understand?&lt;/p&gt;
&lt;p&gt;Another very simple, very straightforward, and very important reason for wanting the test methods to be executed in natural order is because seeing the test method names listed in any other order is &lt;strong&gt;brainfuck&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2018-04-random-order-of-tests/media/grumpy-cat-random-order.jpg&#34;
	width=&#34;512&#34;
	height=&#34;512&#34;
	srcset=&#34;//localhost:1313/post/2018-04-random-order-of-tests/media/grumpy-cat-random-order_hu_1cbcf661f6886545.jpg 480w, //localhost:1313/post/2018-04-random-order-of-tests/media/grumpy-cat-random-order_hu_37da57f9abdefd51.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;
&lt;/p&gt;</description>
        </item>
        <item>
        <title>What is wrong with UUIDs and GUIDs</title>
        <link>//localhost:1313/post/2017-06-on-uuids-and-guids/</link>
        <pubDate>Mon, 12 Jun 2017 17:47:55 +0000</pubDate>
        
        <guid>//localhost:1313/post/2017-06-on-uuids-and-guids/</guid>
        <description>&lt;h4 id=&#34;introduction&#34;&gt;Introduction
&lt;/h4&gt;&lt;p&gt;Universally Unique Identifiers (UUIDs) otherwise known as Globally Unique Identifiers (GUIDs) are 128-bit numbers that are often used to identify information. In its canonical representation, a UUID looks like this: 2205cf3e-139c-4abc-be2d-e29b692934b0.&lt;/p&gt;
&lt;p&gt;The Wikipedia entry for Universally Unique Identifier (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Universally_unique_identifier&#34; target=&#34;_blank&#34;
   &gt;?&lt;/a&gt;) says that they are &lt;em&gt;for practical purposes unique&lt;/em&gt; and that &lt;em&gt;while the probability that a UUID will be duplicated is not zero, it is so close to zero as to be negligible.&lt;/em&gt; Wikipedia then does the math and shows that if 103 trillion UUIDs are generated, the chance of duplication among them is one in a billion.&lt;/p&gt;
&lt;p&gt;Despite the infinitesimally small chances of receiving a duplicate UUID, there exist programmers out there who are afraid of this actually happening, and who will not hesitate to suspect duplicate UUIDs as being responsible for an observed malfunction rather than first look for a bug in their code. Clearly, these folks do not understand the meaning of &lt;em&gt;infinitesimally small chance&lt;/em&gt;, so let me try to explain it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Infinitessimally small chance&lt;/em&gt; means &lt;em&gt;practically impossible to happen&lt;/em&gt;, and the &lt;em&gt;practically&lt;/em&gt; part is only mentioned for scientific correctness: practically, you can disregard the word &lt;em&gt;practically&lt;/em&gt; and consider it as simply &lt;em&gt;impossible to happen&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Great. Now, let me tell you why I hate UUIDs.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/post/2022-11-about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&#34;known-disadvantages&#34;&gt;Known disadvantages
&lt;/h4&gt;&lt;p&gt;Disadvantages of UUIDs that are unanimously recognized are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A UUID is 4 times larger than a regular 32-bit integer. This undeniably affects the performance and storage demands of a system. Apparently, the industry has decided that the benefits of UUIDs are so great that they are worth the sacrifice.&lt;/li&gt;
&lt;li&gt;The randomness of UUIDs is technically unsuitable in certain scenarios, for example in database clustered indexes, where the record ids must be sequential. When a UUID is needed in such applications, a special kind of UUID is used which contains a sequential part, but its uniqueness guarantees are severely limited. (Remember that one-in-a-billion chance of duplication mentioned earlier? Well, you may forget it now.)&lt;/li&gt;
&lt;li&gt;UUIDs are cumbersome to debug with, because they are unreadable, non-sequential, and non-repeatable. Debugging is a notoriously difficult process, so we do not need anything that makes it harder than it already is, but the use of UUIDs imposes an additional burden on debugging.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the paragraphs that follow I will address some of those disadvantages in greater detail, and I will also address some disadvantages that I have personally identified with UUIDs.&lt;/p&gt;
&lt;h4 id=&#34;the-entropy&#34;&gt;The entropy
&lt;/h4&gt;&lt;p&gt;When looking at a table of columns, I find that the UUID column is always the angry column. This is because the 32 hexadecimal digits that make up a UUID have a higher concentration of entropy than anything else that I deal with during a regular working day. (It helps that IntelliJ IDEA spares me from having to see git commit hashes.) This is to say that the overwhelming majority of all the entropy that I am exposed to nowadays is due to seeing UUIDs. This was not happening in the days before the UUID; entire weeks could pass without seeing something as hopelessly nonsensical as a UUID, requiring me to coerce my brain to ignore it because &lt;em&gt;there is no sense to be made there&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The higher the entropy of the visual stimulus we are exposed to, the higher the cognitive effort required to process it, even if just to dismiss it as un-processable. This makes UUIDs very tiresome to work with.&lt;/p&gt;
&lt;h4 id=&#34;the-undebuggability&#34;&gt;The Undebuggability
&lt;/h4&gt;&lt;p&gt;Ben Morris says in &lt;em&gt;The Problem with GUIDs&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.ben-morris.com/the-problem-with-guids/&#34; target=&#34;_blank&#34;
   &gt;http://www.ben-morris.com/the-problem-with-guids/&lt;/a&gt;) :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This readability issue is often dismissed as mere inconvenience, but it&amp;rsquo;s a real problem for anybody who has to support applications or trouble-shoot data. GUIDs are often a lazy solution selected by developers who will not have to deal with the support consequences.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re going to replicate or combine disparate data sources then you really will need some globally unique identifiers. However, this is an implementation detail that does not have to be baked into data design. There&amp;rsquo;s nothing to stop you from adding separate identifiers onto your data rows in response to replication requirements.&lt;/p&gt;
&lt;p&gt;Let me explain in a bit more detail what the problem is with troubleshooting in a system that identifies entities using UUIDs instead of regular sequentially issued integers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With sequentially issued integers you can take a mental note of the id of the entity that you are troubleshooting, and then see when and where it pops up. This means noting say, the number 1015, and then looking for a 1015 to appear again. With UUIDs you cannot do that, because a UUID is impossible to memorize. You literally cannot tell that the UUID that you are seeing now is the same as a UUID that you saw a few seconds earlier. Even if you write down the UUID that you are looking for, there is still considerable difficulty in visually comparing a UUID on the screen with a copy you made earlier.&lt;/li&gt;
&lt;li&gt;While you are looking for that 1015, if you see 1010, you know you are close. When you see 1020, you know you passed it. With UUIDs, you cannot do that, because they do not form a sequence. Even when UUIDs are of the special sequentially issued kind, the sequential part is hidden among random digits, making extraction difficult, and even if you detect the subset of the digits that make up the counter, it is in hexadecimal instead of decimal, so it is hard to make sense out of it.&lt;/li&gt;
&lt;li&gt;In the mean time, when the ids of some other entity increment from 2100 to 2200, you know that for every entity of the kind you are troubleshooting, 10 entities of the other kind are being generated. So, if you suddenly see a newly issued id of the other kind in the 3000 range, you know that something for some reason generated more of that kind of entity than expected. No such hint is available when using UUIDs, because they are just random numbers.&lt;/li&gt;
&lt;li&gt;Most importantly, on a subsequent test run, starting with the same initial database state, you can expect the exact same sequential ids to be issued, so you have the exact same ids to troubleshoot. Not so with UUIDs, which are entirely different from run to run.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, what it boils down to is that none of the most common lines of reasoning are applicable when troubleshooting UUIDs: you are constantly in the dark about most aspects that have to do with the identifiers of the entities that you are dealing with.&lt;/p&gt;
&lt;p&gt;Let that sink in for a moment:&lt;/p&gt;
&lt;p&gt;The identifier of an entity is what you use to identify the entity with.&lt;/p&gt;
&lt;p&gt;It is a very important piece of information.&lt;/p&gt;
&lt;p&gt;Arguably, in most scenarios, it is the most important piece of information about an entity.&lt;/p&gt;
&lt;p&gt;UUIDs invalidate all previously known methods of reasoning about identifiers.&lt;/p&gt;
&lt;p&gt;They are essentially useless to humans.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We don&amp;rsquo;t want that.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a matter of fact, let me put it in blunt terms to drive home a point:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What kind of idiot thought that this would be a good idea?&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-needlessness&#34;&gt;The Needlessness
&lt;/h4&gt;&lt;p&gt;I agree that UUIDs have certain usages, but quite often I see them being used in situations where they are not needed, or they are rather unwanted. Here is a stackoverflow question where some genius is assigning names to his threads, and he is using UUIDs as names: &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/questions/44198702/writing-a-custom-threadpool&#34; target=&#34;_blank&#34;
   &gt;Stack Overflow - Writing a custom ThreadPool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The only scenario where you really need UUIDs is when you have a decentralized system (consisting of &amp;ldquo;nodes&amp;rdquo;) in which all of the following conditions hold true:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You want to have no single point of failure and therefore no single node issuing unique identifiers.&lt;/li&gt;
&lt;li&gt;You have such high performance requirements that you do not want the nodes to have to coordinate with each other in order to issue unique identifiers.&lt;/li&gt;
&lt;li&gt;You are for some reason unable to issue a guaranteed unique node id to each node, so as to trivially solve the problem of unique keys by making each key consist of node id + node-local sequential number.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you do not have a situation that meets all of the above criteria, then you are only using GUIDs because you heard of some really smart and successful guys using them on some really monstrous systems, and you want to be like them.&lt;/p&gt;
&lt;p&gt;The only kind of scenario that I can think of that would actually meet the above criteria would be a system with such a large number of nodes, and such a high new node join rate, that negotiation for a unique node id for each new node would be impractical. There are probably not very many systems in existence on the planet with such requirements, which in turn means that every single one of them is a special case. There is really no point in imposing a worldwide curse on computing just because a few special cases benefit from it.&lt;/p&gt;
&lt;p&gt;If you are using a database, then you probably already have a single point of failure. So, go ahead and use an SQL SEQUENCE, which is very efficient because it caches thousands of ids at a time, and has been available in RDBMS products since the eighties, and part of the standard since SQL2003.&lt;/p&gt;
&lt;p&gt;Many people appear to be under the impression that UUIDs are necessary for replication, but that is not true. What is necessary for replication is row identifiers that are unique over all nodes that participate in the replication of a specific table. That is &amp;ldquo;system-wide per-table unique identifiers&amp;rdquo;, which not even system-unique identifiers, and certainly a far cry from &amp;ldquo;globally-unique&amp;rdquo; identifiers. A unique row identifier could be created by concatenating a unique node identifier with a node-local, table-specific, sequential row number. It is an arbitrary choice of Microsoft SQL Server to require a ROWGUIDCOL of the xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx format for merge replication, (and transactional replication with queued updating subscriptions,) and if we are to believe the documentation, this requirement can be circumvented by creating your own GUIDs instead of using Microsoft&amp;rsquo;s newid() function.&lt;/p&gt;
&lt;p&gt;Another thing that is sometimes cited as a benefit of UUIDs is their alleged ability to be issued off-line. &amp;ldquo;Off line&amp;rdquo; was a condition that computing systems could suffer from in the old times. It is generally not an issue today, and the vast majority of those who cite this as a benefit of UUIDs do not really have an application at hand which really needs to be able to issue ids off-line. However, even in the extremely rare case where being &amp;ldquo;off-line&amp;rdquo; is an issue today, it can be taken care of with special handling. We really do not need to pollute everything everywhere with nonsensical entity identifiers just because some exceedingly rare special cases might benefit from them.&lt;/p&gt;
&lt;h4 id=&#34;the-paradigm-shift&#34;&gt;The paradigm shift
&lt;/h4&gt;&lt;p&gt;When sequentially incrementing integers are used as identifiers, they represent an absolute guarantee that every identifier will be unique. When UUIDs are used, they represent an almost-absolute guarantee.&lt;/p&gt;
&lt;p&gt;Thus, UUIDs have introduced a fundamental and completely unwanted paradigm shift in programming: we have gone from systematic absolute determinism (never leaving anything to chance) to systematic non-absolute determinism (regularly leaving something to, a however minuscule, chance.)&lt;/p&gt;
&lt;p&gt;You see, that&amp;rsquo;s what the almost-absolute is: non-absolute. I am not sure all these people who are so happily using UUIDs realize this. I find it sacrilegious, like picking a buffer size which is not a power of two.&lt;/p&gt;
&lt;h4 id=&#34;the-technological-compromise&#34;&gt;The technological compromise
&lt;/h4&gt;&lt;p&gt;Furthermore, I am not sure people realize that UUIDs represent a technological compromise. Why are UUIDs only 128 bits instead of 256 bits? 256 bits would give even more guarantees of uniqueness, right? How about 512 bits to really make sure no duplicate ever gets issued in this universe and in all parallel universes that we might one day somehow come in contact with? Wouldn&amp;rsquo;t that be the ultimate? Well, obviously, there will always be an even higher number of bits that will always be better, so what it boils down to is that a compromise has been made.&lt;/p&gt;
&lt;p&gt;The thing with GUIDs is that we don&amp;rsquo;t want them to be huge, because then they would be wasteful, so someone had to come up with a number of bits that is small enough to not be too wasteful and yet large enough to give a reasonable guarantee against collisions. And so, 128 bits it is.&lt;/p&gt;
&lt;p&gt;However, if history has taught us anything, it is that technological compromises always seem very reasonable at the time that they are made, and invariably turn out to be unreasonable at a later point in time. There is really no difference between saying &amp;ldquo;128 bits should be enough for everyone&amp;rdquo; and saying &amp;ldquo;640K should be enough for everyone&amp;rdquo;. At the time that the decision was made to make 640K the absolute upper limit for the amount of memory that the IBM PC could be equipped with, this amount was considered so astronomically large, that nobody was expected to ever have a use for it. Similarly, in our century 128-bit UUIDs seem to be a good compromise, but with almost mathematical certainty there will be another century when this compromise will not be so good anymore.&lt;/p&gt;
&lt;h4 id=&#34;epilogue&#34;&gt;Epilogue
&lt;/h4&gt;&lt;p&gt;I do believe that there will be a time, maybe in a couple of thousand years from now, maybe sooner, when we will be colonizing the galaxy, our population will be in the trillions, the individual devices embedded everywhere will number in the quadrillions, and every single one of those devices will be generating UUIDs at rates that are unthinkable today. When that time comes, we will inevitably start running into trouble with duplicate UUIDs popping up every once in a while in distant areas of the galaxy, and then it will be like 640k of memory all over again, two-digit-year millennium bug all over again, DLL hell all over again, all of them combined.&lt;/p&gt;
&lt;p&gt;When that time comes, I hope that we as a species still have some sufficiently low-level understanding of how our computers work, so as to be able to fix them. I fear we might not.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2017-06-on-uuids-and-guids/media/grumpy-cat-guids.jpg&#34;
	width=&#34;600&#34;
	height=&#34;400&#34;
	srcset=&#34;//localhost:1313/post/2017-06-on-uuids-and-guids/media/grumpy-cat-guids_hu_113e75b0e444c92f.jpg 480w, //localhost:1313/post/2017-06-on-uuids-and-guids/media/grumpy-cat-guids_hu_6da3ebde98bc76da.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;This post was inspired by a Stack Overflow answer that I wrote, here:
&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/8642874/773113&#34; target=&#34;_blank&#34;
   &gt;https://stackoverflow.com/a/8642874/773113&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>On scripting languages</title>
        <link>//localhost:1313/post/2017-05-on-scripting-languages/</link>
        <pubDate>Fri, 19 May 2017 19:46:34 +0000</pubDate>
        
        <guid>//localhost:1313/post/2017-05-on-scripting-languages/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2017-05-on-scripting-languages/images/pacifiers.jpg&#34;
	width=&#34;1023&#34;
	height=&#34;575&#34;
	srcset=&#34;//localhost:1313/post/2017-05-on-scripting-languages/images/pacifiers_hu_6f30f1f417e0fba0.jpg 480w, //localhost:1313/post/2017-05-on-scripting-languages/images/pacifiers_hu_ac31a6389070d9d4.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Teething rings (pacifiers) found on the great interwebz.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;foreword&#34;&gt;Foreword
&lt;/h3&gt;&lt;p&gt;Historically, the difference between scripting languages and real programming languages has been understood as the presence or absence of a compilation step. However, in recent decades the distinction has blurred; from time to time we have seen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interpreters for languages that were originally meant to be compiled.&lt;/li&gt;
&lt;li&gt;Compilers for languages that were originally meant to be interpreted.&lt;/li&gt;
&lt;li&gt;Scripting engines internally converting source code to bytecode before
interpreting it.&lt;/li&gt;
&lt;li&gt;Real languages compiling to bytecode which is then mostly interpreted and
rarely converted to machine code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, compiled vs. interpreted does not seem to be the real differentiating factor; nonetheless, we can usually tell a scripting language when we see one. So, what is it that we see?&lt;/p&gt;
&lt;p&gt;(Useful pre-reading:  &lt;a 
   href=&#34;//localhost:1313/post/2022-11-about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;First, let us identify the three different kinds of error that can potentially occur in program code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Syntax Error:&lt;/strong&gt; this represents a violation of fundamental rules governing the &lt;em&gt;form&lt;/em&gt; of the language; for example, in most programming languages the statement &lt;code&gt;a = ;&lt;/code&gt; is a syntax error, because something is obviously missing between the equals sign and the semicolon.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic Error:&lt;/strong&gt; this represents failure to respect the &lt;em&gt;meaning&lt;/em&gt; of things; for example, in most languages the statement &lt;code&gt;a = &amp;quot;x&amp;quot; / 5;&lt;/code&gt; is syntactically correct but semantically incorrect, because dividing a string by a number does not make sense. As another example, the statement &lt;code&gt;a.increment();&lt;/code&gt; may represent a semantic error if object &lt;code&gt;a&lt;/code&gt; has no method called &lt;code&gt;increment&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logic Error:&lt;/strong&gt; this corresponds to a mistake in our &lt;em&gt;reasoning&lt;/em&gt;. For example, the statement &lt;code&gt;circumference = radius * π&lt;/code&gt; can be correct both syntactically and semantically, but it is nonetheless flawed, because this is not how you calculate a circumference given a radius; the correct formula also involves a multiplication by 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the three types of error that we have identified, the first and the last are unaffected by our choice of programming language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Syntax error will be detected by any halfway decent IDE regardless of whether we are using a scripting language or a real programming language.&lt;/li&gt;
&lt;li&gt;Logic error is just as easy to make in any programming language, and the way we protect ourselves against it is by writing copious amounts of automated software tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Semantic Error is where different kinds of languages take vastly different approaches. This type of error is closely associated with the concept of data types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The expression &lt;code&gt;&amp;quot;x&amp;quot; / 5&lt;/code&gt; is flawed because the left operand is of type string, while the right operand is of a numeric type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The validity of the statement &lt;code&gt;a.increment()&lt;/code&gt; depends upon the type of &lt;code&gt;a&lt;/code&gt;, and whether that type defines an &lt;code&gt;increment()&lt;/code&gt; method or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the programming language is strongly typed, then semantic error will always be detected during compilation, so there is never any danger of attempting to run (or ship to the customer) a program containing this kind of error; however, if the programming language is weakly typed, then all semantic error will go undetected until an attempt is made to execute code containing such error, at which point the software will severely malfunction.&lt;/p&gt;
&lt;p&gt;In light of the above, I would suggest that the actual differentiating factor between real programming and scripting languages is nothing but the presence or absence of semantic checking, in other words the use of strong vs. weak typing.&lt;/p&gt;
&lt;p&gt;TypeScript is the odd exception to the rule, and this is to be expected, because the impetus for the creation of TypeScript was vastly different from that of other scripting languages, which tend to be one-man efforts, and usually come into existence as nothing more than toy projects. In contrast, TypeScript was the result of a deliberate group effort backed by a big company (Microsoft) starting with the realization that JavaScript is unfortunately here to stay, and setting out specifically to correct one of its major deficiencies, namely the lack of strong typing.&lt;/p&gt;
&lt;p&gt;The trend of real programming languages to be compiled and of scripting languages to be interpreted can be explained &lt;em&gt;in full&lt;/em&gt; as a consequence of the primary choice of strong vs. weak typing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If a language is strongly typed, then a compilation step is very useful to
have, because it will unfailingly locate all errors that are detectable via
static semantic analysis before attempting to run.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a language is weakly typed, then semantic errors are undetectable, so
there is no need to parse code in advance. A compilation step would only
reveal syntactic errors, which can also be detected by any halfway decent
IDE.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, allowing for the exception of TypeScript, this leaves us with the following soft rule:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Real languages are strongly typed, employ semantic checking, and are therefore usually compiled.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Scripting languages are weakly typed, lack semantic checking, and are  therefore usually interpreted.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And yet, many people like scripting languages, and write lots of code in them, supposedly because they are &amp;ldquo;easier&amp;rdquo;. This brings to mind the famous quote by Edsger W. Dijkstra:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{&amp;hellip;} some people found error messages they couldn&amp;rsquo;t ignore more annoying than wrong results, and, when judging the relative merits of programming languages, some still seem to equate &amp;ldquo;the ease of programming&amp;rdquo; with the ease of making undetected mistakes.&lt;/p&gt;
&lt;p&gt;(Edsger W. Dijkstra, &lt;em&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD667.html&#34; target=&#34;_blank&#34;
   &gt;On the foolishness of &amp;ldquo;natural language programming&amp;rdquo;&lt;/a&gt;.&lt;/em&gt;)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Note that the above quote is from a paper about Natural Language Programming (NLP) but the particular passage containing the quote pertains to programming languages in general. Dijkstra wrote against NLP back in the 1980s because at that time it was being considered by some fools as a viable prospect; luckily, it failed to catch on, (or &lt;em&gt;naturally&lt;/em&gt;, if you would permit the pun,) but little did ol&amp;rsquo; Edsger know that in the decades that would follow his nightmares would come true, because scripting languages &lt;em&gt;did&lt;/em&gt; catch on. Apparently, people &lt;em&gt;love&lt;/em&gt; making undetected mistakes.&lt;/p&gt;
&lt;h3 id=&#34;arguments-in-favor-of-scripting-languages&#34;&gt;Arguments in favor of scripting languages
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; It is easy to write code in it; look, the &amp;ldquo;hello, world!&amp;rdquo; program is a one-liner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; What this means is that this scripting language is a very good choice, possibly even the ideal choice, for writing the &amp;ldquo;hello, world!&amp;rdquo;  program.&lt;/p&gt;
&lt;p&gt;The ease with which you may write &amp;ldquo;hello, world!&amp;rdquo; is no indication whatsoever about the ease with which a non-trivial system may be collaboratively developed, tested, debugged, maintained, and extended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; No, I mean it is really terse. There are many things besides &amp;ldquo;hello, world!&amp;rdquo; that I can write in one line.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Sure, you can write them in one line; but can you read them?&lt;/p&gt;
&lt;p&gt;One of the most important aspects of code is readability, (second only to correctness,) but terse code is not necessarily easy to read; if that was the case, then Perl would be the most readable language ever, but instead it enjoys the dubious distinction of being the least readable among all programming languages in general use.&lt;/p&gt;
&lt;p&gt;Terseness usually represents a tradeoff between verbosity and understandability: the more terse the code, the less of it you have to read, but also the harder it is to untangle its complexity. Thus, it is debatable whether terseness correlates with readability. Terseness appears to be the modern trend, so as real programming languages keep evolving they are also receiving features that make them more and more terse, for example tuples, lambdas, the fluent style of invocations, etc. So, terseness is not the exclusive domain of scripting languages, and to the extent that scripting languages go further in this regard it is debatable whether it is an advantage or a disadvantage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; There are lots of libraries for it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Seriously? There are more libraries for your scripting language than there are for Java?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I don&amp;rsquo;t have to compile it; I just write my code and run it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; I also just write my code and run it. When I hit the &amp;ldquo;launch&amp;rdquo; button, my IDE compiles my code in the blink of an eye and runs it. The difference between you and me is that if I have made any semantic mistakes in my code, I will be told so before wasting my time trying to run it. But what am I saying, being told that there are semantic mistakes in your code probably counts as a disadvantage for you, right?&lt;/p&gt;
&lt;p&gt;The ability to just write your code and run it without any semantic checking is causing real harm in scripting languages because it prevents them from evolving. This is, for example, a reason why Python version 2.x is still enjoying widespread use despite the language having moved on to version 3.x by now: people are afraid to make the transition to version 3.x in existing projects, even though it is mostly backwards compatible with version 2.x, because it is not 100% compatible, and lack of semantic checking means that there is no way of knowing which lines of code will break unless these lines get executed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I can modify my program as it runs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; I can also modify my program as it runs; the ability to do this is available in most real programming languages, and it is called &amp;ldquo;edit and continue&amp;rdquo; or &amp;ldquo;hot reload&amp;rdquo; depending on the language; look it up.&lt;/p&gt;
&lt;p&gt;Modification of running code is not always applicable in real programming languages, and it does not always work, but then again nor does it always work when you modify running code in a scripting language, because usually, you already have data structures in memory that were created by the code before it was modified. In real programming languages, you are prevented from making edits to running code that would seriously foul things up; in scripting languages, you are allowed to do whatever you please, and the catastrophic consequences of doing so are your own problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I do not like to have to declare the type of every single variable because it is a pain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; This is akin to arguing against seat belts because putting them on and taking them off is a pain. Do you have any idea of what kind of pain you are looking at if you get in a traffic accident without a seat belt?&lt;/p&gt;
&lt;p&gt;Furthermore, the ability to not have to declare the type of every single variable is not the exclusive privilege of scripting languages, because in recent years type inference has been gaining ground in real programming languages, allowing us to omit declaring the type of many of the variables that we use. The difference is that in real programming languages this is done right, by means of type inference instead of type ostrichism:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Type inference is deterministic extra work that the compiler does for us,
and it relies on having already assigned specific types to other variables,
so that we do not have to repeat things that are already known to, or can be
inferred by, the compiler.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type ostrichism is scripting language programmers preferring to not see
types and to not deal with types, as if that will make the types go away.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It might be worth taking a look at PEP 483 (&lt;a class=&#34;external&#34; 
   href=&#34;https://peps.python.org/pep-0483/&#34; target=&#34;_blank&#34;
   &gt;https://peps.python.org/pep-0483/&lt;/a&gt;) where the people responsible for the advancement of Python are acknowledging that behind the scenes every variable is of course of a specific type, and discussing the potential benefits of adding a type annotation system to the language which will allow programmers to make their intentions about types explicit, so as to be able to at least partially, and at least as an afterthought, enjoy some of the benefits of strong typing. I quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These annotations can be used to avoid many kind of bugs, for documentation purposes, or maybe even to increase speed of program execution.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I am not worried about errors, because I use testing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Oh really? Are your tests achieving even a mere 60% code coverage as we speak? And supposing that they do, how do you feel about the fact that in the remaining 40%, every single line is liable to break due to reasons as trivial and yet as common as a typo?&lt;/p&gt;
&lt;p&gt;Testing is an indispensable quality assurance mechanism for software, but it does not, in and by itself, guarantee correctness. You can easily forget to test something, and you can easily test &amp;ldquo;around&amp;rdquo; a bug, essentially creating tests that pretty much require the bug to be in place in order to pass. Despite these deficiencies, testing is still very important, but it is nothing more than a weapon in our arsenal against bugs. This arsenal also happens to include another weapon, which is closer to the forefront in the battle against bugs, and it is 100% objective, and &lt;em&gt;definitive&lt;/em&gt;. This weapon is called &lt;em&gt;strong typing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; It has lots and lots of built-in features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Sure, and that&amp;rsquo;s why scripting languages are not entirely useless. If the only thing that matters is to accomplish a certain highly self-contained goal of severely limited scope in as little time as possible, then please, by all means, do go ahead and use your favorite scripting language with its awesome built-in features. However, if the project is bound to take a life of its own, you are far better off investing a couple of minutes to create a project in a real programming language, and to include the external libraries that will give you any extra features that you might need.&lt;/p&gt;
&lt;p&gt;Built-in features do not only come with benefits; in contrast to libraries, they are much more difficult to evolve, because even a minute change in them may break existing code, resulting in people being reluctant to migrate to the latest version of the language. (Take the Python 2.x vs. 3.x conundrum for example.)&lt;/p&gt;
&lt;p&gt;Furthermore, built-in features usually have to be supported forever, even after better alternatives have been invented, or after they simply go out of style and fall out of grace, so over time scripting languages tend to gather lots of unnecessary baggage. We have tried feature-bloated programming languages before, (with ADA for example,) and the consensus is that they are not the way to go.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; But really, it is so much easier! Look here, in one statement I obtain a list and assign its elements to individual variables!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; That&amp;rsquo;s great, I bet this has slashed your time-to-market by half. What happens if the number of elements in the list differs from the number of variables that you decompose it into? I bet there is no error, because you do not like being bothered with errors, right?&lt;/p&gt;
&lt;p&gt;In any case, my compiled language of choice has its own unique, arcane syntax quirks that I could, if I wanted to, claim that they make things so much easier for me.&lt;/p&gt;
&lt;p&gt;Some of them are not even that arcane; for example, instead of using clunky annotations to hint to the IDE the types of my variables, so that it can then provide me with some rudimentary type checking, I get to simply declare the type of each variable as part of the actual syntax of the language! Imagine that!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I like dynamic typing. It gives me freedom.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Yes, freedom to shoot yourself in the foot. Also please note that there is no such thing as &amp;ldquo;dynamic&amp;rdquo; typing; this term is just a euphemism invented by scripting language aficionados to down-play the detrimental nature of this practice. The proper term is &lt;em&gt;&lt;strong&gt;weak&lt;/strong&gt;&lt;/em&gt; typing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I do not need type safety. I am better off without it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Right. So, you are the technological equivalent of an anti-vaxxer. (Credit: &lt;a class=&#34;external&#34; 
   href=&#34;https://danluu.com/empirical-pl/&#34; target=&#34;_blank&#34;
   &gt;danluu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I do not have to use an IDE, I can just use my favorite text editor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Oh sure. You are also the technological equivalent of an Amish farmer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; My scripting language is trendy. It is hip.&lt;/p&gt;
&lt;p&gt;No contest here. I can&amp;rsquo;t argue with hipsters.&lt;/p&gt;
&lt;h3 id=&#34;the-problems-with-scripting-languages&#34;&gt;The problems with scripting languages
&lt;/h3&gt;&lt;h4 id=&#34;the-nonsense&#34;&gt;The nonsense
&lt;/h4&gt;&lt;p&gt;I don&amp;rsquo;t need to say much here, just watch the legendary &amp;ldquo;Wat&amp;rdquo; video by Gary Bernhardt from CodeMash 2012, it is only 4 minutes long:&lt;/p&gt;
&lt;video width=&#34;97%&#34; poster=&#34;https://www.destroyallsoftware.com/assets/posters/talks/wat.poster-4f5425901c10ffeaceb61f82e25dc40b9212aadf078cead0dc6ffe40696e2bec.png&#34; preload=&#34;none&#34;&gt;
        &lt;source src=&#34;https://destroyallsoftware-talks.s3.amazonaws.com/wat.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=AKIAIKRVCECXBC4ZGHIQ%2F20241128%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20241128T124514Z&amp;amp;X-Amz-Expires=14400&amp;amp;X-Amz-SignedHeaders=host&amp;amp;X-Amz-Signature=866f87a9e2a988029db034ad51f846818c5a2e4415da80559bb334e602fd6bad&#34;&gt;
        &lt;track label=&#34;English&#34; kind=&#34;captions&#34; srclang=&#34;en&#34; src=&#34;//localhost:1313/captions/talks/wat.vtt&#34;&gt;&lt;/track&gt;
&lt;/video&gt;
&lt;p&gt;Source: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.destroyallsoftware.com/talks/wat&#34; target=&#34;_blank&#34;
   &gt;https://www.destroyallsoftware.com/talks/wat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The reason for all this nonsense is that all these languages are hacks.&lt;/p&gt;
&lt;p&gt;When the foundation that you are working on is a hack, then either anything you will build on top of it will in turn be a hack, or you are going to be putting an enormous effort to circumvent the hackiness of the foundation and build something reasonable over it. Why handicap yourself?&lt;/p&gt;
&lt;h4 id=&#34;the-errors&#34;&gt;The errors
&lt;/h4&gt;&lt;p&gt;Lack of semantic checking means that the mistakes that will inevitably be made will not be caught by a compilation step. Therefore, lack of semantic checking necessarily means that there will be more errors.&lt;/p&gt;
&lt;p&gt;It is an established fact that a certain percentage of errors will always pass testing and make it to production, which in turn inescapably means that there will be a somewhat increased number of bugs in production.&lt;/p&gt;
&lt;p&gt;This alone is enough to classify scripting languages as unsuitable for anything but tinkering, and the debate should be over right there.&lt;/p&gt;
&lt;h4 id=&#34;the-crippled-ide&#34;&gt;The crippled IDE
&lt;/h4&gt;&lt;p&gt;Lack of semantic checking means that your IDE cannot provide you with many useful features that you get with strongly typed languages. Specifically, you either have limited functionality, or you do not have at all, some or all of the following features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Context-sensitive argument auto-completion.&lt;/strong&gt; Since any parameter to any function can be of any type, the IDE usually has no clue as to which of the variables in scope may be passed to a certain parameter of a certain function. Therefore, it has to suggest everything that happens to be in scope. Most of these suggestions are preposterous, some are even treacherous.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Member Auto-completion.&lt;/strong&gt; Since a variable does not have a specific type, the IDE usually has no clue as to what member fields and functions are exposed by that variable. Therefore, either it cannot give any suggestions, or it has to suggest every single member of every single known type and the kitchen sink.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listing all usages of a type.&lt;/strong&gt; Since any variable can be of any type, the IDE usually has no clue as to where a given type is used, or if it is used at all. Contrast this with strongly typed languages where the IDE can very accurately list all usages of any given type and even provide you with visual clues about unused types.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type sensitive search.&lt;/strong&gt; If you have multiple different types where each one of them contains, say, a &lt;code&gt;Name&lt;/code&gt; member, you cannot search for all references of the &lt;code&gt;Name&lt;/code&gt; member of only one of those types. You have to use text search, which will yield all irrelevant synonyms in the results. This can be okay in tiny projects, but it very quickly becomes non-viable as the project size increases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refactoring.&lt;/strong&gt; When the IDE has no knowledge of the semantics of your code, it is incapable of performing various useful refactoring operations on it. IDEs that nonetheless offer some limited set of refactoring features on untyped languages are actually faking it; they should not be calling it refactoring, they should be calling it &lt;em&gt;Cunning Search and Replace&lt;/em&gt;. Needless to say, it does not always work as intended, and it does sometimes severely mess up the code. (When this happens, it is called &lt;em&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.catb.org/jargon/html/S/search-and-destroy-mode.html&#34; target=&#34;_blank&#34;
   &gt;Search and Destroy&lt;/a&gt;.&lt;/em&gt;) Furthermore, since there is no compiler, you have no way of knowing that a line of code has been messed up until that line of code gets executed, which is something that may happen very rarely for some lines of code.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;that-little-performance-issue&#34;&gt;That little performance issue
&lt;/h4&gt;&lt;p&gt;Performance is generally not an issue for scripting languages, because they tend to be used in situations where performance is not required.&lt;/p&gt;
&lt;p&gt;(There are of course some situations where people opt to use a scripting language despite the fact that performance matters, and in those situations people do in fact suffer the consequences of poor performance, take web servers written in node.js for example.)&lt;/p&gt;
&lt;p&gt;In today&amp;rsquo;s world where the majority of personal computers are running on precious battery power, it can be argued that even the tiniest bit of performance matters, but we can let that one slide, since battery technology is constantly improving.&lt;/p&gt;
&lt;p&gt;In cases where performance matters but the task at hand is well-defined and relatively isolated, performance is again not an issue for scripting languages because external libraries tend to be quickly developed to handle those tasks. (These external libraries are written in guess what: &lt;em&gt;real&lt;/em&gt; programming languages.)&lt;/p&gt;
&lt;p&gt;Having explained that performance is usually not an issue, let us also quickly mention before moving on that on computationally expensive tasks, such as iterating over all pixels of an image to manipulate each one of them, and assuming a competent programmer in each language, the following statements hold true:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there is no way that a scripting language will perform as well as Java, just as:&lt;/li&gt;
&lt;li&gt;there is no way that Java will perform as well as C++, just as:&lt;/li&gt;
&lt;li&gt;there is no way that C++ will perform as well as Assembly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stop arguing about this.&lt;/p&gt;
&lt;h4 id=&#34;the-horrendous-syntax&#34;&gt;The horrendous syntax
&lt;/h4&gt;&lt;p&gt;Most scripting languages suffer from a severe case of capriciously arcane and miserably grotesque syntax. No, beauty is not in the eye of the beholder, and there is only a certain extent up to which aesthetics are subjective.&lt;/p&gt;
&lt;p&gt;The syntax of scripting languages tends to suffer due to various reasons, the most common being:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their priorities are all wrong to begin with.&lt;/li&gt;
&lt;li&gt;They were hastily hacked together in a very short amount of time.&lt;/li&gt;
&lt;li&gt;Plain incompetence on behalf of their creators.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scripting languages that have their priorities wrong are, for example, all the shell scripting languages. These languages aim to make strings (filenames) look and feel as if they are identifiers, so that you can type commands without having to enclose them in quotes, as if the convenience of not having to use quotes was the most important thing ever. If all we want to do in a shell script is to list a sequence of commands to execute, then this convenience is perhaps all we care for, but the moment we try to use any actual programming construct, like variables and flow control statements, what we have in our hands is a string-escaping nightmare of epic proportions.&lt;/p&gt;
&lt;p&gt;Obligatory XKCD comic:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2017-05-on-scripting-languages/images/xkcd-backslash.png&#34;
	width=&#34;571&#34;
	height=&#34;207&#34;
	srcset=&#34;//localhost:1313/post/2017-05-on-scripting-languages/images/xkcd-backslash_hu_a3b55ba8a827aa03.png 480w, //localhost:1313/post/2017-05-on-scripting-languages/images/xkcd-backslash_hu_1eec207eb5351c55.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Backslashes&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;275&#34;
		data-flex-basis=&#34;662px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;(Source: &amp;ldquo;Backslashes&amp;rdquo; &lt;a class=&#34;external&#34; 
   href=&#34;https://www.xkcd.com/1638/&#34; target=&#34;_blank&#34;
   &gt;https://www.xkcd.com/1638/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;A scripting language that owes its bad syntax to being hastily hacked together is JavaScript. Brendan Eich, its creator, has admitted that JavaScript was developed within a couple of weeks, and that the language was not meant for anything but short isolated snippets of code. He is honest enough to speak of his own creation in derogatory terms, and to accept blame. (See &lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=zlcnOr81lPc&#34; target=&#34;_blank&#34;
   &gt;TEDxVienna 2016&lt;/a&gt;, opening statement, &amp;ldquo;Hello, I am to blame for JavaScript&amp;rdquo;.)  Also, pretty much anyone deeply involved with JavaScript will admit that it has serious problems. One of the most highly acclaimed books on the language is &lt;em&gt;JavaScript: The Good Parts&lt;/em&gt;, authored by Douglas Crockford and published by O&amp;rsquo;Reilly; you can take the title of the book as a hint.&lt;/p&gt;
&lt;p&gt;A scripting language that owes its horrific syntax to lack of competence is PHP. Its creator, Rasmus Lerdorf, is quoted &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/PHP#Early_history&#34; target=&#34;_blank&#34;
   &gt;on the Wikipedia article about PHP&lt;/a&gt; as saying &amp;ldquo;I don&amp;rsquo;t know how to stop it, there was never any intent to write a programming language {&amp;hellip;} I have absolutely no idea how to write a programming language, I just kept adding the next logical step on the way.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;So, from the above it should be obvious that most scripting languages are little toy projects that were created by individuals who simply wanted to prove that they could build something like that, without actually intending it to be used outside of their own workbench.&lt;/p&gt;
&lt;h4 id=&#34;the-cheapness&#34;&gt;The cheapness
&lt;/h4&gt;&lt;p&gt;The lack of semantic checking in scripting languages is usually not a deliberate design choice, but instead a consequence of the very limited effort that has gone into creating them. In many cases the creators of scripting languages would not know how to add semantic checking to the language even if they wanted to. In all cases, the amount of work required to add semantic checking would have been several orders of magnitude greater than the total amount of work that went into the creation of the language in the first place.&lt;/p&gt;
&lt;p&gt;In this sense, the comparison between scripting languages and real programming languages is a lot like comparing children&amp;rsquo;s tinker toy tools with tools for professionals: sure, a plastic screwdriver is inexpensive, lightweight and easy to use, but try screwing anything but plastic screws with it.&lt;/p&gt;
&lt;p&gt;(I was going to also add &amp;ldquo;you cannot hurt yourself with it&amp;rdquo;, but this analogy does not transfer to programming: you can very easily hurt yourself with a scripting language.)&lt;/p&gt;
&lt;h3 id=&#34;what-scripting-languages-are-good-for&#34;&gt;What scripting languages are good for
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Scripting languages used to be an easy way to write cross-platform software. This does not hold true anymore, since most major real programming languages are pretty much cross-platform nowadays.&lt;/li&gt;
&lt;li&gt;Scripting languages are useful when embedded within applications, (applications written in &lt;em&gt;real&lt;/em&gt; programming languages,) as evaluators of user-supplied expressions. (E.g. spreadsheet cell formulas.)&lt;/li&gt;
&lt;li&gt;Scripting languages are useful when shortening the time from the moment you fire up the code editor to the moment you first run your program is more important than everything else. By &amp;ldquo;everything else&amp;rdquo; we really mean everything: understandability, maintainability, performance, even correctness.&lt;/li&gt;
&lt;li&gt;Scripting languages are useful when the program to be written is so trivial, and its expected lifetime is so short, that it is hardly worth the effort of creating a new folder with a new project file in it. The corollary to this is that if it is worth creating a project for it, then it is worth using a real programming language.&lt;/li&gt;
&lt;li&gt;Scripting languages are useful when the code to be written is so small and simple that bugs can be detected by simply skimming through the code. The corollary to this is that if the program is to be even slightly complex, it should be written in a real programming language. (Adding insult to injury, many scripting languages tend to have such a cryptic write-only syntax that it is very hard to grasp what any piece of code does, let alone skim through it and vouch for it being bug-free.)&lt;/li&gt;
&lt;li&gt;The most important thing about scripting languages (and the main reason why they have become so wildly popular in recent years) is that they are useful in getting non-programmers into programming as quickly as possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of us programmers have had a friend, who was not a programmer, and who one day asked us how to get into programming. The thought process should be familiar: you think about it for a moment, you start making a mental list of things they would need in order to get started with a real programming language, and you quickly change your mind and suggest that they try Python, because this answer stands some chance of fitting within our friend&amp;rsquo;s attention span. However, the truth of the matter is that this recommendation will only save our friend from maybe a few hours of preparatory work, and it would be a crime if it condemns them to thousands of hours wasted over the course of a several year long career due to the use of an inferior programming language. This brings us to the following realization:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scripting languages are a lot like teething rings (pacifiers):&lt;/p&gt;
&lt;p&gt;It is okay to start with one; you must get rid of it as soon as you grow some teeth.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;The fact that some scripting languages catch on and spread like wildfire simply shows how eager the industry is to adopt any contemptible piece of nonsense without any critical thinking whatsoever, as long as it helps optimize some short-sighted concern, such as how to get non-programmers into programming as quickly as possible. It is a truly deplorable situation that kids nowadays learn JavaScript as their first programming language due to it being so accessible to them: all you need is a web browser, and one day instead of F11 for full-screen you accidentally hit F12 which opens up the developer tools, and you realize that you have an entire integrated development environment for JavaScript sitting right there, ready to use. The availability of JavaScript to small children is frightening.&lt;/p&gt;
&lt;p&gt;Usually, once a language becomes extremely popular, tools are created to lessen the impact of its deficiencies. Thanks to the herculean efforts of teams that develop scripting engines, and through all kinds of sorcery being done under the hood in these engines, the most popular scripting languages are considerably faster today than they used to be. However, the sorcery is not always applicable, even when it is applicable it is imperfect, and besides, it incurs a penalty of its own, so scripting languages will never match the performance of real programming languages. Also, modern IDEs have evolved to provide some resemblance of semantic checking in some scripting languages, but since this checking has been added as an afterthought, it is always partial, unreliable, hacky, and generally an uphill battle.&lt;/p&gt;
&lt;p&gt;So, you might ask, what about the hundreds of thousands of successful projects written in scripting languages? Are they all junk? And what about the hundreds of thousands of programmers all over the world who are making extensive use of scripting languages every day and are happy with them? Are they all misguided? Can&amp;rsquo;t they see all these problems? Are they all ensnared in a monstrous collective delusion?&lt;/p&gt;
&lt;p&gt;Yep, that&amp;rsquo;s exactly it. You took the words from my mouth.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/post/2017-05-on-scripting-languages/images/grumpy-cat-scripting-languages.jpg&#34;
	width=&#34;600&#34;
	height=&#34;400&#34;
	srcset=&#34;//localhost:1313/post/2017-05-on-scripting-languages/images/grumpy-cat-scripting-languages_hu_5be306c65a008b9c.jpg 480w, //localhost:1313/post/2017-05-on-scripting-languages/images/grumpy-cat-scripting-languages_hu_8081d0eb266ea027.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;mandatory grumpy cat meme: &amp;ldquo;Scripting Languages - I Hate Them.&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Also read: &lt;a 
   href=&#34;//localhost:1313/post/2018-01-tablecloth/&#34;
   &gt;Tablecloth - A short high-tech sci-fi horror story&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: This is a draft. It may contain inaccuracies or mistakes. There are bound to be corrections after I receive some feedback.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Scratch&lt;/p&gt;
&lt;p&gt;See:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://stackoverflow.com/questions/397418/when-to-use-a-scripting-language&#34; target=&#34;_blank&#34;
   &gt;http://stackoverflow.com/questions/397418/when-to-use-a-scripting-language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From &lt;a class=&#34;external&#34; 
   href=&#34;http://wiki.c2.com/?SeriousVersusScriptingLanguages&#34; target=&#34;_blank&#34;
   &gt;http://wiki.c2.com/?SeriousVersusScriptingLanguages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scripting Languages emphasize quickly writing one-off programs&lt;/p&gt;
&lt;p&gt;Serious languages emphasize writing long-lived, maintainable, fast-running programs.&lt;/p&gt;
&lt;p&gt;light-duty &amp;ldquo;gluing&amp;rdquo; of components and languages.&lt;/p&gt;
&lt;p&gt;From &lt;a class=&#34;external&#34; 
   href=&#34;https://danluu.com/empirical-pl/&#34; target=&#34;_blank&#34;
   &gt;https://danluu.com/empirical-pl/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;I think programmers who doubt that type systems help are basically the tech equivalent of an anti-vaxxer&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The effect isn&amp;rsquo;t quantifiable by a controlled experiment.&lt;/p&gt;
&lt;p&gt;Misinformation people want to believe spreads faster than information people don&amp;rsquo;t want to believe.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.blog/2023/01/19/adding-structure-to-dynamic-languages&#34; target=&#34;_blank&#34;
   &gt;The Stack Overflow Blog: Minimizing the downsides of dynamic programming languages&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>New Mobile Phone</title>
        <link>//localhost:1313/post/2016-03-17-new-mobile-phone/</link>
        <pubDate>Thu, 17 Mar 2016 17:05:01 +0000</pubDate>
        
        <guid>//localhost:1313/post/2016-03-17-new-mobile-phone/</guid>
        <description>&lt;p&gt;So, I just bought a new phone, a Samsung Note 4, (Android,) and boy, was it a lousy experience!&lt;/p&gt;
&lt;h3 id=&#34;too-complicated-bundling-options&#34;&gt;Too complicated bundling options
&lt;/h3&gt;&lt;p&gt;To start off, the experience was becoming a bit lousy even before the purchase, with all the incredibly complicated options on offer, which make selecting a plan quite an ordeal. Frankly, I think bundling services (mobile connectivity) with products (the phone) should be prohibited.&lt;/p&gt;
&lt;h3 id=&#34;unwanted-applications&#34;&gt;Unwanted applications
&lt;/h3&gt;&lt;p&gt;Anyhow, so I bought the phone. Upon booting, it went through a lengthy process of installing applications I never asked for.. Finally, I arrived at the first interactive screen, which promptly went blank.&lt;/p&gt;
&lt;h3 id=&#34;screen-times-out-while-charging&#34;&gt;Screen times out while charging.
&lt;/h3&gt;&lt;p&gt;So, here is a riddle for you: if my phone is plugged into the USB port and charging, then why the hell is the screen switching off every 15 seconds?&lt;/p&gt;
&lt;h3 id=&#34;misleading-dexterity-options&#34;&gt;Misleading &amp;ldquo;Dexterity&amp;rdquo; options
&lt;/h3&gt;&lt;p&gt;On this first interactive screen the phone asked me to select a language, and allowed me to either &amp;ldquo;Start&amp;rdquo;, (whatever this may mean,) or set up accessibility first.  I tapped accessibility just out of curiosity.  In the following &amp;ldquo;Accessibility settings&amp;rdquo; screen, there were entries for &amp;ldquo;Vision&amp;rdquo; and &amp;ldquo;Hearing&amp;rdquo;, which were of no interest to me, but there was also an entry for &amp;ldquo;Dexterity and interaction&amp;rdquo;, which I was very pleased to see, as I happen to be left-handed.  So, I selected that entry, only to discover, to my disappointment, that it actually has nothing to do with dexterity.  There is no option where the user can specify whether they belong to the unexciting right-handed majority or the very special, if I may say so myself, left-handed minority.  Modern mobile phones still appear to simply not care at all to switch a few screen elements around on the screen so as to accommodate left-handed people.&lt;/p&gt;
&lt;h3 id=&#34;annoying-popups&#34;&gt;Annoying popups
&lt;/h3&gt;&lt;p&gt;While in that menu I received the following annoyance: a popup asking me whether I would like to allow google to regularly check device activity for security problems, and prevent or warn about potential harm, with the option of declining or accepting.  I had no idea what that meant, and there was no direct way of finding out, so I had no option but to decline, which is of course very annoying.  About a minute later, the exact same screen popped up again, asking me the same question, so I had to decline again. This popup appeared in front of me a total of 4 times while using my phone and writing this text.  On at least one occasion the popup disappeared all by its own, without me having to select &amp;ldquo;Decline&amp;rdquo;. This brings annoyance to a whole new level.&lt;/p&gt;
&lt;h3 id=&#34;stuff-in-dutch&#34;&gt;Stuff in Dutch
&lt;/h3&gt;&lt;p&gt;At the bottom of the &amp;ldquo;Accessibility settings&amp;rdquo; screen there was a very interesting &amp;ldquo;Protect&amp;rdquo; entry, which lead to a screen all written in Dutch, presumably because I happen to be located in Holland. I had just selected that my language is English, so I was not expecting to see any Dutch in front of me. At all. Ever.&lt;/p&gt;
&lt;p&gt;So, maybe I would have been interested to know what that protection stuff was all about, but if that protection stuff was created by people who can&amp;rsquo;t get a simple language selection right, then it cannot possibly be any good at protecting me from anything, right?&lt;/p&gt;
&lt;h3 id=&#34;lame-navigation-designed-by-idiots-for-idiots&#34;&gt;Lame navigation designed by idiots, for idiots
&lt;/h3&gt;&lt;p&gt;At the bottom of the &amp;ldquo;Accessibility settings&amp;rdquo; screen there was a &amp;ldquo;Next&amp;rdquo; button.  This is somewhat confusing and quite annoying, because I came to this screen from the main menu, which had its own &amp;ldquo;Next&amp;rdquo; button, so I would expect to have to first go back to the main menu and then go to whatever &amp;ldquo;Next&amp;rdquo; is.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;Next&amp;rdquo; button led to a &amp;ldquo;Wi-Fi&amp;rdquo; screen. There was no &amp;ldquo;Back&amp;rdquo; button. Pressing the &amp;ldquo;back&amp;rdquo; hardbutton took me back to the main screen.  Clicking the &amp;ldquo;Start&amp;rdquo; button from the main screen brings me again to the &amp;ldquo;Wi-Fi&amp;rdquo; screen.  Whatever.  I guess I have to get used to navigation for idiots.&lt;/p&gt;
&lt;h3 id=&#34;the-monstrous-eula&#34;&gt;The monstrous EULA
&lt;/h3&gt;&lt;p&gt;The next screen was &amp;ldquo;EULA &amp;amp; Diagnostic Data&amp;rdquo;.  The EULA must have been like 20k of plain text, and it was deliberately shown through a small window covering about one-third of the total screen area as a hint that you should not even attempt to read it.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know and I don&amp;rsquo;t care what kind of radical reformation of the Legal systems of the Western World it would take to get rid of this madness, but really, we should all be working hard towards a world where legal documents of this kind are prohibited by law.  If you can&amp;rsquo;t say it in five short sentences that the average 18-year old can understand, then you should not be allowed to even try to convince people to consent to it.&lt;/p&gt;
&lt;p&gt;So, I had to accept it in order to proceed, and I have no idea what I accepted, I may have given my home over to some Korean guy for all I know.  Perhaps my wife, too.&lt;/p&gt;
&lt;h3 id=&#34;lies-about-nfc&#34;&gt;Lies about NFC
&lt;/h3&gt;&lt;p&gt;After a brief pause to &amp;ldquo;check connection&amp;rdquo; and another for a &amp;ldquo;software update&amp;rdquo;, I was taken to a &amp;ldquo;Tap &amp;amp; Go&amp;rdquo; screen, which suggests that I can quickly copy any google accounts, backed up apps and data from my old Android device, by having my two devices touch each other.  Which is of course a damned lie, because that would only work if my old device was also equipped with NFC. But I suppose that &amp;ldquo;truth&amp;rdquo; is sometimes a bit too technical and a bit too uncool to mention. I wonder if they burst out in evil laughter, thinking of the millions of people who will be wasting their time touching their devices and trying to get &amp;ldquo;Tap &amp;amp; Go&amp;rdquo; to work despite the fact that it can&amp;rsquo;t. The scourge of the modern world is information design done by marketing people.  So, okay, skip.&lt;/p&gt;
&lt;h3 id=&#34;first-application-crash-during-device-setup&#34;&gt;First application crash during device setup
&lt;/h3&gt;&lt;p&gt;On the next &amp;ldquo;Setup your account&amp;rdquo; screen, I entered my email, and when I hit next, I was told that &amp;ldquo;unfortunately, google play services has stopped&amp;rdquo; and I was taken back to the EULA screen.  Need I mention how disillusioning it is to experience your first application crash as early as during device setup?&lt;/p&gt;
&lt;h3 id=&#34;what-is-my-e-mail-and-password-being-used-for&#34;&gt;What is my e-mail and password being used for?
&lt;/h3&gt;&lt;p&gt;Fortunately, a second attempt worked.  The screen said &amp;ldquo;By signing in, you agree to the Terms of Service and Privacy Policy&amp;rdquo;, which I could have clicked to read if I wished to, but of course I did not, in order to spare myself from the aggravation. There was also a &amp;ldquo;Don&amp;rsquo;t sign in&amp;rdquo; option, which begs the question why it is only shown to me &lt;em&gt;&lt;strong&gt;after&lt;/strong&gt;&lt;/em&gt; I was asked to enter my e-mail and password. Or maybe this means that the email and password I just entered will be used for some unknown stuff, and if I now do this unknown thing they call &amp;ldquo;sign in&amp;rdquo; it will be used for some additional unknown stuff. This is driving me nuts.&lt;/p&gt;
&lt;h3 id=&#34;so-i-am-their-bitch-now&#34;&gt;So, I am their bitch now
&lt;/h3&gt;&lt;p&gt;After a &amp;ldquo;Checking info&amp;rdquo; pause, I was taken to a &amp;ldquo;Set up payment info&amp;rdquo; screen, where I suppose filthy rich people who don&amp;rsquo;t know what to do with their money actually do go ahead and enter their credit card info. They enter it. On the phone. Just because they were asked to.  Right. Note that there is no &amp;ldquo;Skip&amp;rdquo; option; the best you can choose is &amp;ldquo;Remind me later&amp;rdquo;. Because of course you will be spending money on their shit; you bought their phone, you are their bitch now.&lt;/p&gt;
&lt;h3 id=&#34;stupid-software-trying-to-look-smart&#34;&gt;Stupid software trying to look smart
&lt;/h3&gt;&lt;p&gt;After a &amp;ldquo;Just a sec&amp;hellip;&amp;rdquo; pause, I was taken to a &amp;ldquo;Get your apps &amp;amp; data&amp;rdquo; screen, where I was told that I could setup my phone from a backup of my old phone which was last used 1 day ago.  The problem here is that my old phone was not last used 1 day ago, it was used just now.  So, this is software trying to look smart by boasting knowledge of things it knows nothing about, and of course getting it wrong. Anyhow, I agreed, and I edited the list of apps that I would like to have transferred, to see what kind of magic google will do to move all that stuff from one phone to the other.&lt;/p&gt;
&lt;h3 id=&#34;second-application-crash-during-device-setup&#34;&gt;Second application crash during device setup
&lt;/h3&gt;&lt;p&gt;The next screen was &amp;ldquo;Google services&amp;rdquo;, where I agreed to back up my phone&amp;rsquo;s apps, app data, settings, personal dictionaries, and Wi-Fi passwords using my Google Account so I can easily restore later. I also agreed to use Google&amp;rsquo;s location service to help apps determine location.  I unchecked &amp;ldquo;Help improve location services&amp;rdquo; and &amp;ldquo;Help improve your Android experience&amp;rdquo;. On this screen, I also received a popup saying &amp;ldquo;Unfortunately, Google Calendar Sync has stopped&amp;rdquo;.  Who is Google Calendar Sync, what is he doing on my phone, and why has he stopped doing it?&lt;/p&gt;
&lt;h3 id=&#34;extremely-annoying-chaotic-navigation&#34;&gt;Extremely annoying chaotic navigation
&lt;/h3&gt;&lt;p&gt;Then I decided to tap &amp;ldquo;&amp;lt;&amp;rdquo; to review what apps of the old phone will be transferred to the new phone, but instead of the &amp;ldquo;Get your apps &amp;amp; data&amp;rdquo; screen I was taken to an as of yet unseen &amp;ldquo;Account added&amp;rdquo; (&amp;ldquo;Your account is ready for use&amp;rdquo;) screen.  Hitting &amp;ldquo;&amp;lt;&amp;rdquo; once again took me all the way back to the EULA screen.  Hitting &amp;ldquo;Next&amp;rdquo; from there went through the &amp;ldquo;Checking connection&amp;rdquo; and &amp;ldquo;Software update&amp;rdquo; screens, and then landed me on the &amp;ldquo;Account added&amp;rdquo; screen again.  So, there is no way to go back to the &amp;ldquo;Get your apps &amp;amp; data&amp;rdquo; screen.  Apparently the wiz kids at google have invented the &amp;ldquo;Back&amp;rdquo; button that takes you to new places, and the important settings screen that vanishes and cannot be found again.&lt;/p&gt;
&lt;h3 id=&#34;yes-i-am-sure&#34;&gt;Yes, I am sure
&lt;/h3&gt;&lt;p&gt;The next screen was the &amp;ldquo;Samsung account&amp;rdquo; screen. Of course I hit skip, and then the annoying assholes at Samsung presented me with an &amp;ldquo;Are you sure?&amp;rdquo; popup. So, skip times two, it is.&lt;/p&gt;
&lt;h3 id=&#34;speaking-in-riddles&#34;&gt;Speaking in riddles
&lt;/h3&gt;&lt;p&gt;The next screen was some &amp;ldquo;Find my mobile&amp;rdquo; screen, by Samsung again, because I suppose the previous two taps on &amp;ldquo;Skip&amp;rdquo; were not enough for them to understand that besides buying their hardware, I want to have nothing to do with them. The text reads: &amp;ldquo;Protect your device in case it is lost or stolen by stopping other people from reactivating your device after it has been reset&amp;rdquo;. Which, of course, requires an understanding of several unknown words in order to make sense. Like, what does &amp;ldquo;protect&amp;rdquo; mean? What does &amp;ldquo;stopping&amp;rdquo; mean? What does &amp;ldquo;reactivating&amp;rdquo; mean? What does &amp;ldquo;reset&amp;rdquo; mean? And no, I am not an idiot, nor was I born yesterday, I am a Software Engineer with 30+ years of experience, and I have this very important message for you: no matter who you are, if you think you know what these terms mean, you don&amp;rsquo;t. Also, statistically, as a member of the general public, you should not even pretend to know what these terms mean. Anyhow, my mom taught me to never agree to things I don&amp;rsquo;t understand. So, &amp;ldquo;Next&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;botched-device-name&#34;&gt;Botched device name
&lt;/h3&gt;&lt;p&gt;The next screen reads &amp;ldquo;Samsung Galaxy&amp;rdquo; and &amp;ldquo;Thank you!&amp;rdquo;.  Then it shows the &amp;ldquo;device name&amp;rdquo;, which is my first name followed by &amp;ldquo;(Galaxy Note&amp;rdquo;.  Apparently, my name and the entire phone name did not fit; however the device name was being presented to me as a statement of fact, there was no option to change it to something else.  As I later found out, it is possible to replace this name with something shorter by renaming the mobile device when you see it on Windows Explorer.&lt;/p&gt;
&lt;h3 id=&#34;oh-they-have-selected-some-apps-for-me&#34;&gt;Oh they have selected some apps for me!
&lt;/h3&gt;&lt;p&gt;After all this I clicked &amp;ldquo;Finish&amp;rdquo;, and the home screen of the phone appeared in front of me, only to disappear again immediately and be replaced by some &amp;ldquo;Vodafone Start&amp;rdquo; screen, where Vodafone is suggesting that I tap on &amp;ldquo;Next&amp;rdquo; to discover the Apps Vodafone has selected for me. Fuck off Vodafone!&lt;/p&gt;
&lt;h3 id=&#34;lies-about-internet-connectivity&#34;&gt;Lies about internet connectivity
&lt;/h3&gt;&lt;p&gt;So, then, finally, the home screen of my phone appears in front of me, and I can use it.&lt;/p&gt;
&lt;p&gt;I accidentally tap on what I thought was empty screen, but as it turns out, it was part of the weather widget, so the weather widget informs me that the weather is updated once every 6 hours, and I may increase the frequency of the updates, but this may incur additional charges. Which is a fucking lie, because I am on Wi-Fi.&lt;/p&gt;
&lt;h3 id=&#34;the-annoying-bubbles&#34;&gt;The annoying bubbles
&lt;/h3&gt;&lt;p&gt;Then, I let my screen timeout, and upon bringing the phone back to life again, the home screen has disappeared, and it has been replaced by some annoying animated bubbles.  I do not find the bubbles offending per se, but what I do find offending is that the designers of the bubbles took it for granted that their sense of aesthetics should be found agreeable by me. I tap on the phone and it does not react, it only beeps, so it looks like I have been locked out of my own phone. To add insult to injury, the bubbles do react to my tapping, as if they are mocking me: they are dancing inside my phone, I am locked outside.&lt;/p&gt;
&lt;p&gt;It turns out that a swipe lets me use the phone again, but the fact that a swipe is required was not advertised anywhere, which is annoying. I mean, they went through the trouble of adding the fucking animated bubbles, and they did not bother adding some kind of visual indication that a swipe is needed at that point?&lt;/p&gt;
&lt;h3 id=&#34;found-my-location-now-what&#34;&gt;Found my location. Now what?
&lt;/h3&gt;&lt;p&gt;So, after the swipe, a new screen appears out of nowhere, and a popup on top of it asks me to consent to providing my current location. I consent, so it searches for my current location, it displays it, and that&amp;rsquo;s it. Just a screen showing the name of the city I am in, and nothing else. No &amp;ldquo;Done&amp;rdquo;, no &amp;ldquo;Next&amp;rdquo;, no &amp;ldquo;Select this and proceed&amp;rdquo;.  In certain areas the user interface is very unpolished.&lt;/p&gt;
&lt;h3 id=&#34;the-fucking-google-hangouts&#34;&gt;The fucking &amp;ldquo;google hangouts&amp;rdquo;
&lt;/h3&gt;&lt;p&gt;A huge number of notifications is on the notification bar. One of them says &amp;ldquo;new messages from&amp;hellip;&amp;rdquo; and lists a number of friends. I click on it, and suddenly google hangouts appears in front of me. I try to go &amp;ldquo;Back&amp;rdquo;, but it does not react to the &amp;ldquo;Back&amp;rdquo; hardbutton. The only option it leaves me with is &amp;ldquo;Okay, got it&amp;rdquo;, but I do not want to consent that I got it, because I did not get it, I do not even want to get it, I want google hangouts to leave me alone.  I go to settings, application settings, application manager, I swipe all the way to the &amp;ldquo;running&amp;rdquo; tab, I search for google hangouts, it does not appear to be in the list. Then I notice an entry which says &amp;ldquo;hangouts&amp;rdquo;. I try to click it, but it disappears before I touch. I search for it in the list, it is nowhere to be found.&lt;/p&gt;
&lt;p&gt;I back out of the application manager, I am in hangouts again. I hit the &amp;ldquo;recent apps&amp;rdquo; button to go back into the application manager, but a new popup appears, informing me about new multi window features. (FUCK YOU!) I search for google hangouts in the running apps, it is still not there. I tap the &amp;ldquo;Active applications&amp;rdquo; button in the &amp;ldquo;recent apps&amp;rdquo; screen, the list is empty.  Google hangouts somehow decided to leave me alone, but all this makes for a very chaotic experience.&lt;/p&gt;
&lt;h3 id=&#34;more-lies-about-internet-connectivity&#34;&gt;More lies about internet connectivity
&lt;/h3&gt;&lt;p&gt;To my horror I discover that mobile data is turned on. I go turn it off, and I am presented with a popup which says that I will no longer be available to use applications such as the internet.  Which is a fucking lie, because I am on Wi-Fi.&lt;/p&gt;
&lt;h3 id=&#34;undiscoverable-user-interface-features&#34;&gt;Undiscoverable user interface features
&lt;/h3&gt;&lt;p&gt;One of the most useful icons on my home screen has always been the little counter which counts how many applications are running. I go to &amp;ldquo;Apps&amp;rdquo; and try to find it, but it is not there. I reckon it must be  a widget, not an app. I look around for widgets, but there is no menu of any kind that mentions widgets anywhere. Finally, I realize that in order to get to the widgets I have to find an area of the screen which is unused, and long-tap on it to enter a special mode that allows placement of pages and insertion of widgets. Undiscoverable user-interface features are beyond lame.&lt;/p&gt;
&lt;h3 id=&#34;when-none-is-not-really-none&#34;&gt;When &amp;ldquo;none&amp;rdquo; is not really &amp;ldquo;none&amp;rdquo;
&lt;/h3&gt;&lt;p&gt;Page flipping has some fancy kitsch transition effect that causes me nausea. I set it to &amp;ldquo;None&amp;rdquo;.  Actually, even &amp;ldquo;None&amp;rdquo; is not really &amp;ldquo;None&amp;rdquo;, it is a horizontal animation with an inertial effect. But it is the simplest available, and that makes it the most agreeable as far as I am concerned.&lt;/p&gt;
&lt;h3 id=&#34;the-fucking-flipboard-briefing&#34;&gt;The fucking &amp;ldquo;flipboard briefing&amp;rdquo;
&lt;/h3&gt;&lt;p&gt;While flipping the pages this annoying &amp;ldquo;Briefing&amp;rdquo; thing keeps showing up even though I did not ask for it. A closer examination reveals that the leftmost page is not really a page, it is this whole brand spanking new awesome spiffy and utterly useless to me feature for reading stuff. So every time I swipe to the leftmost page, this annoying thing is popping up. After much searching, I finally find a way to remove it: in the &amp;ldquo;Home screen settings&amp;rdquo; page there is a &amp;ldquo;Flipboard Briefing&amp;rdquo; setting which needs to be unchecked.&lt;/p&gt;
&lt;p&gt;I hate this modern fashion of coming up with &amp;ldquo;cool&amp;rdquo; short names for apps that give no hint as to what they are about. Sure, once you know what the app is about, the name might make sense and act as a mnemonic. But to the uninitiated, &amp;ldquo;Flipboard Briefing&amp;rdquo; means absolutely nothing. I know, for the guys who built this app, it was their daily everything for possibly a year or more. But really, to me, it means nothing, and I find it extremely annoying that I am essentially being invited to learn what this nonsensical name actually stands for before deciding whether I am interested in it or not. So, I think I will just skip directly to not being interested in it. Which was my default condition before hearing of its existence, by the way.&lt;/p&gt;
&lt;h3 id=&#34;the-fucking-profile-sharing&#34;&gt;The fucking &amp;ldquo;profile sharing&amp;rdquo;
&lt;/h3&gt;&lt;p&gt;A notification pops up that says &amp;ldquo;Profile Sharing&amp;rdquo; and &amp;ldquo;Show your profile image to your friends&amp;rdquo;. There is no hint as to who is showing this notification, what technologies it involves, who the fuck do they think my friends are, why the fuck would I be showing any information at all to them, let alone my profile picture, etc.&lt;/p&gt;
&lt;p&gt;I would very much like to know what bloody application is showing this notification, in order to uninstall it, but I do not even want to click on the notification, so I just dismiss it.&lt;/p&gt;
&lt;h3 id=&#34;the-fucking-beaming-service&#34;&gt;The fucking &amp;ldquo;beaming service&amp;rdquo;
&lt;/h3&gt;&lt;p&gt;Another notification says &amp;ldquo;Beaming Service is Ready&amp;rdquo; and &amp;ldquo;The Samsung preinstalled Beaming Servic&amp;hellip;&amp;rdquo; &amp;ndash; who the fuck asked for this service to be preinstalled, who the fuck requested that it be made &amp;ldquo;ready&amp;rdquo;, and what the fuck is this beam &amp;ndash; no, actually, I don&amp;rsquo;t even care to know what the fuck it is beam, I just wish I was not bugged with this overwhelming pile of crap that I did not ask for and do not want to have anything to do with.&lt;/p&gt;
&lt;h3 id=&#34;the-fucking-vodafone-start&#34;&gt;The fucking &amp;ldquo;vodafone start&amp;rdquo;
&lt;/h3&gt;&lt;p&gt;Another notification says &amp;ldquo;Resume Vodafone Start&amp;rdquo;;  apparently, dismissing the annoying uninvited app was not enough, so now it will be pestering me with notifications.&lt;/p&gt;
&lt;h3 id=&#34;the-fucking-samsung-quick-connect&#34;&gt;The fucking &amp;ldquo;samsung quick connect&amp;rdquo;.
&lt;/h3&gt;&lt;p&gt;So, on the notification menu there are two new options, which are probably samsung-only.  One says &amp;ldquo;S.Finder&amp;rdquo; and the other one says &amp;ldquo;Quick connect&amp;rdquo;. If you click on &amp;ldquo;Quick connect&amp;rdquo;, you are taken to a &amp;ldquo;Quick connect&amp;rdquo; screen which gives a few hints about the magic it supposedly does, has a &amp;ldquo;Turn on quick connect&amp;rdquo; button, and gives two rather confusing options: to turn it on as always visible, or to turn it on only when quick connect is turned on.  Of course this makes no sense, so you read the text more carefully, and now it appears that it is asking whether the device should be visible to other devices at all times, or only when quick connect is turned on. Which, in light of the fact that you are about to turn on quick connect, does not make much more sense either. If you hit &amp;ldquo;Back&amp;rdquo; from that screen, the pestering little fuckers hit you with an annoying popup saying &amp;ldquo;Update Quick Connect&amp;rdquo;, and &amp;ldquo;A new version is available. Update now?&amp;rdquo; &lt;/p&gt;
\[Cancel\]&lt;p&gt; &lt;/p&gt;
\[Update now\]&lt;p&gt;. A screenshot that was captured earlier is now adorned in the notification menu with some crap which I believe was not there before, about sharing it or editing it and stuff. So, going back to the &amp;ldquo;Quick connect&amp;rdquo; and &amp;ldquo;Turn on quick connect&amp;rdquo; screen, I select &amp;ldquo;Only when quick connect turned on&amp;rdquo; and click on &amp;ldquo;Turn on quick connect&amp;rdquo;, and I see the &amp;ldquo;Update Quick connect&amp;rdquo; popup again. I cancel it, and nothing else happens. So I go back to the notification menu, select &amp;ldquo;Quick connect&amp;rdquo; again, and some previously unseen screen opens up, but it is immediately covered by the &amp;ldquo;Update Quick connect&amp;rdquo; popup so I cannot use it. I cancel the popup, and everything disappears. So, it is impossible to go back to the &amp;ldquo;Quick connect&amp;rdquo; screen again. The fucker secured my consent to turn itself on, and now it won&amp;rsquo;t run unless I consent to also updating it. Also, I cannot find any way of disabling it, since there is no &amp;ldquo;Quick connect&amp;rdquo; app in the apps. This is a serious time waster and seriously driving me nuts.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Why Oracle Sucks</title>
        <link>//localhost:1313/post/2015-09-why-oracle-sucks/</link>
        <pubDate>Mon, 14 Sep 2015 11:40:29 +0000</pubDate>
        
        <guid>//localhost:1313/post/2015-09-why-oracle-sucks/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2015-09-why-oracle-sucks/media/oracle-logo.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
Oracle talks a lot about 11g Express Edition, and how it differs from the full (paid) versions of their database, but it does not say a word about the most important thing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is it compatible at the SQL syntax level?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No way to find out other than to try it.  So, let&amp;rsquo;s try it.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/post/2022-11-about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The downloaded installation zip file contains a folder called DISK1.  Now, Oracle Database Express Edition 11g Release 2 bears the date June 4, 2014, so 14 years into the 3rd millennium Oracle is still masturbating with the concept of &amp;ldquo;disks&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The downloaded installation zip file is 316MB, it contains a setup.exe which is 317MB, and when you run it, it extracts a contained &lt;code&gt;.msi&lt;/code&gt; file, which in turn extracts its contents.&lt;/p&gt;
&lt;p&gt;The installer asks me to specify a database password.  It says that this password will be used for the SYS and SYSTEM accounts.  If both accounts are to have the same password, then clearly, one of them must be redundant, no?&lt;/p&gt;
&lt;p&gt;Oracle 11g Express installs an icon on my desktop which is &lt;em&gt;literally hideous&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I double-click the icon, and an error message dialog pops up.  The title of the dialog is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://127.0.0.1:%HTTPPORT%/apex/f?p=4950&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;and the message in the dialog is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows cannot find &amp;lsquo;http://127.0.0.1:%HTTPPORT%/apex/f?p=4950&amp;rsquo;. Make sure you typed the name correctly, and then try again.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I open up the start menu, find a &amp;ldquo;Start Database&amp;rdquo; icon, double click it, and an elevated command prompt shows up.  The command prompt appears to do nothing at all, it just sits there waiting for me to type something. I haven&amp;rsquo;t the slightest clue as to what I am supposed to type in there.  After some troubleshooting it turns out that the command prompt executed a command which (might have) silently started the database.  But they used the /k option, so the command prompt stayed open, so it appears as if nothing was done.&lt;/p&gt;
&lt;p&gt;And then, that&amp;rsquo;s it.  Some database must have started somewhere, but you are given no means of working with it.  There is a &amp;ldquo;Get Started&amp;rdquo; icon in the start menu, but clicking it gives the same stupendous message as the one on the desktop:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows cannot find &amp;lsquo;http://127.0.0.1:%HTTPPORT%/apex/f?p=4950&amp;rsquo;. Make sure you typed the name correctly, and then try again.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So, you have to guess that you must download and run Oracle SQLDeveloper.&lt;/p&gt;
&lt;p&gt;When Oracle SQLDeveloper starts, it begins with a &amp;ldquo;Confirm Import Preferences&amp;rdquo; box which asks me if I want to import preferences from a previous SQL Developer installation.  The dialog has a list of &amp;ldquo;previous installations&amp;rdquo;, but it is empty.  You have to use your magic powers to guess that you need to click on a tiny magnifying glass icon on the side, to search for a previous installation.  It opens a file selection dialog which starts pointing to &amp;ldquo;roaming/SQLDeveloper&amp;rdquo;, and then you have to guess that you need to doubleclick one of its subdirectories.&lt;/p&gt;
&lt;p&gt;The process of importing preferences from the previous version takes forever, (entire minutes on a 4GHz i7-4790 with SATA3 SSD,) even though I hardly used that previous version: I just launched it once and closed it.&lt;/p&gt;
&lt;p&gt;My firewall shows that as soon as Oracle SQLDeveloper launches, it calls home, even as it is prompting me whether I would like to participate in their data collection scheme.  (&amp;ldquo;Allow automated usage reporting to Oracle.&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;When trying to create a connection, I am presented with a dialog with far more options than should be necessary, and I have to guess what to enter in various fields.  Trying with &amp;ldquo;SYS&amp;rdquo; for username yields an error message saying &amp;ldquo;ORA-28009: connection as SYS should be as SYSDBA or SYSOPER&amp;rdquo;, but then trying with &amp;ldquo;SYSDBA&amp;rdquo; and with &amp;ldquo;SYSOPER&amp;rdquo; gives &amp;ldquo;ORA-01017: invalid username/password; logon denied&amp;rdquo;.  So, again, I have to guess that &amp;ldquo;SYSTEM&amp;rdquo; must be the magic word.&lt;/p&gt;
&lt;p&gt;Also, it is not enough to check &amp;ldquo;Save password&amp;rdquo;, I have to also remember to click &amp;ldquo;Save&amp;rdquo; to save the saved password.&lt;/p&gt;
&lt;p&gt;Upon opening a brand spanking new (empty) database, it contains dozens of system tables.  A filter has already been applied, but it only excludes tables in some &amp;ldquo;recycle bin&amp;rdquo;.  It is possible to extend the filter to exclude most system tables, but it takes quite a bit of work, because they do not all obey a consistent naming pattern.&lt;/p&gt;
&lt;p&gt;There is a &amp;ldquo;manage database&amp;rdquo; option which opens up a purely informational page, nothing to manage there.&lt;/p&gt;
&lt;p&gt;So, it turns out that Oracle 11g Express Edition installed with a &amp;ldquo;sid&amp;rdquo; of &amp;ldquo;xe&amp;rdquo;, which is different from the one that I needed.  I do not know what this &amp;ldquo;sid&amp;rdquo; thing is, and I do not care, and frankly, it should not exist, but it does. So, I have to change the sid of my local instance. Luckily, there is an article on stackoverflow on how to do it: &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/3424544/773113&#34; target=&#34;_blank&#34;
   &gt;http://stackoverflow.com/a/3424544/773113&lt;/a&gt;  I decide that this is insanely complicated and opt to uninstall my local instance and re-install it from scratch, only to discover that nowhere during installation does oracle ask me for the sid that the local instance will have.&lt;/p&gt;
&lt;p&gt;The first time I invoke &lt;strong&gt;databaseMetaData. getImportedKeys()&lt;/strong&gt; it takes an exorbitant amount of time for the server to respond, (14 seconds on an i7-4790K with SATA3 SSD,) even on a freshly created, empty database.&lt;/p&gt;
&lt;p&gt;In Oracle SQL Developer, If you select a single table, the context menu allows you to drop it.  But if you select multiple tables, a different context menu is shown, which does not contain an option to drop them.  So, you have to do it table by table.&lt;/p&gt;
&lt;p&gt;In Oracle SQL Developer, there is a &amp;ldquo;Quick DDL&amp;rdquo; entry in the context menu. If you select multiple tables and activate this menu entry, you find out that it is anything but quick: it takes 4 minutes for 20 small tables.&lt;/p&gt;
&lt;p&gt;The dialog shown for lengthy operations has a &amp;ldquo;run in background&amp;rdquo; option. If you select this option, the dialog disappears and not a single hint of it remains anywhere to be seen.  So, you don&amp;rsquo;t know if it is running, and you have no way of checking its progress.&lt;/p&gt;
&lt;p&gt;Supposedly, &amp;ldquo;run in background&amp;rdquo; means &amp;ldquo;take this application-modal dialog out of my face so that I can continue using the application&amp;rdquo;.  But if you send a lengthy operation to the background, and then you try to do anything with the application, you get a message saying that &amp;ldquo;the connection is currently busy&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;connection is currently busy&amp;rdquo; dialog has two buttons: one says &amp;ldquo;Retry&amp;rdquo; and the other says &amp;ldquo;Abort&amp;rdquo;.  This makes you wonder what is going to happen if you click &amp;ldquo;Abort&amp;rdquo;: is it going to terminate the application?  Is it going to terminate the background process?  No, it turns out that it just cancels the dialog. How callous must an engineer be call the button &amp;ldquo;Abort&amp;rdquo; when they just mean &amp;ldquo;Cancel&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;In Oracle SQL Developer, whenever you issue a command which fails, you get extensive but completely lame error messages.  For example, the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error starting at line : 3 in command -
ALTER TABLE &amp;ldquo;APV_OWNER&amp;rdquo;.&amp;ldquo;CONNECTIBLES&amp;rdquo; DROP FOREIGN KEY
&amp;ldquo;SYS_C0010516&amp;rdquo;
Error report -
SQL Error: ORA-00905: missing keyword
00905. 00000 -  &amp;ldquo;missing keyword&amp;rdquo;
*Cause: &lt;br&gt;
*Action:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There is a problem with every single line of the above error report:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;Error starting at line : 3 in command -&amp;rdquo;&lt;/strong&gt;: When it says &amp;ldquo;line 3&amp;rdquo; it does not mean line 3 of the failed command, it means that the failed command was taken from line 3 of the original script.  But I chose to execute only that particular command from the script, so I really do not care to hear which line of the script it came from: it is the one and only one command that I chose to execute.  Furthermore, if the failed command was several lines long then this blatant lie about line 3 would have sent me on a wild goose chase, looking for an error at line 3 of the failed command.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ALTER TABLE &amp;ldquo;APV_{&amp;hellip;}&amp;rdquo;&lt;/strong&gt;: I know what command I issued, you see, I just issued it, so I do not need to see its full text again, inside the error report.  At most, the command should have been echoed when it was about to be executed.  Furthermore, Oracle does not help me at all to pinpoint the precise location within the command where the error occurred, (see further down,) so including the full text of the command with the error report without telling me where the error occurred is only adding insult to injury.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;Error report -&amp;rdquo;:&lt;/strong&gt; I know that this is an error report, I do not need to be told that it is an error report.  This is a Z.I.S. (Zero Information Statement.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;SQL Error: ORA-00905: missing keyword&amp;rdquo;:&lt;/strong&gt; A useless message which is giving me absolutely no hint as to what went wrong, and where. This is as good as saying &amp;ldquo;an error occurred&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;00905. 00000 -  &amp;ldquo;missing keyword&amp;rdquo;:&lt;/strong&gt; Oracle, you are repeating yourself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;quot;*Cause:&amp;quot;&lt;/strong&gt;  So, what is the cause?  How lame is this?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;quot;*Action:&amp;quot;&lt;/strong&gt;  So, what is the action?  How lame is this?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, as it turns out, Oracle Express Edition luckily does understand the exact same SQL syntax as the paid versions.  Now, let&amp;rsquo;s look at how Oracle SQL differs from other relational databases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Numeric data types do not correspond to machine data types.&lt;/strong&gt; Instead, they are all stored in Binary-Coded-Decimal (BCD) form, and they must be declared in ancient SQL syntax.  So, there is no such thing as INTEGER and BIGINT, there is only NUMBER(10) and NUMBER(19).  The corresponding stupidity holds true for real numbers.  This comes straight from the nineteen sixties.  The middle of the previous frigging century.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Identifiers can only be up to 30 characters long.&lt;/strong&gt;  I do not know whether the folks at Oracle have realized this, but for more than a decade now, we live in the third millennium.  Unlimited identifier length is what we have grown accustomed and expect for decades now. We use long identifiers, quite commonly in excess of 30 characters long, and we also use tools and techniques that automatically construct identifier names from other identifiers.  For example, a foreign key name is commonly constructed as &amp;ldquo;fk_&amp;rdquo; + tableName + &amp;ldquo;_&amp;rdquo; + keyColumnName.  This all breaks under Oracle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There are no catalogs, and schemas correspond to users.&lt;/strong&gt;  Which means that in order to create a schema, you need to create a user.  With a password.  And when creating a new user, you must specify something called a tablespace, which must have the magic name &amp;ldquo;USERS&amp;rdquo;, which will &lt;em&gt;hopefully&lt;/em&gt; work on any installation out there. All this means that automated schema creation suddenly becomes very tricky business with Oracle. I understand that features like this are very good for the job security of the sysadmins, but they are very bad for anyone wishing to get any useful work done.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The empty string is treated the same as NULL.&lt;/strong&gt; This is the most devastating difference between Oracle and other RDBMSes, and it alone is enough for me to never recommend Oracle for anything, to anyone. (Except my enemies.)  What it means is that if you write NULL, you get NULL, but if you write an empty string, you also get NULL. There is no option to change this behaviour, and no easy workaround.  This is incredibly lame.  Actually, words cannot express how lame this is.  The lameness of this is of epic proportions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There is no such thing as an AUTOINCREMENT column.&lt;/strong&gt;  Oracle supports SEQUENCEs, but it does not offer any easy way of specifying that a column should obtain its value from a sequence.  There is a Byzantine way of declaring a TRIGGER which gets triggered once a row is inserted and fills the value of a column with the next value from a sequence, but good luck in getting that bitch to work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There is no LIMIT or TOP clause.&lt;/strong&gt; In order to limit the number of rows returned by a query you have to embed it as a subquery of an absolutely idiomatic &amp;ldquo;SELECT * FROM (query) WHERE ROWNUM &amp;lt;= N&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The syntax is generally very poor&lt;/strong&gt; and lacking in features to make the life of the programmers easier.  For example, there are no niceties such as DROP TABLE IF EXISTS and CREATE OR REPLACE SEQUENCE, forcing you to write (and debug) tons of script, which in turn locks you with their product.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2017-08-18 11:22:14 UTC&lt;/p&gt;
&lt;p&gt;Masterpiece&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unspecified 2018-11-19 10:22:05 UTC&lt;/p&gt;
&lt;p&gt;Oracle never pleases users. All that company is good at is bureaucracy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>The GWX (Get Windows 10) KB3035583 trojan horse</title>
        <link>//localhost:1313/post/2015-07-the-gwx-get-windows-10-kb3035583-trojan/</link>
        <pubDate>Sun, 12 Jul 2015 23:43:43 +0000</pubDate>
        
        <guid>//localhost:1313/post/2015-07-the-gwx-get-windows-10-kb3035583-trojan/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/post/2015-07-the-gwx-get-windows-10-kb3035583-trojan/media/gwx.webp&#34;
	width=&#34;640&#34;
	height=&#34;341&#34;
	srcset=&#34;//localhost:1313/post/2015-07-the-gwx-get-windows-10-kb3035583-trojan/media/gwx_hu_1d006ee313620c5c.webp 480w, //localhost:1313/post/2015-07-the-gwx-get-windows-10-kb3035583-trojan/media/gwx_hu_c5b085568a8b4769.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;450px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;So, Microsoft has pushed this trojan horse to every single user of Windows on the planet.  It displays a Windows 10 logo on the taskbar, and it is basically telling you that not only &lt;strong&gt;you will&lt;/strong&gt; get Windows 10 as soon as it comes out, but you should right now begin acting as if you are looking forward to it. Because, you know, you are their biatch.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It installs on your machine without your consent;&lt;/li&gt;
&lt;li&gt;Once installed, you cannot &amp;ldquo;quit&amp;rdquo; it or &amp;ldquo;exit&amp;rdquo; it;  and&lt;/li&gt;
&lt;li&gt;You cannot find it anywhere to uninstall it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, it fits squarely within the definition of malware.&lt;/p&gt;
&lt;p&gt;GWX is delivered by means of an innocent looking optional update, KB3035583. The update is designated as &lt;em&gt;&amp;ldquo;Recommended&amp;rdquo;&lt;/em&gt;, and its description says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Install this update to resolve issues in Windows. For a complete listing of the issues that are included in this update, see the associated Microsoft Knowledge Base article for more information.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(I am not making this up, that&amp;rsquo;s exactly what it says; I suppose English is not their forte at Microsoft.)&lt;/p&gt;
&lt;p&gt;Of course, with dozens upon dozens of updates each time you check, which give you no clue as to what they are about, and instead each one of them refers you to some web page for more information, you don&amp;rsquo;t bother checking, and so you passively consent to this trojan horse being downloaded and installed on your computer.  If you click on &lt;em&gt;&amp;ldquo;More information&amp;rdquo;&lt;/em&gt;, you are taken to a web page which admits that update KB3035583 is nothing but an incredibly lame and stupid publicity stunt about the upcoming Windows 10.&lt;/p&gt;
&lt;p&gt;And so, as it turns out, that bit about resolving issues in Windows was &lt;em&gt;&lt;strong&gt;a fucking lie&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;How to get rid of the KB3035583 trojan horse:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In &lt;em&gt;Windows Update&lt;/em&gt; select &lt;em&gt;Change settings&lt;/em&gt;, and make sure that &lt;em&gt;&amp;ldquo;Give me recommended updates the same way I receive important updates&amp;rdquo;&lt;/em&gt; is unchecked.  This way, the fact that this is a &amp;ldquo;Recommended&amp;rdquo; update will not cause it to jump from the &amp;ldquo;Optional&amp;rdquo; updates list to the &amp;ldquo;Important&amp;rdquo; updates list.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;em&gt;Windows Update&lt;/em&gt; select &lt;em&gt;View update history&lt;/em&gt;, find KB3035583, and uninstall it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;em&gt;Windows Update&lt;/em&gt; click on &amp;ldquo;Check for updates&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;em&gt;Windows Update&lt;/em&gt; go to &lt;em&gt;Optional Updates&lt;/em&gt;, find KB3035583, and specify that you want it to be hidden.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And then in 2017 there is this: &lt;a class=&#34;external&#34; 
   href=&#34;https://betanews.com/2017/08/23/no-more-forced-windows-upgrade-downloads/&#34; target=&#34;_blank&#34;
   &gt;betanews.com: Microsoft will never again sneakily force Windows downloads on users&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Though it is unclear to me whether this is about Germany only or the whole world.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2015-09-27 05:24:14 UTC&lt;/p&gt;
&lt;p&gt;Yea but it still lists and keeps the check mark in it.So why hide it with the check mark in it.It won&amp;rsquo;t go away.Keeps always reloading with the check mark in it.So next time you do check for updates or have it set for auto then it will sneak in.Now I have to keep an eye on this every time now.I already deleted the patch.Someone should tell them to do a delete it off the list patch.Oh since I did delete the patch it now came up as an important one to install now.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>&#34;By using this site, you agree to the use of cookies&#34;</title>
        <link>//localhost:1313/post/2014-05-by-using-this-site-you-agree-to-use-of/</link>
        <pubDate>Fri, 02 May 2014 00:19:21 +0000</pubDate>
        
        <guid>//localhost:1313/post/2014-05-by-using-this-site-you-agree-to-use-of/</guid>
        <description>&lt;p&gt;If you live outside of Europe you might be lucky enough to have no idea what this is all about, but if you live in Europe you are probably sick and tired by now of this message popping up every time you first visit a site:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This site uses cookies to help deliver services. By using this site, you agree to the use of cookies. {Learn more} {Got it}&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The creators of these sites are not to blame for these messages; they are being forced to display them against their will, (and waste money and resources in doing so,) in order to comply with EU regulations. These messages are mandated by law.&lt;/p&gt;
&lt;p&gt;I mean, really, how about this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This site uses the Helvetica font to help deliver services. By using this site, you agree to the use of Helvetica. {Learn more} {Got it}&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Or this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This site uses TCP/IP to help deliver services. By using this site, you agree to the use of TCP/IP. {Learn more} {Got it}&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;All these statements make precisely the same amount of sense: &lt;strong&gt;&lt;em&gt;none.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The legislators who came up with the one about cookies are a bunch of technically illiterate ignoramuses who, in a fashion typical of politicians full of shit, have the audacity to be legislating on things they have absolutely no clue about.  They should be removed from office and prohibited from ever holding any job other than milking goats.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
