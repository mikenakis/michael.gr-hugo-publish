<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Software-Engineering on Michael&#39;s Blog</title>
        <link>//localhost:1313/tags/software-engineering/</link>
        <description>Recent content in Software-Engineering on Michael&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Michael Belivanakis (a.k.a. Mike Nakis)</copyright>
        <lastBuildDate>Fri, 24 Oct 2025 11:30:09 +0200</lastBuildDate><atom:link href="//localhost:1313/tags/software-engineering/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Technical debt</title>
        <link>//localhost:1313/p/technical-debt/</link>
        <pubDate>Wed, 17 Sep 2025 07:28:57 +0000</pubDate>
        
        <guid>//localhost:1313/p/technical-debt/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/technical-debt/media/sisyphus.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction
&lt;/h3&gt;&lt;p&gt;The term &amp;ldquo;technical debt&amp;rdquo; refers to messy source code, data, or architecture in a software system. It is commonly understood to represent a vague acknowledgement that the mess should probably be fixed by someone, somehow, sometime.&lt;/p&gt;
&lt;p&gt;People hearing the term &amp;ldquo;technical debt&amp;rdquo; for the first time are likely to guess what it means, in broad terms, and to understand that it is undesirable; however, the real detriment lies in a concept which, although alluded to by the term, is not spelled out, and therefore hidden. As a result, people often fail to grasp the grave implications of technical debt.&lt;/p&gt;
&lt;p&gt;This post sheds light at the hidden concept and shows the real problem with technical debt.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading:  &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;definition&#34;&gt;Definition
&lt;/h3&gt;&lt;p&gt;Technical debt is the entropy that keeps accumulating in a software system as more and more features keep being added without setting aside the time necessary to reorganize the system so as to properly accommodate the addition of those features. It happens to virtually every software project, virtually every time a new feature is added, and it is one of the biggest problems in software development.&lt;/p&gt;
&lt;h3 id=&#34;origin&#34;&gt;Origin
&lt;/h3&gt;&lt;p&gt;The term was coined by &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Ward_Cunningham&#34; title=&#34;Ward Cunningham&#34; target=&#34;_blank&#34;
   &gt;Ward Cunningham&lt;/a&gt; in 1992, when he needed to explain the problem to an economist. He used financial debt as a metaphor, in order to speak in a language that the economist would understand.&lt;/p&gt;
&lt;h3 id=&#34;explanation&#34;&gt;Explanation
&lt;/h3&gt;&lt;p&gt;Adding a feature without first restructuring the system to properly accommodate the change saves time in the short term, so the feature can be rolled out faster; however, doing so introduces messiness, which makes it more difficult to add the next feature, and to do any kind of work on the system from that moment on.&lt;/p&gt;
&lt;p&gt;This is like borrowing money to buy something right now instead of waiting until enough money has been set aside for the purchase: the problem is not only that the money will have to be paid back eventually; the problem is that interest now has to start getting paid on the borrowed money, and it has to keep getting paid every month, until the debt is paid back.&lt;/p&gt;
&lt;h3 id=&#34;the-real-problem&#34;&gt;The real problem
&lt;/h3&gt;&lt;p&gt;So, the problem with technical debt in software is not only that the restructuring of the software system will eventually have to happen; if that was the only problem, the restructuring could keep being postponed indefinitely; the problem is that day-to-day work on the entire system becomes more difficult, and keeps becoming more and more difficult with every added feature.&lt;/p&gt;
&lt;h3 id=&#34;consequences&#34;&gt;Consequences
&lt;/h3&gt;&lt;p&gt;Allowing technical debt to continue compounding without curtailing it can result in the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It can cause software projects to suffer, because there comes a point where the amount of effort required just for coping with technical debt is equal to the total work effort available, at which point very little gets done anymore.&lt;/li&gt;
&lt;li&gt;It can cause software projects to fail, because the work effort needed to reduce technical debt is also hampered by existing technical debt, so there comes a point where the project becomes unsalvageable and pretty much has to be thrown away and rewritten from scratch.&lt;/li&gt;
&lt;li&gt;Even before things get to that point, programmers start feeling unmotivated and unenthusiastic about making any change to the system, and sometimes declare features as impossible to implement, not because they are in principle impossible, but because they are untenable propositions in the current state of their system.&lt;/li&gt;
&lt;li&gt;Programmers start perceiving their job as a dreary chore, and may quit to find interesting and rewarding work elsewhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;The real harm of technical debt lies in the extra effort needed to get any work done in a software system, like interest that has to be paid on financial debt. This interest is the concept which is alluded to but not spelled out in the term &amp;ldquo;technical debt&amp;rdquo;, and this is what needs to be understood for the realization to sink in that the debt must be paid off as often as possible, and as early as possible, instead of letting it linger on.&lt;/p&gt;
&lt;p&gt;See also &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Technical_debt&#34; target=&#34;_blank&#34;
   &gt;Technical debt in Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: vector image of Sisyphus pushing the rock up the hill, by michael.gr, based on raster image generated by ChatGPT from the prompt &amp;ldquo;please generate an image of Sisyphus pushing the rock up the hill; make the rock look more like a rock and less like a ball; make it landscape, in cozy coloring book style, black and white.&amp;rdquo; and &amp;ldquo;please make the hill less steep, and remove some detail to make the image more simple.&amp;rdquo;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Refactoring: strong vs weak</title>
        <link>//localhost:1313/p/refactoring-strong-vs-weak/</link>
        <pubDate>Fri, 12 Sep 2025 10:50:44 +0000</pubDate>
        
        <guid>//localhost:1313/p/refactoring-strong-vs-weak/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/refactoring-strong-vs-weak/images/refactoring.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;abstract&#34;&gt;Abstract
&lt;/h3&gt;&lt;p&gt;Two distinctly different widely used meanings of the term &lt;em&gt;&lt;strong&gt;code refactoring&lt;/strong&gt;&lt;/em&gt; are identified and named:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changing how code works, without changing the requirements that it fulfills (refactoring in the weak sense)&lt;/li&gt;
&lt;li&gt;Changing how code is expressed, without changing how it works (refactoring in the strong sense)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;the-common-understanding&#34;&gt;The common understanding
&lt;/h3&gt;&lt;p&gt;The term &lt;em&gt;&lt;strong&gt;refactoring&lt;/strong&gt;&lt;/em&gt; is commonly understood within the software engineering discipline to have the meaning documented by Martin Fowler in his &lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/bliki/DefinitionOfRefactoring.html&#34; target=&#34;_blank&#34;
   &gt;Definition Of Refactoring&lt;/a&gt; post:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Refactoring (noun): a change made to the internal structure of software to make it easier to understand and cheaper to modify without changing its observable behavior.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In the case of a software application, the observable behavior is in essence the set of requirements that it fulfills. (And also its look and feel: if you change the font, this is not refactoring.) In the case of a module, or a class, or an individual method, the observable behavior is the mapping of parameter values to results, contracts fulfilled, and side-effects, if any.&lt;/p&gt;
&lt;p&gt;Let us call these things &lt;em&gt;&lt;strong&gt;requirements&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Note that according to this widely used sense of refactoring, we are allowed to take any piece of code, throw it away, and replace it with an entirely different piece of code, and call what we just did refactoring, as long as requirements are still being fulfilled as before.&lt;/p&gt;
&lt;p&gt;The trick is, of course, how can we tell, or who is to say, that requirements are still being fulfilled. It should come as no surprise that in many cases things do not go as intended:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A change in the code might have some subtle consequences that we were not aware of, so we might be thinking that requirements are still fulfilled, while they are not.&lt;/li&gt;
&lt;li&gt;Requirements are never entirely unambiguous, so they might be fulfilled according to our interpretation, but not according to someone else&amp;rsquo;s interpretation.&lt;/li&gt;
&lt;li&gt;Sometimes a combination of the above may occur.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, the requirement to &amp;ldquo;create an empty file&amp;rdquo; might initially be fulfilled by two lines of code that create a binary file and immediately close it; then, one day, someone might decide to refactor those two lines of code by replacing them with a single invocation to a create-file-from-string function, passing it the empty string. One line of code is better than two lines of code, right? What could possibly go wrong? Well, if by &amp;ldquo;empty file&amp;rdquo; the requirements meant a file with no text in it, this refactoring was probably okay; however, if by &amp;ldquo;empty file&amp;rdquo; the requirements actually meant a zero-length file, then this refactoring may not have been okay, because the create-file-from-string function might, unbeknownst to us, create a file that contains a UTF8 BOM. This is an example of both things going wrong: the requirements were vague, and the &amp;ldquo;refactoring&amp;rdquo; had subtle unintended consequences.&lt;/p&gt;
&lt;p&gt;Hopefully we have enough tests in place to catch such violations of the requirements, but this does not always work either, because the tests usually verify &lt;em&gt;&lt;strong&gt;someone&amp;rsquo;s&lt;/strong&gt;&lt;/em&gt; interpretation of the requirements, and they usually do so only &lt;em&gt;&lt;strong&gt;partially&lt;/strong&gt;&lt;/em&gt;, since you cannot anticipate and test for every possible scenario.&lt;/p&gt;
&lt;h3 id=&#34;the-mathematical-understanding&#34;&gt;The mathematical understanding
&lt;/h3&gt;&lt;p&gt;There is another sense of refactoring that we are also familiar with: the sense used by Integrated Development Environments (IDEs) that perform useful transformations on code, such as renaming a variable, re-ordering the parameters of a function, etc.&lt;/p&gt;
&lt;p&gt;The transformations performed by IDEs tend to adhere to the mathematical sense of refactoring: the code is transformed in such a way that the new code is &lt;em&gt;&lt;strong&gt;equivalent&lt;/strong&gt;&lt;/em&gt; to the old code, just as in mathematics the refactoring of &lt;strong&gt;x = 2y + 2z&lt;/strong&gt; yields &lt;strong&gt;x = 2(y + z)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Note that when we perform refactoring operations using an IDE, we usually feel no need to re-run the tests, because the new code works exactly as the old code, barring any bugs in the IDE, or any foolish hacks from our side, such as weak typing or binding by name.&lt;/p&gt;
&lt;h3 id=&#34;summing-it-up&#34;&gt;Summing it up
&lt;/h3&gt;&lt;p&gt;The bottom line of all this is that the term refactoring is being widely used within the software engineering discipline to mean two distinctly different things. These two things are so different from each other as to warrant taking notice of this fact, and making the distinction explicit:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The weak (common) sense of refactoring:&lt;/p&gt;
&lt;p&gt;Transformations that (hopefully) result in no change in how requirements are fulfilled.&lt;/p&gt;
&lt;p&gt;They are usually performed manually by the programmer, they may involve extensive changes in the way the code works, and they require thorough testing to guarantee that nothing was inadvertently broken.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The strong (mathematical) sense of refactoring:&lt;/p&gt;
&lt;p&gt;Transformations that result in code that is functionally equivalent to what it was before.&lt;/p&gt;
&lt;p&gt;They are usually performed automatically by the IDE at the programmer&amp;rsquo;s request, they tend to be limited or superficial, they tend to change how code is expressed but not how it works, and they typically do not need to be followed by a round of testing, because the code is typically guaranteed to behave the same way as before.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Also of interest is Martin Fowler&amp;rsquo;s post on the &lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/bliki/EtymologyOfRefactoring.html&#34; target=&#34;_blank&#34;
   &gt;Etymology of Refactoring&lt;/a&gt;.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Code review memes</title>
        <link>//localhost:1313/p/code-review-memes/</link>
        <pubDate>Fri, 06 Jun 2025 16:33:33 +0000</pubDate>
        
        <guid>//localhost:1313/p/code-review-memes/</guid>
        <description>&lt;p&gt;GitLab allows the insertion of images in code review comments. They make it really easy: if you have an image on the clipboard, you can just paste it into a comment. I suppose the feature exists so that programmers can exchange screenshots, graphs, etc. to explain complicated matters during code review.&lt;/p&gt;
&lt;p&gt;I like to use this feature to post memes.&lt;/p&gt;
&lt;p&gt;Here is my collection of the most useful code review memes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/xi8cf.jpg&#34;
	width=&#34;700&#34;
	height=&#34;474&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/xi8cf_hu_83198d77afe5a180.jpg 480w, //localhost:1313/p/code-review-memes/images/xi8cf_hu_2d204830de650aa5.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;354px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/9wgwzh.jpg&#34;
	width=&#34;505&#34;
	height=&#34;494&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/9wgwzh_hu_fe087c1ed5cc807e.jpg 480w, //localhost:1313/p/code-review-memes/images/9wgwzh_hu_a705937959023e8e.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;102&#34;
		data-flex-basis=&#34;245px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/e040f790ce334dbf7c59b317639c8b17.jpg&#34;
	width=&#34;640&#34;
	height=&#34;640&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/e040f790ce334dbf7c59b317639c8b17_hu_1783e935ee205db7.jpg 480w, //localhost:1313/p/code-review-memes/images/e040f790ce334dbf7c59b317639c8b17_hu_df4aee738074b345.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/318fbb9b2a30f5f06fc3b6cbe2bfdd25.jpg&#34;
	width=&#34;1000&#34;
	height=&#34;720&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/318fbb9b2a30f5f06fc3b6cbe2bfdd25_hu_dea43428b171f8d4.jpg 480w, //localhost:1313/p/code-review-memes/images/318fbb9b2a30f5f06fc3b6cbe2bfdd25_hu_2c65ab078ab6b103.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;333px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/Darth_Vader_Noooo_Banner.jpg&#34;
	width=&#34;1200&#34;
	height=&#34;675&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/Darth_Vader_Noooo_Banner_hu_9fd7d021300af31a.jpg 480w, //localhost:1313/p/code-review-memes/images/Darth_Vader_Noooo_Banner_hu_7a09a2f35f6835cb.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/oh-no-no-dd7f7d8f8e.jpg&#34;
	width=&#34;600&#34;
	height=&#34;389&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/oh-no-no-dd7f7d8f8e_hu_4ad46eea13d7002b.jpg 480w, //localhost:1313/p/code-review-memes/images/oh-no-no-dd7f7d8f8e_hu_930f6a09c16b02c7.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;154&#34;
		data-flex-basis=&#34;370px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/9wguxc.jpg&#34;
	width=&#34;645&#34;
	height=&#34;387&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/9wguxc_hu_99fe9e66afdd147e.jpg 480w, //localhost:1313/p/code-review-memes/images/9wguxc_hu_338da9ef351055a2.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/bg,f8f8f8-flat,750x,075,f-pad,750x1000,f8f8f8.u.jpg&#34;
	width=&#34;750&#34;
	height=&#34;1000&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/bg,f8f8f8-flat,750x,075,f-pad,750x1000,f8f8f8.u_hu_6854864273654432.jpg 480w, //localhost:1313/p/code-review-memes/images/bg,f8f8f8-flat,750x,075,f-pad,750x1000,f8f8f8.u_hu_9a2d85618981b68.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/9wh26z.jpg&#34;
	width=&#34;673&#34;
	height=&#34;371&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/9wh26z_hu_f5aa6c4e2d8ed651.jpg 480w, //localhost:1313/p/code-review-memes/images/9wh26z_hu_b71a5884f01ef031.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;435px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/9wh0pu.jpg&#34;
	width=&#34;500&#34;
	height=&#34;515&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/9wh0pu_hu_bde49d5e3dabbf5b.jpg 480w, //localhost:1313/p/code-review-memes/images/9wh0pu_hu_3ed645cdef73e00a.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;97&#34;
		data-flex-basis=&#34;233px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/9wgzsg.jpg&#34;
	width=&#34;706&#34;
	height=&#34;353&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/9wgzsg_hu_914972273403c1bf.jpg 480w, //localhost:1313/p/code-review-memes/images/9wgzsg_hu_941da15b4173e133.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/9wgyqm.jpg&#34;
	width=&#34;668&#34;
	height=&#34;374&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/9wgyqm_hu_6a2ad906ecaca1ab.jpg 480w, //localhost:1313/p/code-review-memes/images/9wgyqm_hu_c5a7fca663f3d881.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;428px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/1bq1b7.jpg&#34;
	width=&#34;250&#34;
	height=&#34;298&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/1bq1b7_hu_235471bf726297b4.jpg 480w, //localhost:1313/p/code-review-memes/images/1bq1b7_hu_1bba7ea8f3fe2199.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;83&#34;
		data-flex-basis=&#34;201px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/0a1247a0c9dc93afebfa57647e1149a39093c540.jpeg&#34;
	width=&#34;474&#34;
	height=&#34;307&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/0a1247a0c9dc93afebfa57647e1149a39093c540_hu_6955ae97cd1b5b7a.jpeg 480w, //localhost:1313/p/code-review-memes/images/0a1247a0c9dc93afebfa57647e1149a39093c540_hu_b242d1a38374488.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;154&#34;
		data-flex-basis=&#34;370px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/code-review-memes/images/you-shall-not-pass.jpg&#34;
	width=&#34;1213&#34;
	height=&#34;682&#34;
	srcset=&#34;//localhost:1313/p/code-review-memes/images/you-shall-not-pass_hu_ec4ed8fe70f7e998.jpg 480w, //localhost:1313/p/code-review-memes/images/you-shall-not-pass_hu_8fa80164e133400b.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;
&lt;/p&gt;</description>
        </item>
        <item>
        <title>Immutability Assessment</title>
        <link>//localhost:1313/p/immutability-assessment/</link>
        <pubDate>Mon, 02 Jun 2025 13:16:41 +0000</pubDate>
        
        <guid>//localhost:1313/p/immutability-assessment/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/immutability-assessment/images/diamond.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract
&lt;/h2&gt;&lt;p&gt;The need is identified for programmatically ascertaining, in languages like C# and Java, the immutability of certain objects used in situations where they are expected to be immutable. The technicalities of immutability assessment are discussed. A mechanism is described for achieving it.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem
&lt;/h2&gt;&lt;p&gt;Raise your hand if you have ever had to troubleshoot a bug that manifested itself in mysterious ways, defied rational explanation, tenaciously evaded detection, made you rage at the absurdity of the observed behavior, and after much weeping and wailing and gnashing of teeth, turned out to be due to one of the following reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Inadvertently mutating an object that has been added as a key in a hash map.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inadvertently mutating an object that has been passed to another thread.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;in general:&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;One piece of code mutating an object that another piece of code groundlessly assumes that it remains unchanged.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These mishaps of course happen due to the fact that the objects involved should have been immutable, but they were not. If an object is immutable, nobody can mutate it, and therefore nobody has to &lt;em&gt;assume&lt;/em&gt; that it will not change.&lt;/p&gt;
&lt;p&gt;So, could hash maps somehow require that their keys be immutable? Could threads somehow require that objects shared among them be immutable?&lt;/p&gt;
&lt;p&gt;This leads us to the more general question of how to ascertain immutability, which is certainly not an easy task. Most programmers don&amp;rsquo;t even consider it; few talk about it; even fewer attempt it. Programmers all over the world are accustomed to routinely using objects in situations where immutability is an absolute requirement, but without ever ascertaining it, essentially &lt;em&gt;praying&lt;/em&gt; that the objects be immutable.&lt;/p&gt;
&lt;h2 id=&#34;compiler-enforced-immutability&#34;&gt;Compiler-Enforced Immutability
&lt;/h2&gt;&lt;p&gt;Inadvertent mutation is not a problem in purely functional programming languages, where there simply is no such thing as mutation. However, most programmers do not use such languages, because they are cumbersome to work with. Most programmers use languages like Java and C#, which are not purely functional, so they allow mutation, and so inadvertent mutation can sometimes happen.&lt;/p&gt;
&lt;p&gt;Java and C# do support a few constructs for defining invariable (final/readonly) class members, but they are woefully inadequate. Systematic compiler support for declaring and requiring immutability would greatly help to reduce the volume of mistakes being made, but nothing like that exists, and even if it did exist, it would not be a panacea, because there are situations where the compiler cannot help.&lt;/p&gt;
&lt;p&gt;Since compiler-enforced immutability is not available, we have to enforce it ourselves, which means that we have to programmatically detect immutability and ascertain it.&lt;/p&gt;
&lt;p&gt;Languages like Java and C# offer full reflection support, so we can examine every field of every type, (static analysis,) and we can even examine the values of fields of instances. (Dynamic analysis.) Furthermore, these languages compile into intermediate code, which is relatively easy to parse and reason about, meaning that we can even analyze executable code if we want to. (More static analysis.)&lt;/p&gt;
&lt;p&gt;So, the question is what to analyze, and how.&lt;/p&gt;
&lt;h3 id=&#34;superficial-vs-deep-immutability&#34;&gt;Superficial vs. Deep Immutability
&lt;/h3&gt;&lt;p&gt;Many classes have the term &amp;ldquo;immutable&amp;rdquo; in their name, but they are only superficially immutable. Take a generic immutable collection or example: &lt;code&gt;ImmutableCollection&amp;lt;T&amp;gt;&lt;/code&gt;. Let us trust that it does in fact behave perfectly immutably, and therefore it does, arguably, deserve to be called immutable; let us now ask: would an instance of this class be safe to pass to another thread? The answer is that it depends on the actual type of the generic parameter: If &lt;code&gt;T&lt;/code&gt; is immutable, it is safe; but if &lt;code&gt;T&lt;/code&gt; is mutable, then it is absolutely not safe.&lt;/p&gt;
&lt;p&gt;So, in order to reap any benefits whatsoever from immutability, it must be deep immutability. Shallow immutability is irrelevant. Please keep this in mind, as it has severe implications in our quest to ascertain the immutability of anything.&lt;/p&gt;
&lt;h3 id=&#34;static-analysis&#34;&gt;Static Analysis
&lt;/h3&gt;&lt;p&gt;The term &amp;ldquo;static analysis&amp;rdquo; refers to examining the code that makes a program, (as written, or as compiled,) but not the state of the program as it runs. Consequently, static analysis can examine the definitions of data structures, but not the actual contents of those data structures during runtime.&lt;/p&gt;
&lt;p&gt;A popular but naïve understanding of immutability is that it is an inherent characteristic of types, and that the instances of the types (i.e. the objects) simply follow suit. According to this understanding, all we need to do is to ascertain that a certain type is immutable, and from that moment on we know that all of its instances are immutable.&lt;/p&gt;
&lt;p&gt;This understanding is not entirely false, but it is very limiting, because it means that only concrete and non-extensible (a.k.a. final, sealed) types can potentially be assessed as immutable: All interfaces must necessarily be considered as mutable, because we have no idea how they may be implemented, and all abstract or simply extensible types must also necessarily be considered as mutable, because we have no idea how they may be extended.&lt;/p&gt;
&lt;p&gt;This poses an insurmountable problem if we wanted to have, say, a queue for exchanging messages between threads, where the messages are organized in a class hierarchy: such a queue would not be able to ascertain the immutability of the messages it handles, because all it knows is the base-most &amp;lsquo;Message&amp;rsquo; class, which is necessarily extensible, and therefore mutable, as far as static analysis can tell.&lt;/p&gt;
&lt;p&gt;Now, consider that many perfectly immutable classes tend to be passed around as interfaces, (e.g. &lt;code&gt;Comparer&lt;/code&gt;, &lt;code&gt;Hasher&lt;/code&gt;, &lt;code&gt;Predicate&lt;/code&gt;, all sorts of stateless converters, etc.) that these interfaces are often stored in fields, and that a field of mutable type makes the class containing that field also mutable. It quickly becomes evident that static analysis can only work in a universe where no abstraction is utilized; however, we do not live in such a universe: we make use of languages like Java and C# precisely because we want the benefits of &lt;em&gt;unlimited&lt;/em&gt; abstraction.&lt;/p&gt;
&lt;p&gt;One final nail in the coffin of static analysis is the issue of delayed immutability.&lt;/p&gt;
&lt;h3 id=&#34;delayed-immutability&#34;&gt;Delayed Immutability
&lt;/h3&gt;&lt;p&gt;Some objects begin life as mutable, so that they can undergo some non-trivial initialization, and become immutable later, once initialization is complete. This behavior is necessary when creating cyclic graphs of immutable objects, or when creating an immutable object while loading its contents from some
external storage. (Alternative terms used by others for this kind of immutability are &lt;em&gt;Freezing&lt;/em&gt; and &lt;em&gt;Popsicle immutability&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;There is no standard way of representing delayed immutability, so let me propose one real quick:&lt;/p&gt;
&lt;p&gt;Let there be a &lt;code&gt;SelfAssessing&lt;/code&gt; interface, which is to be implemented by any class that utilizes delayed immutability. This interface is to have just one method, &lt;code&gt;IsImmutable()&lt;/code&gt;, which is expected to return &lt;code&gt;false&lt;/code&gt; for as long as the object is mutable, and to start returning &lt;code&gt;true&lt;/code&gt; once the object becomes immutable.&lt;/p&gt;
&lt;p&gt;Note that static analysis is by nature limited to examining types, but delayed immutability requires invoking a method of an instance of a type. Thus, static analysis completely fails to assess delayed immutability. Furthermore, a delayed immutable may appear as a field in any type, meaning that static analysis fails to assess potentially any type.&lt;/p&gt;
&lt;p&gt;Since static analysis fails in the presence of abstraction and/or delayed immutability, it follows that we have to examine not just types, but also the instances of types in the running software system. This calls for &lt;em&gt;dynamic analysis&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;dynamic-analysis&#34;&gt;Dynamic Analysis
&lt;/h3&gt;&lt;p&gt;The term &amp;ldquo;dynamic analysis&amp;rdquo; refers to examining various aspects of a software system as it runs. In some cases the aim is to examine the behavior of the software, in other cases (such as the case at hand) it is to examine the data structures it creates. Dynamic analysis may require (and in the case at hand it does require) static analysis as a prerequisite.&lt;/p&gt;
&lt;p&gt;With dynamic analysis we can look past the advertised type of a field, which may be abstract, and obtain the instance stored in the field, (the value of the field,) in order to find out the actual, concrete type of that instance.&lt;/p&gt;
&lt;p&gt;Once we have the concrete type of an instance, we can assess whether it is immutable, and this may involve recursively assessing any instances referenced by that instance. If everything is immutable, then and only then can the containing instance assessed as immutable.&lt;/p&gt;
&lt;p&gt;To make all of this work, we begin with static analysis where we use reflection to examine a type with the goal of giving it one of &lt;em&gt;three&lt;/em&gt; possible assessments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mutable&lt;/li&gt;
&lt;li&gt;Immutable&lt;/li&gt;
&lt;li&gt;Inconclusive&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These type assessments are issued as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;mutable&lt;/strong&gt; type assessment is issued if:
&lt;ul&gt;
&lt;li&gt;The type has any fields that are variable, (non-final/non-readonly,) because such fields are mutable no matter what their advertised type (field type) is.&lt;/li&gt;
&lt;li&gt;The type has nothing but invariable fields, but one or more of them is of an advertised type that has received a mutable assessment, because this means that the containing type is not deeply immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;immutable&lt;/strong&gt; type assessment is issued if a type consists exclusively of fields that are both invariable and of an advertised type which has received an immutable assessment.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;inconclusive&lt;/strong&gt; type assessment is issued if:
&lt;ul&gt;
&lt;li&gt;The type is abstract or extensible (non-final/non-sealed.)&lt;/li&gt;
&lt;li&gt;The type is self-assessing.&lt;/li&gt;
&lt;li&gt;The type contains any fields of an advertised type that has in turn received an inconclusive assessment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the above are &lt;em&gt;type&lt;/em&gt; assessments, issued on types, by static analysis alone.&lt;/p&gt;
&lt;p&gt;Every instance of a type that has received a mutable or immutable assessment is in turn mutable or immutable without the need to examine the contents of the instance; however, every instance of a type that has received an inconclusive assessment must be further examined to issue a final assessment for that instance only.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The value of each field must be obtained from the instance, and assessment must recursively be applied on that value.&lt;/li&gt;
&lt;li&gt;If the type is self-assessing, then the &lt;code&gt;IsImmutable()&lt;/code&gt; method must be invoked on the instance, to ask it whether it is immutable or not.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both type assessment and instance assessment can be expensive; however, note the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Once a type assessment has been issued, it will never change, so it can be
cached, and never recomputed again.&lt;/li&gt;
&lt;li&gt;Instance assessments can be requested only from within assertions, meaning
that they can incur zero runtime overhead on production.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that for static analysis we employed nothing but reflection to examine the fields of a type, and for dynamic analysis we also employed nothing but reflection to examine the values of fields of instances, so no code analysis was necessary. However, for the sake of completeness, let us also take a brief look at code analysis.&lt;/p&gt;
&lt;h3 id=&#34;code-analysis&#34;&gt;Code analysis
&lt;/h3&gt;&lt;p&gt;There is a school of thought according to which the answer to the immutability assessment question lies in analyzing the executable instructions that comprise a type to determine whether any fields are mutated by code outside of the constructor.&lt;/p&gt;
&lt;p&gt;The problem with code analysis is that it is a form of static analysis, so it suffers from the disadvantages of static analysis that were previously explained.&lt;/p&gt;
&lt;p&gt;Suppose that code analysis determines that a type does not mutate any fields outside of its constructor; suppose, however, that the type contains a field of abstract type, which gets initialized from a constructor parameter; is this type mutable or immutable? Obviously, it depends on the concrete type of the instance that will be stored, at runtime, in that field. So, we are back at square one, where static analysis simply does not work in the face of abstraction. Therefore, code analysis is not the answer.&lt;/p&gt;
&lt;p&gt;Code analysis could potentially be useful, as a supplement to dynamic analysis, in the following ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In some cases, a type contains a field which is written by a method other than the constructor. For this to work, the field has to be variable. (Non-final/non-readonly.) Thus, with the use of reflection alone, this type will be assessed as mutable. However, it may be that the method which writes the field makes sure that the field is only written once during the lifetime of the instance, and that it gets written before it is ever read, so it will never appear to mutate as far as external observers can tell. Thus, the type is effectively immutable. It is in theory possible (though not easy) for code analysis to detect that the field is treated in this way, thus allowing the type to be assessed as immutable.&lt;/li&gt;
&lt;li&gt;Sometimes a type contains fields that are only written by the constructor, but the programmer who wrote that type forgot to declare them as invariable (final/readonly) and did not pay attention to the warnings / inspections / analysis messages. If we were to only use reflection, these fields would be considered variable, so the type would in turn be assessed as mutable. Code analysis can detect that the fields are not written outside of the constructor, allowing them to be assessed as invariable, and therefore the type to be assessed as immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;preassessment&#34;&gt;Preassessment
&lt;/h3&gt;&lt;p&gt;There exist types that would normally receive a mutable assessment, but we know for sure that they are practically immutable. A famous example of such a type, both in Java and in C#, is class &lt;code&gt;String&lt;/code&gt;. In such cases, we must be able to &lt;em&gt;preassess&lt;/em&gt; the type as immutable, which means to assign an  immutable assessment to the type, without analyzing it.&lt;/p&gt;
&lt;p&gt;Note that preassessment constitutes a promise, and promises can be false. If a type which is actually mutable is mistakenly preassessed as immutable, bad things are bound to happen.&lt;/p&gt;
&lt;h2 id=&#34;generic-shallow-preassessment&#34;&gt;Generic Shallow Preassessment
&lt;/h2&gt;&lt;p&gt;Some generic types are effectively immutable containers. In Java, which uses type erasure, these are essentially containers of elements of type &lt;code&gt;object&lt;/code&gt;, so they are by definition inconclusive; however, in C# the type of the generic type argument is known at runtime, so we do better than that. When a generic effectively immutable container type is constructed with an actual type parameter, the immutability of the resulting type depends on the immutability of that parameter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the generic type parameter is a mutable type, then the constructed generic container type is mutable, so instances of that type do not need to be assessed.&lt;/li&gt;
&lt;li&gt;If the generic type parameter is an immutable type, then the constructed generic container type is immutable, so again, instances of that type do not need to be assessed.&lt;/li&gt;
&lt;li&gt;If the generic type parameter is inconclusive, then the constructed generic container type is inconclusive, which means that for every instance of that type, all elements in the container must be assessed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to be able to assess the elements of a container, the preassessment for the container must include an object known as a &lt;em&gt;deconstructor&lt;/em&gt;. Dynamic analysis will be invoking the deconstructor to enumerate the elements contained within each instance of the container, so that each element can be assessed. Deconstructors are generally trivial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The deconstructor for collections simply yields all the elements of the collection.&lt;/li&gt;
&lt;li&gt;The deconstructor for maps/dictionaries simply yields all the mappings. (Map entries / key-value pairs.)&lt;/li&gt;
&lt;li&gt;The deconstructor for &lt;code&gt;Lazy&amp;lt;T&amp;gt;&lt;/code&gt; simply yields the one and only value contained within the lazy object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Preassessment is mainly intended for types that have been defined by others, and thus we cannot modify their source code. For types that we write ourselves, we want a finer level of control: we want to be able to override the assessment of specific fields only, and allow all other fields to be assessed the normal way, to catch situations where we thought that some field was immutable, while in fact assessment of that field shows that it is not immutable. For that, we need &lt;em&gt;field overrides&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;field-overrides&#34;&gt;Field Overrides
&lt;/h3&gt;&lt;p&gt;Sometimes a field is variable, but we want to promise that we will only vary it in an effectively immutable way. For such cases, there must be an annotation/attribute that we can attach to that field, to indicate that analysis should treat the field as invariable.&lt;/p&gt;
&lt;h3 id=&#34;array-field-overrides&#34;&gt;Array Field Overrides
&lt;/h3&gt;&lt;p&gt;Arrays are by definition mutable in Java and C#, and by extension so is any type that contains an array field, even if the field itself is invariable. If we want to be able to create an immutable type that contains an array field, there must be an annotation/attribute that we can attach to that array field, to indicate that analysis should treat the array itself as invariable.&lt;/p&gt;
&lt;h3 id=&#34;elucidation&#34;&gt;Elucidation
&lt;/h3&gt;&lt;p&gt;Once we have immutability assessment working as described in the preceding sections, a new challenge becomes apparent: sometimes, a data structure that was intended to be immutable will be assessed as mutable due to some tiny programmer mistake. If the data structure is large and complex, it might not be obvious where the mistake is. The programmer will receive a mutable assessment, but will not know why it was given and where to look to find the problem.&lt;/p&gt;
&lt;p&gt;For this reason, every mutable instance assessment must come with a sentence explaining to the programmer why the assessment was issued. Since every mutable instance assessment typically has one or more other assessments that are the reasons that led to it, these sentences will often form entire trees, each sentence being further explained by nested sentences.&lt;/p&gt;
&lt;p&gt;I call this feature elucidation.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Eric Lippert&amp;rsquo;s must-read post about the different kinds of immutability:
&lt;a class=&#34;external&#34; 
   href=&#34;https://ericlippert.com/2007/11/13/immutability-in-c-part-one-kinds-of-immutability/&#34; target=&#34;_blank&#34;
   &gt;Immutability in C# Part One: Kinds of Immutability&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;appendix&#34;&gt;Appendix
&lt;/h2&gt;&lt;p&gt;Immutability assessment is awesome, but the more the compiler can do for us, the better.&lt;/p&gt;
&lt;p&gt;Here are some examples of what compilers of (non-purely functional) programming languages could be doing for us in the direction of compiler-enforced immutability:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A language could support an &amp;lsquo;immutable&amp;rsquo; class modifier, which would require the class to contain only immutable members. An immutable class may not extend a mutable class, and a mutable class may not extend an immutable class. (Although a mutable class may extend a class which has not been marked as immutable, even if that class happens to be immutable.)&lt;/li&gt;
&lt;li&gt;A language could support an &amp;lsquo;immutable&amp;rsquo; modifier for function arguments and for fields, requiring that they may only be assigned from concrete types that are immutable, or from other fields or function arguments that are also immutable.&lt;/li&gt;
&lt;li&gt;A language could support an &amp;lsquo;immutable&amp;rsquo; generic parameter constraint, which would mandate that only immutable types can be used as generic type arguments.&lt;/li&gt;
&lt;li&gt;A language could support a &amp;lsquo;stable&amp;rsquo; field modifier, allowing a mutable field to appear in an immutable class, and acting as a promise that the field will only be mutated in a way which upholds effective immutability.&lt;/li&gt;
&lt;li&gt;A language could support a &amp;lsquo;stable array&amp;rsquo; field modifier for array fields, allowing an array to appear in an immutable class, and acting as a promise that the contents of the array will either not be mutated, or they will only be mutated in a way which upholds effective immutability.&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Cover image from &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/icon/diamond-4452869/&#34; target=&#34;_blank&#34;
   &gt;Oleksandr Panasovskyi from The Noun Project&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Scratch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(Ignore)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As it turns out, the mutability of value types is largely irrelevant, as explained here:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://mustoverride.com/tuples%5C_structs/&#34; target=&#34;_blank&#34;
   &gt;Vladimir Sadov: &amp;ldquo;C# Tuples. Why mutable structs?&amp;rdquo;&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Human-readable names of dotnet types in C# notation</title>
        <link>//localhost:1313/p/human-readable-names-of-dotnet-types-in-c%23-notation/</link>
        <pubDate>Sun, 25 May 2025 09:18:08 +0000</pubDate>
        
        <guid>//localhost:1313/p/human-readable-names-of-dotnet-types-in-c%23-notation/</guid>
        <description>&lt;h3 id=&#34;summary&#34;&gt;Summary
&lt;/h3&gt;&lt;p&gt;Type names as reported by the dotnet runtime are in a cryptic, non-human-readable format. Attempts by many to solve this problem have generally been naive, incomplete, and clunky. A library that gets the job done right is presented.&lt;/p&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The problem
&lt;/h3&gt;&lt;p&gt;PEARL: In dotnet, the &lt;code&gt;System.Type.Name&lt;/code&gt; and &lt;code&gt;System.Type.FullName&lt;/code&gt; properties return type names in a cryptic format which is not human-readable and bears very little resemblance to the names of the same types as they appear in C# source code.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Try this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Console.WriteLine( typeof( int ).Name );&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;int&lt;/code&gt;, you get &lt;code&gt;Int32&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Try this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class Outer{ public class Inner; }&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Console.WriteLine( typeof( Outer.Inner ).FullName );&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;Outer.Inner&lt;/code&gt; you get &lt;code&gt;Outer+Inner&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Try this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Console.WriteLine( typeof( Dictionary&amp;lt;,&amp;gt; ).Name );&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;Dictionary&amp;lt;,&amp;gt;&lt;/code&gt; you get &lt;code&gt;Dictionary`2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Try this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Console.WriteLine( new Dictionary&amp;lt;int,System.DateTime&amp;gt;().GetType().FullName );&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;System.Collections.Generic.Dictionary&amp;lt;int, System.DateTime&amp;gt;&lt;/code&gt; you get &lt;code&gt;System.Collections.Generic.Dictionary`2[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.DateTime, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Try this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;class C { public int? Field; }&lt;/code&gt;
&lt;code&gt;Console.WriteLine( typeof( C ).GetField( &amp;quot;Field&amp;quot; )!.FieldType.FullName );&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;int?&lt;/code&gt; you get &lt;code&gt;System.Nullable1[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The examples above demonstrate the following problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The language keywords for built-in types are not used; instead, the raw CLR type names are used.&lt;/li&gt;
&lt;li&gt;Names of nested classes are delimited with a plus-sign instead of a period.&lt;/li&gt;
&lt;li&gt;Names of generic types do not use angle-bracket notation; instead, they are suffixed with a back-quote character, followed by the number of generic parameters they accept. The original generic type parameter names are nowhere to be found.&lt;/li&gt;
&lt;li&gt;Names of constructed generic types are further suffixed with a list of fully qualified (assembly-qualified) type names, one for each generic type argument.&lt;/li&gt;
&lt;li&gt;Names of nullable value types do not use the question-mark shorthand notation; instead, the &lt;code&gt;System.Nullable&amp;lt;T&amp;gt;&lt;/code&gt; type is fully spelled out.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, these cryptic names are intended to be parsed by software, not by humans. Additionally, there are many different programming languages in the dotnet ecosystem, each with its own syntax for types, so the chosen notation does not favor any particular language.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all very fine, and it should not really be a problem, because among the tens of thousands of APIs built into dotnet, there must surely be one for obtaining the human-readable name of a type in C# notation, right?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;right?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Well, unfortunately, &lt;em&gt;&lt;strong&gt;no.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is no such thing built into dotnet.&lt;/p&gt;
&lt;p&gt;The closest there is to it involves referencing the &lt;code&gt;System.CodeDom&lt;/code&gt; assembly (by Microsoft) and writing the following code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var cSharpCompiler = new Microsoft.CSharp.CSharpCodeProvider();&lt;/code&gt;
&lt;code&gt;var typeRef = new System.CodeDom.CodeTypeReference( type );&lt;/code&gt;
&lt;code&gt;string typeName = cSharpCompiler.GetTypeOutput( typeRef );&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will give you namespace-qualified human-readable type names in C# notation, and it will even replace names of built-in types with their corresponding language keywords, so it will give you &lt;code&gt;int&lt;/code&gt; instead of &lt;code&gt;System.Int32&lt;/code&gt;, which is nice.&lt;/p&gt;
&lt;p&gt;However, even then, the generated type names suffer in the following ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you wanted the underlying CLR type names instead of the language keywords, you can&amp;rsquo;t have them.&lt;/li&gt;
&lt;li&gt;If you wanted type names without namespaces, you can&amp;rsquo;t have them.&lt;/li&gt;
&lt;li&gt;The question-mark shorthand notation for nullable value types is not used, so you get &lt;code&gt;System.Nullable&amp;lt;int&amp;gt;&lt;/code&gt; instead of &lt;code&gt;int?&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Tuple notation is not used, so you get &lt;code&gt;ValueTuple&amp;lt;int,char&amp;gt;&lt;/code&gt; instead of &lt;code&gt;(int,char)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Generic type arguments are stripped from generic type definitions, so you get &lt;code&gt;System.Collections.Generic.Dictionary&amp;lt;,&amp;gt;&lt;/code&gt;. If you wanted the full original generic type definition, which is &lt;code&gt;System.Collections.Generic.Dictionary&amp;lt;TKey,TValue&amp;gt;&lt;/code&gt;, you can&amp;rsquo;t have it.&lt;/li&gt;
&lt;li&gt;Although language keywords are used for most built-in types, they are not used for &lt;code&gt;nint&lt;/code&gt; and &lt;code&gt;nuint&lt;/code&gt;, which appear as &lt;code&gt;System.IntPtr&lt;/code&gt; and &lt;code&gt;System.UIntPtr&lt;/code&gt; respectively.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;None of the above behavior can be changed, because the mechanism is not customizable.&lt;/p&gt;
&lt;h3 id=&#34;prior-attempts-to-solve-the-problem&#34;&gt;Prior attempts to solve the problem
&lt;/h3&gt;&lt;p&gt;Many have asked for a function that, given a type, returns its human-readable name in C# notation, and many have tried to offer such a function.&lt;/p&gt;
&lt;p&gt;On Stack Overflow there is not just one, but several questions asking this, or variations of it, and each question has received several (attempted) answers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/1533115/773113&#34; target=&#34;_blank&#34;
   &gt;Stack Overflow: Get GenericType-Name in good format using Reflection on C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/2448800/773113&#34; target=&#34;_blank&#34;
   &gt;Stack Overflow: Given a type instance, how to get generic type name in C#?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/6402864/773113&#34; target=&#34;_blank&#34;
   &gt;Stack Overflow: C#: &amp;ldquo;Pretty&amp;rdquo; type name function?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/4615553/773113&#34; target=&#34;_blank&#34;
   &gt;Stack Overflow: Get user-friendly name of simple types through reflection?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/1362884/773113&#34; target=&#34;_blank&#34;
   &gt;Stack Overflow: Is there a way to get a type&amp;rsquo;s alias through reflection?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/4369737/773113&#34; target=&#34;_blank&#34;
   &gt;Stack Overflow: How can I get the primitive name of a type in C#?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/74463815/773113&#34; target=&#34;_blank&#34;
   &gt;Stack Overflow: C#, trying to create human readable type name&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On GitHub there is an open-source project which aims to do this:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/BanallyMe/ReadableTypeNames&#34; target=&#34;_blank&#34;
   &gt;GitHub: BanallyMe / ReadableTypeNames&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Someone has even created a video on YouTube aiming to explain how to do this:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=e5Zs1JbcS5k&#34; target=&#34;_blank&#34;
   &gt;YouTube: vlogize: Generating a Human Readable Type Name in C#: Solving the ICollection Challenge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Needless to say, all of the above attempts are incomplete and clunky. Some people provide functions that only work for a specific set of types, such as &lt;code&gt;List&amp;lt;&amp;gt;&lt;/code&gt; and &lt;code&gt;Dictionary&amp;lt;,&amp;gt;&lt;/code&gt; but fail for everything else; others provide functions that try to work for any type, but fail in all sorts of edge cases, and even not-so-edge cases, for example with arrays or with nested types. Even the best solutions fail to cover all cases. Furthermore, virtually all of the code in these solutions is of very poor quality, engaging in excessive string searching, string substitution, string concatenation, etc. It is really so messy that it cannot be improved; it has to be thrown away and re-written from scratch.&lt;/p&gt;
&lt;h3 id=&#34;the-solution&#34;&gt;The solution
&lt;/h3&gt;&lt;p&gt;I hereby present to the world this open-source project that I created:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/MikeNakis.CSharpTypeNames&#34; target=&#34;_blank&#34;
   &gt;GitHub: MikeNakis / MikeNakis.CSharpTypeNames&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is a tiny library that generates human-readable dotnet type names in C# notation, and it does it right.&lt;/p&gt;
&lt;p&gt;More information in &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/MikeNakis.CSharpTypeNames/blob/master/MikeNakis.CSharpTypeNames.README.md&#34; target=&#34;_blank&#34;
   &gt;the README file on GitHub&lt;/a&gt;.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Build configurations</title>
        <link>//localhost:1313/p/build-configurations/</link>
        <pubDate>Sun, 04 May 2025 13:39:03 +0000</pubDate>
        
        <guid>//localhost:1313/p/build-configurations/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/build-configurations/images/ChatGPT-Image-Jun-11,-2025,-12_31_08-PM---fixed.jpg&#34;
	width=&#34;1536&#34;
	height=&#34;1024&#34;
	srcset=&#34;//localhost:1313/p/build-configurations/images/ChatGPT-Image-Jun-11,-2025,-12_31_08-PM---fixed_hu_2251c0dc0f1c3d7e.jpg 480w, //localhost:1313/p/build-configurations/images/ChatGPT-Image-Jun-11,-2025,-12_31_08-PM---fixed_hu_91d84ae5696b1498.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;abstract&#34;&gt;Abstract
&lt;/h3&gt;&lt;p&gt;The popular practice of having only two different kinds of builds (&lt;em&gt;Debug&lt;/em&gt; and &lt;em&gt;Release&lt;/em&gt;) is shown to be inadequate. Three to four different kinds of builds are proposed instead, allowing more thorough error checking during development, better performance of the final system on production, and potentially better performance when running tests on a build server.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;the-issue&#34;&gt;The Issue
&lt;/h3&gt;&lt;p&gt;In software development we often want our creations to have different characteristics under different circumstances; for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Optimizations:
&lt;ul&gt;
&lt;li&gt;While developing we usually do not want them, because they interfere with debugging.&lt;/li&gt;
&lt;li&gt;On the final shipped product we want them, because they make it run faster.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Preconditions, assertions, and other kinds of runtime checks:
&lt;ul&gt;
&lt;li&gt;While developing we want them, because they help us catch bugs.&lt;/li&gt;
&lt;li&gt;On the final shipped product we do not want them, because they slow it down.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-history&#34;&gt;The History
&lt;/h3&gt;&lt;p&gt;In C and C++, different behavior has historically been achieved by means of compiler options controlling optimization, and preprocessor macros controlling conditional compilation. The standard stipulates an NDEBUG macro which, if defined, causes assertions to compile to nothing. This means that software systems written in C and C++ generally have two builds: a &lt;em&gt;Debug&lt;/em&gt; build, for use while debugging, and a &lt;em&gt;Release&lt;/em&gt; build, for shipping or deploying to production.&lt;/p&gt;
&lt;p&gt;When Java came along, it was decided that a single build should be good for everyone: conditional compilation was abolished&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, all optimization-related choices were delegated to the Just-In-Time compiler (JITter,) assertions were made to always compile into the binaries, and the &lt;code&gt;enableassertions&lt;/code&gt; switch was added to the virtual machine for controlling during runtime, rather than during compilation, whether assertions should be executing or not. This essentially gives Java developers the ability to choose between a &lt;em&gt;debug &lt;strong&gt;run&lt;/strong&gt;&lt;/em&gt; or a &lt;em&gt;release &lt;strong&gt;run&lt;/strong&gt;&lt;/em&gt;, as opposed to a debug build or a release build.&lt;/p&gt;
&lt;p&gt;C# has brought back a compiler option for controlling optimization, and conditional compilation by means of a simplified version of the preprocessor macros (called &amp;ldquo;define constants&amp;rdquo; in C#) and the &lt;code&gt;Conditional&lt;/code&gt; attribute. Two different kinds of builds (called &lt;em&gt;&lt;strong&gt;Build Configurations&lt;/strong&gt;&lt;/em&gt;) are predefined: &lt;code&gt;Debug&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt;. The build system offers great flexibility in defining additional build configurations, but C# developers rarely bother with that.&lt;/p&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The Problem
&lt;/h3&gt;&lt;p&gt;Since developers rarely bother with defining any build configurations besides the predefined ones, the vast majority of dotnet projects use only the two predefined ones: &amp;lsquo;Debug&amp;rsquo; and &amp;lsquo;Release&amp;rsquo;. (Many projects actually use only &amp;lsquo;Debug&amp;rsquo;, but let us pretend we never heard of them.) Thus all different needs and usage scenarios are being shoe-horned to fit into one of those two options. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is only one configuration that can be tested, namely the &lt;code&gt;Debug&lt;/code&gt; configuration, which means that this configuration is used not only for running tests on a developer&amp;rsquo;s computer, but also for running tests on the build server.&lt;/li&gt;
&lt;li&gt;There is only one configuration of a library that can be published, namely the &amp;lsquo;Release&amp;rsquo; configuration, which means that this configuration is used not only in production scenarios, but also in development scenarios, where software is being developed that is making use of a published library.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is problematic because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It slows down test runs on build servers.&lt;/p&gt;
&lt;p&gt;The &amp;lsquo;Debug&amp;rsquo; configuration is unoptimized, to avoid interference with debugging; however, by common practice, the same &amp;lsquo;Debug&amp;rsquo; configuration is used for running tests on the build server, because that is the only configuration that can be tested; thus, the world is full of build servers executing unoptimized tests, exercising unoptimized code.&lt;/p&gt;
&lt;p&gt;If the tests and the code they are exercising are long-running and computationally expensive, lack of optimization will make them run even slower.&lt;/p&gt;
&lt;p&gt;However, virtually nothing ever gets debugged on a build server, so there is virtually never a need to have it running unoptimized code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It slows down the software on production.&lt;/p&gt;
&lt;p&gt;When a library is published as a package, the configuration that gets packaged is, by common practice, the &amp;lsquo;Release&amp;rsquo; configuration. This configuration executes preconditions, since it may be referenced by a project under development; however, at some point, that project together with the library are released to production, where the library is still executing preconditions.&lt;/p&gt;
&lt;p&gt;This amounts to nothing but a waste of clock cycles, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;By the time the software using the library gets shipped to production, it has been tested and can be reasonably assumed to be invoking the library only in valid ways.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Even if the software did happen to make invalid use of the library on production, it makes very little difference whether the resulting catastrophic failure would be signaled by a precondition failure or by some index out of range exception further down.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Many preconditions are omitted in the name of performance.&lt;/p&gt;
&lt;p&gt;Library programmers often refrain from asserting certain preconditions, if they suspect them to be even slightly expensive, in light of the fact that preconditions in a library will always be executing, even on production.&lt;/p&gt;
&lt;p&gt;An extreme example to illustrate this scenario is the binary search function, which should, in principle, be enforcing the precondition that the array to search must be sorted. Yes, this means guarding a &lt;strong&gt;O(log&lt;sub&gt;2&lt;/sub&gt;(N))&lt;/strong&gt; operation with a &lt;strong&gt;O(N)&lt;/strong&gt; operation. This is fine during development, because we test with small amounts of data anyway, but is a terrible thing to be doing on production; thus, there is virtually no library in existence with such a precondition in it, despite the fact that it is necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-solution&#34;&gt;The Solution
&lt;/h3&gt;&lt;p&gt;From the description of the problem it becomes evident that preconditions must be controlled separately from assertions, and both of those must be controlled separately from optimizations. Therefore, four different build configurations can be thought of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A &amp;lsquo;Debug&amp;rsquo; configuration&lt;/p&gt;
&lt;p&gt;Everyone is more or less already familiar with this. It is meant for use by a developer when testing and debugging software on their local computer. Assertions are enabled, preconditions are enabled, and optimizations are disabled, because they interfere with debugging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An &amp;lsquo;Optimized&amp;rsquo; configuration&lt;/p&gt;
&lt;p&gt;This is the same as Debug except that optimizations are enabled. It is meant to run on the build server, where we do not usually debug, so there is no reason to be running unoptimized software. Note that this configuration is only useful for projects that suffer from long-running, computationally expensive tests; projects that do testing right, with very short and lightweight tests, are likely to see a performance degradation from this configuration, due to the additional JITting overhead &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &amp;lsquo;Develop&amp;rsquo; configuration&lt;/p&gt;
&lt;p&gt;This configuration is only applicable to libraries, not to applications. It is identical to what was previously understood as the Release configuration, where optimizations are enabled, assertions are disabled, and preconditions are enabled; however, it is only meant to be used when developing software that makes use of the library, not for shipping to production, because we do not want to be executing preconditions on production.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &amp;lsquo;Release&amp;rsquo; configuration&lt;/p&gt;
&lt;p&gt;This is similar to the Develop configuration, except that preconditions are also disabled. It is the configuration which is meant for shipping to production. Note that the benefit of using this configuration is not just maximum performance on production; it is also the freedom to add as many preconditions as necessary to the library, knowing that they cost nothing on production.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is the feature matrix:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: right&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Debug&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Optimized&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Develop&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Release&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;Optimizations disabled&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;✅&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;⬜&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;⬜&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;⬜&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;Assertions enabled&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;✅&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;✅&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;⬜&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;⬜&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;Overflow checking&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;✅&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;✅&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;⬜&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;⬜&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;Preconditions enabled&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;✅&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;✅&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;✅&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;⬜&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: right&#34;&gt;Code analysis&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;✅&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;✅&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;⬜&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;⬜&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Here is an excerpt from a &lt;code&gt;.csproj&lt;/code&gt; file implementing the above matrix, assuming that we have defined our own set of assertion functions, dependent upon an &lt;code&gt;ASSERTIONS&lt;/code&gt; define-constant, and our own set of precondition functions, dependent upon a &lt;code&gt;PRECONDITIONS&lt;/code&gt; define-constant.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;Choose&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;When&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Condition=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;$(Configuration)&amp;#39;==&amp;#39;Debug&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;Optimize&amp;gt;&lt;/span&gt;False&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Optimize&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;DefineConstants&amp;gt;&lt;/span&gt;$(DefineConstants);PRECONDITIONS;ASSERTIONS&lt;span class=&#34;nt&#34;&gt;&amp;lt;/DefineConstants&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;CheckForOverflowUnderflow&amp;gt;&lt;/span&gt;True&lt;span class=&#34;nt&#34;&gt;&amp;lt;/CheckForOverflowUnderflow&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;EnableNETAnalyzers&amp;gt;&lt;/span&gt;True&lt;span class=&#34;nt&#34;&gt;&amp;lt;/EnableNETAnalyzers&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;DebugType&amp;gt;&lt;/span&gt;Full&lt;span class=&#34;nt&#34;&gt;&amp;lt;/DebugType&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/When&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;When&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Condition=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;$(Configuration)&amp;#39;==&amp;#39;Optimized&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;Optimize&amp;gt;&lt;/span&gt;True&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Optimize&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;DefineConstants&amp;gt;&lt;/span&gt;$(DefineConstants);PRECONDITIONS;ASSERTIONS&lt;span class=&#34;nt&#34;&gt;&amp;lt;/DefineConstants&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;CheckForOverflowUnderflow&amp;gt;&lt;/span&gt;True&lt;span class=&#34;nt&#34;&gt;&amp;lt;/CheckForOverflowUnderflow&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;EnableNETAnalyzers&amp;gt;&lt;/span&gt;True&lt;span class=&#34;nt&#34;&gt;&amp;lt;/EnableNETAnalyzers&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;DebugType&amp;gt;&lt;/span&gt;Full&lt;span class=&#34;nt&#34;&gt;&amp;lt;/DebugType&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;OutputPath&amp;gt;&lt;/span&gt;bin\$(Configuration)\&lt;span class=&#34;nt&#34;&gt;&amp;lt;/OutputPath&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/When&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;When&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Condition=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;$(Configuration)&amp;#39;==&amp;#39;Develop&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;Optimize&amp;gt;&lt;/span&gt;True&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Optimize&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;DefineConstants&amp;gt;&lt;/span&gt;$(DefineConstants);PRECONDITIONS&lt;span class=&#34;nt&#34;&gt;&amp;lt;/DefineConstants&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;CheckForOverflowUnderflow&amp;gt;&lt;/span&gt;False&lt;span class=&#34;nt&#34;&gt;&amp;lt;/CheckForOverflowUnderflow&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;EnableNETAnalyzers&amp;gt;&lt;/span&gt;False&lt;span class=&#34;nt&#34;&gt;&amp;lt;/EnableNETAnalyzers&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;DebugType&amp;gt;&lt;/span&gt;Portable&lt;span class=&#34;nt&#34;&gt;&amp;lt;/DebugType&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;OutputPath&amp;gt;&lt;/span&gt;bin\$(Configuration)\&lt;span class=&#34;nt&#34;&gt;&amp;lt;/OutputPath&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/When&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;When&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Condition=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;$(Configuration)&amp;#39;==&amp;#39;Release&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;Optimize&amp;gt;&lt;/span&gt;True&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Optimize&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;DefineConstants&amp;gt;&lt;/span&gt;$(DefineConstants)&lt;span class=&#34;nt&#34;&gt;&amp;lt;/DefineConstants&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;CheckForOverflowUnderflow&amp;gt;&lt;/span&gt;False&lt;span class=&#34;nt&#34;&gt;&amp;lt;/CheckForOverflowUnderflow&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;EnableNETAnalyzers&amp;gt;&lt;/span&gt;False&lt;span class=&#34;nt&#34;&gt;&amp;lt;/EnableNETAnalyzers&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;DebugType&amp;gt;&lt;/span&gt;Portable&lt;span class=&#34;nt&#34;&gt;&amp;lt;/DebugType&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;Deterministic&amp;gt;&lt;/span&gt;True&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Deterministic&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;lt;DeterministicSourcePaths&amp;gt;&lt;/span&gt;True&lt;span class=&#34;nt&#34;&gt;&amp;lt;/DeterministicSourcePaths&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/When&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;Otherwise&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/Otherwise&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Choose&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If we follow this build configuration scheme, then each time we publish a library we must generate two packages: the &amp;lsquo;Develop&amp;rsquo; package, and the &amp;lsquo;Release&amp;rsquo; package.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &amp;lsquo;Develop&amp;rsquo; package is to be referenced by software under development.&lt;/li&gt;
&lt;li&gt;The &amp;lsquo;Release&amp;rsquo; package is to be referenced by software that is being shipped to production.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The generation of two different packages for a single library can be accomplished by building twice, once for each configuration, and constructing the assembly name as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;AssemblyName&amp;gt;&lt;/span&gt;$(MSBuildProjectName)-$(Configuration)&lt;span class=&#34;nt&#34;&gt;&amp;lt;/AssemblyName&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This way, instead of a single package called &lt;code&gt;MyPackage&lt;/code&gt; we create two packages: &lt;code&gt;MyPackage-Develop&lt;/code&gt; and &lt;code&gt;MyPackage-Release&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There may be a better way to build a library, so that only one package gets generated, containing both the develop and release builds, and the right binaries somehow end up in the right output directory; however, I have not been able to figure that out yet. If you know how to do it, please let me know.&lt;/p&gt;
&lt;p&gt;For any build configuration of a certain module, (either an application or a library,) the build configuration of the libraries it uses can be determined using the following table:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Build configuration of&lt;br&gt;module using library&lt;/th&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;Build configuration of&lt;br&gt;library&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lsquo;Debug&amp;rsquo;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lsquo;Develop&amp;rsquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lsquo;Optimized&amp;rsquo;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lsquo;Develop&amp;rsquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lsquo;Develop&amp;rsquo;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lsquo;Develop&amp;rsquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lsquo;Release&amp;rsquo;&lt;/td&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;&amp;lsquo;Release&amp;rsquo;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note that the &amp;lsquo;Develop&amp;rsquo; configuration of a module could, in theory, make use of the better-performing &amp;lsquo;Release&amp;rsquo; configuration of a library, instead of the &amp;lsquo;Develop&amp;rsquo; configuration; however, that can only work if the module does not expose the library, or if there is no other module in the solution that uses the &amp;lsquo;Develop&amp;rsquo; configuration of the library. Otherwise, there are going to be type mismatch errors, where code built to make use of the &amp;lsquo;Develop&amp;rsquo; configuration of a library is given to work with the &amp;lsquo;Release&amp;rsquo; configuration, and vice versa.&lt;/p&gt;
&lt;p&gt;Here is an excerpt of a .csproj file implementing the above table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;PackagesConfiguration&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Condition=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;$(Configuration)&amp;#39;==&amp;#39;Debug&amp;#39;&amp;#34;&lt;/span&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;Develop&lt;span class=&#34;nt&#34;&gt;&amp;lt;/PackagesConfiguration&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;PackagesConfiguration&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Condition=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;$(Configuration)&amp;#39;==&amp;#39;Optimized&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;Develop&lt;span class=&#34;nt&#34;&gt;&amp;lt;/PackagesConfiguration&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;PackagesConfiguration&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Condition=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;$(Configuration)&amp;#39;==&amp;#39;Develop&amp;#39;&amp;#34;&lt;/span&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;Develop&lt;span class=&#34;nt&#34;&gt;&amp;lt;/PackagesConfiguration&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;PackagesConfiguration&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Condition=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;$(Configuration)&amp;#39;==&amp;#39;Release&amp;#39;&amp;#34;&lt;/span&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;Release&lt;span class=&#34;nt&#34;&gt;&amp;lt;/PackagesConfiguration&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Then, packages can be referenced as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Include=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MyPackage-$(PackagesConfiguration)&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Version=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;An &amp;lsquo;Optimized&amp;rsquo; build configuration has been proposed, for cutting in half the time it takes to run slow, computationally expensive tests on build servers. (Not needed by projects with small, fast tests.)&lt;/li&gt;
&lt;li&gt;A &amp;lsquo;Develop&amp;rsquo; build configuration for libraries has been proposed, intended for use during development of software using the libraries, but not for shipping to production. It has preconditions enabled, in order to catch bugs in the software using the libraries.&lt;/li&gt;
&lt;li&gt;A &amp;lsquo;Release&amp;rsquo; build configuration for libraries has been proposed, intended for shipping to production. It improves performance by not executing preconditions.&lt;/li&gt;
&lt;li&gt;Under the proposed schema, preconditions in libraries do not incur a performance penalty on production anymore, so programmers can apply them more liberally, leading to more robust software.&lt;/li&gt;
&lt;li&gt;Under the proposed schema, when a library is published, two packages should be generated: the &amp;lsquo;Develop&amp;rsquo; package, for developing software that uses the library, and the &amp;lsquo;Release&amp;rsquo; package, for shipping to production.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Cover image generated by ChatGPT, and then retouched by michael.gr. The prompt used was: &amp;ldquo;Please give me an image conveying the concept of highly complex and highly technical software development. Make it in landscape format, of photographic quality, with warm colors&amp;rdquo; and then &amp;ldquo;Please make the programmer look more senior&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The creators of Java made it so that the generation of code within an &lt;code&gt;if()&lt;/code&gt; statement controlled by a compile-time constant is suppressed if that constant evaluates to &lt;code&gt;false&lt;/code&gt;, but they intentionally deprived developers from the ability to specify the value of a compile-time constant via external means, such as the command-line of the compiler. They defended this choice by saying that there is inherent merit in being able to guarantee that in Java every compilation unit has one and only one set of semantics. The usefulness of this merit is debatable. It can be argued that this is simply Java treating developers the same way that Apple has been treating users: as idiots.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;In C# most optimizations are performed by the Just-In-Time compiler (JITter), and people say that the optimizations performed by the language compiler do not make much of a difference. However, my experiments have shown otherwise: computation-intensive code tends to run twice as fast when optimizations are enabled than when not, and this difference can be observed on a build server, so it is unaffected by any optimization choices that the JITter might make due to a debugger being attached or not. I suspect that this is happening because the language compiler saves the &amp;ldquo;optimize&amp;rdquo; flag in the binary, and the JITter subsequently observes this flag.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>The confusion about the term Unit Testing</title>
        <link>//localhost:1313/p/the-confusion-about-the-term-unit-testing/</link>
        <pubDate>Fri, 04 Apr 2025 14:53:02 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-confusion-about-the-term-unit-testing/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/the-confusion-about-the-term-unit-testing/images/crash-test-dummy-penseur.jpg&#34;
	width=&#34;2560&#34;
	height=&#34;1600&#34;
	srcset=&#34;//localhost:1313/p/the-confusion-about-the-term-unit-testing/images/crash-test-dummy-penseur_hu_bcad233453122025.jpg 480w, //localhost:1313/p/the-confusion-about-the-term-unit-testing/images/crash-test-dummy-penseur_hu_81009ce0ef2f8adf.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Virtually everyone claims to be doing Unit Testing, but there is a surprising amount of disagreement as to how unit testing is defined. Let us see what the authorities on the subject have to say about it. What follows is mainly quotations from reputable sources, with some minimal commentary by me.&lt;/p&gt;
&lt;h3 id=&#34;wikipedia&#34;&gt;Wikipedia
&lt;/h3&gt;&lt;p&gt;Let us begin by checking &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Unit_testing&#34; target=&#34;_blank&#34;
   &gt;the Wikipedia entry for Unit Testing&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unit testing, a.k.a. component or module testing, is a form of software testing by which isolated source code is tested to validate expected
behavior. Unit testing describes tests that are run at the unit-level to contrast testing at the integration or system level.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Further down in the history section, Wikipedia lists some of the earliest known efforts of what we would today call unit testing, where the common theme is testing separately smaller parts of large software systems before integrating them together.&lt;/p&gt;
&lt;p&gt;I am in full agreement with Wikipedia&amp;rsquo;s definition, but Wikipedia is everyone&amp;rsquo;s favorite source to cite if it agrees with their preconceptions, or proclaim untrustworthy if it does not, so can we find any other definition that corroborates the above?&lt;/p&gt;
&lt;h3 id=&#34;ieee&#34;&gt;IEEE
&lt;/h3&gt;&lt;p&gt;In the &lt;em&gt;&lt;strong&gt;Definitions&lt;/strong&gt;&lt;/em&gt; section of &lt;a class=&#34;external&#34; 
   href=&#34;https://ieeexplore.ieee.org/document/27763&#34; target=&#34;_blank&#34;
   &gt;IEEE 1008-1987 Standard for Software Unit Testing&lt;/a&gt; we read:&lt;/p&gt;
&lt;p&gt;[Warning! wooden language ahead!]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;test unit3:&lt;/strong&gt; A set of one or more computer program modules together with associated control data, (for example, tables), usage procedures, and operating procedures that satisfy the following conditions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All modules are from a single computer program&lt;/li&gt;
&lt;li&gt;At least one of the new or changed modules in the set has not completed the unit test&lt;sup&gt;4&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;The set of modules together with its associated data and procedures are the sole object of a testing process&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;p&gt;And the footnotes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt; A test unit may occur at any level of the design hierarchy from a single module to a complete program. Therefore, a test unit may be a module, a few modules, or a complete computer program along with associated data and procedures.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt; A test unit may contain one or more modules that have already been unit tested.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As we can see, IEEE&amp;rsquo;s definition says nothing about isolation; instead, it considers an entire set of modules, of which only one might need testing, as a unit.&lt;/p&gt;
&lt;p&gt;So, we have found a source that contradicts Wikipedia. It is a tie. Now we need to find a third opinion, to form a majority.&lt;/p&gt;
&lt;h3 id=&#34;kent-beck&#34;&gt;Kent Beck
&lt;/h3&gt;&lt;p&gt;Surely, Kent Beck, the inventor of Test-Driven Development and author of JUnit must have defined the term, right? Well, as it turns out, no.&lt;/p&gt;
&lt;p&gt;In his original &lt;a class=&#34;external&#34; 
   href=&#34;https://web.archive.org/web/20150315073817/http://www.xprogramming.com/testfram.htm&#34; target=&#34;_blank&#34;
   &gt;&amp;ldquo;Simple Smalltalk Testing: With Patterns&amp;rdquo; paper&lt;/a&gt; the closest he gets to providing a definition is this sentence:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I recommend that developers write their own unit tests, one per class.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Can &amp;ldquo;one test per class&amp;rdquo; be regarded as a definition of the term? I do not think so. I do not think it even makes sense as a statement, with modern programming languages and tooling.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Test Driven Development by Example&lt;/em&gt; (2002) the closest that Kent Beck gets to providing a definition is this sentence:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The problem with driving development with small scale tests (I call them &amp;ldquo;unit tests&amp;rdquo;, but they don&amp;rsquo;t match the accepted definition of unit tests very well) is that you run the risk [&amp;hellip;]&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So, Kent Beck seems to regard unit tests as small-scale tests, which is not really a definition, and he acknowledges that there exists some other, accepted definition, but he does not say what that definition is. Perhaps Kent Beck thinks of a unit test as &lt;em&gt;a unit of testing&lt;/em&gt;, as in &lt;em&gt;a unit of information&lt;/em&gt; or &lt;em&gt;a unit of improvement&lt;/em&gt;, but we cannot be sure.&lt;/p&gt;
&lt;p&gt;Although Kent Beck makes no other attempt to define the term, in the same book he does mention a couple of times that a unit test should be concerned with the externally visible behavior of a unit, not with its implementation.&lt;/p&gt;
&lt;p&gt;As a result, it should come as no surprise to hear that Kent Beck does not use mocks. In the video &lt;em&gt;Thoughtworks Hangouts: Is TDD dead?&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=z9quxZsLcfo&#34; target=&#34;_blank&#34;
   &gt;youtube&lt;/a&gt;, &lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/articles/is-tdd-dead/&#34; target=&#34;_blank&#34;
   &gt;text digest&lt;/a&gt;) at 21&amp;rsquo;:10&amp;rsquo;&amp;rsquo; Kent Beck states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My personal practice is I mock almost nothing.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;martin-fowler&#34;&gt;Martin Fowler
&lt;/h3&gt;&lt;p&gt;One often-cited author who is known for defining terms and elucidating concepts is Martin Fowler. So, what does he have to say about unit testing?&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/bliki/UnitTest.html&#34; target=&#34;_blank&#34;
   &gt;Martin Fowler&amp;rsquo;s page on &lt;em&gt;&lt;strong&gt;Unit Test&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; begins by acknowledging that it is an ill-defined term, and that the only characteristics of unit testing that people seem to agree on are that they are supposed to be a) small-scale, b) written by the programmers themselves, and c) fast. Then, Martin Fowler proceeds to talk about two schools of thought that understand the term differently:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &amp;ldquo;classicist&amp;rdquo; school of thought, which favors &amp;ldquo;sociable&amp;rdquo; unit tests, places emphasis on testing the behavior of a component, allowing the component to interact with its collaborators and assuming that the collaborators are working correctly. Martin Fowler places himself in this school of thought.&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;mockist&amp;rdquo; school of thought, which favors &amp;ldquo;solitary&amp;rdquo; unit tests, insists on testing each component in isolation from its collaborators, and therefore requires that every collaborator must be replaced with a &amp;ldquo;test double&amp;rdquo; for the purpose of testing. Martin Fowler states that he respects this school of thought, but he does not belong to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, so this did not lead us to a single definition of unit testing, but at least it helped us further define two competing definitions.&lt;/p&gt;
&lt;p&gt;It is also worth noting that Martin Fowler does not use mocks, either. In the video &lt;em&gt;Thoughtworks Hangouts: Is TDD dead?&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=z9quxZsLcfo&#34; target=&#34;_blank&#34;
   &gt;youtube&lt;/a&gt;, &lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/articles/is-tdd-dead/&#34; target=&#34;_blank&#34;
   &gt;text digest&lt;/a&gt;) at 23&amp;rsquo;:56&amp;rsquo;&amp;rsquo; Martin Fowler adds:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m with Kent, I hardly ever use mocks.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;robert-c-martin-uncle-bob&#34;&gt;Robert C. Martin (Uncle Bob)
&lt;/h3&gt;&lt;p&gt;Among industry speakers, one of the most recognizable names is Robert C. Martin, a.k.a. Uncle Bob, author of the highly acclaimed book &lt;em&gt;&lt;strong&gt;Clean Code&lt;/strong&gt;&lt;/em&gt;. In his blog, under &lt;a class=&#34;external&#34; 
   href=&#34;https://blog.cleancoder.com/uncle-bob/2017/05/05/TestDefinitions.html&#34; target=&#34;_blank&#34;
   &gt;First-Class Tests&lt;/a&gt; he writes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unit Test: A test written by a programmer for the purpose of ensuring that the production code does what the programmer expects it to do.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is not very useful. According to this definition, a unit test could be virtually anything.&lt;/p&gt;
&lt;p&gt;Further down Uncle Bob gives a separate definition for integration tests, so maybe he regards the two as different, which would imply that he regards unit tests as testing units in isolation, but we cannot really be sure.&lt;/p&gt;
&lt;p&gt;To confuse things, further down he mentions mocks only in the context of what he calls functional tests, so maybe he thinks of mocks as not belonging to unit tests, (which then begs the question how the unit tests can achieve isolation,) but we cannot be sure about that, either.&lt;/p&gt;
&lt;p&gt;One thing we can be sure of is that Uncle Bob is also not particularly in favor of mocks. On that same page we read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I, for example, seldom use a mocking tool. When I need a mock (or, rather, a Test Double) I write it myself.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Note that Uncle Bob finds it important enough to state his preference for a test double rather than a mock. That is probably because what he writes himself is fakes, not mocks. (Both fakes and mocks are different kinds of test doubles, see &lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/bliki/TestDouble.html&#34; target=&#34;_blank&#34;
   &gt;Martin Fowler: Test Double&lt;/a&gt; and &lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/articles/mocksArentStubs.html&#34; target=&#34;_blank&#34;
   &gt;Martin Fowler: Mocks Aren&amp;rsquo;t Stubs&lt;/a&gt;.)&lt;/p&gt;
&lt;h3 id=&#34;ian-cooper&#34;&gt;Ian Cooper
&lt;/h3&gt;&lt;p&gt;An interestingly conflicting opinion comes from Ian Cooper, an outspoken TDD advocate.&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.infoq.com/presentations/tdd-original/&#34; target=&#34;_blank&#34;
   &gt;TDD, Where Did It All Go Wrong? (&lt;/a&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.infoq.com/presentations/tdd-original/&#34; target=&#34;_blank&#34;
   &gt;InfoQ&lt;/a&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.infoq.com/presentations/tdd-original/&#34; target=&#34;_blank&#34;
   &gt;2017)&lt;/a&gt;&lt;/em&gt; Ian Cooper states that in TDD a unit test is defined as a test that runs in isolation from other tests, not a test that isolates the unit under test from other units. In other words, the unit of isolation is the test, not the unit under test.&lt;/p&gt;
&lt;p&gt;Ian Cooper obviously acknowledges that the prevailing understanding of unit tests is that they isolate the unit under test from other units, and he introduces a dissenting understanding, as if TDD is so radical that it justifies redefining long established terms. This is at best a refreshingly different take on the subject, and at worst a completely unfounded mental acrobatic.&lt;/p&gt;
&lt;p&gt;The notion that the term &amp;ldquo;unit&amp;rdquo; in unit testing refers to the test rather than the component-under-test is inadmissible at the very least because it does not rhyme with integration testing and end-to-end testing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integration testing is about running our tests on integrations of system components, not about running tests somehow integrated with each other;&lt;/li&gt;
&lt;li&gt;End-to-end testing is about running our tests on our entire system as a whole, not about somehow stringing all of our tests together.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;therefore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unit testing is about running our tests on individual components of our system, not about running the tests individually. (Although I grant you that having isolation between individual tests is also a good idea, when possible.)&lt;/p&gt;
&lt;p&gt;It is worth noting that Ian Cooper also belongs to the ranks of those who do  not approve of mocks. In the same talk, at 49&amp;rsquo;:45&amp;rsquo;&amp;rsquo; he says:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;I argue quite heavily against mocks because they are over-specified.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;glenford-myers&#34;&gt;Glenford Myers
&lt;/h3&gt;&lt;p&gt;So far we have had only a moderate amount of luck in finding a majority opinion to define unit testing. Let us try to locate the original source of the term, shall we?&lt;/p&gt;
&lt;p&gt;I do not know for sure that the first recorded use of the term is in the 1979 classic &lt;em&gt;The Art of Software Testing&lt;/em&gt; by Glenford Myers, but the book is so old that it seems reasonable to suppose so.&lt;/p&gt;
&lt;p&gt;The original 1979 edition (ISBN 9780471043287, 0471043281)  is not easy to obtain, so I cannot ascertain this, but I strongly suspect that the term &amp;ldquo;unit&amp;rdquo; did not appear in it; instead, it was likely added in the 2nd edition, revised by other authors and published in 2004. Nonetheless, I think it is safe to assume that when back in 1979 Glenford Myers was writing of &amp;ldquo;module testing&amp;rdquo; what he meant was precisely that which we now call unit testing.&lt;/p&gt;
&lt;p&gt;In chapter 5 &amp;ldquo;Module (Unit) Testing&amp;rdquo; of the 2nd edition we read:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Module testing (or unit testing) is a process of testing the individual subprograms, subroutines, or procedures in a program. That is, rather than initially testing the program as a whole, testing is first focused on the smaller building blocks of the program.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Later in the same chapter the author acknowledges this form of testing to be white-box testing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Module testing is largely white-box oriented.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Further down, he even lays down the foundations of what later came to be known as mocks:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] since module B calls module E, something must be present to receive control when B calls E. A stub module, a special module given the name &amp;ldquo;E&amp;rdquo; that must be coded to simulate the function of module E, accomplishes this.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So, this definition is in line with Wikipedia&amp;rsquo;s definition; we finally have a majority.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;Although not unanimous, the prevailing opinion seems to be that the term unit refers to the component under test, and it is specifically called a unit because it is supposed to be tested in isolation from its collaborators, in contrast to integration testing and end-to-end testing where components are allowed to interact with their collaborators.&lt;/p&gt;
&lt;p&gt;This prevailing opinion comes from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wikipedia&lt;/li&gt;
&lt;li&gt;Glenford Myers&lt;/li&gt;
&lt;li&gt;the mockist school of thought mentioned by Martin Fowler&lt;/li&gt;
&lt;li&gt;hints about a popular understanding of unit testing outside of TDD, which Ian Cooper tries to redefine in the context of TDD.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A lot of the confusion seems to stem from the fact that testing a component in isolation requires mocking its collaborators, but almost all of the people cited in this research realize that the use of mocks is misguided, so they either refrain from accurately defining the term, or try to give alternative definitions of the term, or speak of different schools of thought, in an attempt to legitimize violations of the requirement for isolation, so that they can still call what they do unit testing, even though it really is not.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: Created by michael.gr using ChatGPT, and then retouched to remove imperfections. The prompt used was: &amp;ldquo;Please give me an image of a crash test dummy in the style of The Thinker, by Auguste Rodin.&amp;rdquo;&lt;/p&gt;</description>
        </item>
        <item>
        <title>The best code review comment ever</title>
        <link>//localhost:1313/p/the-best-code-review-comment-ever/</link>
        <pubDate>Mon, 10 Feb 2025 11:30:14 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-best-code-review-comment-ever/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/the-best-code-review-comment-ever/images/code-review.jpg&#34;
	width=&#34;1536&#34;
	height=&#34;1024&#34;
	srcset=&#34;//localhost:1313/p/the-best-code-review-comment-ever/images/code-review_hu_c2532b58c6236aa3.jpg 480w, //localhost:1313/p/the-best-code-review-comment-ever/images/code-review_hu_6bffad9881622c28.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;I just wrote a code review comment that I feel particularly smug about.&lt;/p&gt;
&lt;p&gt;The code I was reviewing:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class PointClouds ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My comment:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is a bad idea to have a type name in plural. If you need to signify plurality, use a plurality-signifying suffix in singular form, as in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PointCloudCollection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PointCloudSet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PointCloudGroup&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;or go creative with &lt;code&gt;PointCloudFormation&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;or take creativity to a whole new level with &lt;code&gt;PointCumulonimbus&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anything but a plural type name.&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Cover image created by ChatGpt using the following prompt: &amp;ldquo;Please give me an illustration conveying the concept of &amp;ldquo;code review&amp;rdquo;. Make it in landscape format, with clean colors.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2025-02-16 23:28:05 UTC&lt;/p&gt;
&lt;p&gt;I have never heard of Cumulonimbus before but that sounds cool, going to use this for all my classes from now on&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2025-02-16 23:31:24 UTC&lt;/p&gt;
&lt;p&gt;(/s) This is a good one! Sound advice in multiple ways 😂&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Testana: A better way of running tests</title>
        <link>//localhost:1313/p/testana-a-better-way-of-running-tests/</link>
        <pubDate>Sat, 26 Oct 2024 10:58:59 +0000</pubDate>
        
        <guid>//localhost:1313/p/testana-a-better-way-of-running-tests/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/testana-a-better-way-of-running-tests/media/testana-logo.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;abstract&#34;&gt;Abstract
&lt;/h3&gt;&lt;p&gt;A software testing tool is presented, which uses &lt;em&gt;&lt;strong&gt;dependency analysis&lt;/strong&gt;&lt;/em&gt; to greatly optimize the process of running tests.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;what-is-testana&#34;&gt;What is Testana?
&lt;/h3&gt;&lt;p&gt;Testana is a console application that you launch when you want to run your tests. So far, I have created two implementations of Testana:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A Java implementation, supporting JUnit 4 annotations in Maven-based projects.&lt;/li&gt;
&lt;li&gt;A C# implementation, supporting MSTest attributes in MSBuild solutions.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;what-does-testana-achieve-that-existing-tools-do-not&#34;&gt;What does Testana achieve that existing tools do not?
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Testana &lt;em&gt;&lt;strong&gt;runs only the subset of test modules that actually need to run&lt;/strong&gt;&lt;/em&gt;, based on the last successful run time of each test module, and whether it, or any of its dependencies, have changed.&lt;/li&gt;
&lt;li&gt;Testana &lt;em&gt;&lt;strong&gt;always considers all test modules in your entire code base as candidates for running&lt;/strong&gt;&lt;/em&gt;, so you never have to manually select a subset of the tests to run in the interest of saving time.&lt;/li&gt;
&lt;li&gt;Testana &lt;em&gt;&lt;strong&gt;runs test modules by order of dependency&lt;/strong&gt;&lt;/em&gt;, meaning that tests of modules that have no dependencies run first, tests of modules that depend on those run next, and so on.&lt;/li&gt;
&lt;li&gt;Testana &lt;em&gt;&lt;strong&gt;runs test methods in Natural Method Order,&lt;/strong&gt;&lt;/em&gt; which is the order in which the methods appear in the source file. (This is the norm in C#, but not in Java, where extra measures are necessary to accomplish.)&lt;/li&gt;
&lt;li&gt;Testana &lt;em&gt;&lt;strong&gt;runs test methods in ascending order of inheritance&lt;/strong&gt;&lt;/em&gt;, meaning that test methods in the base-most test class run first, and test methods in derived test classes run afterwards.&lt;/li&gt;
&lt;li&gt;Testana &lt;em&gt;&lt;strong&gt;discovers and reports mistakes&lt;/strong&gt;&lt;/em&gt; in the formulation of test methods, instead of ignoring the mistakes, which is what most other test frameworks do. (Silent failure.)&lt;/li&gt;
&lt;li&gt;Testana &lt;em&gt;&lt;strong&gt;does not catch any exceptions when debugging&lt;/strong&gt;&lt;/em&gt;, thus allowing your debugger to stop on the source line that threw the exception.  (Testana will catch and report exceptions when not debugging, as the case is when running on a continuous build server.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-does-testana-work&#34;&gt;How does Testana work?
&lt;/h3&gt;&lt;p&gt;Testana begins by constructing the dependency graph of your software system. Since this process is expensive, Testana cashes the dependency graph in a file, and recalculates it only when the structure of the system changes. The cache is stored in a text file, which is located at the root of the source tree, and is meant to be excluded from source control.&lt;/p&gt;
&lt;p&gt;Then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testana locates the modules that depend on nothing else within the system, and runs the tests of those modules.&lt;/li&gt;
&lt;li&gt;Once these tests are done, Testana finds modules that depend only on modules that have already been tested, and runs their tests.&lt;/li&gt;
&lt;li&gt;Testana keeps repeating the previous step, until all tests have been run.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Testana keeps a diary where it records the last successful run time of each test module. This diary is also stored in a text file, which is also located
at the root of the source tree, and is also meant to be excluded from source control.&lt;/p&gt;
&lt;p&gt;Next time Testana runs, it considers the last successful run time of each test module, versus the last modification time of that module and its dependencies. Testana then refrains from running the test module if neither it, nor any of its dependencies, have changed.&lt;/p&gt;
&lt;h3 id=&#34;why-should-i-care-about-running-only-the-tests-that-need-to-run&#34;&gt;Why should I care about running only the tests that need to run?
&lt;/h3&gt;&lt;p&gt;The usual situation with large code bases is that tests take an unreasonably long time to run, so developers tend to take shortcuts in running them. One approach some developers take is that they simply commit code without running any tests, leaving it up to the continuous build server to run the tests and notify them of any test failures. This has multiple disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It causes repeated interruptions in the workflow, due to the slow turnaround of the continuous build, which is often of the order of an hour, sometimes longer, and even in the fastest cases, always longer than a normal person&amp;rsquo;s attention span. (This is so by definition; if it was not, then there would be no problem with quickly running all tests locally before committing.)&lt;/li&gt;
&lt;li&gt;The failed tests require additional commits to fix, and each commit requires a meaningful commit message, which increases the overall level of bureaucracy in the development process.&lt;/li&gt;
&lt;li&gt;The commit history becomes bloated with commits that were done in vain and should never be checked out because they contain bugs that are fixed in later commits.&lt;/li&gt;
&lt;li&gt;Untested commits that contain bugs are regularly being made to branches in the repository; these bugs stay there while the continuous build does its thing; eventually the tests fail, the developers take notice, and commit fixes. This whole process takes time, during which other unsuspecting developers might pull from those branches, thus receiving the bugs. Kind of like &lt;em&gt;Continuous Infection&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Testana solves the above problems by figuring out which tests need to run based on what has changed, and only running those tests. This cuts down the time it takes to run tests to a tiny fraction of what it is when blindly running all tests, which means that running the tests now becomes piece of cake and can usually be done real quick before committing, as it should.&lt;/p&gt;
&lt;p&gt;Also, running the tests real quick right after each pull from source control now becomes feasible, so a developer can avoid starting to work on source code on which the tests are failing. (How often have you found yourself in a situation where you pull from source control, change something, run the tests, the tests fail, and you are now wondering whether they fail due to the changes you just made, or due to changes you pulled from the repository?)&lt;/p&gt;
&lt;h3 id=&#34;why-should-i-care-about-considering-all-test-modules-in-my-entire-code-base-as-candidates-for-running&#34;&gt;Why should I care about considering all test modules in my entire code base as candidates for running?
&lt;/h3&gt;&lt;p&gt;Another approach taken by some developers, in the interest of saving time, is manually choosing which tests to run, based on their knowledge of what may have been affected by the changes they just made.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One simple reason why this is problematic is that it requires cognitive effort to figure out which tests might need running, and manual work to launch them individually; it is not as easy as pressing a single button that  stands for &amp;ldquo;run whatever tests need to run in response to the changes I just made.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;A far bigger problem is that in manually selecting the tests to run, the developer is making assumptions about the dependencies of the code that they have modified. In complex systems, dependency graphs can be difficult to grasp, and as systems evolve, the dependencies keep changing. This often leads to situations where no single developer in the house has a complete grasp of the dependency graph of the entire system. Unfortunately, unknown or not-fully-understood dependencies are a major source of bugs, and yet by hand-selecting what to test based on our assumptions about the dependencies, it is precisely the not-fully-understood dependencies that are likely to not be tested. This is a recipe for disaster.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Testana solves the above problems by always considering all test modules as candidates for running. It does not hurt to do that, because the tests that do not actually need to run will not be run by Testana anyway.&lt;/p&gt;
&lt;h3 id=&#34;why-should-i-care-about-running-test-modules-in-order-of-dependency&#34;&gt;Why should I care about running test modules in order of dependency?
&lt;/h3&gt;&lt;p&gt;Existing test frameworks do not do anything intelligent in the direction of automatically figuring out some order of test execution that has any purpose or merit. The order tends to be arbitrary, and not configurable. In the best case it is alphabetic, but this is still problematic, because our criteria for naming test modules usually have nothing to do with the order in which we would like to see them executing.&lt;/p&gt;
&lt;p&gt;For example, it is very common for a code base to contain a module called &amp;ldquo;Utilities&amp;rdquo;, which most other modules depend on; Since it is a highly dependent-upon module, it should be tested first, but since its name begins with a &amp;ldquo;U&amp;rdquo;, it tends to be tested last.&lt;/p&gt;
&lt;p&gt;Testana executes test modules in order of dependency. This means that modules with no dependencies are tested first, modules that depend upon them are tested next, and so on until everything has been tested. Thus, the first test failure is guaranteed to point at the most fundamental problem; there is no need to look further down in case some other test failure indicates a more fundamental problem. Subsequently, Testana stops executing tests after the first failure, so it saves even more time.&lt;/p&gt;
&lt;p&gt;For more information about this way of testing, see &lt;a 
   href=&#34;//localhost:1313/p/incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;why-should-i-care-about-running-test-methods-in-natural-order&#34;&gt;Why should I care about running test methods in natural order?
&lt;/h3&gt;&lt;p&gt;Test frameworks in the C# world tend to run test methods in natural order, which is great, but in the Java world, the JUnit framework runs test methods in random order, which is at best useless, and arguably treacherous.&lt;/p&gt;
&lt;p&gt;One reason for wanting the test methods to run in the order in which they appear in the source file is because we usually test fundamental operations of our software before we test operations that depend upon them. (Note: it is the operations of the components under test that depend upon each other, not the tests themselves that depend upon each other!) So, if a fundamental operation fails, we want that to be the very first error that gets reported.&lt;/p&gt;
&lt;p&gt;Tests of operations that rely upon an operation whose test has failed might as well be skipped, because they can all be expected to fail. Reporting those failures before the failure of the more fundamental operation is an act of sabotage against the developer, because it is sending us looking for problems in places where there are no problems to be found, and it is making it more difficult for us to locate the real problem, which typically lies in the test that failed first &lt;em&gt;&lt;strong&gt;in the source file&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To give an example, suppose I am developing some kind of data store with insert and find functionality, and I am writing tests to make sure this functionality works. The find-item-in-store test necessarily involves insertion before finding, so I am likely to precede it with an insert-item-to-store test. In such a scenario, it is counter-productive to be told that my find-item-in-store test failed, sending me to troubleshoot the find function, and only later to be told that my insert-item-to-store test failed, which obviously means that it was in fact the insert function that needed troubleshooting; if insert-item-to-store fails, it is game over; no other operation on this store can possibly succeed, so there is no point in running any other tests on it, just as there is no point in beating a dead horse.&lt;/p&gt;
&lt;p&gt;Finally, another very simple, very straightforward, and very important reason for wanting the test methods to be executed in natural order is because seeing the test methods listed in any other order is &lt;em&gt;&lt;strong&gt;brainfuck&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A related rant can be found here: &lt;a 
   href=&#34;//localhost:1313/p/on-junits-random-order-of-test-method-execution/&#34;
   &gt;On JUnit&amp;rsquo;s random order of test method execution&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;why-should-i-care-for-running-test-methods-in-ascending-order-of-inheritance&#34;&gt;Why should I care for running test methods in ascending order of inheritance?
&lt;/h3&gt;&lt;p&gt;This feature of Testana might be irrelevant to you if you never use inheritance in test classes, but I do, and I consider it very important. I also consider the typical behavior of existing test frameworks on this matter very annoying, because they tend to do the exact opposite of what is useful.&lt;/p&gt;
&lt;p&gt;Inheritance in test classes can help to achieve great code coverage while reducing the total amount of test code. Suppose you have a collection hierarchy to test: you have an ArrayList class and a HashSet class, and you also have their corresponding test classes: ArrayListTest and HashSetTest. Now, both ArrayList and HashSet inherit from Collection, which means that lots of tests are going to be identical between ArrayListTest and HashSetTest. One way to eliminate duplication is to have a CollectionTest abstract base class, which tests only Collection methods, and then have both ArrayListTest and HashSetTest inherit from CollectionTest and provide additional tests for functionality that is specific to ArrayList and HashSet respectively. Under this scenario, when ArrayListTest or HashSetTest runs, we want the methods of CollectionTest to be executed first, because they are testing the fundamental (more general) functionality.&lt;/p&gt;
&lt;p&gt;To make the example more specific, CollectionTest is likely to add an item to the collection and then check whether the collection contains the item. If this test fails, there is absolutely no point in proceeding with tests of ArrayListTest which will, for example, add multiple items to the collection and check to make sure that IndexOf() returns the right results.&lt;/p&gt;
&lt;p&gt;Again, existing test frameworks tend to handle this in a way which is exactly the opposite of what we would want: they execute the descendant (more specialized) methods first, and the ancestor (more general) methods last.&lt;/p&gt;
&lt;p&gt;Testana corrects this by executing ancestor methods first, descendant methods last.&lt;/p&gt;
&lt;h3 id=&#34;what-additional-error-checking-does-testana-perform&#34;&gt;What additional error checking does Testana perform?
&lt;/h3&gt;&lt;p&gt;While running tests, Testana will warn the programmer if it discovers any method that has been declared as a test method but fails to meet the requirements for a test method.&lt;/p&gt;
&lt;p&gt;Usually, test frameworks require that a test method must be a public instance method, must accept no parameters, and must return nothing; however, when these frameworks encounter a method that is declared as a test and yet fails to meet those requirements, (for example, a test method declared static,) they fail to report the mistake.&lt;/p&gt;
&lt;p&gt;Testana does not fail to report such mistakes.&lt;/p&gt;
&lt;h3 id=&#34;can-testana-be-fooled-by-inversion-of-control&#34;&gt;Can Testana be fooled by Inversion of Control?
&lt;/h3&gt;&lt;p&gt;No. In a scenario where class A receives and invokes interface I without having a dependency on class B which implements I, the test of A still has to instantiate both A and B in order to supply A with the I interface of B, so the test depends on both A and B, which means that Testana will run the test if there is a change in either A or B.&lt;/p&gt;
&lt;h3 id=&#34;can-testana-be-fooled-by-the-use-of-mocks&#34;&gt;Can Testana be fooled by the use of mocks?
&lt;/h3&gt;&lt;p&gt;Yes, Testana can be fooled by mocks, because that is what mocks do: they make a mockery out of the software testing process. In a scenario where class A receives and invokes interface I without having a dependency on class B which implements I, and the test of A also refrains from depending on B by just mocking I, Testana will of course not run the test of A when there is a change in B. This, however, should not be a problem, because you should not be using mocks anyway; for more information, see &lt;a 
   href=&#34;//localhost:1313/p/if-you-are-using-mock-objects-you-are-doing-it-wrong/&#34;
   &gt;If you are using mock objects you are doing it wrong&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;can-testana-be-fooled-by-the-use-of-fakes&#34;&gt;Can Testana be fooled by the use of fakes?
&lt;/h3&gt;&lt;p&gt;No, as long as you do your testing properly. A test that utilizes a fake will be run by Testana only when there is a change in the fake, not when there is a change in the real thing; however, you should have a separate test which ensures that the behavior of the fake is identical to the behavior of the real thing in all aspects that matter. This test will be run by Testana when you modify either the fake, or the real thing, or both. Thus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you make a breaking change to the real thing, then your tests will show you that you need to make the corresponding change to the fake; the change in the fake will in turn cause Testana to run the tests that utilize the fake.&lt;/li&gt;
&lt;li&gt;If you make a non-breaking change to the real thing, then the fake will remain unchanged, and this is what gives you the luxury of not having to re-run tests utilizing the fake when you make a change that only affects the real thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, see &lt;a 
   href=&#34;//localhost:1313/p/testing-with-fakes-instead-of-mocks/&#34;
   &gt;Testing with Fakes instead of Mocks&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;what-about-undiscoverable-dependencies-due-to-weak-typing-the-use-of-rest-etc&#34;&gt;What about undiscoverable dependencies due to weak typing, the use of REST, etc?
&lt;/h3&gt;&lt;p&gt;The following &amp;ldquo;hip&amp;rdquo; and &amp;ldquo;trendy&amp;rdquo; practices of the modern day are not supported by Testana, and there is no plan to ever support them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Squandering dependencies via &lt;em&gt;&lt;strong&gt;weak typing&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Obscuring dependencies via &lt;em&gt;&lt;strong&gt;duck-typing&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Denaturing dependencies via &lt;em&gt;&lt;strong&gt;stringly-typing.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Disavowing dependencies via &lt;em&gt;&lt;strong&gt;configuration files&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Abnegating dependencies via &lt;em&gt;&lt;strong&gt;non-programmatic interfaces&lt;/strong&gt;&lt;/em&gt; such as REST.&lt;/li&gt;
&lt;li&gt;Fragmenting dependencies via &lt;em&gt;&lt;strong&gt;cross-language invocations&lt;/strong&gt;&lt;/em&gt; (following the &lt;em&gt;&lt;strong&gt;polyglot craze&lt;/strong&gt;&lt;/em&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Seriously, stop all this fuckery and use a single, &lt;em&gt;&lt;strong&gt;real&lt;/strong&gt;&lt;/em&gt; programming language, (that is, a programming language with &lt;em&gt;&lt;strong&gt;strong typing&lt;/strong&gt;&lt;/em&gt;,) encode your dependencies via the type system, and everything will be fine. For more information, see &lt;a 
   href=&#34;//localhost:1313/p/on-scripting-languages/&#34;
   &gt;On scripting languages&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;how-compatible-is-testana-with-what-i-already-have&#34;&gt;How compatible is Testana with what I already have?
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The Java implementation of Testana:
&lt;ul&gt;
&lt;li&gt;Works with maven projects (pom.xml files.)&lt;/li&gt;
&lt;li&gt;Supports JUnit 4.
&lt;ul&gt;
&lt;li&gt;Supports only the basic, minimum viable subset of JUnit 4 functionality, namely the @Test, @Before, @After, and @Ignore annotations, without any parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The C# implementation of Testana:
&lt;ul&gt;
&lt;li&gt;Works with MSBuild projects (.sln and .csproj files)&lt;/li&gt;
&lt;li&gt;Supports MSTest.
&lt;ul&gt;
&lt;li&gt;Supports only the basic, minimum viable subset of MSTest functionality, namely the [TestClass], [TestMethod], [ClassInitialize], [ClassCleanup], and [Ignore] attributes, without any parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Support for more languages, more project formats, more test frameworks, and more functionality may be added in the future.&lt;/p&gt;
&lt;h3 id=&#34;how-is-it-like-using-testana&#34;&gt;How is it like using Testana?
&lt;/h3&gt;&lt;p&gt;You run Testana every time you want to run your tests. You launch it at the root of your source tree, without any command-line arguments, and its default behavior is to figure out everything by itself and do the right thing.&lt;/p&gt;
&lt;p&gt;Note that the first time you run Testana, there may be a noticeable delay while information is being collected; the information is cached, so this delay will not be there next time you run Testana.&lt;/p&gt;
&lt;p&gt;The first time you run Testana, it will run all tests.&lt;/p&gt;
&lt;p&gt;If you immediately re-run Testana, it will not run any tests, because nothing will have changed.&lt;/p&gt;
&lt;p&gt;If you touch one of your source files, build your project, and re-run Testana, it will only run tests that either directly or indirectly depend on the
changed file. If you run Testana with &amp;ndash;help it will give you a rundown of the command-line arguments it supports.&lt;/p&gt;
&lt;h3 id=&#34;where-can-i-find-testana&#34;&gt;Where can I find Testana?
&lt;/h3&gt;&lt;p&gt;The Java implementation of Testana is here:
&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/Public/tree/master/testana&#34; target=&#34;_blank&#34;
   &gt;https://github.com/mikenakis/Public/tree/master/testana&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The C# implementation of Testana is coming soon. (As soon as I turn it into an independent solution, because currently it is a project within a larger solution.)&lt;/p&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes
&lt;/h3&gt;&lt;p&gt;In episode 167 of the Software Engineering Podcast (&lt;a class=&#34;external&#34; 
   href=&#34;https://se-radio.net/2010/09/episode-167-the-history-of-junit-and-the-future-of-testing-with-kent-beck/&#34; target=&#34;_blank&#34;
   &gt;SE Radio 167: The History of JUnit and the Future of Testing with Kent Beck&lt;/a&gt;) at about 40&amp;rsquo;:00&amp;rsquo;&amp;rsquo; Kent Beck says that recently failed tests have the highest probability of failing again in the near future, so he suggests using this statistical fact at as a heuristic for picking which tests to run first. Testana optimizes the testing process deterministically, so there is no need to resort to heuristics.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: The Testana logo, &lt;em&gt;profile of a crash test dummy&lt;/em&gt; by michael.gr. Based on &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/term/crash-test-dummy/401583/&#34; target=&#34;_blank&#34;
   &gt;original work by Wes Breazell&lt;/a&gt; and &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/term/woman/129498/&#34; target=&#34;_blank&#34;
   &gt;Alexander Skowalsky&lt;/a&gt;. Used under &lt;a class=&#34;external&#34; 
   href=&#34;https://creativecommons.org/licenses/by/3.0/us/&#34; target=&#34;_blank&#34;
   &gt;CC BY License.&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>How to organize a Visual Studio Solution</title>
        <link>//localhost:1313/p/how-to-organize-a-visual-studio-solution/</link>
        <pubDate>Fri, 07 Jun 2024 15:58:23 +0000</pubDate>
        
        <guid>//localhost:1313/p/how-to-organize-a-visual-studio-solution/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/how-to-organize-a-visual-studio-solution/images/microsoft-visual-studio-2022-logo.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;

Visual Studio is a capricious product, and its &amp;ldquo;Solution&amp;rdquo; subsystem is especially capricious. When you look at what options are available you might think you have a great degree of freedom to structure things the way you want, but as you will inevitably (and painfully) find out later, many things have to be done in precisely one, entirely undocumented way, or else there will be pain of the worst kind: Visual Studio will malfunction either without any error message, or with error messages that are completely unhelpful for locating and fixing the problem.&lt;/p&gt;
&lt;p&gt;Here is a list of things I have (painfully) found out over the years.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;the-project-directory-structure-must-be-entirely-flat&#34;&gt;The project directory structure must be entirely flat.
&lt;/h3&gt;&lt;p&gt;All project files must reside in directories that are immediate sub-directories of the solution directory. When adding a project you are given the freedom to put it in a directory anywhere you want, but if you don&amp;rsquo;t put it in a directory exactly under the solution directory, you are going to run into trouble later.&lt;/p&gt;
&lt;p&gt;If you have hundreds of projects, and you are thinking that putting them all in one directory is insane, welcome to the Microsoft world, where insane is the order of the day.&lt;/p&gt;
&lt;p&gt;From within Visual Studio, you can create what Microsoft calls &amp;ldquo;Solution Folders&amp;rdquo; to arrange your projects in a hierarchy at least within Visual
Studio&amp;rsquo;s &amp;ldquo;Solution Explorer&amp;rdquo; panel, but even this has a caveat, keep reading.&lt;/p&gt;
&lt;h3 id=&#34;the-startup-project-must-be-listed-first-in-the-solution-file&#34;&gt;The startup project must be listed first in the solution file.
&lt;/h3&gt;&lt;p&gt;Solution files are, luckily, text files. Solution files with the .sln extension are in a ridiculous ad-hoc format consisting of, among other things, entries delimited with &amp;ldquo;Project&amp;rdquo; and &amp;ldquo;EndProject&amp;rdquo; and making use of GUIDs to discourage anyone from touching it or even looking at it. Luckily they have now introduced .slnx files, which are a bit more lean, but they are now in XML, (Microsoft seems to be stuck in the 1980&amp;rsquo;s,) so they are still far more verbose than necessary, and they still contain GUIDs here and there. Regardless of the file format, you are free to edit the solution file and re-order these entries in any way you like, and it seems to have absolutely no effect because the Visual Studio Solution Explorer will sort them alphabetically anyway, but there is one kind of re-ordering that you can do which actually matters: The entry which stands for your startup project must be the first entry.&lt;/p&gt;
&lt;p&gt;If you do not do this, then each time you delete the .vs directory, restart Visual Studio, and try to launch your solution, you will be greeted with the all too familiar, extremely annoying, and extremely stupid message which says that you cannot launch a project which builds a library instead of an executable. This is happening because when the .vs directory is deleted, Visual Studio forgets the startup project, and when Visual Studio is launched with no startup project configured it absolutely has to establish a startup project, and it absolutely has to do this automatically, without asking you. In doing so, it picks the first project that it finds in the solution file, and it is not smart enough to skip projects that build libraries instead of executables.&lt;/p&gt;
&lt;h3 id=&#34;the-startup-project-must-not-be-nested-in-a-solution-folder&#34;&gt;The startup project must not be nested in a solution folder.
&lt;/h3&gt;&lt;p&gt;As mentioned earlier, you can use &amp;ldquo;Solution Folders&amp;rdquo; to arrange your projects in a hierarchy; however, the project that you usually want to have as the startup project must not be nested in a solution folder, it must be placed right under the root node of the solution.&lt;/p&gt;
&lt;p&gt;If you nest your startup project in a solution folder, then Visual Studio will again, entirely capriciously, ignore it when automatically selecting a project as the startup project each time you delete the .vs directory.&lt;/p&gt;
&lt;h3 id=&#34;test-projects-must-be-given-names-that-end-in--test-yes-that-is-a-space&#34;&gt;Test projects must be given names that end in &amp;quot; Test&amp;quot;. (Yes, that is a space.)
&lt;/h3&gt;&lt;p&gt;Usually, projects come in pairs: there is a production project, and a test project. Usually, we give the test project the same name as the production
project, with a suitable suffix to indicate that this is a test project. If your production project is called &amp;ldquo;Covfefe&amp;rdquo;, you might think that you have
plenty of options to call your test project: &amp;ldquo;CovfefeTest&amp;rdquo;, &amp;ldquo;Covfefe.Test&amp;rdquo;, &amp;ldquo;Covfefe-Test&amp;rdquo;, &amp;ldquo;Covfefe_Test&amp;rdquo;, etc. Actually, none of these will work. You have to call it &amp;ldquo;Covfefe Test&amp;rdquo;, with a space before &amp;ldquo;Test&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This is because the Visual Studio Solution Explorer uses different sorting rules from Windows File Explorer, so if you use anything but &amp;quot; Test&amp;quot; as a suffix for test projects you will find your projects listed in a different order between the Solution Explorer and the File Explorer. Depending on what you choose, your test projects will appear either before or after your production projects, either in Solution Explorer or in File Explorer, but not in both. The only trick I have been able to find which causes the test projects to always be listed after the production projects both in Solution Explorer and in File Explorer is to make each test project name consist of the production project name suffixed with &amp;quot; Test&amp;quot; (with a space.)&lt;/p&gt;
&lt;p&gt;Aaaand, of course, even with this, there is a catch: if you name your projects as I suggested, they will appear in the wrong order when viewing your solution directory on GitHub. Because GitHub uses yet different sorting rules. So, there is no way to achieve a consistent look both in Windows File Explorer, and Visual Studio Solution Explorer, and GitHub.&lt;/p&gt;
&lt;h4 id=&#34;solution-items-must-be-placed-in-a-custom-_solution-items-folder&#34;&gt;Solution items must be placed in a custom &amp;ldquo;_Solution Items&amp;rdquo; folder.
&lt;/h4&gt;&lt;p&gt;Solution-level items are a fiasco to begin with; they only exist because the Visual Studio Solution Explorer capriciously hides solution-level files from the user. Instead, Visual Studio offers the &amp;ldquo;Solution Items&amp;rdquo; workaround, which is a solution folder under the solution node where you can manually place links to solution-level files that you want to be able to access. (Because having to manually create links to your own files so that you can access them is always fun.)&lt;/p&gt;
&lt;p&gt;The default name that Visual Studio gives to this folder is &amp;ldquo;Solution Items&amp;rdquo;. The first thing you must do with it is to rename it to &amp;ldquo;_Solution Items&amp;rdquo;, so that it will be sorted first in the list, otherwise it will be hidden among other solution folders.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2024-12-27 16:05:14 UTC&lt;/p&gt;
&lt;p&gt;Thank you for sharing your experiences and all the useful info.
Visual Studio is increasingly becoming such a bloatware, while still missing quite a lot of basic fundamental functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Incident Impact Calculation Formula</title>
        <link>//localhost:1313/p/incident-impact-calculation-formula/</link>
        <pubDate>Fri, 31 May 2024 12:53:30 +0000</pubDate>
        
        <guid>//localhost:1313/p/incident-impact-calculation-formula/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/incident-impact-calculation-formula/images/titanic.jpg&#34;
	width=&#34;2000&#34;
	height=&#34;1324&#34;
	srcset=&#34;//localhost:1313/p/incident-impact-calculation-formula/images/titanic_hu_a174135a2296b398.jpg 480w, //localhost:1313/p/incident-impact-calculation-formula/images/titanic_hu_d680cbb4b8484329.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;151&#34;
		data-flex-basis=&#34;362px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;The Mike Nakis formula for calculating the impact of an incident:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I = S × G × T&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I is the impact of the incident.&lt;/li&gt;
&lt;li&gt;S is the severity of the incident.&lt;/li&gt;
&lt;li&gt;G is the geographic pervasiveness of the incident.&lt;/li&gt;
&lt;li&gt;T is the temporal pervasiveness of the incident.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An incident of high severity does not have high impact if it happens rarely and in only a few places.&lt;/li&gt;
&lt;li&gt;An incident of low severity can have high impact if it is persistent and widespread.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;The sinking of the Titanic was certainly a disaster, but it was largely an isolated incident: it happened only once, on the 15th of April 1912, and only in one place, at 41°43&#39;32&amp;rsquo;&amp;lsquo;N 49°56&#39;49&amp;rsquo;&amp;lsquo;W; we have not had anything quite like that happening before, and we have been doing a decent job at avoiding similar incidents ever since, so in the big picture, it is not of particularly high impact.&lt;/p&gt;
&lt;p&gt;On the other hand:&lt;/p&gt;
&lt;p&gt;A modern computer taking several long seconds to reboot, despite having a multi-core, multi-gigahertz, hyper-threaded and pipelined CPU with multi-level cache and solid-state storage, is something that affects &lt;em&gt;&lt;strong&gt;everyone&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;everywhere, every day&lt;/strong&gt;&lt;/em&gt;, so it does in fact have &lt;em&gt;quite a high impact.&lt;/em&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Simplification of triple-choice prompts to dual-choice</title>
        <link>//localhost:1313/p/simplification-of-triple-choice-prompts-to-dual-choice/</link>
        <pubDate>Fri, 31 May 2024 09:53:03 +0000</pubDate>
        
        <guid>//localhost:1313/p/simplification-of-triple-choice-prompts-to-dual-choice/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/simplification-of-triple-choice-prompts-to-dual-choice/images/image.png&#34;
	width=&#34;400&#34;
	height=&#34;132&#34;
	srcset=&#34;//localhost:1313/p/simplification-of-triple-choice-prompts-to-dual-choice/images/image_hu_f5edf689a035ac41.png 480w, //localhost:1313/p/simplification-of-triple-choice-prompts-to-dual-choice/images/image_hu_c6205dafb643c637.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;303&#34;
		data-flex-basis=&#34;727px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;I have a lot to say about the modern trend in graphical user interface design which aims to achieve an impossibly clean look at the expense of usability, but this is going to be the subject of another blog post. In this post, I want to talk about simplifying the user interface when the simplification is clearly a win, both from a usability point of view and, incidentally, from an aesthetics point of view. Specifically, I want to show how a yes/no/cancel prompt can be reduced to just a yes/cancel prompt.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;A typical example of such a prompt is when an application asks the user what to do when the user tries to quit the application while a file is unsaved.&lt;/p&gt;
&lt;p&gt;We have two boolean variables:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To save or not to save.&lt;/li&gt;
&lt;li&gt;To quit or not to quit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since there are two boolean variables, there is a total of four conceivable options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Save and quit.&lt;/li&gt;
&lt;li&gt;Quit without saving.&lt;/li&gt;
&lt;li&gt;Save without quitting.&lt;/li&gt;
&lt;li&gt;Do not save and do not quit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The very first programmers of interactive applications did not fail to notice that saving without quitting is not particularly useful, so in fact we only need three options, and this has given us the traditional triple-choice yes / no / cancel prompt, variations of which you see in almost all applications out there. One of the variations is as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Save the file before quitting? [Yes] / [No] / [Cancel]&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Needless to say, presenting the user with an application-modal prompt containing not one, not two, but three options is terrible. (If you think that
&amp;ldquo;terrible&amp;rdquo; is a harsh word for such a low-impact problem, then please read &lt;a 
   href=&#34;//localhost:1313/p/incident-impact-calculation-formula/&#34;
   &gt;Incident Impact Calculation Formula&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Note that the replacement of a generic &amp;ldquo;Yes&amp;rdquo; / &amp;ldquo;No&amp;rdquo; / &amp;ldquo;Cancel&amp;rdquo; prompt with a more specific &amp;ldquo;Save and exit&amp;rdquo; / &amp;ldquo;Exit without saving&amp;rdquo; / &amp;ldquo;Do not exit&amp;rdquo; prompt is probably an improvement, but this is not what I am discussing here. I would like to reduce the number of choices to less than three; once the number of choices has been reduced, finding some better wording for the remaining choices is all the better.&lt;/p&gt;
&lt;p&gt;Also note that the best solution to multiple choice application-modal prompts is of course to restructure software, to rethink software from scratch if need be, so that they can be completely eliminated. For example, all prompts about saving before quitting could be a thing of the past if we were to abandon the notion of saving, or even the notion of quitting. However, such exotic approaches are off-topic in this discussion.&lt;/p&gt;
&lt;p&gt;A blog author who has also examined the problem of triple-choice prompts, and explains it better than me, is &lt;a class=&#34;external&#34; 
   href=&#34;https://martin.kleppmann.com/2007/07/19/yes-no-cancel-causes-aspirin-sales-to-soar.html&#34; target=&#34;_blank&#34;
   &gt;Martin Kleppmann in &amp;ldquo;Yes/No/Cancel causes Aspirin sales to soar&amp;rdquo;&lt;/a&gt;.  Interestingly enough, Martin Kleppmann follows a thought process which is similar to mine, but does not present a proposal as to what to do instead.&lt;/p&gt;
&lt;p&gt;So, here is my contribution to the subject:&lt;/p&gt;
&lt;p&gt;Quite often, a triple choice prompt can be simplified to a dual-choice prompt!&lt;/p&gt;
&lt;p&gt;We can eliminate the option to save and quit because we offer the option to not quit, which, if chosen, makes saving or not saving irrelevant: for as long as the application is still running, the user can always achieve saving and quitting by simply saving, and then quitting. (Duh!)&lt;/p&gt;
&lt;p&gt;Thus, we can offer the following simplified prompt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quit without saving? [Yes] / [Cancel]&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The only way in which this could be further simplified would be to tell the user that they cannot quit because they have unsaved changes, and only show an [OK] button, but that would be annoying.&lt;/p&gt;
&lt;p&gt;The traditional triple-choice prompt may have been invented for the benefit of users who are in the habit of quitting while having unsaved changes that they intend to keep, but I hope that we can all agree that this is not a healthy habit worth facilitating, certainly not if facilitating it would add the slightest bit of inconvenience to other, more legitimate, (and I suspect more frequently occurring,) use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The user quits intending to revert changes.&lt;/li&gt;
&lt;li&gt;The user attempts to quit while unaware that they have made changes.&lt;/li&gt;
&lt;li&gt;The user does not intend to quit, but issues the quit command accidentally.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Special workflows can be facilitated by separate commands that specially target such workflows. For example, saving every single unmodified file can be accomplished with a &amp;ldquo;Save All&amp;rdquo; command, and this has the benefits of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Being useful at any time, not only when quitting, and&lt;/li&gt;
&lt;li&gt;Sparing the user from having to do one click per unmodified file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To summarize:&lt;/p&gt;
&lt;p&gt;Presenting the user with only two choices is immensely better than presenting the user with three choices, when the missing choice can be trivially accomplished by the user, in a way which is intuitively obvious to the user.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Continuous Code Quality Improvement</title>
        <link>//localhost:1313/p/continuous-code-quality-improvement/</link>
        <pubDate>Fri, 12 Apr 2024 10:48:53 +0000</pubDate>
        
        <guid>//localhost:1313/p/continuous-code-quality-improvement/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/continuous-code-quality-improvement/images/quality.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;

While working on code in the context of a certain task, a programmer often discovers some preexisting quality issue. When this happens, there is a choice to be made:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fix the quality issue on the spot, and commit the fix in the context of the task at hand; or:&lt;/li&gt;
&lt;li&gt;Only make changes that are strictly necessary for the task at hand, and introduce a separate task for fixing the quality issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The practice of continuously improving the quality of the code-base is called &lt;em&gt;&lt;strong&gt;Boy-Scouting&lt;/strong&gt;&lt;/em&gt;. The term comes from a rule of the &lt;em&gt;&lt;strong&gt;Boy Scouts of America&lt;/strong&gt;&lt;/em&gt; that says: &lt;em&gt;&lt;strong&gt;Always leave the campground cleaner than you found it&lt;/strong&gt;&lt;/em&gt;. In the first chapter of &lt;em&gt;Clean Code&lt;/em&gt; by Robert C. Martin there is a
short section titled &lt;em&gt;The Boy Scout Rule&lt;/em&gt; where the author gives an adaptation of that rule for software: &lt;em&gt;&lt;strong&gt;Always leave the code you are editing a little better than you found it&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Opinions vary as to exactly what constitutes Boy-Scouting, and whether it is a good thing or a bad thing. Some people believe that Boy-Scouting should be avoided; they say that when a quality issue is discovered while working on a certain task, a new ticket must always be created and handled separately.&lt;/p&gt;
&lt;p&gt;I once worked at a company where different development teams within the same department had different approaches: most frowned upon boy-scouting, but some embraced it. Since Boy-Scouting had a bad name overall within that company, one team that insisted on practicing it decided to rebrand it by inventing their own term for it: they called it &lt;em&gt;&lt;strong&gt;Quality Osmosis&lt;/strong&gt;&lt;/em&gt;. (TopDesk, Team Octarine 2016-2017.)&lt;/p&gt;
&lt;h4 id=&#34;the-problem&#34;&gt;The problem
&lt;/h4&gt;&lt;p&gt;Arguments raised against Boy-Scouting include the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Boy-Scouting interferes with time tracking, because the hours it takes to complete a certain task get inflated by fixing quality issues, whereas the hours spent on fixing quality issues is unaccounted for.&lt;/li&gt;
&lt;li&gt;Boy-Scouting renders quality improvements untraceable, because each quality improvement is hidden inside a commit for some other task.&lt;/li&gt;
&lt;li&gt;Boy-Scouting adds extra burden to code review, because the reviewer has to examine not only the changes for the task at hand, but also additional changes that are unrelated to, or strictly speaking unnecessary for, or in any case not directly aiming to solve, the task at hand.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Furthermore, Boy-Scouting is viewed as undesirable in some management-heavy environments because it is seen as giving programmers too much autonomy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boy-Scouting implies that programmers are free to get sidetracked, instead of always being laser-focused on (what management perceives to be) their job.&lt;/li&gt;
&lt;li&gt;Boy-Scouting implies that programmers have carte blanche to be making any modifications they see fit to the code base without prior authorization, so who knows what else they might be doing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Note that these concerns are rarely voiced, but often implied.)&lt;/p&gt;
&lt;p&gt;Let us look at the different kinds of quality issues that may be encountered while working on a task:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Low-impact&lt;/strong&gt; - e.g. a misspelled identifier or a violation of formatting guidelines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Medium-impact&lt;/strong&gt; - e.g. a code construct which is more convoluted than necessary and could be simplified to make it more understandable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High-impact:&lt;/strong&gt; - e.g. a previously undiscovered bug.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Low-impact issues&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A low impact quality issue is by definition so trivial that it is not worth creating a new task for it; imagine a ticket with the title &amp;ldquo;fix spelling mistake in identifier such-and-such&amp;rdquo; or &amp;ldquo;abstract class so-and-so constructor is public, make it protected&amp;rdquo;; nobody wants to go through the motions of creating, grooming, and resolving such tickets; everyone is better off if no such tickets ever exist. So, unless the low-impact issue gets fixed the moment it is discovered, and committed as part of the task at hand, it will never get fixed. This means that we can safely establish the following rule:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When a low-impact quality issue is discovered while working on a certain task, the quality issue should be fixed on the spot, and committed as part of the task at hand.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Note that fixing a spelling mistake may involve modifying a large number of source files, which would not otherwise need to be modified in the context of the task at hand; this means that the code reviewer will have more work to do; we will address this problem later.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Medium-impact and high-impact issues&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A medium-impact or high-impact quality issue does, in principle, deserve creating a separate ticket for, but first we need to ask whether it can actually be handled separately from the task at hand, because if not, then creating a separate ticket is moot point.&lt;/p&gt;
&lt;p&gt;If it is known beyond a shadow of a doubt that the quality issue does not interfere at all with the task at hand, then the straightforward approach is in fact to create a separate ticket for the quality issue, and handle it after the task at hand has been completed; however, it is often very difficult to know for sure that a piece of code really does not affect another piece of code. There may be obscure mechanisms at play, through which a malfunction creeps through the system in non-obvious ways, and manifests in another place that nobody expected.&lt;/p&gt;
&lt;p&gt;When we come across a code construct which is convoluted or buggy, what we essentially have in our hands is code that works in mysterious ways, so we do not necessarily know exactly how it behaves; we could try to reason about that code, throw the debugger at it if necessary, get down to the bottom of it, and determine whether it does in fact interfere or not with the task at hand, but:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nobody has time for that.&lt;/li&gt;
&lt;li&gt;It is futile, because the convoluted or buggy code has to be fixed anyway.&lt;/li&gt;
&lt;li&gt;Whatever conclusion you arrive to, can you actually be sure?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ascertaining that two different parts of a software system are completely isolated from each other is difficult, in the same way that it is difficult to ascertain pretty much anything when it comes to code. (See &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Halting_problem&#34; target=&#34;_blank&#34;
   &gt;Halting Problem&lt;/a&gt;.) As a matter of fact, it is so difficult, that we usually prefer to not have to ascertain things ourselves, and to write tests instead, that will ascertain things for us. However, writing tests to check whether flawed code interferes or not with other code is an exercise in futility, especially if we consider that the flawed code has to be fixed, sooner or later, anyway.&lt;/p&gt;
&lt;p&gt;Therefore, when a quality issue is discovered while working on a certain task, and we suspect that it might be interfering with the task, it must be treated as if it does.&lt;/p&gt;
&lt;h3 id=&#34;the-bureaucracy&#34;&gt;The bureaucracy
&lt;/h3&gt;&lt;p&gt;Now, some will insist that even if the quality issue interferes, or is suspected to interfere, with the task at hand, and must therefore be resolved before the task can be completed, the quality issue must nonetheless be resolved as a separate ticket. Let us look at the workflow necessary for that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Work on the task at hand must be suspended.&lt;/li&gt;
&lt;li&gt;A new ticket must be created for the quality issue, and given immediate priority.&lt;/li&gt;
&lt;li&gt;A new branch must be created, from master, for fixing the quality issue.&lt;/li&gt;
&lt;li&gt;A fix for the quality issue must be devised, coded, tested, and committed.&lt;/li&gt;
&lt;li&gt;The changes made in the new branch must undergo code review.&lt;/li&gt;
&lt;li&gt;The reviewed branch must be merged into the master branch.&lt;/li&gt;
&lt;li&gt;The master branch must be merged into the branch of the task at hand.&lt;/li&gt;
&lt;li&gt;Merge conflicts must be resolved.&lt;/li&gt;
&lt;li&gt;Work on the task at hand can now resume.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that merge conflicts are very likely to happen even if nobody else in the entire shop has touched the code in the mean time, because the quality issue was discovered while working on the task at hand, therefore the code affected by fixing the quality issue most likely overlaps with code that has already been modified in the context of the task at hand.&lt;/p&gt;
&lt;p&gt;Also note that the programmer who is likely to fix the quality issue is the same programmer who was working on the original task, because they are probably free, since work on the original task has been suspended. When this programmer started working on the original task, they branched off from master; the code coming from master had a certain shape, and then they started making changes to it, giving it a new shape, which they are now intimately familiar with. By going back and branching off from master again in order to fix the quality issue, this programmer is now faced with the code in its original shape, which is in conflict with the shape that they have become intimately familiar with; this is &lt;em&gt;&lt;strong&gt;brainfuck&lt;/strong&gt;&lt;/em&gt;. When the programmer is done fixing the quality issue and returns to the branch of the task at hand, there is bound to be &lt;em&gt;&lt;strong&gt;more brainfuck&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Apparently, there are no limits to the bureaucracy and the inconvenience that some people are willing to suffer in the name of some purist notion of &amp;ldquo;doing things right&amp;rdquo;. I prefer a more pragmatic approach.&lt;/p&gt;
&lt;h3 id=&#34;enter-continuous-code-quality-improvement-ccqi&#34;&gt;Enter Continuous Code Quality Improvement (CCQI)
&lt;/h3&gt;&lt;p&gt;&lt;sup&gt;&lt;sub&gt;a.k.a. Boy-Scouting / Quality Osmosis.&lt;/sub&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;When a quality issue is discovered while working on a certain task, and the issue interferes, or it is suspected to interfere, with the task at hand, then the quality issue should be fixed on the spot, (while the programmer is &lt;em&gt;in the flow&lt;/em&gt;,) and committed as part of the task at hand.&lt;/p&gt;
&lt;p&gt;If someone wants to create a ticket, fine, but then a single commit will constitute a fix for multiple tickets.&lt;/p&gt;
&lt;p&gt;Of course, an exception to this rule is the case where fixing the quality issue is going to be a month-long project in and of itself, in which case another pragmatic approach is necessary: make do with the quality issue as it is for the time being, and handle it later, when a month is available to spare.&lt;/p&gt;
&lt;h3 id=&#34;what-about-time-tracking&#34;&gt;What about time-tracking?
&lt;/h3&gt;&lt;p&gt;As mentioned earlier, Boy-Scouting interferes with time tracking, because the hours it takes to complete a certain task get inflated by fixing quality issues, whereas the hours spent on fixing quality issues is unaccounted for.&lt;/p&gt;
&lt;p&gt;The solution to this is simple: whoever is in charge of time-tracking should be using larger error bars. The work of the programmers is difficult enough as it stands, it will not be made more difficult for the convenience of those who do time-tracking.&lt;/p&gt;
&lt;h3 id=&#34;what-about-the-commit-history&#34;&gt;What about the commit history?
&lt;/h3&gt;&lt;p&gt;As mentioned earlier, Boy-Scouting renders the history of quality improvements
untraceable, because each quality improvement is hidden inside a commit for
some other task.&lt;/p&gt;
&lt;p&gt;The solution to this is also simple: there shall be no traceable history for quality improvements, because quality improvements are being continuously applied to the code-base as it is being worked on.&lt;/p&gt;
&lt;h3 id=&#34;what-about-code-review&#34;&gt;What about code review?
&lt;/h3&gt;&lt;p&gt;As mentioned earlier, Boy-Scouting adds extra burden to code review, because the reviewer has to examine not only changes pertinent to the task at hand, but also changes that are unrelated to, or strictly speaking unnecessary for, or in any case not directly aiming to solve, the task at hand.&lt;/p&gt;
&lt;p&gt;The solution to this is the simplest of all: the reviewer needs to get used to it.&lt;/p&gt;
&lt;h3 id=&#34;and-what-about-the-management&#34;&gt;And what about the management?
&lt;/h3&gt;&lt;p&gt;As mentioned earlier, management tends to be skeptical of Boy-Scouting because it gives programmers too much autonomy.&lt;/p&gt;
&lt;p&gt;The solution to this is very similar to the solution for code review: the management needs to get used to it. If programmers are competent enough to work on software development tasks, they are competent enough to decide exactly what needs to be done in the context of each task.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image by &lt;a class=&#34;external&#34; 
   href=&#34;https://michael.gr/&#34; target=&#34;_blank&#34;
   &gt;michael.gr&lt;/a&gt; based on &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/icon/quality-6554761/&#34; target=&#34;_blank&#34;
   &gt;&amp;ldquo;Quality&amp;rdquo; by Sutriman&lt;/a&gt; (CC BY 3.0), &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/icon/thumb-up-2107329/&#34; target=&#34;_blank&#34;
   &gt;&amp;ldquo;Thumb up&amp;rdquo; by Sewon Park&lt;/a&gt; (CC BY 3.0), and &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/icon/five-stars-5786731/&#34; target=&#34;_blank&#34;
   &gt;&amp;ldquo;Five Stars&amp;rdquo; by Tyler Gobberdiel&lt;/a&gt; (CC BY 3.0), from &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com&#34; target=&#34;_blank&#34;
   &gt;the Noun Project&lt;/a&gt;.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Artificial Code Coverage</title>
        <link>//localhost:1313/p/artificial-code-coverage/</link>
        <pubDate>Tue, 26 Mar 2024 15:01:55 +0000</pubDate>
        
        <guid>//localhost:1313/p/artificial-code-coverage/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/artificial-code-coverage/images/patrick-robert-doyle-UrHNIeIjoE4-unsplash.jpg&#34;
	width=&#34;3258&#34;
	height=&#34;1890&#34;
	srcset=&#34;//localhost:1313/p/artificial-code-coverage/images/patrick-robert-doyle-UrHNIeIjoE4-unsplash_hu_d19487727715a135.jpg 480w, //localhost:1313/p/artificial-code-coverage/images/patrick-robert-doyle-UrHNIeIjoE4-unsplash_hu_15abe3b3c0c4821e.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;413px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;abstract&#34;&gt;Abstract
&lt;/h3&gt;&lt;p&gt;In this paper I put forth the proposition that contrary to popular belief, 100% code coverage can be a very advantageous thing to have, and I discuss a technique for achieving it without excessive effort.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The problem
&lt;/h3&gt;&lt;p&gt;Conventional wisdom says that 100% code coverage is unnecessary, or even undesirable, because achieving it requires an exceedingly large amount of effort &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; for the purpose of asserting correctness, but instead for the sole purpose of achieving coverage. In other words, it is often said that 100% code coverage has no business value.&lt;/p&gt;
&lt;p&gt;Let me tell you why this is wrong, and why 100% code coverage can indeed be a very good thing to have.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t have 100% code coverage, then by definition, you have some lower percentage, like 87.2%, or 94.5%. The remaining 12.8%, or 5.5% is uncovered. I call this &lt;em&gt;&lt;strong&gt;the worrisome percentage.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As you keep working on your code base, the worrisome percentage fluctuates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one day you might add a test for some code that was previously uncovered, so the worrisome percentage decreases;&lt;/li&gt;
&lt;li&gt;another day you may add some code with no tests, so the percentage increases;&lt;/li&gt;
&lt;li&gt;yet another day you may add some more code along with tests, so even though the number of uncovered lines has not changed, it now represents a smaller percentage;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip; and it goes on like that.&lt;/p&gt;
&lt;p&gt;If the worrisome percentage is high, then you know for sure that you are doing a bad job, but if it is low, it does not mean that you are doing a good job, because some very important functionality may be left uncovered, and you just do not know. To make matters worse, modern programming languages offer constructs that achieve great terseness of code, meaning that a few uncovered lines may represent a considerable amount of uncovered functionality.&lt;/p&gt;
&lt;p&gt;So, each time you look at the worrisome percentage, you have to wonder what is in there: are all the important lines covered? are the uncovered lines okay to be left uncovered?&lt;/p&gt;
&lt;p&gt;In order to answer this question, you have to go over every single line of code in the worrisome percentage, and examine it to determine whether it is okay that it is being left uncovered. What you find is, more often than not, the usual suspects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some &lt;code&gt;ToString()&lt;/code&gt; function which is only used for diagnostics;&lt;/li&gt;
&lt;li&gt;Some &lt;code&gt;Equals()&lt;/code&gt; and &lt;code&gt;HashCode()&lt;/code&gt; functions of some value type which does not currently happen to be used as a key in a hash-map;&lt;/li&gt;
&lt;li&gt;Some &lt;code&gt;default&lt;/code&gt; &lt;code&gt;switch&lt;/code&gt; clause which can never be reached, and if it was to ever be reached it would throw;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip; etc.&lt;/p&gt;
&lt;p&gt;So, your curiosity is satisfied, your worries are allayed, and you go back to your usual software development tasks.&lt;/p&gt;
&lt;p&gt;A couple of weeks later, the worrisome percentage has changed again, prompting the same question: what is being left uncovered now?&lt;/p&gt;
&lt;p&gt;Each time you need to have this question answered, you have to re-examine every single line of code in the worrisome percentage. As you do this, you discover that in the vast majority of cases, the lines that you are examining now are the exact same lines that you were examining the previous time you were going through this exercise. After a while, this starts getting tedious. Eventually, you quit looking. Sooner or later, everyone in the shop quits looking.&lt;/p&gt;
&lt;p&gt;The worrisome percentage has now become &lt;em&gt;&lt;strong&gt;terra incognita&lt;/strong&gt;&lt;/em&gt;: literally anything could be in there; nobody knows, and nobody wants to know, because finding out is such a dreary chore.&lt;/p&gt;
&lt;p&gt;That is not a particularly nice situation to be in.&lt;/p&gt;
&lt;h3 id=&#34;the-solution&#34;&gt;The solution
&lt;/h3&gt;&lt;p&gt;So, here is a radical proposition: If you always keep your code coverage at 100%, then the worrisome percentage is always zero, so there is nothing to worry about!&lt;/p&gt;
&lt;p&gt;When the worrisome percentage is never zero, then no matter how it fluctuates, it never represents an appreciable change in the situation: it always goes from some non-zero number to some other non-zero number, meaning that we used to have some code uncovered, and we still have some code uncovered. No matter what happens, there is no actionable item.&lt;/p&gt;
&lt;p&gt;On the other hand, if the worrisome percentage is normally zero, then each time it rises above zero it represents a definite change in the situation: you used to have everything covered, and now you have something uncovered. This signifies a clear call to action: the code that is now being left uncovered needs to be examined, and dealt with.&lt;/p&gt;
&lt;p&gt;By dealing with uncovered code as soon as it gets introduced, you bring the worrisome percentage back to zero, thus achieving two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You ensure that next time the worrisome percentage becomes non-zero, it will represent a new call to action.&lt;/li&gt;
&lt;li&gt;You never find yourself in the unpleasant situation of re-examining code that has been examined before; so, the examination does not feel like a dreary chore.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The conventional understanding of how to deal with uncovered code is to write a test for it, and that is why achieving 100% code coverage is regarded as onerous; however, there exist alternatives that are much easier. For any given piece of uncovered code, you have three options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Option #1: Write a test for the code.&lt;/p&gt;
&lt;p&gt;This is of course the highest quality option, but it does not always represent the best value for money, and it is not even always possible. You only need to do it if the code is important enough to warrant testing, and you can only do it if the code is in fact testable. If you write a test, you can still minimize the effort of doing so, by utilizing certain techniques that I talk about in other posts, such as &lt;a 
   href=&#34;//localhost:1313/p/audit-testing/&#34;
   &gt;Audit Testing&lt;/a&gt;, &lt;a 
   href=&#34;//localhost:1313/p/testing-with-fakes-instead-of-mocks/&#34;
   &gt;Testing with Fakes instead of Mocks&lt;/a&gt;, and &lt;a 
   href=&#34;//localhost:1313/p/incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Option #2: Exclude the code from code coverage.&lt;/p&gt;
&lt;p&gt;Code that is not testable, or not important enough to warrant testing, can be moved into a separate module which does not participate in coverage analysis. Alternatively, if your code coverage analysis tool supports it, you may be able to exclude individual methods without having to move them to another module. In the DotNet world, this can be accomplished by marking a method with &lt;a class=&#34;external&#34; 
   href=&#34;https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.excludefromcodecoverageattribute&#34; target=&#34;_blank&#34;
   &gt;the &lt;code&gt;ExcludeFromCodeCoverage&lt;/code&gt; attribute&lt;/a&gt;, found in the &lt;code&gt;System.Diagnostics.CodeAnalysis&lt;/code&gt; namespace. In the Java world, IntelliJ IDEA offers a setting for specifying what annotation we want to use for marking methods to be excluded from code coverage, so you can use any annotation you like. (See &lt;a 
   href=&#34;//localhost:1313/p/intellij-idea-can-now-exclude-methods-from-code-coverage/&#34;
   &gt;IntelliJ IDEA can now exclude methods from code coverage&lt;/a&gt;.) Various different code coverage analyzers support additional ways of excluding code from coverage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Option #3: Artificially cover the code.&lt;/p&gt;
&lt;p&gt;With the previous two options you should be able to bring the worrisome percentage down to a very small number, like 1 or 2 percent. What remains is code which should really be excluded from coverage, but it cannot, due to limitations in available tooling: although code coverage analyzers generally allow excluding entire functions from coverage analysis, they generally do not offer any means of excluding individual lines of code, such as the unreachable &lt;code&gt;default&lt;/code&gt; clause of some &lt;code&gt;switch&lt;/code&gt; statement. You can try moving that line into a separate function, and excluding that function, but you cannot exclude the call to that function, so the problem remains.&lt;/p&gt;
&lt;p&gt;The solution in these cases is to cause the uncovered code to be invoked during testing, &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; in order to test it, but simply in order to have it covered. This might sound like cheating, but it is not, because the stated objective was not to test the code, it was to exclude it from coverage. You would have excluded that line from coverage if the tooling supported doing so, but since it does not, the next best thing, (and the only option you are left with,) is to artificially include it in the code coverage.&lt;/p&gt;
&lt;p&gt;Here is a (hopefully exhaustive) list of all the different reasons due to which code might be left uncovered, and what to do in each case:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The code should really be covered, but you forgot to write tests for it, or you have plans to write tests in the future.&lt;/p&gt;
&lt;p&gt;Go with Option #1: write tests for it. Not in the future, &lt;em&gt;&lt;strong&gt;now&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The code is not used and there is no plan to use it.&lt;/p&gt;
&lt;p&gt;This is presumably code which exists for historical reasons, or for reference, or because it took some effort to write it and you do not want to admit that the effort was a waste by throwing away the code.&lt;/p&gt;
&lt;p&gt;Go with Option #2 and exclude it from coverage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The code is only used for diagnostics.&lt;/p&gt;
&lt;p&gt;The prime example of this is &lt;code&gt;ToString()&lt;/code&gt; methods that are not normally invoked in a production environment, but give informative
descriptions of our objects while debugging.&lt;/p&gt;
&lt;p&gt;Go with Option #2: Exclude such methods from coverage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The code is not normally reachable, but it is there in case something unexpected happens.&lt;/p&gt;
&lt;p&gt;The prime example of this is C# &lt;code&gt;switch&lt;/code&gt; statements that cover all possible cases and yet also contain a &lt;code&gt;default&lt;/code&gt; clause just in case an unexpected value somehow manages to creep in.&lt;/p&gt;
&lt;p&gt;Go with Option #3: Artificially cover such code. This may require a bit of refactoring to make it easier to cause the problematic &lt;code&gt;switch&lt;/code&gt; statement to be invoked with an invalid value. The code most likely throws, so catch the exception and swallow it. You can also assert that the expected exception was thrown, in which case it becomes more like Option #1: a test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The code is reachable but not currently being reached.&lt;/p&gt;
&lt;p&gt;This is code which is necessary for completeness, and it just so happens that it is not currently being used, but nothing prevents it from being used at any moment. A prime example of this is the &lt;code&gt;Equals()&lt;/code&gt; and &lt;code&gt;HashCode()&lt;/code&gt; functions of value types: without those functions, a value type is incomplete; however, if the value type does not currently happen to be used as a key in a hash-map, then those functions are almost certainly unused.&lt;/p&gt;
&lt;p&gt;In this case, you can go with any of the three options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can go with Option #1 and write a proper test.&lt;/li&gt;
&lt;li&gt;You can go with Option #2 and exclude the code.&lt;/li&gt;
&lt;li&gt;You can go with Option #3 and artificially cover the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The code is not important enough to have a test for it.&lt;/p&gt;
&lt;p&gt;Say you have a function which takes a tree data structure and converts it to text using &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Box-drawing_character&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;box-drawing characters&lt;/em&gt;&lt;/a&gt; so as to be able to print it nicely as a tree on the console. Since the function receives text and emits text, it is certainly testable, but is it really worth testing? If it ever draws something wrongly, you will probably notice, and if you do not notice, then maybe it did not matter anyway.&lt;/p&gt;
&lt;p&gt;In this case you can go either with Option #2 and exclude such functions, or Option #3 and artificially cover them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The code is literally or practically untestable.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If your application has a Graphical User Interface (GUI), you can write automated tests for all of your application logic, but the only practical way to ascertain the correctness of the GUI is to have human eyes staring at the screen. (There exist tools for testing GUIs, but I assess them as &lt;em&gt;woefully impractical and acutely ineffective&lt;/em&gt;.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If your application controls some hardware, you may have a hardware abstraction layer with two implementations, one which emulates the hardware, and one which interacts with the actual hardware. The emulator will enable you to test all of your application logic without having the actual hardware in place; however, the implementation which interacts with the actual hardware is practically untestable by software alone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have a piece of code that queries the endianness of the hardware architecture and operates slightly differently depending on it, the only path you can truly cover is the one for the endianness of the hardware architecture you are actually using. (You can fake the endianness query, and pretend that your hardware has the opposite endianness, but you still have no guarantees as to whether the bit-juggling that you do in that path is right for the opposite endianness.)&lt;/p&gt;
&lt;p&gt;In all of the above cases, and in all similar cases, we have no option but #2: exclude the code from coverage.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;If testing has business value, then 100% code coverage has business value, too.&lt;/p&gt;
&lt;p&gt;A code coverage percentage of 100% is very useful, not for bragging, but for maintaining certainty that everything that ought to be tested is in fact being tested.&lt;/p&gt;
&lt;p&gt;Achieving a code coverage percentage of 100% does require some effort, but with techniques such as Artificial Coverage the effort can be reduced to manageable levels.&lt;/p&gt;
&lt;p&gt;Ideally, Artificial Coverage should never be necessary, but it is a practical workaround for the inability of coverage tools to exclude individual lines of code from analysis.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image by &lt;a class=&#34;external&#34; 
   href=&#34;https://unsplash.com/@teapowered&#34; target=&#34;_blank&#34;
   &gt;Patrick Robert Doyle from Unsplash&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>The most important quality of software</title>
        <link>//localhost:1313/p/the-most-important-quality-of-software/</link>
        <pubDate>Thu, 07 Mar 2024 18:12:01 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-most-important-quality-of-software/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/the-most-important-quality-of-software/images/fotis-fotopoulos-DuHKoV44prg-unsplash.jpg&#34;
	width=&#34;2400&#34;
	height=&#34;1600&#34;
	srcset=&#34;//localhost:1313/p/the-most-important-quality-of-software/images/fotis-fotopoulos-DuHKoV44prg-unsplash_hu_bf7a818b9e6917f1.jpg 480w, //localhost:1313/p/the-most-important-quality-of-software/images/fotis-fotopoulos-DuHKoV44prg-unsplash_hu_af5e12a30b2a9655.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;What is the most important quality of software?&lt;/p&gt;
&lt;p&gt;Correctness, they say.&lt;/p&gt;
&lt;p&gt;And what is the second most important quality of software?&lt;/p&gt;
&lt;p&gt;Readability, they say.&lt;/p&gt;
&lt;p&gt;That is right, but only in theory.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading:&lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;If it was possible to write software just once, and never touch it again, then indeed, the most important thing, perhaps the only important thing, would be correctness. But in practice, this never happens.&lt;/p&gt;
&lt;p&gt;In the real world, requirements change, execution environments change, interfaces change. When that happens, we have software which used to be correct, but it is not correct anymore, and needs to be fixed to make it correct.&lt;/p&gt;
&lt;p&gt;However, in order to fix software you have to be able to read it.&lt;/p&gt;
&lt;p&gt;Thus, in practice, readability is a prerequisite for correctness, which brings us to the astounding realization that &lt;em&gt;&lt;strong&gt;readability is even more important than correctness.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image by &lt;a class=&#34;external&#34; 
   href=&#34;https://unsplash.com/@ffstop?utm_content=creditCopyText&amp;amp;amp;utm_medium=referral&amp;amp;amp;utm_source=unsplash&#34; target=&#34;_blank&#34;
   &gt;Fotis Fotopoulos&lt;/a&gt; on &lt;a class=&#34;external&#34; 
   href=&#34;https://unsplash.com/photos/black-computer-keyboard-DuHKoV44prg?utm_content=creditCopyText&amp;amp;amp;utm_medium=referral&amp;amp;amp;utm_source=unsplash&#34; target=&#34;_blank&#34;
   &gt;Unsplash&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Audit Testing</title>
        <link>//localhost:1313/p/audit-testing/</link>
        <pubDate>Fri, 09 Feb 2024 14:55:40 +0000</pubDate>
        
        <guid>//localhost:1313/p/audit-testing/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/audit-testing/images/audit-testing.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;h4 id=&#34;abstract&#34;&gt;Abstract
&lt;/h4&gt;&lt;p&gt;An automated software testing technique is presented which spares us from having to stipulate our expectations in test code, and from having to go fixing test code each time our expectations change.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The Problem
&lt;/h3&gt;&lt;p&gt;The most common scenario in automated software testing is ensuring that given specific input, a component-under-test produces expected output. The conventional way of achieving this is by feeding the component-under-test with a set of predetermined parameters, obtaining the output of the component-under-test, comparing the output against an instance of known-good output which has been hard-coded within the test, and failing the test if the two are not equal.&lt;/p&gt;
&lt;p&gt;This approach works, but it is inefficient, because during the development and evolution of a software system we often make changes to the production code fully anticipating the output of certain components to change. Unfortunately, each time we do this, the tests fail, because they are still expecting the old output. So, each change in the production code must be followed by a round of fixing tests to make them pass.&lt;/p&gt;
&lt;p&gt;Note that under Test-Driven Development things are not any better: first we modify the tests to start expecting the new output, then we observe them fail, then we modify the components to produce the new output, then we watch the tests pass. We still have to stipulate our expectations in test code, and we still have to change test code each time our expectations change, which is inefficient.&lt;/p&gt;
&lt;p&gt;This imposes a considerable burden on the software development process. As a matter of fact, it often happens that programmers refrain from making needed changes to their software because they dread the prospect of having to fix all the tests that will break as a result of those changes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Audit Testing&lt;/strong&gt;&lt;/em&gt; is a technique for automated software testing which aims to correct all this.&lt;/p&gt;
&lt;h3 id=&#34;the-solution&#34;&gt;The Solution
&lt;/h3&gt;&lt;p&gt;Under Audit Testing, the assertions that verify the correctness of the output of the component-under-test are abolished, and replaced with code that simply saves the output to a text file. This file is known as the &lt;em&gt;&lt;strong&gt;Audit File&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The test may still fail if the component-under-test encounters an error while producing output, in which case we follow a conventional test-fix-repeat workflow, but if the component-under-test manages to produce output, then the output is saved in the Audit File and the test completes successfully &lt;em&gt;&lt;strong&gt;without examining it.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The trick is that the Audit File is saved right next to the source code file of the test, which means that it is kept under Version Control. In the most common case, each test run produces the exact same audit output as the previous run, so nothing changes, meaning that all is good. If a test run produces different audit output from a previous test run, then the tooling alerts the developer to that effect, and the Version Control System additionally indicates that the Audit File has been modified and is in need of committing. Thus, the developer cannot fail to notice that the audit output has changed.&lt;/p&gt;
&lt;p&gt;The developer can then utilize the &amp;ldquo;Compare with unmodified&amp;rdquo; feature of the Version Control System to see the differences between the audit output that was produced by the modified code, and the audit output of the last known-good test run. By visually inspecting these differences, the developer can decide whether they are as expected or not, according to the changes they made in the code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the observed differences are not as expected, then the developer needs to keep working on their code until they are.&lt;/li&gt;
&lt;li&gt;If the observed differences are as expected, then the developer can simply commit the new code, along with the new Audit File, &lt;em&gt;&lt;strong&gt;and they are done.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This way, we eliminate the following burdens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Having to hard-code into the tests the output expected from the component-under-test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Having to assert, in each test, that the output of the component-under-test matches the expected output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Having to go fixing test code each time there is a (fully expected) change in the output of the component-under-test.&lt;/p&gt;
&lt;p&gt;The eliminated burdens are traded for the following much simpler responsibilities:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The output of the component-under-test must be converted to text and written to an audit file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the version control system shows that an audit file changed after a test run, the differences must be reviewed, and a decision must be made as to whether they are as expected or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tests and production code must be written with some noise reduction concerns in mind. (More on that further down.)&lt;/p&gt;
&lt;p&gt;This represents a considerable optimization of the software development process.&lt;/p&gt;
&lt;p&gt;Note that the arrangement is also convenient for the reviewer, who can see both the changes in the code and the resulting changes in the Audit Files.&lt;/p&gt;
&lt;p&gt;As an added safety measure, the continuous build pipeline can deliberately fail the tests if an unclean working copy is detected after running the tests, because that would mean that the tests produced different results from what was expected, or that someone failed to commit some updated audit file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;noise-reduction&#34;&gt;Noise reduction
&lt;/h3&gt;&lt;p&gt;For Audit Testing to work effectively, all audit output must be completely free of noise. By noise we mean:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two test runs of the exact same code producing different audit output.&lt;/li&gt;
&lt;li&gt;A single change in the code producing wildly different audit output.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, if a test emits the username of the current user into the audit output, then the audit file generated by that test will be different for every user that runs it, even if the user does not modify any code.&lt;/p&gt;
&lt;p&gt;Noise is undesirable, because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Needlessly modified audit files are a false cause of alarm.&lt;/li&gt;
&lt;li&gt;Examining changes in audit files only to discover that they are due to noise is a waste of time.&lt;/li&gt;
&lt;li&gt;A change that might be important to notice can be lost in the noise.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Noise in audit files is most commonly caused by various sources of non-determinism, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Wall-clock time.&lt;/p&gt;
&lt;p&gt;As the saying goes, the arrow of time is always moving forward. This means that the &amp;ldquo;current&amp;rdquo; time coordinate is always different from test run to test run, and this in turn means that if any wall-clock timestamps find their way into the audit output, the resulting audit file will always be different from the previous run. So, for example, if your software generates a log, and you were thinking of using the log as your audit output, then you will have to either remove the timestamps from the log, or fake them. Faking the clock for the purpose of testing is a well-known best practice anyway, regardless of audit testing. To accomplish this, create a &amp;ldquo;Clock&amp;rdquo; interface, and propagate it to every place in your software that needs to know the current time. Create two implementations of that interface: one for production, which queries the actual wall-clock time from the operating environment, and one for testing, which starts from some fixed, known origin and increments by a fixed amount each time it is queried.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Random number generation.&lt;/p&gt;
&lt;p&gt;Random number generators are usually pseudo-random, and we tend to make them practically random by seeding them with the wall-clock time. This can be easily fixed for the purpose of testing by seeding them with a known fixed value instead. Some pseudo-random generators seed themselves with the wall-clock time without allowing us to override this behavior; this is deplorable. Such generators must be faked in their entirety for the purpose of testing. This extends to any other constructs that employ random number generation, such as GUIDs/UUIDs: they must also be faked when testing, using deterministic generators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multi-threading.&lt;/p&gt;
&lt;p&gt;Multiple threads running in parallel tend to exhibit unpredictable timing irregularities, and result in a chaotically changing order of events. If these threads affect audit output, then the ordering of the content of the audit file will be changing on every test run. For this reason, multi-threading must either be completely avoided when testing, or additional mechanisms (queuing, sorting, etc.) must be employed to guarantee a consistent ordering of audit output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Floating-point number imprecision.&lt;/p&gt;
&lt;p&gt;Floating-point calculations can produce slightly different results depending on whether optimizations are enabled or not. To ensure that the audit file is unaffected, any floating point values emitted to the audit file must be rounded to as few digits as necessary. At the very least, they must be rounded to one digit less than their full precision.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Other external factors.&lt;/p&gt;
&lt;p&gt;User names, computer names, file creation times, IP addresses resolved from DNS, etc must either be prevented from finding their way into the audit output, or they must be faked when running tests. Fake your file-system; fake The Internet if necessary. For more information about faking stuff, see &lt;a 
   href=&#34;//localhost:1313/p/testing-with-fakes-instead-of-mocks/&#34;
   &gt;Testing with Fakes instead of Mocks&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, anything that would cause &lt;a class=&#34;external&#34; 
   href=&#34;https://ell.stackexchange.com/a/299395/129530&#34; target=&#34;_blank&#34;
   &gt;flakiness&lt;/a&gt; in software tests will cause noisiness in Audit Testing.&lt;/p&gt;
&lt;p&gt;Additionally, the content of audit files can be affected by some constructs that are fully deterministic in their nature. These constructs will never result in changed audit files without any changes in the code, but may produce drastically different audit files as a result of only minute changes in the code. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hash Table Rehashing.&lt;/p&gt;
&lt;p&gt;A hash table may decide to re-hash itself as a result of a single key addition, if that addition happens to cause some internal load factor
threshold to be exceeded. Exactly when and how this happens depends on the implementation of the hash table and we usually have no control over it. After re-hashing, the order in which the hash table enumerates its keys is drastically different, and if the keys are emitted to audit output, then the audit file will be drastically different. To avoid this, replace plain hash tables with hash tables that retain the order of key insertion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insufficient Sorting Keys.&lt;/p&gt;
&lt;p&gt;When sorting data, the order of items with identical keys is undefined. It is still deterministic, but the addition or removal of a single item can cause all items with the same sorting key to be arbitrarily rearranged. To avoid this, always use a full set of sorting keys when sorting data, so as to give every item a specific unique order. Introduce additional sorting keys if necessary, even if you would not normally have a use for them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Noise reduction aims to ensure that we will never see changes in the audit files unless there have been changes in the code, and that for every unique change in the code we will see a specific expected set of changes in the audit output, instead of a large number of irrelevant changes. This ensures that the single change that matters will not be lost in the noise, and makes it easier to determine that the modifications we made to the code have exactly the intended consequences and not any unintended consequences.&lt;/p&gt;
&lt;p&gt;Note that in some cases, noise reduction can be implemented in the tests rather than in the production code. For example, instead of replacing a plain hash table with an ordered hash table in production code, our test can obtain the contents of the plain hash table and sort them before writing them to the audit file. However, this may not be possible in cases where the hash table is several transformations away from the auditing. Thus, replacing a plain hash table with an ordered hash table may sometimes be necessary in production code.&lt;/p&gt;
&lt;p&gt;Noise reduction in production code can be either always enabled, or only enabled during testing. The most performant choice is to only have it enabled during testing, but the safest choice is to have it always enabled.&lt;/p&gt;
&lt;h3 id=&#34;failure-testing&#34;&gt;Failure Testing
&lt;/h3&gt;&lt;p&gt;Failure Testing is the practice of deliberately supplying the component-under-test with invalid input and ensuring that the component-under-test detects the error and throws an appropriate exception. Such scenarios can leverage Audit Testing by simply catching exceptions and serializing them, as text, into the audit output.&lt;/p&gt;
&lt;h3 id=&#34;applicability&#34;&gt;Applicability
&lt;/h3&gt;&lt;p&gt;Audit Testing is most readily useful when the Component Under Test produces results as text, or results that are directly translatable to text. With a bit of effort, any kind of output can be converted to text, so Audit Testing is universally applicable.&lt;/p&gt;
&lt;h3 id=&#34;must-audit-files-be-committed&#34;&gt;Must Audit Files be committed?
&lt;/h3&gt;&lt;p&gt;It is in theory possible to refrain from storing Audit Files in the source code repository, but doing so would have the following disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It would deprive the code reviewer from the convenience of being able to see not only the changes in the code, but also the differences that these changes have introduced in the audit output of the test.&lt;/li&gt;
&lt;li&gt;It would require the developer to always remember to immediately run the tests each time they pull from the source code repository, so as to have the unmodified Audit Files produced locally, before proceeding to make modifications to the code which would further modify the Audit Files.&lt;/li&gt;
&lt;li&gt;It would make it more difficult for the developer to take notice when the Audit Files change.&lt;/li&gt;
&lt;li&gt;It would make it more difficult for the developer to see diffs between the modified Audit Files and the unmodified ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course all of this could be taken care of with some extra tooling. What remains to be seen is whether the effort of developing such tooling can be justified by the mere benefit of not having to store Audit Files in the source code repository.&lt;/p&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;Audit Testing is a universally applicable technique for automated software testing which can significantly reduce the effort of writing and maintaining tests by sparing us from having to stipulate our expectations in test code, and from having to go fixing test code each time our expectations change.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: &amp;ldquo;Audit Testing&amp;rdquo; by michael.gr.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Types of dependencies</title>
        <link>//localhost:1313/p/types-of-dependencies/</link>
        <pubDate>Thu, 11 Jan 2024 17:33:42 +0000</pubDate>
        
        <guid>//localhost:1313/p/types-of-dependencies/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/types-of-dependencies/images/dependency0.png&#34;
	width=&#34;1861&#34;
	height=&#34;1046&#34;
	srcset=&#34;//localhost:1313/p/types-of-dependencies/images/dependency0_hu_616f75dcb058bc68.png 480w, //localhost:1313/p/types-of-dependencies/images/dependency0_hu_55cc59d1b7857d37.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;The term &amp;ldquo;dependency&amp;rdquo; is used very often in software engineering, but depending on context, it may mean slightly different things. To avoid confusion, here are the different meanings of the term, and their explanations.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Compile-time (static) dependency:&lt;/strong&gt; When module &lt;strong&gt;A&lt;/strong&gt; makes use of a symbol which is defined in module &lt;strong&gt;B&lt;/strong&gt;, we say that &lt;strong&gt;A&lt;/strong&gt; has a compile-time dependency on &lt;strong&gt;B&lt;/strong&gt;. (Or that &lt;strong&gt;B is a compile-time dependency of A.&lt;/strong&gt;) This happens not only when module &lt;strong&gt;A&lt;/strong&gt; contains a hard-coded invocation to module &lt;strong&gt;B&lt;/strong&gt;, but also when &lt;strong&gt;A&lt;/strong&gt; makes use of some definition from &lt;strong&gt;B&lt;/strong&gt;, such as referring to a constant, implementing an interface, or instantiating a type defined in &lt;strong&gt;B&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Runtime (dynamic) dependency:&lt;/strong&gt; When module &lt;strong&gt;A&lt;/strong&gt; is given, at runtime, a reference to invoke module &lt;strong&gt;B&lt;/strong&gt;, then we have a runtime dependency between &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt;. Runtime dependencies can be further divided in two sub-categories:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Assembly-time (semi-dynamic) dependency:&lt;/strong&gt; This is a runtime dependency which is realized during system assembly, and remains unchanged throughout the lifetime of the system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Post-assembly-time (fully dynamic) dependency:&lt;/strong&gt; This is a runtime dependency which may be realized or changed at any moment, by having one module programmatically pass a callback to another module.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we are to take the &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Dependency_inversion_principle&#34; target=&#34;_blank&#34;
   &gt;Dependency Inversion Principle (DIP)&lt;/a&gt; for granted in software architecture, (and we should,) then software architecture is not concerned with static dependencies. This is because the DIP states that concrete modules should never statically depend on other concrete modules; instead, concrete modules may statically depend only on abstractions. Thus, the DIP is advising us to build our concrete modules so that they have no knowledge of each other. Instead, they should be making outgoing invocations to interfaces, and these invocations should be wired to concrete modules implementing those interfaces. Interfaces are abstractions, so it is okay for a concrete module to have compile-time dependencies on modules defining such abstractions.&lt;/p&gt;
&lt;p&gt;Assembly-time dependencies are what software architecture is mostly concerned with. The architecture of a software system specifies how to wire interface invocations between components. The wiring prescribed by the design is normally performed during system assembly, which is part of system deployment. Thus, the wires constitute assembly-time dependencies, and the graph of these dependencies is essentially the call graph of the system as defined by the architecture.&lt;/p&gt;
&lt;p&gt;Post-assembly-time dependencies do not affect the topology of a design, because every post-assembly time dependency requires an existing assembly-time dependency through which the callback can be communicated. Thus, post-assembly-time dependencies constitute implementation details of the modules that supply and invoke callbacks. As such, they are of only limited interest in software architecture.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Call Graph Acyclicity</title>
        <link>//localhost:1313/p/call-graph-acyclicity/</link>
        <pubDate>Wed, 27 Dec 2023 12:08:24 +0000</pubDate>
        
        <guid>//localhost:1313/p/call-graph-acyclicity/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic0.png&#34;
	width=&#34;1860&#34;
	height=&#34;1122&#34;
	srcset=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic0_hu_5c4a1077d5a1af0.png 480w, //localhost:1313/p/call-graph-acyclicity/images/acyclic0_hu_bc6ab53ae2d39e03.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;397px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;abstract&#34;&gt;Abstract
&lt;/h3&gt;&lt;p&gt;In technical design of software systems as conventionally practiced, call graphs often contain cycles. We show that cyclic call graphs are highly problematic for a number of reasons, the most important being that they require careful handling on a case-by-case basis by custom-written code, thus preventing the standardization, and therefore the automation, of system assembly. We discuss refactoring strategies for systematically eliminating call cycles, including a universally applicable technique for trivially eliminating a certain common type of call cycle. We conclude that since call cycles can be avoided or eliminated, they can be comprehensively disallowed, thus paving the way for the automation of system assembly.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;what-is-a-cycle-in-a-call-graph&#34;&gt;What is a cycle in a call graph
&lt;/h3&gt;&lt;p&gt;When component &lt;strong&gt;A&lt;/strong&gt; invokes component &lt;strong&gt;B&lt;/strong&gt;, and component &lt;strong&gt;B&lt;/strong&gt; also invokes component &lt;strong&gt;A&lt;/strong&gt;, we say that the call graph contains a &lt;em&gt;direct&lt;/em&gt; cycle. If &lt;strong&gt;A&lt;/strong&gt; invokes &lt;strong&gt;B&lt;/strong&gt;, which invokes &lt;strong&gt;C&lt;/strong&gt;, which in turn invokes &lt;strong&gt;A&lt;/strong&gt;, we say that the call graph contains an &lt;em&gt;indirect&lt;/em&gt; cycle. If &lt;strong&gt;A&lt;/strong&gt; invokes itself, we say that the call graph contains a self-loop, or a buckle, which is a special case of a cycle. In general, if a component diagram contains any path of invocations starting at a certain component and arriving back at the same component, the call graph contains a cycle.&lt;/p&gt;
&lt;p&gt;As an example, let us consider the simplest possible scenario, consisting of just two components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A temperature sensor component, whose job is to obtain a temperature value from some piece of hardware, and make that value available within the software system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A temperature indicator component, whose job is to display a temperature on the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic1.png&#34;
	width=&#34;1860&#34;
	height=&#34;686&#34;
	srcset=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic1_hu_bb41670c7de8d3cb.png 480w, //localhost:1313/p/call-graph-acyclicity/images/acyclic1_hu_2dad1d21c6ed7e3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;271&#34;
		data-flex-basis=&#34;650px&#34;
	
&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this diagram, each component has &lt;em&gt;&lt;strong&gt;inputs&lt;/strong&gt;&lt;/em&gt; and &lt;strong&gt;outputs&lt;/strong&gt;, collectively known as &lt;em&gt;&lt;strong&gt;pins&lt;/strong&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An input is an endpoint for receiving incoming interface invocations; it represents an interface exposed by a component for invocation by other components. It is signified by an arrow pointing into the component.&lt;/li&gt;
&lt;li&gt;An output is an endpoint through which a component places outgoing interface invocations; it represents an interface that a component wants to invoke. It is signified by an arrow pointing out of the component.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For those familiar with UML component diagrams, an input is a &lt;em&gt;&lt;strong&gt;provided&lt;/strong&gt;&lt;/em&gt; interface in UML, and an output is a &lt;em&gt;&lt;strong&gt;required&lt;/strong&gt;&lt;/em&gt; interface in UML. In this paper we use arrows to show the direction of invocations from output to input, instead of the socket-and-lollipop notation of UML.&lt;/p&gt;
&lt;p&gt;Each input and output has a name and a type. Obviously, an output can be connected to an input only if their types match.&lt;/p&gt;
&lt;p&gt;The temperature sensor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has an input called &lt;em&gt;&lt;strong&gt;Reading&lt;/strong&gt;&lt;/em&gt;, of type &lt;em&gt;&lt;strong&gt;ReadonlyFloat&lt;/strong&gt;&lt;/em&gt;, which can be invoked by some other component to obtain the current value of the temperature.&lt;/li&gt;
&lt;li&gt;Has an output called &lt;em&gt;&lt;strong&gt;Changed&lt;/strong&gt;&lt;/em&gt;, of type &lt;em&gt;&lt;strong&gt;Procedure0&lt;/strong&gt;&lt;/em&gt; (same thing as the &amp;ldquo;Runnable&amp;rdquo; of Java or the &amp;ldquo;Action&amp;rdquo; of C#) that it invokes in order to indicate that the value of the temperature has changed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The temperature indicator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has an output which is called &lt;em&gt;&lt;strong&gt;Reading&lt;/strong&gt;&lt;/em&gt;, of type &lt;em&gt;&lt;strong&gt;ReadonlyFloat&lt;/strong&gt;&lt;/em&gt;, that it invokes in order to obtain the current value of the temperature.&lt;/li&gt;
&lt;li&gt;Has an input called &lt;em&gt;&lt;strong&gt;Refresh&lt;/strong&gt;&lt;/em&gt;, of type &lt;em&gt;&lt;strong&gt;Procedure0&lt;/strong&gt;&lt;/em&gt;, which can be invoked to cause the indicator to re-display the current temperature value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the diagram, the &lt;em&gt;&lt;strong&gt;Reading&lt;/strong&gt;&lt;/em&gt; output of the indicator has been connected to the &lt;em&gt;&lt;strong&gt;Reading&lt;/strong&gt;&lt;/em&gt; input of the sensor, and the &lt;em&gt;&lt;strong&gt;Changed&lt;/strong&gt;&lt;/em&gt; output of the sensor has been connected to the &lt;em&gt;&lt;strong&gt;Refresh&lt;/strong&gt;&lt;/em&gt; input of the indicator. Note that this design has a call cycle in it: The indicator invokes the sensor to obtain the current temperature, but the sensor also invokes the indicator to tell it that the current temperature has changed.&lt;/p&gt;
&lt;h3 id=&#34;dependencies&#34;&gt;Dependencies
&lt;/h3&gt;&lt;p&gt;In &lt;a 
   href=&#34;//localhost:1313/p/types-of-dependencies/&#34;
   &gt;Types of dependencies&lt;/a&gt; I differentiate between &lt;strong&gt;compile-time (static)&lt;/strong&gt; dependencies, &lt;strong&gt;assembly-time (semi-dynamic)&lt;/strong&gt; dependencies, and &lt;strong&gt;post-assembly-time (fully dynamic)&lt;/strong&gt; dependencies.&lt;/p&gt;
&lt;p&gt;Compile-time dependencies have already been given a lot of consideration and the general consensus is that they better not be cyclic. Most build systems prohibit static dependency cycles between build modules; for example, in the Java world, Maven artifacts cannot circularly depend on each other; similarly, in the dotnet world, MSBuild projects cannot circularly depend on each other. However, programming languages usually allow compile-time dependency cycles within program code: if classes &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; are defined within the same build module, it is usually possible to have &lt;strong&gt;A&lt;/strong&gt; contain a hard-coded invocation to a method of &lt;strong&gt;B&lt;/strong&gt;, and for &lt;strong&gt;B&lt;/strong&gt; to also contain a hard-coded invocation to a method of &lt;strong&gt;A&lt;/strong&gt;. Nonetheless, software architecture is not concerned with hard-coded invocations; therefore, in this paper the term &amp;ldquo;dependency&amp;rdquo; does &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; refer to compile-time (static) dependencies.&lt;/p&gt;
&lt;p&gt;Assembly-time dependencies are what software architecture is mostly concerned with, and as such, this is the sense in which the term &amp;ldquo;dependency&amp;rdquo; is used in this paper.&lt;/p&gt;
&lt;p&gt;Post-assembly-time dependencies are useful, as we will see, in certain techniques for eliminating call cycles; however, they do not affect the topology of a design, (they are implementation details which are not representable in a component diagram,) and as such these are not the kind of dependencies that we are referring to when we speak of dependencies in this paper.&lt;/p&gt;
&lt;h3 id=&#34;are-call-cycles-common&#34;&gt;Are call cycles common?
&lt;/h3&gt;&lt;p&gt;In software design as conventionally practiced, cycles in the call graph are a frequent phenomenon. Software architects often have no qualms about producing a design where &lt;strong&gt;A&lt;/strong&gt; calls &lt;strong&gt;B&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; also calls &lt;strong&gt;A&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the literature we find statements endorsing this practice. For example, in the seminal paper &lt;a class=&#34;external&#34; 
   href=&#34;https://c2.com/doc/oopsla89/paper.html&#34; target=&#34;_blank&#34;
   &gt;&amp;ldquo;A Laboratory For Teaching Object-Oriented Thinking&amp;rdquo;&lt;/a&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://c2.com/doc/oopsla89/paper.html&#34; target=&#34;_blank&#34;
   &gt;(1989)&lt;/a&gt; by &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Kent_Beck&#34; target=&#34;_blank&#34;
   &gt;Kent Beck&lt;/a&gt; and &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Ward_Cunningham&#34; target=&#34;_blank&#34;
   &gt;Ward Cunningham&lt;/a&gt;, the authors acknowledge that many components act as servers &amp;ldquo;with little regard or even awareness of [their] client&amp;rdquo;, but also find it perfectly normal for some components to be &amp;ldquo;near-equals&amp;rdquo; in a &amp;ldquo;symmetric relation&amp;rdquo;. That paper introduced the term &amp;ldquo;collaborator&amp;rdquo;, which became a staple term in the software engineering discipline, specifically in order to allow for bidirectional interaction between components, as opposed to the already-existing term &amp;ldquo;dependency&amp;rdquo;, which implies a one-way interaction. (For more on this, see &lt;a 
   href=&#34;//localhost:1313/p/definition-collaborator/&#34;
   &gt;Definition: Collaborator&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;the-problem-with-cyclic-call-graphs&#34;&gt;The problem with cyclic call graphs
&lt;/h3&gt;&lt;p&gt;Cyclic call graphs constitute &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Tight_coupling?redirect=no&#34; target=&#34;_blank&#34;
   &gt;tight coupling&lt;/a&gt;. This in turn has a severe negative effect on the understandability and maintainability of software. Wikipedia &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29&#34; target=&#34;_blank&#34;
   &gt;lists some specific disadvantages of tight coupling&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A change in one module usually forces a ripple effect of changes in other modules.&lt;/li&gt;
&lt;li&gt;Assembly of modules might require more effort and/or time due to the increased inter-module dependency.&lt;/li&gt;
&lt;li&gt;A particular module might be harder to reuse and/or test because dependent modules must be included.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second point might be a bit vague, but it is very important, so it is worth examining it in more depth. The term &amp;ldquo;assembly of modules&amp;rdquo; refers to the process of instantiating each component that makes up the system, and wiring the components together so that the system can start running. In this paper, we call this process &lt;em&gt;&lt;strong&gt;system assembly&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The simplest approach to system assembly is to pass to each component all of its dependencies as constructor parameters when instantiating it, so that immediately upon construction the component is ready to start performing its duties. However, this approach is not viable if the call graph contains cycles, because circular dependencies introduce a chicken-and-egg problem: If each component requires all of its dependencies to be passed as constructor parameters, and if components &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; depend on each other, then &lt;strong&gt;A&lt;/strong&gt; can only be constructed if &lt;strong&gt;B&lt;/strong&gt; has already been constructed, but &lt;strong&gt;B&lt;/strong&gt; cannot be constructed unless &lt;strong&gt;A&lt;/strong&gt; has been constructed first.&lt;/p&gt;
&lt;p&gt;This problem is pervasive, but it has not received much attention because we are resigned to software development being a largely unstandardized, labor-intensive process where copious amounts of custom-written code provide ad-hoc solutions to long-standing problems on a case by case basis. During system assembly, developers tend to wire as many components as they can during construction, and when a certain wire turns out to form a call cycle, they make a special case and refactor the components involved so as to postpone the wiring of that particular call until after construction. (This often leads to order-of-initialization bugs, which require painstaking effort to troubleshoot and fix.)&lt;/p&gt;
&lt;p&gt;As the system evolves, and wires between components are added or removed, developers try to keep components unchanged by re-arranging the order in which they are instantiated, and when this is not enough, they further refactor components, turning more construction-time wiring into post-construction-time wiring, and vice versa. (Invariably resulting in &lt;em&gt;more&lt;/em&gt; order-of-initialization bugs, and &lt;em&gt;more&lt;/em&gt; painstaking effort to troubleshoot and fix them.)&lt;/p&gt;
&lt;p&gt;Conventional software development practices often utilize &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Dependency_injection#Frameworks&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;&lt;strong&gt;dependency injection frameworks&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; to handle the wiring of components. Such frameworks work as if by magic, which is by some schools of thought undesirable by definition; they also represent substantial runtime overhead, so they are unsuitable for certain classes of applications, e.g. for embedded systems. Some dependency injection frameworks do not solve the problem of circular dependencies, because they simply prohibit them, whereas others attempt to solve the problem by transparently creating proxy objects, which postpone wiring until some post-construction moment, and are therefore doubly magical. The problem with proxy objects is that they tend to fail if invoked from within a constructor, and when this happens it is extremely difficult to troubleshoot and fix. Most importantly, dependency injection frameworks tend to hide dependencies from view, while the goal of software architecture is precisely the opposite: to keep dependencies into view.&lt;/p&gt;
&lt;p&gt;The promise of authoritative technical software design, where the end-system is automatically generated from the design with no human intervention, requires us to stop writing custom code which wires components together in ad-hoc ways, and to replace it with a universally applicable, fully automated mechanism for assembling a system. In order for this mechanism to be fully automated, it must be fully standardized. If we were to try to standardize system assembly while allowing call cycles, we might for a moment imagine that we could accomplish our goal with a three-phase approach:&lt;/p&gt;
&lt;p&gt;(Note: I am not actually recommending this! It will not work!)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Construction:&lt;/strong&gt; All components are instantiated in an unconnected state.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Wiring:&lt;/strong&gt; Now that all components exist, each component receives its dependencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Showtime:&lt;/strong&gt; A special event is broadcast to all components, letting them know that wiring is complete, so they can now perform their
initialization and start performing their duties.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This three-phase approach imposes a number of bureaucratic requirements on each component:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Each component must support some means of receiving references to its dependencies after construction. This constitutes incidental complexity.&lt;/li&gt;
&lt;li&gt;Each component must support some means of receiving the showtime event, so that it can perform the initialization that it would have otherwise performed in its constructor. This also constitutes incidental complexity.&lt;/li&gt;
&lt;li&gt;The requirement for components to be able to receive their dependencies after construction and to respond to the &amp;ldquo;showtime&amp;rdquo; event necessitates the introduction of some &lt;code&gt;IComponent&lt;/code&gt; interface, which must be implemented by all components. This ties all components to the framework which defines &lt;code&gt;IComponent&lt;/code&gt; and knows what to do with it.&lt;/li&gt;
&lt;li&gt;The member fields in which a component stores the references to its dependencies are initialized after construction, and therefore must be
declared as mutable, even though in principle they ought to be immutable. Similarly, the initialization performed during the showtime event often generates information that needs to be stored in member fields for later use. These member fields are also initialized after construction, so they must also be declared as mutable, even though in principle many of them ought to be immutable. Thus, any notion of immutability goes out the window.  Many components might still be &lt;em&gt;effectively immutable&lt;/em&gt;, but all of them  are very mutable as far as any code analysis tool can tell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most importantly, the three-phase approach does not solve the chicken-and-egg problem that we mentioned earlier, it only postpones it in time: When an event is triggered, the order in which event handlers are invoked is undefined. This means that during the processing of the showtime event a component may attempt to invoke another component which has not yet received the event, and therefore has not yet performed its initialization.&lt;/p&gt;
&lt;p&gt;Even if we were to further complicate things by introducing some additional mechanism that would give programmers control over the order in which components process the showtime event, the problem still remains: The presence of cycles in the call graph always leaves open the possibility that some components will be invoked before they have been initialized. It should by now be evident that cyclic call graphs are highly problematic, and that if they are to be allowed then there is no way to standardize system assembly. It remains to be shown whether call cycles can be systematically avoided or eliminated, and thus disallowed.&lt;/p&gt;
&lt;h3 id=&#34;solving-the-trivial-case&#34;&gt;Solving the trivial case
&lt;/h3&gt;&lt;p&gt;If our goal is to eliminate the cycle in the call graph of the earlier example with the temperature sensor and the temperature indicator, we can trivially accomplish it by applying the &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Observer_pattern&#34; target=&#34;_blank&#34;
   &gt;Observer Pattern&lt;/a&gt;, as shown in the following figure:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic2.png&#34;
	width=&#34;1861&#34;
	height=&#34;587&#34;
	srcset=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic2_hu_47aa25ae2d1ea891.png 480w, //localhost:1313/p/call-graph-acyclicity/images/acyclic2_hu_1fd4268ef71dec79.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;317&#34;
		data-flex-basis=&#34;760px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Note that the sensor does not invoke the indicator anymore; instead, the indicator invokes the sensor not only to read the current temperature but also to register an observer for temperature change notifications. The fact that the sensor will then be invoking that observer is an implementation detail which does not affect the topology of the design; thus, this design is free of cycles.&lt;/p&gt;
&lt;p&gt;Practically, the use of the observer pattern means that the sensor cannot invoke the indicator before the indicator has registered its observable, and this in turn means that the indicator can never be invoked before its initialization is complete.&lt;/p&gt;
&lt;p&gt;By eliminating the call cycle between the sensor and the indicator, we end up with a system that has a specific, computable order of initialization which is guaranteed to be free of problems: the sensor does not depend on the indicator anymore, so it can always be constructed first. The indicator, which depends on the sensor, can always be constructed after the sensor, so it can receive its dependencies as constructor parameters.&lt;/p&gt;
&lt;p&gt;As a result, each component can store all of its dependencies in immutable member variables. The only interface that needs to be stored in a mutable member variable is the callback that the observable receives from the observer, and this is in line with the nature of the observer pattern, where registration and de-registration of callbacks necessarily involves mutation.&lt;/p&gt;
&lt;p&gt;Pins of type &lt;code&gt;Observable&amp;amp;lt;T&amp;amp;gt;&lt;/code&gt; are bound to occur so often in software designs, that they warrant some special notation in order to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplify their representation.&lt;/li&gt;
&lt;li&gt;Make them more conspicuous.&lt;/li&gt;
&lt;li&gt;Save space in the diagram.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following figure shows an example of what this notation could look like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic3.png&#34;
	width=&#34;1860&#34;
	height=&#34;590&#34;
	srcset=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic3_hu_720b9cdf7430d0df.png 480w, //localhost:1313/p/call-graph-acyclicity/images/acyclic3_hu_3aca30d589c5dd57.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;315&#34;
		data-flex-basis=&#34;756px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;In the above diagram, the following changes have been made to pins of type &lt;code&gt;Observable&amp;amp;lt;T&amp;amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The generics notation (&lt;code&gt;Observable&amp;amp;lt;T&amp;amp;gt;&lt;/code&gt;) has been replaced with tilde notation (&lt;code&gt;~T&lt;/code&gt;). The tilde indicates that the type of the pin is not really of type &lt;code&gt;T&lt;/code&gt;, it is of type &lt;code&gt;Observable&amp;amp;lt;T&amp;amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The arrows of the observable pins have been replaced with slightly larger circles containing slightly smaller arrows pointing in the opposite direction.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The encircled arrows are not pointing from the output to the input as normal arrows do; instead, the encircled arrows are showing the direction of callback invocations, so they are pointing from the input to the output. Essentially, a circle signifies inversion of the direction of invocations, so an encircled arrow corresponds to a normal arrow of the opposite direction.&lt;/p&gt;
&lt;p&gt;If the callback interface does not contain any methods that return information, (as the case is with all notification interfaces,) the above design can be improved even more.&lt;/p&gt;
&lt;p&gt;First, note that the refactoring of an input-output pair to an observer-output-observable-input pair results in components that violate the &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Single_responsibility_principle&#34; target=&#34;_blank&#34;
   &gt;&lt;strong&gt;Single Responsibility Principle&lt;/strong&gt; (&lt;strong&gt;SRP&lt;/strong&gt;)&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Instead of simply exposing a &lt;em&gt;&lt;strong&gt;Changed&lt;/strong&gt;&lt;/em&gt; output, the sensor now has to implement the functionality of an event manager, so as to offer the same notification as an observable input.&lt;/li&gt;
&lt;li&gt;Similarly, instead of simply exposing a &lt;em&gt;&lt;strong&gt;Refresh&lt;/strong&gt;&lt;/em&gt; input, the indicator now has to contain a few more lines of code to register a callback in order to receive the same notification as an observer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above may not represent a lot of work, but it is nonetheless a refactoring which must be applied to the code in order to support the needs of the design; however, in a different design, the observer pattern might be unnecessary, so why should the components be hard-coded to support it?&lt;/p&gt;
&lt;p&gt;To solve this problem, let us revisit our first design, where we had a temperature sensor with a simple &lt;em&gt;&lt;strong&gt;Changed&lt;/strong&gt;&lt;/em&gt; output and a temperature indicator with a simple &lt;em&gt;&lt;strong&gt;Refresh&lt;/strong&gt;&lt;/em&gt; input, and hence a call cycle. Let us us now introduce two new components into the design, where one is a &lt;em&gt;&lt;strong&gt;General-Purpose Observable&lt;/strong&gt;&lt;/em&gt; and the other is a &lt;em&gt;&lt;strong&gt;General-Purpose Observer&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic4.png&#34;
	width=&#34;1860&#34;
	height=&#34;888&#34;
	srcset=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic4_hu_4b6ccb9e601811aa.png 480w, //localhost:1313/p/call-graph-acyclicity/images/acyclic4_hu_3226eae63daffbb9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;209&#34;
		data-flex-basis=&#34;502px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;The job of the observer is simply to register a callback via its &lt;em&gt;&lt;strong&gt;Registration&lt;/strong&gt;&lt;/em&gt; output during construction, and from that moment on to keep echoing each invocation of the callback to its &lt;em&gt;&lt;strong&gt;Trigger&lt;/strong&gt;&lt;/em&gt; output.&lt;/p&gt;
&lt;p&gt;The job of the observable is to receive an observer registration via its &lt;em&gt;&lt;strong&gt;Registration&lt;/strong&gt;&lt;/em&gt; input, and to keep echoing invocations coming into its &lt;em&gt;&lt;strong&gt;Trigger&lt;/strong&gt;&lt;/em&gt; input to the registered observer, if any.&lt;/p&gt;
&lt;p&gt;Note that with this arrangement, the call cycle is still eliminated, and at the same time we have managed to retain the sensor and indicator components in their original form, with no code refactoring necessary, since the refactoring has now been applied to the design. Also note that the SRP is being nicely upheld.&lt;/p&gt;
&lt;p&gt;I postulate that the combination of a general-purpose observer and a general-purpose observable will be occurring quite frequently, to the point where it might be worth simplifying their representation using some special notation. For this purpose, I propose an &lt;em&gt;&lt;strong&gt;air-gap pseudo-component&lt;/strong&gt;&lt;/em&gt;. With the use of an air-gap, the previous figure turns into the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic5.png&#34;
	width=&#34;1860&#34;
	height=&#34;835&#34;
	srcset=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic5_hu_684347aa7e465dfc.png 480w, //localhost:1313/p/call-graph-acyclicity/images/acyclic5_hu_c30de23a51830a7c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;222&#34;
		data-flex-basis=&#34;534px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Note that the symbol for the air-gap component has been borrowed from electronics, where it stands for a capacitor. An electronic capacitor is also, in a sense, an air gap; however, the similarity is superficial, and it is only meant to serve as a mnemonic: In software, an air-gap pseudo-component does not maintain any charge, nor does it act as some kind of high-pass filter, etc.; it just allows us to pick a wire that takes part in a call cycle, and trivially make that wire break the cycle.&lt;/p&gt;
&lt;p&gt;Also note that the air-gap is not a real component, it is a pseudo-component. This means that it is simply a notation, which represents an underlying pair of actual components: a general-purpose observer, and a general-purpose observable. This is necessary because these two components will invariably need to be constructed at different times during system assembly. In the sensor-indicator example, construction would take place in the following order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The general-purpose observable is constructed first because it does not depend on anything else.&lt;/li&gt;
&lt;li&gt;Then, the sensor is constructed, which depends on the general-purpose observable.&lt;/li&gt;
&lt;li&gt;Then, the indicator is constructed, which depends on the sensor.&lt;/li&gt;
&lt;li&gt;Finally, the general-purpose observer is constructed, which depends on both the indicator and the general-purpose observable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, during system assembly, each air-gap pseudo-component is decomposed into an observer and an observable, so that all components can be instantiated and wired in the order dictated by their dependency graph.&lt;/p&gt;
&lt;h3 id=&#34;solving-non-trivial-cases&#34;&gt;Solving non-trivial cases
&lt;/h3&gt;&lt;p&gt;The application of the observer pattern is a good first step in the direction of being able to express any software design acyclically; however, it does not cover all cases. Specifically, the observer pattern cannot be used under the following circumstances:&lt;/p&gt;
&lt;p&gt;The observable expects information to be returned back from the observer, and it is incapable of handling the case where no observer is registered, and therefore no results can be returned. (For example, the observable needs to invoke the observer and receive information back from the observer during the observable&amp;rsquo;s construction, at which point the observer cannot possibly have registered yet.)&lt;/p&gt;
&lt;p&gt;The simple &lt;em&gt;&lt;strong&gt;Changed&lt;/strong&gt;&lt;/em&gt; notification of the temperature-sensor-and-indicator example does not fall under these circumstances because it is in the nature of notifications that they never return any information; however, in other scenarios, these circumstances can arise. Thus, it remains to be shown how call cycles can be eliminated when the observer pattern is inapplicable.&lt;/p&gt;
&lt;h3 id=&#34;strategy-fusion&#34;&gt;Strategy: Fusion
&lt;/h3&gt;&lt;p&gt;The presence of a call cycle between components &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; might indicate that perhaps they should not be separate components, and that we might be better off by fusing &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; into a single component. In doing so, we remove the cycle from the topology of the design by turning it
into an implementation detail of the new component. The following figure illustrates this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic6.png&#34;
	width=&#34;1860&#34;
	height=&#34;426&#34;
	srcset=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic6_hu_b070ad42c31ba5da.png 480w, //localhost:1313/p/call-graph-acyclicity/images/acyclic6_hu_b38442f141ba6f20.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;436&#34;
		data-flex-basis=&#34;1047px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Clearly, the left diagram contains a cycle, whereas the right diagram does not.&lt;/p&gt;
&lt;p&gt;Needless to say, this strategy is only marginally useful, and it should not be considered unless all else fails, because the goal of software architecture is to distribute functionality into as many components as possible, so that each component can be as simple as possible, instead of conglomerating functionality into monolithic components. The fusion strategy is mentioned here only for the sake of completeness.&lt;/p&gt;
&lt;h3 id=&#34;strategy-plain-fission&#34;&gt;Strategy: Plain Fission
&lt;/h3&gt;&lt;p&gt;The presence of a call cycle between components &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; might indicate that at least one of the two components violates the &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Single_responsibility_principle&#34; target=&#34;_blank&#34;
   &gt;&lt;strong&gt;Single Responsibility Principle&lt;/strong&gt; (&lt;strong&gt;SRP&lt;/strong&gt;)&lt;/a&gt;. In this case, one of the responsibilities can be extracted into a separate component which only exposes inputs, thus breaking the cycle, as the following figure illustrates:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic7.png&#34;
	width=&#34;1861&#34;
	height=&#34;722&#34;
	srcset=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic7_hu_f6ae600ec9ba0180.png 480w, //localhost:1313/p/call-graph-acyclicity/images/acyclic7_hu_f26f68362306158c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;257&#34;
		data-flex-basis=&#34;618px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;In this diagram, component &lt;strong&gt;A&lt;/strong&gt; has been split into &lt;strong&gt;A1&lt;/strong&gt; and &lt;strong&gt;A2&lt;/strong&gt;. Both &lt;strong&gt;A1&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; invoke &lt;strong&gt;A2&lt;/strong&gt;, but &lt;strong&gt;A2&lt;/strong&gt; does not invoke anything, so there is no cycle.&lt;/p&gt;
&lt;p&gt;This can happen, for example, if component &lt;strong&gt;A&lt;/strong&gt; contains both a data model and some logic acting upon the data model. If &lt;strong&gt;A&lt;/strong&gt; is incapable of fully encapsulating the data model, it may have to expose not only an output for interacting with the rest of the system, but also an input for the rest of the system to interact with the data model. With the fission refactoring, component &lt;strong&gt;A&lt;/strong&gt; has been split into one component for the logic (&lt;strong&gt;A1&lt;/strong&gt;) and a separate component for the data model (&lt;strong&gt;A2&lt;/strong&gt;).&lt;/p&gt;
&lt;h3 id=&#34;strategy-observable-fission&#34;&gt;Strategy: Observable Fission
&lt;/h3&gt;&lt;p&gt;The astute reader might notice that in the plain fission example, components &lt;strong&gt;A1&lt;/strong&gt; and &lt;strong&gt;A2&lt;/strong&gt; are not exactly equivalent to component &lt;strong&gt;A&lt;/strong&gt;: In the original diagram &lt;strong&gt;A&lt;/strong&gt; used to be able to take notice of incoming calls from &lt;strong&gt;B&lt;/strong&gt; intended for the data model, and could therefore take action in response to those calls, whereas in the refactored diagram &lt;strong&gt;A1&lt;/strong&gt; is oblivious to any calls that &lt;strong&gt;B&lt;/strong&gt; makes to &lt;strong&gt;A2&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If &lt;strong&gt;A1&lt;/strong&gt; needs to be aware of such calls, this can be very easily accomplished by having &lt;strong&gt;A2&lt;/strong&gt; issue change notifications, and wiring these notifications back to &lt;strong&gt;A1&lt;/strong&gt;. This new wire does not introduce a call cycle, because as we have already shown when describing the trivial case, notifications can always be air-gapped.&lt;/p&gt;
&lt;p&gt;The following figure illustrates the application of the observable fission strategy:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic8.png&#34;
	width=&#34;1861&#34;
	height=&#34;722&#34;
	srcset=&#34;//localhost:1313/p/call-graph-acyclicity/images/acyclic8_hu_c298426430891ac6.png 480w, //localhost:1313/p/call-graph-acyclicity/images/acyclic8_hu_701e420d6dc70bd6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;257&#34;
		data-flex-basis=&#34;618px&#34;
	
&gt;
&lt;/p&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;We have shown that cyclic call graphs prevent the standardization, and therefore the automation, of system assembly.&lt;/p&gt;
&lt;p&gt;We have discussed refactoring strategies for systematically eliminating call cycles, including a universally applicable technique for trivially eliminating the most common call cycles.&lt;/p&gt;
&lt;p&gt;We conclude that since call cycles can be avoided or eliminated, they can be comprehensively disallowed, thus paving the way for the automation of system assembly.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;TO DO:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change the cover image to make the cycle look nicer.&lt;/li&gt;
&lt;li&gt;Show a diagram where the observable and observer interfaces are fully spelled out before showing the diagram in which the notation has been simplified.&lt;/li&gt;
&lt;li&gt;Redo the placement and wiring of A1 and A2 to more clearly show that they used to be A.&lt;/li&gt;
&lt;li&gt;Mention that the air-gap pseudo-component does not need to incorporate an actual multicast observable component; a unicast observable will suffice.&lt;/li&gt;
&lt;li&gt;Provide a better example of a situation where an air-gap cannot be used.&lt;/li&gt;
&lt;li&gt;Most importantly: Introduce a distinction between &amp;ldquo;early&amp;rdquo; outputs, which may be invoked during construction, and &amp;ldquo;late&amp;rdquo; outputs, which may only be invoked after construction. Show that late  wires can be air-gapped too, even if they are two-way.&lt;/li&gt;
&lt;li&gt;Use a polarized capacitor symbol for one-way interface air-gaps and a non-polarized capacitor symbol for two-way interface air-gaps.&lt;/li&gt;
&lt;li&gt;Possibly introduce diode notation for one-way pins.&lt;/li&gt;
&lt;li&gt;Possibly introduce bar-plus-arrow notation for early pins.&lt;/li&gt;
&lt;li&gt;Possibly introduce not-gate notation for inverted pins.&lt;/li&gt;
&lt;li&gt;Possibly represent an observatory as a not-gate and an observer as the opposite (a triangle with a bubble on its flat side.)&lt;/li&gt;
&lt;li&gt;Note the following:
&lt;ul&gt;
&lt;li&gt;One-way interfaces: can always be inverted.&lt;/li&gt;
&lt;li&gt;Two-way interfaces: can only be inverted if late, and one-to-one.&lt;/li&gt;
&lt;li&gt;Normal two-way interfaces: multiple outputs can connect to one input.&lt;/li&gt;
&lt;li&gt;Normal one-way interfaces: multiple outputs can connect to multiple inputs. (With the help of a distributor.)&lt;/li&gt;
&lt;li&gt;Inverted one-way interfaces: one output can connect to multiple inputs.&lt;/li&gt;
&lt;li&gt;Inverted two-way interfaces: one output connects to one input. (And must be late.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Towards Authoritative Software Design</title>
        <link>//localhost:1313/p/towards-authoritative-software-design/</link>
        <pubDate>Sat, 09 Dec 2023 19:16:05 +0000</pubDate>
        
        <guid>//localhost:1313/p/towards-authoritative-software-design/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/towards-authoritative-software-design/media/blueprint.jpg&#34;
	width=&#34;5000&#34;
	height=&#34;2740&#34;
	srcset=&#34;//localhost:1313/p/towards-authoritative-software-design/media/blueprint_hu_97e76780ef2663b9.jpg 480w, //localhost:1313/p/towards-authoritative-software-design/media/blueprint_hu_44b86b65f3bab1f7.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;abstract&#34;&gt;Abstract
&lt;/h3&gt;&lt;p&gt;This paper examines the long-standing need within the software engineering discipline for technical design that is &lt;em&gt;&lt;strong&gt;authoritative&lt;/strong&gt;&lt;/em&gt;. A design process is authoritative if there exist technical means of materializing the design document as a working product, thus guaranteeing that the end result is indeed as described by the design. We notice the scarcity and inadequacy of existing solutions for software design, we look at solutions in other engineering disciplines, and we conclude with realizations on what it would take to come up with a solution that works for software.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;prior-art&#34;&gt;Prior art
&lt;/h3&gt;&lt;p&gt;Through the decades, plenty of tools and methodologies have been developed with the aim of aiding the software design process. A common pattern among them is that they try to make some aspect of development more visual rather than textual. They fall into one of the following categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Implementation tools (For example: &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Visual_programming_language&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Visual Programming Languages&lt;/em&gt;&lt;/a&gt; like &lt;em&gt;Snap!&lt;/em&gt;, &lt;em&gt;Scratch&lt;/em&gt;, &lt;em&gt;EduBlocks&lt;/em&gt;, &lt;em&gt;Blockly&lt;/em&gt;, etc.,) - They are indeed visual, and they do indeed produce runnable software, but their structure and level of detail is identical to the structure and level of detail of program code in the form of text, so they express implementations rather than designs.&lt;/li&gt;
&lt;li&gt;Visualization tools (For example: class diagrams, dependency diagrams, call trees, etc.) - They are restricted to the visualization, exploration, and documentation, but not the editing of existing software, nor the design of new software. As such, they are reverse engineering tools, not design tools.&lt;/li&gt;
&lt;li&gt;Niche tools (For example: &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Web_Services_Description_Language&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Web Services Description Language (WSDL)&lt;/em&gt;&lt;/a&gt;, &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Business_Process_Execution_Language&#34; target=&#34;_blank&#34;
   &gt;*Business Process Execution Language (BPEL)&lt;/a&gt;, etc.) - They are exclusively focused on specific domains such as web services, business processes, etc., and cannot be used for software design at large.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Look ma, no code&amp;rdquo; tools (For example: &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Rapid_application_development&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Rapid Application Development (RAD) tools&lt;/em&gt;&lt;/a&gt;, &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/No-code_development_platform&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;No-Code Development Platforms (NCDPs)&lt;/em&gt;&lt;/a&gt;, and &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Low-code_development_platform&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Low-Code Development Platforms (LCDPs)&lt;/em&gt;&lt;/a&gt;) - They impose limitations on what can be done; they impose the use of a massive vendor-specific platform; they do not scale; they are aimed at non-programmers, allowing easy creation of simple user-interface-centric applications to quickly (and usually haphazardly) meet specific narrow business needs.&lt;/li&gt;
&lt;li&gt;Modelling tools (For example: &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Microsoft_Visio&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Microsoft Visio&lt;/em&gt;&lt;/a&gt;, &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Modeling_language&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Modelling Languages&lt;/em&gt;&lt;/a&gt; such as &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Unified_Modeling_Language&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Unified Modeling Language (UML)&lt;/em&gt;&lt;/a&gt;, The &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/C4_model&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;C4 model&lt;/em&gt;&lt;/a&gt;, etc.) - They are restricted to modelling, so they produce designs that bear no necessary relationship to reality. They aim to constrain what is supposed to be included in a design, but these constrains exist only in theory, because they are not enforced by any technical means.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a more detailed look at prior art, see &lt;a 
   href=&#34;//localhost:1313/p/the-state-of-affairs-in-computer-aided-software-design/&#34;
   &gt;The state of affairs in computer-aided software design&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of all the technologies listed above, only modelling tools can legitimately be said to be of any potential usefulness in the software design process at large.&lt;/p&gt;
&lt;h3 id=&#34;the-unsuitability-of-modelling&#34;&gt;The unsuitability of modelling
&lt;/h3&gt;&lt;p&gt;Modelling tools allow designs that bear no relationship to reality: they are not informed via any technical means about the actual components available for incorporation in a design, nor about valid ways of interconnecting them. Consequently, modelling tools are nothing more than fancy whiteboards: they cannot guarantee, via any technical means, the feasibility of a design. (This is so by definition; otherwise, it would not be modelling, it would be engineering.)&lt;/p&gt;
&lt;p&gt;Essentially, modelling tools are &lt;em&gt;&lt;strong&gt;non-authoritative&lt;/strong&gt;&lt;/em&gt;: no matter how sophisticated the model is, the authoritative source of truth for the structure of the system remains the source code, not the model.&lt;/p&gt;
&lt;p&gt;The source code should ideally constitute a faithful implementation of the model, but there are no technological safeguards  to guarantee that it does, and as a matter of fact it usually cannot, because the model is almost never feasible as designed to begin with.&lt;/p&gt;
&lt;p&gt;For these reasons, modelling is of severely limited value, and programmers largely regard it as loathsome double book-keeping.&lt;/p&gt;
&lt;p&gt;For a list of ways in which modelling as a means of design fails the software engineering discipline, please see &lt;a 
   href=&#34;//localhost:1313/p/the-perils-of-whiteboards/&#34;
   &gt;The perils of whiteboards&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;other-engineering-disciplines&#34;&gt;Other engineering disciplines
&lt;/h3&gt;&lt;p&gt;In long-established engineering disciplines such as mechanical, electrical, civil, etc., for several decades now, design work has been facilitated by &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Computer-aided_design&#34; target=&#34;_blank&#34;
   &gt;Computer-Aided Design (CAD)&lt;/a&gt; tools and &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Computer-aided_engineering&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Computer-Aided Engineering (CAE)&lt;/em&gt;&lt;/a&gt; tools.&lt;/p&gt;
&lt;p&gt;Mechanical engineers use CAD tools to create documents describing complicated three-dimensional structures with detailed information about materials, dimensions, and tolerances. The tools perform various forms of analysis to verify the validity and feasibility of the design. Based on the results, the engineers can edit the design to optimize it, and repeat the analysis as necessary. Eventually, the design document is sent to a shop where &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Computer_numerical_control&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;CNC machining&lt;/em&gt;&lt;/a&gt; or &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/3D_printing&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;3D-printing&lt;/em&gt;&lt;/a&gt; is used to create the parts with minimal human intervention.&lt;/p&gt;
&lt;p&gt;In electronic engineering, which is the discipline from which most parallels can be drawn to software engineering, virtually all design work since the 1980s is being done using &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Electronic_design_automation&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Electronic Design Automation (EDA) / Electronic Computer-Aided Design (ECAD) tools&lt;/em&gt;&lt;/a&gt;. These tools have revolutionized electronic design by using a standardized notation to not only describe, analyze, and optimize products, but also to manufacture them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Electronic schematic diagrams use a standard notation which is understood by all electronic engineers. A new hire begins their first day at work by studying the schematics, and before the end of the day they are often able to pick up the soldering iron and start doing productive work. Contrast this with software engineering, where a new hire usually cannot be productive before spending weeks studying source code and documentation, and having numerous knowledge transfer meetings with senior engineers who know the system.&lt;/li&gt;
&lt;li&gt;Most importantly, ECAD tools bridge the gap from the physical world to the design, and from the design back to the physical world. The tools have libraries of electronic components available for inclusion in a design, and electronic manufacturing has long ago advanced to the point where an electronic design document can be turned into a functioning circuit board with nearly zero human intervention. Thus, electronic design documents today are &lt;em&gt;&lt;strong&gt;authoritative&lt;/strong&gt;&lt;/em&gt;: the end products are accurately described by their designs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-problem-with-software&#34;&gt;The problem with software
&lt;/h3&gt;&lt;p&gt;Unfortunately, thus far, the software engineering discipline has been following a very different path from other engineering disciplines: technical software design documents are scarce, and &lt;em&gt;authoritative&lt;/em&gt; technical software design documents are completely non-existent.&lt;/p&gt;
&lt;p&gt;This situation has been allowed to go on for so long, partly because in software we already have a certain other kind of document which is authoritative, and this is the source code. However, source code is an implementation, or at best a detailed technical description, but not a technical design. To say that the technical design of a software system is a listing of the lines of source code that make up that software system is equivalent to saying that the technical design of the Great Wall of China is a list of all the bricks that make up the Great Wall of China.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/towards-authoritative-software-design/media/the-great-wall-by-hao-wei.jpg&#34;
	width=&#34;4606&#34;
	height=&#34;3071&#34;
	srcset=&#34;//localhost:1313/p/towards-authoritative-software-design/media/the-great-wall-by-hao-wei_hu_d1eba4a46b4d1881.jpg 480w, //localhost:1313/p/towards-authoritative-software-design/media/the-great-wall-by-hao-wei_hu_4d46a82415ff1bad.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;(A tiny part of) the Great Wall of China &lt;a class=&#34;external&#34; 
   href=&#34;https://commons.wikimedia.org/w/index.php?curid=351725&#34; target=&#34;_blank&#34;
   &gt;by Hao Wei, CC BY 2.0&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A technical design is supposed to list operative components, and to show how they are interconnected, but not to delve past the level of detail of the component. Unfortunately, we do not have that for software, at least not in an authoritative form.&lt;/p&gt;
&lt;p&gt;It is a great paradox of our times that the software engineering discipline is bereft of authoritative design tools, when such tools are the bread and butter of the long-established engineering disciplines.&lt;/p&gt;
&lt;p&gt;In lieu of authoritative tools, software design today is practiced using conventional, non-authoritative means, such as box-and-arrow drawing applications, which, as explained earlier, are only capable of modelling, and therefore amount to nothing more than fancy whiteboards.&lt;/p&gt;
&lt;p&gt;The end-result of all this is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Software systems do not match their designs.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even if the technical design happens to describe a software system that could actually be built as described, there are no technological safeguards to guarantee that it will: the software engineers and the operations engineers are free to build and deploy a system that deviates from the design, and neither the architects, nor the management, have any way of knowing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Software systems diverge from their designs over time.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even if the deployed software system initially matches its design, the system is bound to evolve. The design should ideally evolve in tandem, but it rarely does, again because there are no technological safeguards to enforce this: the engineers are free to modify and redeploy the system without updating the design document, and in fact they usually do, because it saves them from double book-keeping. Thus, over time, the design bears less and less relationship to reality.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If, due to the above reasons, you suspect that your technical design document is counterfactual, and you would like to know exactly what it is that you have actually deployed and running out there, you have to begin by asking questions to the software engineers and the operations engineers.&lt;/p&gt;
&lt;p&gt;In order to answer your questions, the engineers will in turn have to examine source code, version control histories, build scripts, configuration files, server provisioning scripts, and launch scripts, because the truth is scattered in all those places. In some cases they might even have to try and remember specific commands that were once typed on a terminal to bring the system to life.&lt;/p&gt;
&lt;p&gt;If this sounds a bit like it is held together by shoestrings, it is because it is in fact held together by shoestrings.&lt;/p&gt;
&lt;p&gt;Thus, the information that you will receive will hardly be usable, and even if you manage to collect it all, make sense out of it, and update the design document with it, by the time you are done, the deployed system may have already changed, which means that your design document is already obsolete.&lt;/p&gt;
&lt;p&gt;As a result, it is generally impossible at any given moment to know the actual technical design of any non-trivial software system in existence.&lt;/p&gt;
&lt;p&gt;This is a very sorry state of affairs for the entire software industry to be in.&lt;/p&gt;
&lt;h3 id=&#34;towards-a-solution&#34;&gt;Towards a solution
&lt;/h3&gt;&lt;p&gt;If we consider all the previously listed problems that plague software design as conventionally practiced, and if we look at how the corresponding problems have been solved in long-established engineering disciplines, we inescapably arrive at the following realization:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The technical design of a system can only be said to accurately describe that system if there exist technical means of having the system automatically created from the design.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In order to automatically create a system from its design, the design must be semantically valid. This brings us to a second realization:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The semantic validity of a technical design can only be guaranteed if there exist technical means of informing the design with components available for incorporation and restricting the design to only valid ways of  interconnecting them.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The above statements define a design process as &lt;em&gt;&lt;strong&gt;authoritative&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;An authoritative software design document is an &lt;strong&gt;essential engineering instrument&lt;/strong&gt; instead of an abstract work of art:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The design document contains all the information necessary for provisioning target environments with software components, instantiating the components, and wiring them together; this information not only need not, but in fact must not be encoded anywhere else in the source code; this eliminates double book-keeping, which is considered by developers as another layer of red tape which is preventing them from getting things done, and is the complaint most often heard from developers about conventional software design.&lt;/li&gt;
&lt;li&gt;The design document is the only means through which the system can be re-deployed after making a change to either the code, or the design, or both; this guarantees that the deployed system will always be exactly as described by the design, so there is no possibility of the design ever becoming outdated, which is the complaint most often heard from architects about programmers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any attempt to introduce authoritative design in the software engineering discipline would necessarily have to borrow concepts from the electronic engineering discipline. This means that the solution must lie within the realm of &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Component-based_software_engineering&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Component-Based Software Engineering (CBSE)&lt;/em&gt;&lt;/a&gt;, where systems consist of well-defined components, connectable via specific interfaces, using well-defined connectivity rules.&lt;/p&gt;
&lt;p&gt;What we need is a toolset that implements such a paradigm for software. The toolset must have knowledge of available components, knowledge of the interfaces exposed by each component, and rules specifying valid ways of connecting those interfaces. The toolset must then be capable of materializing the design into a running software system.&lt;/p&gt;
&lt;p&gt;The toolset must not repeat the mistakes and suffer from the drawbacks of previous attempts at component-based software engineering. Thus, the toolset must meet the following goals:&lt;/p&gt;
&lt;h4 id=&#34;facilitate-any-programming-language&#34;&gt;Facilitate any programming language.
&lt;/h4&gt;&lt;p&gt;By this we do not mean that it should be possible to freely mix C++ components with Java components; what we mean is that it should be possible to express in one place a C++ subsystem containing C++ components interconnected via C++ interfaces, and in another place a Java subsystem containing Java components interconnected via Java interfaces, and at a higher scope to have each of these subsystems represented as an individual opaque component, where connections between the two components are made via language-agnostic interfaces (e.g. REST) or cross-language interfaces (e.g. JNI, JNA, etc.)&lt;/p&gt;
&lt;h4 id=&#34;facilitate-any-level-of-scale-from-embedded-systems-to-network-clouds&#34;&gt;Facilitate any level of scale, from embedded systems to network clouds.
&lt;/h4&gt;&lt;p&gt;This means that the nature of a component and the nature of an interface must not be restricted, so that they can be realized in different ways at different levels of scale. For example, at the embedded/C++ level of scale, a component might be defined as a C++ class exposing C++ interfaces, whereas at the internet level of scale a component is likely to be defined as a (physical or virtualized) network host exposing TCP interfaces.&lt;/p&gt;
&lt;h4 id=&#34;guarantee-type-safety-at-any-scale&#34;&gt;Guarantee type-safety at any scale.
&lt;/h4&gt;&lt;p&gt;Type safety can be carried across different levels of scale by means of parametric polymorphism (generic interfaces.) For example, a type-safe interface between a client and a server in a network can be described with a construct like Tcp&amp;lt;Rest&amp;lt;AcmeShopping&amp;gt;&amp;gt; which stands for a TCP connection through which we are exchanging REST transactions according to a schema which corresponds to some programmatic interface called &amp;ldquo;AcmeShopping&amp;rdquo;.&lt;/p&gt;
&lt;h4 id=&#34;require-minimal-extra-baggage&#34;&gt;Require minimal extra baggage.
&lt;/h4&gt;&lt;p&gt;Components should not be required to include a lot of extra overhead to facilitate their inclusion in a design. Especially at the embedded level, components should ideally include zero overhead.&lt;/p&gt;
&lt;p&gt;This means that a C++ class which accepts as constructor parameters interfaces to invoke and exposes interfaces for invocation by virtue of  simply implementing them should ideally be usable in s design as-is.&lt;/p&gt;
&lt;p&gt;The extra functionality necessary for representing the component during design-time, provisioning a target environment with it, instantiating it, and wiring it should be provided by a separate companion module, which acts as a plugin to the design toolset, and exists only during design-time and deployment-time, but not during run-time**.**&lt;/p&gt;
&lt;h4 id=&#34;support-automatic-deployment&#34;&gt;Support automatic deployment.
&lt;/h4&gt;&lt;p&gt;The toolset must be capable of deploying a software system of arbitrary complexity to a production environment of arbitrary complexity, and it must be capable of doing so with no human intervention other than the pressing of a &amp;ldquo;Deploy&amp;rdquo; button.  To this end, toolset must support components representing various different kinds of environments such as network hosts, isolated devices, operating systems, virtual machines, etc. and each of these components must be configurable with everything necessary in order to provision a certain environment with the corresponding part of the design.&lt;/p&gt;
&lt;h4 id=&#34;support-iterative-development&#34;&gt;Support iterative development.
&lt;/h4&gt;&lt;p&gt;Once a system has been designed, coded, and deployed, it is a fact of life that it will keep evolving. The design toolset must support re-deploying after modifying the code, or the design, or both.&lt;/p&gt;
&lt;h4 id=&#34;support-automatic-wiring&#34;&gt;Support automatic wiring.
&lt;/h4&gt;&lt;p&gt;Once an execution environment has been provisioned with software components, the components must be wired together in order to start running. Traditionally, the wiring of freshly instantiated components is done by carefully hand-crafted code, to account for circular dependency issues between components. If we are to have fully automated deployment, the wiring cannot be done by hand-crafted code anymore; it must be automated, therefore it must be standardized. This in turn means that certain connectivity rules are necessary in order to guarantee that software designs do not suffer from circular dependency issues that would require custom handling. For more on this, see &lt;a 
   href=&#34;//localhost:1313/p/call-graph-acyclicity/&#34;
   &gt;Call Graph Acyclicity&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;facilitate-incremental-adoption&#34;&gt;Facilitate incremental adoption.
&lt;/h4&gt;&lt;p&gt;It should be possible to express, via an authoritative design document, the structure of a small subsystem within a larger system whose structure has not (yet) been expressed authoritatively.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In systems of medium scale and above, this may be handled by making the  core deployment and wiring engine of the toolset available on demand, during runtime, to quickly materialize a small subsystem within the larger system.&lt;/li&gt;
&lt;li&gt;In embedded-scale systems, it should be possible to utilize code generation to do the instantiation and the wiring, so as to avoid having the core engine present in the target environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;utilize-a-text-based-document-format&#34;&gt;Utilize a text-based document format.
&lt;/h4&gt;&lt;p&gt;In software we make heavy use of version control systems, which work best with text files, so the design documents must be text-based. The text format would essentially be a system description language, so it must be programmer-friendly in order to facilitate editing using a text editor or an IDE. A graphical design tool would read text of this language into data structures, allow the visual editing of such data structures, and save them back as text.&lt;/p&gt;
&lt;h4 id=&#34;facilitate-dynamic-software-systems&#34;&gt;Facilitate dynamic software systems.
&lt;/h4&gt;&lt;p&gt;Every non-trivial system has the ability to vary, at runtime, the number of instances of some components in response to changing computation needs, and to choose to instantiate different types of components to handle different needs. Therefore, a toolset aiming to be capable of expressing any kind of design must be capable of expressing, at a minimum, the following dynamic constructs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plurality: Multiple instantiation of a certain component, where the number of instances is decided at runtime.&lt;/li&gt;
&lt;li&gt;Polymorphism: Fulfilling a certain role by instantiating one of several different types of components capable of fulfilling that role, where the choice of which component type to instantiate is made at runtime.&lt;/li&gt;
&lt;li&gt;Polymorphic plurality: A combination of the previous two: A runtime-variable array of components where each component can be of a     different, runtime-decidable type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;facilitate-multiple-alternative-configurations-layers&#34;&gt;Facilitate multiple alternative configurations (layers).
&lt;/h4&gt;&lt;p&gt;In virtually every software development endeavor there is a core system design which is materialized in a number of variations to cover different needs. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debug vs. release&lt;/li&gt;
&lt;li&gt;Testing vs. production&lt;/li&gt;
&lt;li&gt;With instrumentation or without&lt;/li&gt;
&lt;li&gt;With hardware emulation vs. a targeting the actual hardware&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The bulk of the components and the wires of the design exist in all configurations, but some configurations prescribe additional components and slightly different wiring.&lt;/p&gt;
&lt;p&gt;Therefore, the toolset must facilitate the expression of alternative configurations so that each configuration can be defined authoritatively.&lt;/p&gt;
&lt;p&gt;To facilitate this, the toolset must support design layers, similar to drawing layers found in drawing applications like Photoshop. Note that design layers are unrelated to the architectural layers found in layered architectures, although it is possible that people will figure out ways to represent architectural layers using design layers.&lt;/p&gt;
&lt;p&gt;The details of how layers are going to work in order to support configurations are to be decided, but one preliminary idea is to have one or   more base layers where the bulk of the components are laid out, and a few mutually exclusive configuration layers on top of them. A configuration layer combines with one or more base layers to form a complete system, and is deployable, whereas base layers do not describe complete systems and are therefore not deployable by themselves.&lt;/p&gt;
&lt;h4 id=&#34;be-extensible&#34;&gt;Be extensible.
&lt;/h4&gt;&lt;p&gt;The design document must support the inclusion of arbitrary metadata to be used by various tools, which can be either separate applications, or plugins to the graphical editor. Examples of metadata:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Keeping track of documentation of interest to different stakeholders, for example &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Architectural_decision&#34; target=&#34;_blank&#34;
   &gt;Architectural Decisions&lt;/a&gt; &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Keeping track of &lt;em&gt;Team Architecture&lt;/em&gt;, i.e. which development teams are responsible for building and/or maintaining different parts of the design. &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recording various technical characteristics, such as data flow. (Every interface can be associated with a direction of data flow with respect to the direction of invocation: when invoked, some interfaces only pull data, some only push data, and some perform bi-directional transfer of data.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recording, either manually or automatically, various metrics such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technical debt estimations&lt;/li&gt;
&lt;li&gt;Threat modelling&lt;/li&gt;
&lt;li&gt;Compliance considerations and responsibilities&lt;/li&gt;
&lt;li&gt;Test code coverage results&lt;/li&gt;
&lt;li&gt;Performance statistics&lt;/li&gt;
&lt;li&gt;Frequency of change statistics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using such metadata and plugins, the graphical editor may allow switching between views to visualize various aspects of the system overlaid on the component diagram, such as, for example, data flow instead of control flow, a heat map of technical debt, a heat map of test code coverage, a heat map of frequency of change, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;be-accessible-and-attractive&#34;&gt;Be accessible and attractive.
&lt;/h4&gt;&lt;p&gt;The extent and speed by which a new software development technology is  adopted greatly depends on how accessible and attractive the technology is. To this end:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The core toolset must be free and open source software. (Profit may be made from additional, optional tools, such as a visual editor.) This also means that the toolset must be a cross-platform, installable software package rather than a cloud offering.&lt;/li&gt;
&lt;li&gt;A clear distance must be kept from unattractive technologies like UML, XML, etc.&lt;/li&gt;
&lt;li&gt;The literature around the toolset must avoid wooden language and alienating terms such as &amp;ldquo;enterprise architecture&amp;rdquo;, &amp;ldquo;standards committee&amp;rdquo;, &amp;ldquo;industry specifications consortium&amp;rdquo;, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;efficiently-manage-complexity&#34;&gt;Efficiently manage complexity.
&lt;/h4&gt;&lt;p&gt;Software designs can become formidably complicated. One of the major goals of a design methodology is to manage complexity and to reduce clutter. Therefore, the toolset must support the following constructs:&lt;/p&gt;
&lt;p&gt;Containers&lt;/p&gt;
&lt;p&gt;Some systems are so large that expressing them in a single diagram may be inconvenient to the point of being unworkable. To address this, the
toolset must facilitate hierarchical system composition by means of container components. A container encapsulates an entire separately-editable diagram and exposes some of the interfaces of the contained components as interfaces of its own. Thus, containers can be used to abstract away entire sub-designs into opaque black-boxes within greater designs. Container components moust be boundlessly nestable.&lt;/p&gt;
&lt;p&gt;Vias&lt;/p&gt;
&lt;p&gt;Large numbers of wires traveling long distances within a diagram can have a detrimental effect on the intelligibility of the diagram. For this reason, the concept of the &amp;ldquo;via&amp;rdquo; will be borrowed from electronic design.  A via is a named circle into which a wire may terminate and thus vanish from view. All vias with the same name are implicitly connected without having to show the wires between them. This is especially useful for wires of interfaces representing cross-cutting concerns, which are ubiquitous, and therefore do not need to be shown everywhere.&lt;/p&gt;
&lt;p&gt;A via is strongly typed like any pin; when the first pin is wired to a via, the via implicitly takes the type of that pin. Vias are to be drawn as little circles.&lt;/p&gt;
&lt;p&gt;Ribbons&lt;/p&gt;
&lt;p&gt;Sometimes there may be multiple parallel wires that travel over  long distances on a diagram. Some of them might even go in opposite directions.&lt;/p&gt;
&lt;p&gt;To reduce clutter, the toolset must make it possible to group such wires together in a ribbon. At each end of a ribbon is a connector, which breaks the ribbon into individual pins and shows the name and type of each pin, so that individual wires can be drawn from there to component pins.&lt;/p&gt;
&lt;p&gt;Ribbons and connectors are pseudo-elements, in the sense that they only exist in the design diagram and have no counterpart in code. Ribbons are to be drawn as two parallel hairlines with a slanted hash between them. The shape of connectors is to be determined, but it will probably be borrowed from electronic design. Ribbons can also be routed in and out of vias. Ribbon vias are to be slightly bigger than single-wire vias.&lt;/p&gt;
&lt;h4 id=&#34;establish-a-universal-notation&#34;&gt;Establish a universal notation.
&lt;/h4&gt;&lt;p&gt;To ensure that every developer can easily understand a design document that they see for the first time, the toolset must standardize the notation used in software diagrams, the same way that electronic schematic diagrams follow a standard notation which is universally understood by all electronic engineers.&lt;/p&gt;
&lt;p&gt;The details are to be decided, but some preliminary ideas about styling and conventions are as follows:&lt;/p&gt;
&lt;p&gt;(Need to show an illustration here.)&lt;/p&gt;
&lt;p&gt;Diagrams are drawn using nothing but monochrome lines. (Black lines on a white background, or white lines on a blue background, etc.) This is because color opens up too many possibilities for distractions and for non-standard representations. The use of color should be reserved for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Distinguishing between different layers when multiple layers are drawn superimposed.&lt;/li&gt;
&lt;li&gt;Transient concepts such as:
&lt;ul&gt;
&lt;li&gt;Mouse-over in the graphical editor&lt;/li&gt;
&lt;li&gt;Selection in the graphical editor&lt;/li&gt;
&lt;li&gt;Validation errors&lt;/li&gt;
&lt;li&gt;Visualization of statistics (especially heat maps)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nonetheless, people will probably figure out that they can present a design in a colorful way by placing different components on different layers, choosing a different color for each layer, and having all layers displayed simultaneously. However, should they decide to do that, they are on their own: the toolset will not offer any features specifically intended to facilitate this.&lt;/p&gt;
&lt;p&gt;Wires are to be drawn using hairlines.&lt;/p&gt;
&lt;p&gt;Pins are also to be drawn using hairlines. Outputs will be triangular arrows pointing out of a component, inputs will be triangular arrows pointing into a component. The name and type of each pin is to be drawn outside the shape of the component, allowing components to be relatively small and requiring a lot of empty space around them to fit the names of the pins. The pin name is to be drawn with a bigger font than for the pin type.&lt;/p&gt;
&lt;p&gt;Wires may bend only in right angles. When two wires cross, this means that they are isolated from each other. When multiple outputs converge into a single input, a small but discernible dot at the point of convergence indicates that the wires are connected.&lt;/p&gt;
&lt;p&gt;At various points along a wire there can be tiny skinny arrows to remind the viewer of the direction of the wire (always from the output to the input.)&lt;/p&gt;
&lt;p&gt;Component shapes are to be drawn using thick lines. The default shape for every component type is a plain rectangle, with the name and type of the component rendered in the center. The component name is to be drawn using a bigger font than the component type.&lt;/p&gt;
&lt;p&gt;Some component types perform simple and standard functions, which can usually be inferred from their pins, for example adapters from one interface to another, or converters that transform data from one form to another. For such simple components, there is merit in refraining from displaying their name and type, and instead displaying them with special shape, thereby making them occupy less space in the design, and making the design more expressive. The toolset will initially offer a few special shapes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A triangular component shape intended for component types that act as converters.&lt;/li&gt;
&lt;li&gt;An AND-gate component shape for component types that play the role of adapters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Over time, more component types that perform simple and standard functions will inevitably be identified. This will lead to a demand to introduce additional component shapes, bearing some resemblance to electronic or flowchart symbols, to represent those components; however, the intention is to be conservative in this, and only introduce new shapes if the demand for them is strong and widespread.&lt;/p&gt;
&lt;p&gt;The preferred placement of pins on the perimeter of a component shall be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inputs along the left and top edges&lt;/li&gt;
&lt;li&gt;Outputs along the right and bottom edges&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The convention for pin placement shall be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;General-purpose and cross-cutting concern interfaces:
&lt;ul&gt;
&lt;li&gt;inputs along the top edge&lt;/li&gt;
&lt;li&gt;outputs along the bottom edge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Application-specific interfaces:
&lt;ul&gt;
&lt;li&gt;inputs along the left edge.&lt;/li&gt;
&lt;li&gt;outputs along the right edge.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This arrangement is analogous to electronic design, where the convention is that signals flow from left to right and voltages from top to bottom.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;See &lt;a class=&#34;external&#34; 
   href=&#34;https://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions&#34; target=&#34;_blank&#34;
   &gt;Architectural Decision Records by Michael Nygard&lt;/a&gt;-&amp;gt; link is dead, &lt;a class=&#34;external&#34; 
   href=&#34;https://cognitect.com/blog/2011/11/15/documenting-architecture-decisions&#34; target=&#34;_blank&#34;
   &gt;new link here&lt;/a&gt;. For ADRs as a vehicle of engagement between architects and developers instead of documentation, see &lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=n6G5qtJHmgw&#34; target=&#34;_blank&#34;
   &gt;Mark Richards - The Intersection of Architecture and Implementation - DDD Europe&lt;/a&gt;.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;See the concept of &amp;ldquo;Team Architecture&amp;rdquo; in &lt;a class=&#34;external&#34; 
   href=&#34;https://youtu.be/BNTt2aLB1tg?t=464&#34; target=&#34;_blank&#34;
   &gt;Practical (a.k.a. Actually Useful) Architecture by Stefan Tilkov, GOTO 2023, section 2, &amp;ldquo;Explicitly architect your team setup&amp;rdquo;&lt;/a&gt; &amp;ndash; Related term: &lt;em&gt;Team Topologies.&lt;/em&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Converting MSBuild project files from legacy-style to SDK-style</title>
        <link>//localhost:1313/p/converting-msbuild-project-files-from-legacy-style-to-sdk-style/</link>
        <pubDate>Tue, 05 Sep 2023 10:45:31 +0000</pubDate>
        
        <guid>//localhost:1313/p/converting-msbuild-project-files-from-legacy-style-to-sdk-style/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/converting-msbuild-project-files-from-legacy-style-to-sdk-style/images/legacy-style-csproj-to-sdk-style-csproj.png&#34;
	width=&#34;1173&#34;
	height=&#34;437&#34;
	srcset=&#34;//localhost:1313/p/converting-msbuild-project-files-from-legacy-style-to-sdk-style/images/legacy-style-csproj-to-sdk-style-csproj_hu_fe261eca00e97a56.png 480w, //localhost:1313/p/converting-msbuild-project-files-from-legacy-style-to-sdk-style/images/legacy-style-csproj-to-sdk-style-csproj_hu_9994cb08165f7ca6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;268&#34;
		data-flex-basis=&#34;644px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;I recently did this at work, and I decided to document the process here in the form of a how-to guide. Please note that I am not an expert, I am learning as I go along, so there may be mistakes.&lt;/p&gt;
&lt;p&gt;Sdk-style project files have existed since net5, but when they were introduced they were made compatible with earlier versions of dotnet, such as dotnet framework 4.7.2. The kind of project files we were using before can now be called legacy-style project files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Legacy-style project files begin with &lt;code&gt;&amp;lt;Project ToolsVersion=&amp;quot;...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sdk-style project files begin with &lt;code&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sdk-style project files are necessary if you want to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start using the &lt;code&gt;dotnet&lt;/code&gt; command-line utility and all the functionality that it provides.&lt;/li&gt;
&lt;li&gt;Eventually migrate to a modern version of dotnet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: If your legacy project files are using packages.config, they first need to be converted to PackageReference-style. We live in the 3rd millennium, we should act like it. Converting from packages.config to PackageReference is beyond the scope of this guide.&lt;/p&gt;
&lt;p&gt;Here are the steps I followed:&lt;/p&gt;
&lt;p&gt;I replaced the &lt;code&gt;&amp;lt;Project ToolsVersion=...&lt;/code&gt; tag with &lt;code&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I replaced the &lt;code&gt;&amp;lt;TargetFrameworkVersion&amp;gt;v4.7.2&amp;lt;/...&lt;/code&gt; tag with &lt;code&gt;&amp;lt;TargetFramework&amp;gt;net472&amp;lt;/...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I removed the following tags:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;ProjectGuid&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;TargetFrameworkProfile&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;FileAlignment&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;AutoGenerateBindingRedirects&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;Deterministic&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;NuGetPackageImportStamp&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;AssemblyName&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;AppDesignerFolder&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;ProjectTypeGuids&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;XamlDebuggingInformation&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;Prefer32Bit&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;ErrorReport&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I left the following tags as they were:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;RootNamespace&amp;gt;&lt;/code&gt; (This is only necessary if the name of the project file does not exactly match the name of the root namespace.)&lt;br&gt;
&lt;code&gt;&amp;lt;OutputType&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;StartupObject&amp;gt;&lt;/code&gt; (if any)&lt;br&gt;
&lt;code&gt;&amp;lt;ApplicationIcon&amp;gt;&lt;/code&gt; (if any)&lt;br&gt;
&lt;code&gt;&amp;lt;PlatformTarget&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I added the following tags:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Platforms&amp;gt;AnyCPU;x64&amp;lt;/...&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;ImplicitUsings&amp;gt;disable&amp;lt;/...\ &lt;/code&gt;&lt;Nullable&gt;enable&amp;lt;/&amp;hellip;&lt;br&gt;
&lt;code&gt;&amp;lt;TreatWarningsAsErrors&amp;gt;True&amp;lt;/...\ &lt;/code&gt;&lt;NoWarn&gt;NU1701;NU1702&amp;lt;/&amp;hellip;&lt;code&gt;&#39; &lt;/code&gt;&lt;UseWPF&gt;true&amp;lt;/&amp;hellip;&lt;code&gt;(for a WPF project)\&lt;/code&gt;&lt;UseWindowsForms&gt;True&amp;lt;/&amp;hellip; (for a WPF project &amp;ndash; don&amp;rsquo;t ask.)&lt;/p&gt;
&lt;p&gt;Then, I arrived at the most enjoyable part:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dozens upon dozens of &lt;code&gt;&amp;lt;Reference Include=...&amp;gt;&lt;/code&gt; items for things like &amp;ldquo;System&amp;rdquo;, &amp;ldquo;System.Data&amp;rdquo;, &amp;ldquo;System.Xml&amp;rdquo; etc. were removed. A few had to stay, for example:
&lt;ul&gt;
&lt;li&gt;System.Printing&lt;/li&gt;
&lt;li&gt;ReachFramework&lt;/li&gt;
&lt;li&gt;System.IO.Compression&lt;/li&gt;
&lt;li&gt;Microsoft.VisualBasic&lt;/li&gt;
&lt;li&gt;System.ServiceProcess&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All &lt;code&gt;&amp;lt;ProjectReference...&amp;gt;&lt;/code&gt; items became one-liners since neither project guid nor name is necessary anymore.&lt;/li&gt;
&lt;li&gt;All &lt;code&gt;&amp;lt;PackageReference...&amp;gt;&lt;/code&gt; items also became one-liners since the version does not have to be a nested tag, it can be an XML attribute.&lt;/li&gt;
&lt;li&gt;Hundreds of lines of XML that reference individual .cs and .xaml files, as well as the associations between them, were removed. In our case this resulted in a 12:1 reduction in project file size.&lt;/li&gt;
&lt;li&gt;References to included resources stayed of course, as well as references to anything else that needs special handling.&lt;/li&gt;
&lt;li&gt;The importing of Microsoft.common.props and Microsoft.CSharp.targets was removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once this is done, or even while doing it, various problems popped up, which I had to address. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At some point Visual Studio started skipping the building of a project, so the projects that depended on it would fail. If I tried to clean that project, Visual Studio would again skip that project, so it would not do any cleaning. Forcibly cleaning by deleting all the bin and obj directories had no effect; restarting Visual Studio had no effect; enabling more verbose build output (even diagnostic-level) did not reveal the slightest hint as to why Visual Studio was skipping the project. That was very frustrating. After some googling around, gathering a list of magical incantations, and trying them one after the other, the one that worked for me was unloading the project and then reloading it.&lt;/li&gt;
&lt;li&gt;At some point I was receiving an error telling me that one of my WPF applications was missing a &amp;ldquo;Main&amp;rdquo; entry point. However, its project file was for all practical purposes identical to the project file of another WPF application that was building just fine, and suffice it to say, neither of the two applications had a &amp;ldquo;Main&amp;rdquo; entry point. As it turns out, the application object must be called &amp;ldquo;App.xaml.cs&amp;rdquo; and &amp;ldquo;App.xaml&amp;rdquo;; if you rename it, the magic does not work anymore, or perhaps it needs an &lt;code&gt;&amp;lt;ApplicationDefinition Include=&amp;quot;MyCustomApp.xaml&amp;quot; /&amp;gt;&lt;/code&gt; in order to work.&lt;/li&gt;
&lt;li&gt;At some point Visual Studio was launching one of my console applications passing it all of its command-line arguments twice. Visual Studio stopped doing that after it was restarted.&lt;/li&gt;
&lt;li&gt;You may encounter different problems, or even if you encounter problems that seem similar, you may need different magical incantations to overcome them.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Once the above was done, it was time to try building. I did not really expect it to build, and in fact it did not build. There were a number of problems that needed to addressed on a case-by-case basis. Here are the build problems that I encountered, and how I solved them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: Referencing standard assemblies.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It turns out that in SDK-style projects not only we do not have to reference standard assemblies anymore, but we must actually refrain from referencing them. In our case this was fixed by editing our project file and removing the entire &lt;code&gt;&amp;lt;ItemGroup&amp;gt;&lt;/code&gt; with items like &lt;code&gt;&amp;lt;Reference Include=&amp;quot;System&amp;quot; /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Reference Include=&amp;quot;System.Xml&amp;quot; /&amp;gt;&lt;/code&gt; and the like.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: Duplicate attributes in AssemblyInfo.cs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most of the assembly attributes defined in AssemblyInfo.cs were causing duplicate attribute errors, because in SDK-style projects these are automagically generated for us. The solution was to remove those attributes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: PresentationUI assembly not found&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a very strange problem which I was unable to either understand or properly solve. It may be related to the following discussions:&lt;/p&gt;
&lt;p&gt;github/dotnet/wpf: &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/dotnet/wpf/issues/1423&#34; target=&#34;_blank&#34;
   &gt;&amp;ldquo;PresentationUI ref-assembly missing: Build fails because cannot find type PresentationUIStyleResources&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github/dotnet/runtime: &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/dotnet/runtime/issues/3651&#34; target=&#34;_blank&#34;
   &gt;&amp;ldquo;WPF has removed PresentationUI ref assembly&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Luckily, the assembly was not necessary, so I was able to remove it without losing any functionality.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: Other assemblies not found&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is another strange thing which I was also unable to understand.  Examples of assemblies that could not be found anymore: Microsoft.Bcl.HashCode, System.Collections.Immutable, and JetBrains.Annotations.&lt;/p&gt;
&lt;p&gt;I solved this problem by simply avoiding the use of those assemblies and either forfeiting their functionality or implementing it by myself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System.HashCode was very easy to re-implement.&lt;/li&gt;
&lt;li&gt;System.Collections.Immutable turned out to be unnecessary.&lt;/li&gt;
&lt;li&gt;JetBrains.Annotations turned out to also be unnecessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Once the build problems were resolved, it was time to try running. Again, I did not expect the application to run, and in fact it did not run. Here are the runtime problems I encountered, and how I resolved them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: Accessing native DLLs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our project we have a few natives DLLs which would fail to load under the SDK-style project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In one case, the solution was to modify the code that loads the DLL to look for it not only in &lt;code&gt;bin\x64\Debug&lt;/code&gt; but also in &lt;code&gt;bin\x64\Debug\runtimes\win-x64\native&lt;/code&gt; and in &lt;code&gt;bin\x64\Debug\runtimes\win-x64&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In another case, the solution was to add &lt;code&gt;&amp;lt;AppendTargetFrameworkToOutputPath&amp;gt;False&amp;lt;/...&lt;/code&gt; to the project file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In another case, the solution was to add the following tags to the project file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;RuntimeIdentifiers&amp;gt;win-x64&amp;lt;/...&lt;/code&gt;
&lt;code&gt;&amp;lt;RuntimeIdentifier&amp;gt;win-x64&amp;lt;/...&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And in an especially difficult case, the solution was to add a post-build step which copies everything from &lt;code&gt;bin\x64\Debug\runtimes\win-x64\native&lt;/code&gt; to &lt;code&gt;bin\x64\Debug&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: Custom-built resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In my application I have icons in SVG format. WPF has no built-in support for SVG, so conversion of SVG to XAML is necessary. A long time ago I decided to handle this as follows:&lt;/p&gt;
&lt;p&gt;I added a custom build target that would convert the SVG files to XAML during build, then these XAML files would be included as resources into my application in a kind of mysterious way which I did not quite understand myself, and then my application would have access to the icons as XAML.&lt;/p&gt;
&lt;p&gt;It is no surprise that clunky tricks like this break when you try to make a significant change, such as change the style of the project files. In our case, the custom build target did in fact run, but the XAML files that it generated were not being magically included as resources in our application anymore, so all of those icons failed to load, and they were completely blank on the screen. Furthermore, I had no idea how to fix this, and becoming an expert in this monstrosity known as MSBuild was not in my immediate or even long-term goals.&lt;/p&gt;
&lt;p&gt;The solution was to ditch the svg-to-xaml build target, to include the original SVG files as resources into the application, and to do the necessary conversions from SVG to XAML at runtime.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: no splash-screen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The solution to this problem, (which is described here: &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/62141464/773113&#34; target=&#34;_blank&#34;
   &gt;https://stackoverflow.com/a/62141464/773113&lt;/a&gt;) was to write a couple of lines of code in &lt;code&gt;Application.OnStartup()&lt;/code&gt; to create the splash-screen myself.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Once all of the runtime problems were resolved, I was able to perform the following additional improvements:&lt;/p&gt;
&lt;p&gt;Replaced a whole bunch of resource-include statements like &lt;code&gt;&amp;lt;Resource Include=&amp;quot;Art/Icon/Checkmark.svg&amp;quot; /&amp;gt;&lt;/code&gt; with a single resource include statement: &lt;code&gt;&amp;lt;Resource Include=&amp;quot;Art/Icon/\*.svg&amp;quot; /&amp;gt;&lt;/code&gt;. (And if I wanted to include all SVG files under &lt;code&gt;Art&lt;/code&gt;, I could have used &lt;code&gt;&amp;lt;Resource Include=&amp;quot;Art/**/*.svg&amp;quot; /&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;hr&gt;</description>
        </item>
        <item>
        <title>On Dotfuscator by PreEmptive Solutions</title>
        <link>//localhost:1313/p/on-dotfuscator-by-preemptive-solutions/</link>
        <pubDate>Tue, 15 Aug 2023 12:29:37 +0000</pubDate>
        
        <guid>//localhost:1313/p/on-dotfuscator-by-preemptive-solutions/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-dotfuscator-by-preemptive-solutions/images/dotfuscator.png&#34;
	width=&#34;598&#34;
	height=&#34;253&#34;
	srcset=&#34;//localhost:1313/p/on-dotfuscator-by-preemptive-solutions/images/dotfuscator_hu_11bee5a46dfe251e.png 480w, //localhost:1313/p/on-dotfuscator-by-preemptive-solutions/images/dotfuscator_hu_d63b329b1fdab07c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;567px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;I am giving this tool a try at work, and I am encountering a great many problems with it. I decided to publicly document my findings.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You launch their GUI application by going to the &amp;ldquo;Tools&amp;rdquo; menu of Visual Studio and selecting &amp;ldquo;Preemptive Protection - Dotfuscator Community&amp;rdquo;. At first it seems like nothing happens, but the application does appear a couple of incredibly long seconds later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Every single time you launch their GUI application you are presented with their &amp;ldquo;Dotfuscator Community Registration&amp;rdquo; dialog, which you have to cancel in order to proceed. &lt;strong&gt;Every. Single. Time.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While looking at the front page of their GUI, there are &lt;strong&gt;no fewer than 3 nags to buy visible&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One that says &amp;ldquo;Try Dotfuscator Professional&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Another that says &amp;ldquo;Evaluate Dotfuscator Professional now&amp;rdquo;&lt;/li&gt;
&lt;li&gt;And one more which says &amp;ldquo;A new version of Dotfuscator is available. Upgrade Now&amp;rdquo;,
which, as I will show, is a lie to trick you into visiting their web site.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upon every single startup of either the GUI or the command-line it says &amp;ldquo;a newer version is available, please download it from the downloads page of our website&amp;rdquo;. So, if you want to ignore the newer version, you can&amp;rsquo;t, &lt;strong&gt;you will always be pestered to download the newer version.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obviously, it calls home, but &lt;strong&gt;it did not first ask for permission to call home.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you go to the downloads page of their website to download the latest version, the only downloads available are for versions of Visual Studio that are older than the latest version, which is 2022, which is what I am using, &lt;strong&gt;and which is what Dotfuscator came bundled in&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;They do not say what the latest version number is on their web site, so &lt;strong&gt;you cannot compare it against the one you already have.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I downloaded the latest version they offered on their web-site, and when I tried to install it, it said that it cannot find any compatible version of Visual Studio to install itself into. &lt;strong&gt;So, the &amp;ldquo;newer version is available&amp;rdquo; message is just a damned lie to lure you into visiting their website.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each time you launch their GUI application, it says &amp;ldquo;Dotfuscator1.xml&amp;rdquo; on its titlebar, which is the filename of the configuration file I created, &lt;strong&gt;but it has not loaded that file, because the &amp;ldquo;Inputs&amp;rdquo; page is empty.&lt;/strong&gt;
Furthermore, it shows an asterisk next to the filename, meaning that the file has been modified, even before I have performed any actions that would have modified it. (And if I exit their GUI application, it does not ask whether I want to save any changes.)&lt;/p&gt;
&lt;p&gt;As it turns out, this &amp;ldquo;Dotfuscator1.xml&amp;rdquo; is just the default settings filename that it uses so that it does not start completely empty, and it is just a coincidence that it has the same name as my actual configuration file. This explains a lot of the observed behavior, but the fact still remains that this is the default settings filename, so my first settings file is likely to have this name, and then things are bound to get mighty confusing, because &lt;strong&gt;&amp;ldquo;Dotfuscator1.xml&amp;rdquo; will sometimes refer to the default unsaved settings file, and sometimes it will refer to my actual settings file.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Their GUI application remembers the size and position of its main window only on the primary monitor; if you move it to another monitor, &lt;strong&gt;next time it starts it will appear on the primary monitor again.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The user interface of their GUI application is clunky, inelegant, nonsensical, and results in a very poor user experience. As a small example,
on the &amp;ldquo;Inputs&amp;rdquo; tab they show a red exclamation mark next to every single one of my DLLs, but  &lt;strong&gt;they don&amp;rsquo;t give the slightest hint as to what the exclamation mark means or why it is being shown.&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Dotfuscator1.xaml file generated by their GUI application is completely unusable because it contains &lt;strong&gt;absolute pathnames.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have to manually edit the file to convert them to pathnames relative to the root of the solution.&lt;/li&gt;
&lt;li&gt;Of course, in doing so, you will be blatantly disregarding the auto-generated comment at the top of the file which says that to edit this
file, you supposedly have to use their GUI application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But it is okay, we live in the 3rd millenium, we do our builds on continuous build servers, so all of our build tools are command-line tools, and nobody cares about their crappy GUI application.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s use the command-line tool, shall we?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you try to use the command-line tool, it says:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;You must register Dotfuscator Community in order to execute command line builds. Run the Dotfuscator GUI which will explain how to register.&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the &amp;ldquo;community edition&amp;rdquo; product name is marketing deceit; this is not a community edition, this is a completely useless &lt;strong&gt;advertisement&lt;/strong&gt; of a product. It becomes an evaluation version once you have completed registration, where &amp;ldquo;registration&amp;rdquo; is a euphemism for &lt;strong&gt;personal information phishing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So, in order to proceed we have no option but to register.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s register, shall we?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their &amp;ldquo;Dotfuscator Community Registration&amp;rdquo; dialog says &amp;ldquo;PreEmptive Solutions will notify you by email with news, updated products and services (you may opt-out of being contacted).&amp;rdquo; There is no checkbox to control whether this will happen; you are just being informed that it will happen. So, &lt;strong&gt;beware, you are being opted-in.&lt;/strong&gt; (I think this violates a bunch of European Union regulations, doesn&amp;rsquo;t it?)&lt;/li&gt;
&lt;li&gt;Their &amp;ldquo;Dotfuscator Community Registration&amp;rdquo; dialog has a &amp;ldquo;Read our online privacy policy&amp;rdquo; link.
&lt;ul&gt;
&lt;li&gt;If you click that link, it takes you to some &amp;ldquo;Policies &amp;amp; Procedures&amp;rdquo; page, &lt;strong&gt;it does not take you to their privacy policy page.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;On that &amp;ldquo;Policies &amp;amp; Procedures&amp;rdquo; page, if you search among the many links that are completely unrelated to privacy, you might find a link to the page they have about their privacy policy. The title of that page is &amp;ldquo;Privacy Policy under Privacy Shield&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;The contemptible disgrace known as the &amp;ldquo;EU-US Privacy Shield&amp;rdquo; was &lt;strong&gt;declared invalid by the European Court of Justice on 16 July 2020.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Their software shows me a &amp;ldquo;Serial Number&amp;rdquo; but in the e-mail that they sent me &lt;strong&gt;they call the same thing &amp;ldquo;license key&amp;rdquo; instead.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Their software asks me for a &amp;ldquo;Confirmation Code&amp;rdquo; but in the e-mail that they sent me &lt;strong&gt;they call the same thing &amp;ldquo;confirmation number&amp;rdquo; instead.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;After registration, each time you launch their command-line tool, it displays the following message:
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;For personal use only. Please refer to the EULA distributed with The Software for details&amp;rdquo;
Indeed, on their &amp;ldquo;Command Line Interface&amp;rdquo; page they have a &amp;ldquo;License Restrictions&amp;rdquo; section which states:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;The Dotfuscator Community license expressly prohibits the use of the product by commercial organizations for anything other than personal research and education. If you would like to use Dotfuscator on commercial projects, please consider evaluating Dotfuscator Professional.&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Again, this is even further proof that the &amp;ldquo;Dotfuscator Community&amp;rdquo; product title is nothing but a euphemism for &amp;ldquo;limited evaluation version&amp;rdquo;;
&lt;strong&gt;in other words, marketing deceit.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Both the &amp;ldquo;for personal use only&amp;rdquo; and the &amp;ldquo;newer version available&amp;rdquo; messages keep appearing even if you supply the /q (quiet) flag, so &lt;strong&gt;there is no way to suppress them.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;When the command-line tool encounters an error, including normal usage error, it often displays not just an error message, but also a stack
trace. This tells me that &lt;strong&gt;the tool is still at a highly experimental and immature stage of development.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Furthermore, the class names and method names in the stack trace are obfuscated, &lt;strong&gt;so they are doubly useless.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The command-line tool may also fail with &lt;strong&gt;error messages that are extremely cryptic and completely unhelpful.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;For example, on one occasion where a nuget package sources server was unavailable, the dotfuscator command-line tool failed with the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Metadata Root has bad signature at 219f8&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;In their Dotfuscator.xml configuration file they make use of guids and other hashes, which render it &lt;strong&gt;extremely hostile to humans.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;For example:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;inputassembly refid=&amp;quot;1639ab18-0eb8-4c8c-ba6c-9eab6d8a740d&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;referencerule rulekey=&amp;quot;{6655B10A-FD58-462d-8D4F-5B1316DFF0FF}&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;While running, the commandline tool spews out an incredible amount of messages. A few of those messages are useful, for example the ones about each output file that it creates; the rest, which is 99.9% of them, are &lt;strong&gt;entirely useless&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If you use the /q (quiet) flag, &lt;strong&gt;the only messages that are suppressed are those few useful ones&lt;/strong&gt;; &lt;strong&gt;the 99.9% of entirely useless messages are still spewed.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A great many lines of output spewed out by the command line tool are prefixed with the string &amp;ldquo;[Build Output]&amp;rdquo;, which is a statement in direct
conflict with fact: &lt;strong&gt;this is definitely not build output, this is obfuscator output.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If you run the command-line tool without any options, it gives usage information. The usage information says that it supports a
&lt;code&gt;/p=outdir=&amp;lt;directory&amp;gt;&lt;/code&gt; option. &lt;strong&gt;This option has absolutely no effect.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If you run the command-line tool with the /?? option to see the &amp;ldquo;extended&amp;rdquo; options, there is another &lt;code&gt;/out:&amp;lt;directory&amp;gt;&lt;/code&gt; option, and that one works.&lt;/li&gt;
&lt;li&gt;The tool systematically utilizes &lt;strong&gt;silent failure&lt;/strong&gt;.
&lt;ul&gt;
&lt;li&gt;As a result, it either issues no error messages where it should, or it issues misleading error messages. Both of these behaviors constitute &lt;strong&gt;sabotage against the developer.&lt;/strong&gt; For example:
&lt;ul&gt;
&lt;li&gt;If it cannot find one or more of the input assemblies specified in the configuration, it will not complain at all. This means that I may be under the impression that a certain assembly is being obfuscated, while in fact it is being shipped to customers completely unobfuscated, due to a simple spelling mistake, and &lt;strong&gt;the tool did not give me the slightest warning or hint that this is          happening.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If all input assemblies are missing, then it says &amp;ldquo;There are no assemblies to process. Stopping the build.&amp;rdquo; The problem here is that the message suggests that I invoked the tool without giving it any work to do, while in fact I did invoke the tool with specific work to do, which &lt;strong&gt;the tool did not do&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Within the torrent of output lines that are prefixed with &amp;ldquo;[Build Output]&amp;rdquo; no distinction is made between lines that are frivolous spam which has to be filtered away and lines that contain error messages, such as &amp;ldquo;no assemblies found to process&amp;rdquo;. Thus, in order to avoid missing any error messages, we are &lt;strong&gt;forced to see all the frivolous spam every single time we launch the tool&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;So, after all this, I could verify that I can use the tool from my build server, and that name mangling works. But what about code mangling,
otherwise known as flow control obfuscation? Well, as it turns out, that is beyond the scope of the &amp;ldquo;Community&amp;rdquo; edition; you have to buy the
&amp;ldquo;Professional&amp;rdquo; edition if you want to have that.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, let&amp;rsquo;s give &amp;ldquo;Dotfuscator professional&amp;rdquo; a try, shall we?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the confirmation e-mail that I received when I registered my &amp;ldquo;Community&amp;rdquo; edition there was a link to &amp;ldquo;Visit My Account&amp;rdquo;. When I click on this link, it takes me to a page which asks for a user-name and password. However, when I registered, they did not say anything about any user-name nor password; I just received a &amp;ldquo;confirmation code&amp;rdquo;. This is mighty confusing, annoying, and frustrating. So, it appears that I am going to have to register again, this time with a user-name and password.&lt;/li&gt;
&lt;li&gt;After registering again, and clicking on &amp;ldquo;Try Dotfuscator Professional&amp;rdquo;, and filling in their mandatory survey form, and receiving the installer, and installing it, I am presented with a &amp;ldquo;Click here to activate Dotfuscator&amp;rdquo; dialog. So, besides &amp;ldquo;registering&amp;rdquo; in order to try their useless advertisement, and then &amp;ldquo;registering&amp;rdquo; again in order to start a free trial of their actual product, I now have to &amp;ldquo;activate&amp;rdquo; the free trial. This was done by entering a key that they sent me by e-mail.&lt;/li&gt;
&lt;li&gt;From the looks of it, if I decide to continue using this product after the trial, I am going to have to purchase what they call a &amp;ldquo;Build License&amp;rdquo;. This build license will have to somehow be added to the build server, which I am not in control of, and will have to somehow be updated each time the build server changes; we will see about that when we get there.&lt;/li&gt;
&lt;li&gt;Neither on their web-site, nor during the entire process of starting the free trial, do they seem to mention how long this free trial lasts. It might be one month, it might be one week, it might be one day. They just don&amp;rsquo;t say. It is a secret.&lt;/li&gt;
&lt;li&gt;Nowhere in their communications do they seem to mention how much their product costs. It might be 100 bucks, it might be 1000 bucks, it might be 10000 bucks. The only thing they say is &amp;ldquo;Request a Quote&amp;rdquo;, which to me means a few things:
&lt;ul&gt;
&lt;li&gt;They are going to be eyeballing me and tailoring their price according to how deep they estimate my pocket to be.&lt;/li&gt;
&lt;li&gt;Someone else will get a different price, which is unfair.&lt;/li&gt;
&lt;li&gt;I might get a different price if I bargain, which I hate to do.&lt;/li&gt;
&lt;li&gt;They are an inefficiently run company that relies on salesperson labor.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On their &amp;ldquo;Request a Quote&amp;rdquo; page they have a spelling mistake, &amp;ldquo;Xamarian&amp;rdquo; instead of &amp;ldquo;Xamarin&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Their &amp;ldquo;Request-a-quote&amp;rdquo; page does not work. When I click the &amp;ldquo;submit&amp;rdquo; button, the button becomes slightly faded out, and nothing else happens. Of course I had to waste my time reloading the page, re-filling all of my information, re-solving the captcha, and re-submitting the form 3 times before deciding that it just does not work. So, PreEmptive Solutions is proving to be very good at one thing: wasting my time.&lt;/li&gt;
&lt;li&gt;They called me. On the phone. Just at the exact moment that their request-a-quote page was proving to be a fiasco, my phone rang. It was a guy speaking with a thick French accent, allegedly making a follow-up call after my registration. I would bet that their seemingly out-of-order request-a-quote page contained just enough functionality to alert him that I tried to use it. I asked him how much it costs to have a license for one team, one application. He said 4250 euros per year. I also asked how long the evaluation lasts, he said that it is 14 days. Since they are not posting this information on their web site, I am taking the liberty to post what they said to me in person. You might get different answers. The date today is 2023-08-16. When I run the tool, it says &amp;ldquo;Your subscription expires in 15 days.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;During the evaluation I was able to determine that the tool does actually work; &lt;em&gt;&lt;strong&gt;if used correctly,&lt;/strong&gt;&lt;/em&gt; it does those things that I would want from such a tool:
&lt;ul&gt;
&lt;li&gt;It can be used as a command-line tool on a build server.&lt;/li&gt;
&lt;li&gt;It provides code mangling that is so strong that the reverse-engineered code produced by ILSpy does not compile, and even if it did compile, my guess is that it would probably not run.&lt;/li&gt;
&lt;li&gt;It provides name mangling, not only within individual assemblies, but also across assemblies if requested. (Mangling of public identifiers.)&lt;/li&gt;
&lt;li&gt;The tool also has many other features, for example string encryption.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While working with this tool I encountered the following additional problems:&lt;/p&gt;
&lt;p&gt;Their command-line tool requires an internet connection in order to work.  If your internet connection is out of order while trying to use it, the tool will fail with the following error messages:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error: Could not contact the activation server. An error occurred while sending the request. The remote name could not be resolved: &amp;rsquo;licensing.preemptive.com&#39;&lt;/p&gt;
&lt;p&gt;Retrying the connection in 30 seconds.&lt;/p&gt;
&lt;p&gt;Retrying connection&amp;hellip;&lt;/p&gt;
&lt;p&gt;Retry failed.&lt;/p&gt;
&lt;p&gt;Error: Could not contact the activation server. An error occurred while sending the request. The remote name could not be resolved: &amp;rsquo;licensing.preemptive.com&#39;&lt;/p&gt;&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>Migrating a project from DotNet Framework 4-7-2 to DotNet 7</title>
        <link>//localhost:1313/p/migrating-a-project-from-dotnet-framework-4-7-2-to-dotnet-7/</link>
        <pubDate>Fri, 21 Jul 2023 11:33:13 +0000</pubDate>
        
        <guid>//localhost:1313/p/migrating-a-project-from-dotnet-framework-4-7-2-to-dotnet-7/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/migrating-a-project-from-dotnet-framework-4-7-2-to-dotnet-7/images/dotnet-framework-4.7.2-to-dotnet-7.jpg&#34;
	width=&#34;1173&#34;
	height=&#34;437&#34;
	srcset=&#34;//localhost:1313/p/migrating-a-project-from-dotnet-framework-4-7-2-to-dotnet-7/images/dotnet-framework-4.7.2-to-dotnet-7_hu_2d9a765c8b8aca.jpg 480w, //localhost:1313/p/migrating-a-project-from-dotnet-framework-4-7-2-to-dotnet-7/images/dotnet-framework-4.7.2-to-dotnet-7_hu_cb08111c7a27c98f.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;268&#34;
		data-flex-basis=&#34;644px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;I recently did this at work, and I decided to document the process here in the form of a how-to guide. Please note that I am not an expert, I am learning as I go along, so there may be mistakes.&lt;/p&gt;
&lt;h3 id=&#34;convert-all-projects-to-sdk-style&#34;&gt;Convert all projects to sdk-style.
&lt;/h3&gt;&lt;p&gt;This is necessary for net7, and also a very useful thing to do even if we were staying in net472.  I cover it in another post: &lt;a 
   href=&#34;//localhost:1313/p/converting-msbuild-project-files-from-legacy-style-to-sdk-style/&#34;
   &gt;Converting MSBuild project files from legacy-style to SDK-style&lt;/a&gt; and it actually represents most of the work needed to migrate to net7.&lt;/p&gt;
&lt;h3 id=&#34;change-the-actual-version&#34;&gt;Change the actual version.
&lt;/h3&gt;&lt;p&gt;You might want to start migrating the projects one at a time, so that you do not migrate the entire solution at once. This will allow you to keep ensuring at each step that the entire solution still works.&lt;/p&gt;
&lt;p&gt;A dotnet project may depend on dotnet-framework projects, but a dotnet-framework project may not depend on dotnet projects; therefore, if we want to migrate projects one at a time instead of all of them at the same time, then the first project that we migrate must be one which constitutes a root of a project dependency tree.&lt;/p&gt;
&lt;p&gt;In our case, we are making a WPF application; so, in our solution we have one project which is a windows executable, and a multitude of other projects that are class libraries. The executable project directly or indirectly depends on the class libraries, but no class library depends on the executable project; therefore, the executable project is a root in the project dependency tree. So, that&amp;rsquo;s the first project to migrate.&lt;/p&gt;
&lt;p&gt;In your project file, replace the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;TargetFramework&amp;gt;net472&amp;lt;/TargetFramework&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;TargetFramework&amp;gt;net7.0&amp;lt;TargetFramework&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or, for a WPF project:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;TargetFramework&amp;gt;net7.0-windows&amp;lt;/TargetFramework&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it, you can now build. Of course, it will not build. There is a number of issues that will need to be fixed.&lt;/p&gt;
&lt;h3 id=&#34;resolve-build-problems&#34;&gt;Resolve build problems.
&lt;/h3&gt;&lt;p&gt;The issues that I encountered and had to fix are as follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: More nullability issues&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Net7 complains about nullability issues there were net472 did not. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In a class you may have had &lt;code&gt;public override string Equals( object other )&lt;/code&gt; and it may have worked fine, but you can&amp;rsquo;t do that anymore in net7: the base &lt;code&gt;Equals()&lt;/code&gt; method accepts a nullable parameter, and you cannot just waive the nullability of the original parameter in an override. So, it will now have to be &lt;code&gt;public override string Equals( object? other )&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Annoyingly, the same applies to the &lt;code&gt;Equals&lt;/code&gt; method of &lt;code&gt;IEquatable&amp;lt;T&amp;gt;&lt;/code&gt;, but in this case for absolutely no good reason. That&amp;rsquo;s just how it is, and we have to make do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At some place I was invoking &lt;code&gt;new System.Threading.Thread( threadProcedure );&lt;/code&gt; where &lt;code&gt;threadProcedure&lt;/code&gt; was defined as &lt;code&gt;void threadProcedure( object data )&lt;/code&gt;. The error was:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error CS8622: Nullability of reference types in type of parameter &#39;data&#39; of &#39;void ServerThread.threadProcedure(object data)&#39; doesn&#39;t match the target delegate &#39;ParameterizedThreadStart&#39; (possibly because of nullability attributes).&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the error message even includes a hint which points to the exact problem, and the fix is to simply declare &lt;code&gt;data&lt;/code&gt; as nullable:  &lt;code&gt;void threadProcedure( object? data )&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When declaring a new dictionary type of &lt;code&gt;&amp;lt;K,V&amp;gt;&lt;/code&gt; you have to add &lt;code&gt;where K: notnull&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methods like &lt;code&gt;Dictionary.TryGetValue ( key, out T value )&lt;/code&gt; need to be changed to &lt;code&gt;Dictionary.TryGetValue( key, out T? value )&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: GlobalSuppressions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I used to have a GlobalSuppressions.cs file with a bunch of &lt;code&gt;[assembly: SuppressMessage( ... )]&lt;/code&gt; attributes for things like &amp;ldquo;ENC1003&amp;rdquo;, &amp;ldquo;IDE0063&amp;rdquo;, &amp;ldquo;IDE1006&amp;rdquo;, etc. I did not know what to pass as &amp;ldquo;category&amp;rdquo;, so I used to pass &lt;code&gt;null&lt;/code&gt;. This does not work anymore, due to global nullability checking.&lt;/p&gt;
&lt;p&gt;To resolve this problem, there are three options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the proper values to pass for category. (#AintNoBodyGotNoTimeFoDat)&lt;/li&gt;
&lt;li&gt;Specify &lt;code&gt;#nullable disable&lt;/code&gt; for this particular file. (Meh.)&lt;/li&gt;
&lt;li&gt;Just delete this file, since we can now start making use of EditorConfig.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Needless to say, I picked the last option.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: Types &amp;ldquo;forwarded&amp;rdquo; to nuget assemblies&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had a piece of code which was obtaining a windows service in order to restart it, with a line like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var serviceController = new SysServiceProcess.ServiceController( serviceName );&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For this line, MSBuild started giving me the following error:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error CS1069: The type name &#39;ServiceController&#39; could not be found in the namespace &#39;System.ServiceProcess&#39;. This type has been forwarded to assembly &#39;System.ServiceProcess.ServiceController, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&#39; Consider adding a reference to that assembly.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the error message is quite descriptive, and even suggests a fix, which is almost correct. In this case, I had to add the following to my project file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;PackageReference Include=&amp;quot;System.ServiceProcess.ServiceController&amp;quot; Version=&amp;quot;4.1.0&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In another instance, I had a piece of code that played a sound, with a line like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var player = new System.Media.SoundPlayer( soundPathName );&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For this line, MSBuild started giving me the following error:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error CS1069: The type name &#39;SoundPlayer&#39; could not be found in the namespace &#39;System.Media&#39;. This type has been forwarded to assembly &#39;System.Windows.Extensions, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51&#39; Consider adding a reference to that assembly.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The fix was to add the following to my project file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;PackageReference Include=&amp;quot;System.Windows.Extensions&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In some other piece of code, MSBuild started complaining that there exists no &amp;ldquo;Bitmap&amp;rdquo; type, even though it was entirely unclear why it was looking for type &amp;ldquo;Bitmap&amp;rdquo;.  In any case, again it suggested to reference a particular assembly, and the problem went away.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: System.Range&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our solution we used to have a type called &lt;code&gt;Range&lt;/code&gt;. In modern dotnet a new type called &lt;code&gt;System.Range&lt;/code&gt; has been introduced, and this caused ambiguous reference errors.&lt;/p&gt;
&lt;p&gt;This can be solved either by renaming our own types, or by never directly importing external namespaces, and always using aliases instead. In other words, &lt;code&gt;using Sys = System;&lt;/code&gt; instead of &lt;code&gt;using System;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: warnings about assembly conflicts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not really an error, but I like my build to be issuing no warnings.&lt;/p&gt;
&lt;p&gt;MSBuild started complaining the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;warning MSB3243: No way to resolve conflict between &amp;quot;System.IO.Compression, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&amp;quot; and &amp;quot;System.IO.Compression&amp;quot;. Choosing &amp;quot;System.IO.Compression, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&amp;quot; arbitrarily.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;One way to solve this problem is to find all occurrences of the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Reference Include=&amp;quot;System.IO.Compression&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and replace them with the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Reference Include=&amp;quot;System.IO.Compression&amp;quot; Version=&amp;quot;7.0.0.0&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, there is a better way to solve this problem: Just remove the reference! The build system is reporting a conflict between the assembly as referenced in the project file and the already-existing assembly in net7, so obviously, the assembly already exists, so the project does not need to explicitly reference it anymore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: System.Diagnostics.Debug.Listeners&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had a line like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System.Diagnostics.TraceListener listener = System.Diagnostics.Debug.Listeners[0];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;MSBuild started complaining as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error CS0117: &#39;Debug&#39; does not contain a definition for &#39;Listeners&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The solution was to replace the above line with the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System.Diagnostics.TraceListener listener = System.Diagnostics.Trace.Listeners[0];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: Thread.Abort() is obsolete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Code that makes use of &amp;lsquo;Thread.Abort()&amp;rsquo; started giving the following warning:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;warning SYSLIB0006: &#39;Thread.Abort()&#39; is obsolete: &#39;Thread.Abort is not supported and throws PlatformNotSupportedException.&#39; https://aka.ms/dotnet-warnings/SYSLIB0006&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The solution was to fix the code so that it does not use &lt;code&gt;Thread.Abort()&lt;/code&gt;. (It was a bad idea anyway.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: Empty macros in Post-Build-Step&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My post-build-step was failing, because the macro $(ProjectDir) was empty. There are two possible solutions to this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the post-build-step, the correct magical incantation to use is $(MSBuildProjectDirectory) instead of $(ProjectDir).&lt;/li&gt;
&lt;li&gt;Better yet, drop post-build steps, and instead go to project settings, and add a post-build target, which is the new dotnet way of specifying post-build steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;resolve-runtime-problems&#34;&gt;Resolve runtime problems.
&lt;/h3&gt;&lt;p&gt;Once the build problems were resolved, it was time to try running. Again, I did not expect the application to run, and in fact it did not run.&lt;/p&gt;
&lt;p&gt;Here are the runtime problems I encountered, and how I resolved them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: App.config/system.data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My application would fail during startup with a &amp;ldquo;System.Windows.Data Error 17&amp;rdquo; saying that it could not get some value from some settings file. The stack trace was followed by the good old familiar nonsense: &lt;code&gt;TargetInvocationException:&#39;System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation&lt;/code&gt; which essentially means &amp;ldquo;please keep reading&amp;rdquo;.
The next line was &lt;code&gt;System.Configuration.ConfigurationErrorsException: Configuration system failed to initialize&lt;/code&gt;, which again says pretty much nothing, bringing us, finally, to the next line that mentions the actual problem: `System.Configuration.ConfigurationErrorsException: Unrecognized configuration section system.data. (my-application.config line 12)&lt;/p&gt;
&lt;p&gt;So, it turns out that modern dotnet does not like the &lt;code&gt;&amp;lt;system.data&amp;gt;&lt;/code&gt; section in App.config. In my case this section was empty, so all I had to do was remove the section.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: non-null EventArgs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I am a control freak, so my System.AppDomain.CurrentDomain.ProcessExit event handler contained an assertion that the eventArgs parameter of that event is null, because I had observed it to be null under dotnet-framework.&lt;/p&gt;
&lt;p&gt;As it turns out, in modern dotnet this parameter is not null anymore; it is a default instance of &lt;code&gt;EventArgs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fix for this was to change the assertion to expect a non-null eventArgs from now on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: Accessing native DLLs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our project we have a native DLL, which used to be placed in the same directory as the executable, but under dotnet-framework native DLLs are, by default, placed in special locations. In our case, our DLL was placed in &amp;lt;executable-location&amp;gt;/runtimes/win-x64/native, so it could not be
loaded.&lt;/p&gt;
&lt;p&gt;I could update the code to go looking for the DLL in that new location, but I decided to do something more simple; I added the following line to the project file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;AppendTargetFrameworkToOutputPath&amp;gt;False&amp;lt;;/AppendTargetFrameworkToOutputPath&amp;amp;gt&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: Splash-screen weirdness&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As soon as I managed to get my WPF application to run, I noticed something weird with the splash-screen: as our application was loading, the splash-screen would first appear stretched (in an ugly way) to a size that was larger than normal, and then it would shrink to its normal size but it would move to a location slightly to the left, and slightly above the center of the screen, where it would stay until our application would finally complete loading and the splash-screen would disappear.&lt;/p&gt;
&lt;p&gt;As it turns out, this is a known bug in WPF see &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/dotnet/wpf/issues/947&#34; target=&#34;_blank&#34;
   &gt;github dotnet wpf issue 947&lt;/a&gt; and &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/dotnet/wpf/issues/5070&#34; target=&#34;_blank&#34;
   &gt;github dotnet wpf issue 5070&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The solution, (which is described here: &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/62141464/773113&#34; target=&#34;_blank&#34;
   &gt;https://stackoverflow.com/a/62141464/773113&lt;/a&gt;) was to write a couple of lines of code in &lt;code&gt;Application.OnStartup()&lt;/code&gt; to create the splash-screen myself.&lt;/p&gt;
&lt;h3 id=&#34;resolve-release-build-problems&#34;&gt;Resolve release build problems.
&lt;/h3&gt;&lt;p&gt;Once all of the above was done, it was time to try building the release version of our application. Here, I ran into the biggest problem:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Release Build Problem: ConfuserEx does not work anymore&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our application we use obfuscation. So far, this has caused us a lot of trouble: first we used to employ a tool called Confuser, which was later abandoned and re-incarnated as ConfuserEx, so we had to start using that one. Then, that one was abandoned too, so we had to find a fork of it that was still being maintained by someone.&lt;/p&gt;
&lt;p&gt;Now with DotNet 7, ConfuserEx does not work for us anymore: it fails with a message saying that it does not know the executable file format. There is a question-and-answer where someone asks the author for a solution, and the author points them to an alpha build of some version 2.0 of that tool, but that was a long time ago, and the artifacts of that alpha build do not exist anymore.&lt;/p&gt;
&lt;p&gt;There is a new tool called Dotfuscator, which is bundled with Visual Studio, but there are all kinds of serious problems with it, see another post of mine about that: &lt;a 
   href=&#34;//localhost:1313/p/on-dotfuscator-by-preemptive-solutions/&#34;
   &gt;On Dotfuscator by PreEmptive Solutions&lt;/a&gt;. I am currently working on this, when I find a solution I will update this article with my findings.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This guide will be updated during the following days as I complete the migration of the entire application from DotNet Framework 4.6.2 to DotNet 7.&lt;/p&gt;</description>
        </item>
        <item>
        <title>[SOLVED] Maven deploy fails with status 422 unprocessable entity</title>
        <link>//localhost:1313/p/solved-maven-deploy-fails-with-status-422-unprocessable-entity/</link>
        <pubDate>Thu, 06 Jul 2023 09:21:20 +0000</pubDate>
        
        <guid>//localhost:1313/p/solved-maven-deploy-fails-with-status-422-unprocessable-entity/</guid>
        <description>&lt;p&gt;It has been more than a year since I created this question on GitHub Community; a couple of days after that I found the solution by myself, so I answered my own question, and to this date comments keep being added by people who were helped by my post.&lt;/p&gt;
&lt;p&gt;When I look at it today, I notice that my answer has this particular style, this grumpy indignation which has become so characteristic of me, after a lifetime of battling with lame software, and even worse, with lame error messages.&lt;/p&gt;
&lt;p&gt;I thought I should share this on my blog for posterity.&lt;/p&gt;
&lt;p&gt;Here is the link:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/orgs/community/discussions/23474&#34; target=&#34;_blank&#34;
   &gt;https://github.com/orgs/community/discussions/23474&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And here is the question:&lt;/p&gt;
&lt;p&gt;GitHub Community&lt;/p&gt;
&lt;p&gt;Maven deploy fails with status 422 unprocessable entity #23474&lt;/p&gt;
&lt;p&gt;Asked by Mikenakis on May 27, 2022&lt;/p&gt;
&lt;p&gt;I have this repository: &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/Bathyscaphe&#34; target=&#34;_blank&#34;
   &gt;GitHub - mikenakis/Bathyscaphe: Deep immutability and thread-safety assessment for Java objects&lt;/a&gt; in which both my CI-Workflow and my Release-Workflow work fine.&lt;/p&gt;
&lt;p&gt;Now I am trying to extract a sub-module from that repository into a new repository.&lt;/p&gt;
&lt;p&gt;So, I created this repository: &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/BathyscapheClaims&#34; target=&#34;_blank&#34;
   &gt;GitHub - mikenakis/BathyscapheClaims&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The CI-Workflow works, but when I try to launch the Relase-Workflow, I get the following error:&lt;/p&gt;
&lt;p&gt;Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:3.0.0-M2:deploy (default-deploy) on project bathyscaphe-claims: ArtifactDeployerException: Failed to deploy artifacts: Could not transfer artifact io.github.mikenakis:bathyscaphe-claims:jar:1.3 from/to github (&lt;a class=&#34;external&#34; 
   href=&#34;https://maven.pkg.github.com/mikenakis/BathyscapheClaims%29&#34; target=&#34;_blank&#34;
   &gt;https://maven.pkg.github.com/mikenakis/BathyscapheClaims)&lt;/a&gt;: transfer failed for &lt;a class=&#34;external&#34; 
   href=&#34;https://maven.pkg.github.com/mikenakis/BathyscapheClaims/io/github/mikenakis/bathyscaphe-claims/1.3/bathyscaphe-claims-1.3.jar&#34; target=&#34;_blank&#34;
   &gt;https://maven.pkg.github.com/mikenakis/BathyscapheClaims/io/github/mikenakis/bathyscaphe-claims/1.3/bathyscaphe-claims-1.3.jar&lt;/a&gt;, status: 422 Unprocessable Entity → [Help 1]&lt;/p&gt;
&lt;p&gt;I have already seen the issues that appear to be similar; most of them have no answer, one of them (&lt;a class=&#34;external&#34; 
   href=&#34;https://github.community/t/maven-deploy-fails-with-http-422-unprocessable-entity/119670&#34; target=&#34;_blank&#34;
   &gt;Maven deploy fails with HTTP 422 Unprocessable Entity&lt;/a&gt;) has an extensive discussion, but it does not seem to apply in my case.&lt;/p&gt;
&lt;p&gt;Can someone please help me? It is probably something silly, but I only have one pair of eyes, while this obviously needs two! (-:=&lt;/p&gt;
&lt;p&gt;Cheers!&lt;/p&gt;
&lt;p&gt;And here is the answer:&lt;/p&gt;
&lt;p&gt;Answered by mikenakis on May 29, 2022&lt;/p&gt;
&lt;p&gt;I figured this one out too by myself.
(Hey community, you are not helping much!)&lt;/p&gt;
&lt;p&gt;What happened is that GitHub apparently has some monstrous bug which causes artifact deployment to fail if some other repository (only by the same owner, I hope!) has already deployed an artifact with the exact same name.&lt;/p&gt;
&lt;p&gt;In this case, one repository was called Bathyscaphe, the other was called BathyscapheClaims, but each repository was trying to deploy an artifact called bathyscaphe-claims.&lt;/p&gt;
&lt;p&gt;I changed the name of the artifact in the second repository from bathyscaphe-claims to bathyscaphe-claims2 and it worked.&lt;/p&gt;
&lt;p&gt;The situation was certainly made worse by this contemptible monstrosity that goes by the name of “maven”, which never gives any meaningful error message whatsoever when the slightest thing goes wrong. I mean, “unprocessable entity”? Really? It must have been some very special kind of idiot who came up with this error message.&lt;/p&gt;</description>
        </item>
        <item>
        <title>The Trouble with XAML Hot Reload in WPF</title>
        <link>//localhost:1313/p/the-trouble-with-xaml-hot-reload-in-wpf/</link>
        <pubDate>Mon, 12 Jun 2023 06:11:58 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-trouble-with-xaml-hot-reload-in-wpf/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/the-trouble-with-xaml-hot-reload-in-wpf/images/wpf-xaml-3.png&#34;
	width=&#34;1000&#34;
	height=&#34;557&#34;
	srcset=&#34;//localhost:1313/p/the-trouble-with-xaml-hot-reload-in-wpf/images/wpf-xaml-3_hu_efeded7c868b7b8.png 480w, //localhost:1313/p/the-trouble-with-xaml-hot-reload-in-wpf/images/wpf-xaml-3_hu_19f7cd65cd18e904.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;430px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;The XAML Hot Reload feature of WPF is extremely useful because GUI work often involves tweaking visual aspects of an application, so being able to modify XAML, save it, and immediately see the changes on the screen saves a huge amount of time as opposed to having to terminate the application, modify the code, re-compile, re-run, and go clickety-clickety-click to navigate to the same page and finally see your changes.&lt;/p&gt;
&lt;p&gt;Unfortunately, as a WPF project grows, the XAML Hot Reload feature inevitably one day stops working: You modify your XAML, you save the XAML file, and yet nothing changes on the screen. The message &amp;ldquo;No changes were found&amp;rdquo; appears in the Hot Reload tab of the Visual Studio Output Window, but it is a damned lie, because you just made changes. This can really be a problem.&lt;/p&gt;
&lt;p&gt;When you find yourself in this extremely unpleasant situation, here is a list of things to try:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First of all, the usual:
&lt;ul&gt;
&lt;li&gt;Exit Visual Studio and re-launch Visual Studio.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Then, the all too familiar:
&lt;ul&gt;
&lt;li&gt;Exit Visual Studio, delete the &lt;code&gt;.vs&lt;/code&gt; directory in your solution, and
re-launch Visual Studio.&lt;/li&gt;
&lt;li&gt;Exit Visual Studio, delete the &lt;code&gt;.vs&lt;/code&gt; directory, clean all output directories, and re-launch Visual Studio.
&lt;ul&gt;
&lt;li&gt;No, you cannot just go to the Build menu
and select &amp;ldquo;Clean Solution&amp;rdquo;; &lt;em&gt;that would make too much sense&lt;/em&gt;. The &amp;ldquo;Clean Solution&amp;rdquo; option is a joke that never fixes anything; instead, you have
to have a script that actually visits every bin and obj directory and deletes its
contents, and you also have to make sure that Visual Studio is not running when you run this script.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;And then, the arcane:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure all your dependency properties are done properly. What constitutes &amp;ldquo;properly&amp;rdquo; for Microsoft is actually quite counter-intuitive and quite preposterous: every dependency property &lt;strong&gt;must&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;be backed by a field of type &lt;code&gt;System.Windows.DependencyProperty&lt;/code&gt; which &lt;strong&gt;must&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;be &lt;code&gt;public static&lt;/code&gt;, and whose name &lt;strong&gt;must&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;start with the name of the corresponding C# property, and &lt;strong&gt;must&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;end with the suffix &lt;code&gt;Property&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All this magic must be done exactly right every single time, or else all sorts of other magic do not work anymore, for example the XAML Hot Reload magic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have any styles where you had to specify the type of the data context so as to enjoy type safety and auto-completion when editing, (and to avoid ReSharper warings,) make sure that you do not use the &lt;code&gt;d:DataContext=&amp;quot;{d:DesignInstance ...&lt;/code&gt; magical incantation suggested by some folks out there. If something like that appears outside of the root XAML element, XAML Hot Reload will stop working. Instead, use the following magical incantation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;Style TargetType=&amp;#34;{x:Type ...}&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;d:Style.DataContext&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;lt;x:Type Type=&amp;#34;SomeViewModel&amp;#34; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;/d:Style.DataContext&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ultimately, all problems with XAML Hot Reload can be traced down to the fact that it embraces silent failure. In my experience any feature that involves silent failure is a failure as a whole, because:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In general, anything that can break will at some point break;&lt;br&gt;
if it gives you some hint as to why it broke,&lt;br&gt;
or even just a hint that it just now broke,&lt;br&gt;
then you can fix it;&lt;br&gt;
but if it gives no hint, then you can&amp;rsquo;t fix it.&lt;/p&gt;&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>Program Code is Uncountable</title>
        <link>//localhost:1313/p/program-code-is-uncountable/</link>
        <pubDate>Fri, 26 May 2023 07:44:24 +0000</pubDate>
        
        <guid>//localhost:1313/p/program-code-is-uncountable/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/program-code-is-uncountable/images/code.jpg&#34;
	width=&#34;800&#34;
	height=&#34;331&#34;
	srcset=&#34;//localhost:1313/p/program-code-is-uncountable/images/code_hu_f0a5e6162c5554.jpg 480w, //localhost:1313/p/program-code-is-uncountable/images/code_hu_34c59bcd7cb70c1f.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;580px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;There are some words in English that are uncountable. For example: &lt;em&gt;cheese&lt;/em&gt;, &lt;em&gt;furniture&lt;/em&gt;, &lt;em&gt;music&lt;/em&gt;, &lt;em&gt;evidence&lt;/em&gt;, &lt;em&gt;research&lt;/em&gt;, &lt;em&gt;knowledge&lt;/em&gt;, &lt;em&gt;information&lt;/em&gt;, etc. When we speak of those things in plural, we still use the singular form: &amp;ldquo;I would like to order a four-&lt;em&gt;&lt;strong&gt;cheese&lt;/strong&gt;&lt;/em&gt; pizza&amp;rdquo;, &amp;ldquo;Let me give you some of my &lt;em&gt;&lt;strong&gt;furniture&lt;/strong&gt;&lt;/em&gt;&amp;rdquo;, &amp;ldquo;We need to consider all the &lt;em&gt;&lt;strong&gt;evidence&lt;/strong&gt;&lt;/em&gt;&amp;rdquo;, etc.&lt;/p&gt;
&lt;p&gt;Another such word is &lt;em&gt;&lt;strong&gt;code&lt;/strong&gt;&lt;/em&gt;, in the context of programming.&lt;/p&gt;
&lt;p&gt;When referring to program code, the word &lt;em&gt;code&lt;/em&gt; is uncountable. &amp;ldquo;I wrote the code for all those apps&amp;rdquo;, &amp;ldquo;You have a lot of code to review&amp;rdquo;, &amp;ldquo;We write new code every day&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;There are certain &lt;em&gt;&lt;strong&gt;other&lt;/strong&gt;&lt;/em&gt; meanings of the word &lt;em&gt;code&lt;/em&gt; that do have a plural form; for example, &amp;ldquo;Give me the access codes&amp;rdquo; or &amp;ldquo;See the list of HTTP status codes&amp;rdquo;; but these meanings refer to numbers, or ciphers, in other words data, not program code. &lt;strong&gt;Program code is always uncountable.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Reference: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.oxfordlearnersdictionaries.com/definition/english/code&#34; target=&#34;_blank&#34;
   &gt;Oxford Learner&amp;rsquo;s Dictionaries - English - Code&lt;/a&gt; (Scroll down to meaning 3, &amp;ldquo;programming&amp;rdquo;.)&lt;/p&gt;
&lt;p&gt;Now, we live in free societies where everyone enjoys freedom of speech, and more generally, freedom of expression. You can choose to say whatever you like, just as you can choose to dress in whatever way you like.&lt;/p&gt;
&lt;p&gt;But when you say &amp;ldquo;codes&amp;rdquo; referring to program code, please do keep in mind that you come across like this complete idiot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/program-code-is-uncountable/images/saggy.jpg&#34;
	width=&#34;600&#34;
	height=&#34;900&#34;
	srcset=&#34;//localhost:1313/p/program-code-is-uncountable/images/saggy_hu_9b0ece5b469d5054.jpg 480w, //localhost:1313/p/program-code-is-uncountable/images/saggy_hu_a55983757e3a6195.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;160px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Or like this complete idiot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/program-code-is-uncountable/images/hat-fail.jpg&#34;
	width=&#34;600&#34;
	height=&#34;768&#34;
	srcset=&#34;//localhost:1313/p/program-code-is-uncountable/images/hat-fail_hu_c5d3462460a7d4f4.jpg 480w, //localhost:1313/p/program-code-is-uncountable/images/hat-fail_hu_b1bbf3addb44a36e.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;78&#34;
		data-flex-basis=&#34;187px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Do you want to come across like a complete idiot?&lt;/p&gt;
&lt;p&gt;The choice is yours.&lt;/p&gt;
&lt;p&gt;(Grumpy cat meme unnecessary; this was grumpy enough by itself.)&lt;/p&gt;</description>
        </item>
        <item>
        <title>Hyrum&#39;s Law</title>
        <link>//localhost:1313/p/hyrums-law/</link>
        <pubDate>Fri, 12 May 2023 22:42:54 +0000</pubDate>
        
        <guid>//localhost:1313/p/hyrums-law/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;With a sufficient number of users of an API,
it does not matter what you promise in the contract:
all observable behaviors of your system
will be depended on by somebody.&lt;/p&gt;
&lt;p&gt;Hyrum&amp;rsquo;s Law&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(From &lt;a class=&#34;external&#34; 
   href=&#34;https://www.hyrumslaw.com/&#34; target=&#34;_blank&#34;
   &gt;https://www.hyrumslaw.com/&lt;/a&gt;)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>A few good reads from Simplethread</title>
        <link>//localhost:1313/p/a-few-good-reads-from-simplethread/</link>
        <pubDate>Tue, 21 Feb 2023 00:08:48 +0000</pubDate>
        
        <guid>//localhost:1313/p/a-few-good-reads-from-simplethread/</guid>
        <description>&lt;p&gt;I found them at a place called Simplethread while randomly browsing.&lt;/p&gt;
&lt;p&gt;I thought I&amp;rsquo;d post links here for posterity.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.simplethread.com/taming-names-in-software-development&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Taming Names in Software Development&lt;/em&gt;&lt;/a&gt; by Joseph Glass (2022)&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.simplethread.com/agile-at-20-the-failed-rebellion&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Agile at 20: The Failed Rebellion&lt;/em&gt;&lt;/a&gt; by Al Tenhundfeld (2021)&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.simplethread.com/20-things-ive-learned-in-my-20-years-as-a-software-engineer&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;20 Things I’ve Learned in my 20 Years as a Software Engineer&lt;/em&gt;&lt;/a&gt; by Justin Etheredge (2021)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>New GitHub project: VsDebugLogger</title>
        <link>//localhost:1313/p/new-github-project-vsdebuglogger/</link>
        <pubDate>Thu, 09 Feb 2023 10:41:59 +0000</pubDate>
        
        <guid>//localhost:1313/p/new-github-project-vsdebuglogger/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/new-github-project-vsdebuglogger/media/vs-debug-logger-logo.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;p&gt;Speeds up Visual Studio debug output by orders of magnitude.&lt;/p&gt;
&lt;p&gt;On GitHub: &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/VsDebugLogger&#34; target=&#34;_blank&#34;
   &gt;https://github.com/mikenakis/VsDebugLogger&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Debating with other Software Engineers</title>
        <link>//localhost:1313/p/debating-with-other-software-engineers/</link>
        <pubDate>Tue, 17 Jan 2023 20:03:20 +0000</pubDate>
        
        <guid>//localhost:1313/p/debating-with-other-software-engineers/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/debating-with-other-software-engineers/images/debating.png&#34;
	width=&#34;2000&#34;
	height=&#34;1000&#34;
	srcset=&#34;//localhost:1313/p/debating-with-other-software-engineers/images/debating_hu_2f936899d83d943b.png 480w, //localhost:1313/p/debating-with-other-software-engineers/images/debating_hu_1526e62b2fc9b299.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Stackoverflow and the whole Stackexchange network is good for asking very narrowly-scoped questions that can receive objective and preferably authoritative answers that cite documentation or definitions. Any kind of question which is subject of opinion, or liable to elicit debate, is off-topic there. This means that stackoverflow is only good for asking strictly technical questions, and there is an upper limit on how valuable this can be. Sure it can be very helpful when you are trying to solve a specific technical problem, but in the grand scheme of things, it is irrelevant; from a philosophical point of view, it is trivial.&lt;/p&gt;
&lt;p&gt;I have been looking for ways to discuss with other software engineers (preferably experts) issues that are related to software engineering but are
in fact very much subject of opinion. These are the interesting questions. I do of course already have my own opinions, which tend to either deviate or be diametrically opposite from the prevailing industry trends, so it would be very useful to me to debate these issues with others to see what they have to say. Clearly, either I am wrong, or the entire industry is wrong; wouldn&amp;rsquo;t it be nice if we could debate this and have it settled?&lt;/p&gt;
&lt;p&gt;To this effect, I decided to give a few forums a try, to see if it is possible to have debates in any of them. As it turns out, there seem to be very few
options available, and things are rather quiet in each one of them; most people seem to be doing nothing but consuming content generated by influencers instead of participating in discussions. In this post I am listing my findings so far. I will be amending it as I gather more information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;thecodingforums.com:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Threads: 472,788&lt;/li&gt;
&lt;li&gt;Messages: 2,566,483&lt;/li&gt;
&lt;li&gt;Members: 44,019&lt;/li&gt;
&lt;li&gt;Disqualified because it only offers categories for specific languages, platforms, and technologies, it does not have a category for discussing software architecture or software engineering in general. These folks seem to be completely oblivious to the fact that for these things we already have stackoverflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;forums.codeguru.com:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Threads: 531,210&lt;/li&gt;
&lt;li&gt;Posts: 2,127,952&lt;/li&gt;
&lt;li&gt;Members: 374,149&lt;/li&gt;
&lt;li&gt;Seems to be backed by a relatively large concern (TechnologyAdvice / developer.com)&lt;/li&gt;
&lt;li&gt;Seems to be implemented using vBulletin, so its looks are severely outdated.&lt;/li&gt;
&lt;li&gt;Does not support dark mode, and has several contrast problems when dark mode is forced with the darkreader extension.&lt;/li&gt;
&lt;li&gt;Registration is quick, (though it would be shorter without annoying irrelevant questions,) and you are immediately registered. Their anti-spam mechanism is just a trivial arithmetic question spelled out in English. However, the first time I tried to post, (a post which included one link,) a message briefly appeared which said something about moderation, and it very annoyingly disappeared before I had a chance to read it. Then, I was back at the home page, while my text was nowhere to be found, as if I never wrote it. That&amp;rsquo;s an awful first-time experience.&lt;/li&gt;
&lt;li&gt;Describes me as &amp;ldquo;Junior Member&amp;rdquo;, which I guess is okay, though &amp;ldquo;New Member&amp;rdquo; would be better.&lt;/li&gt;
&lt;li&gt;My first post: &lt;a class=&#34;external&#34; 
   href=&#34;https://forums.codeguru.com/showthread.php?566024-Debate-reactive-programming-with-me&#34; target=&#34;_blank&#34;
   &gt;https://forums.codeguru.com/showthread.php?566024-Debate-reactive-programming-with-me&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Does not seem to allow editing a post.&lt;/li&gt;
&lt;li&gt;Result of my post: not a single answer was posted for several days.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;codeforum.org:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Threads: 3,637&lt;/li&gt;
&lt;li&gt;Messages: 18,342&lt;/li&gt;
&lt;li&gt;Members: 3,939&lt;/li&gt;
&lt;li&gt;It is unclear who backs it.&lt;/li&gt;
&lt;li&gt;Seems to be implemented using some XenForo®© platform, which looks good.&lt;/li&gt;
&lt;li&gt;Supports dark mode, and as a matter of fact the page header seems to have been designed with dark mode in mind.&lt;/li&gt;
&lt;li&gt;Registration is quick, but their anti-spam mechanism is the standard annoying image identification routine, and once you are done with it you are not immediately registered; instead, you have to wait for some human to approve your registration. (At least the message informing you about this stays put, so you can read it.) My account was approved within less than 24 hours.&lt;/li&gt;
&lt;li&gt;Describes me as a &amp;ldquo;New Coder&amp;rdquo;, which is insulting.&lt;/li&gt;
&lt;li&gt;My first post: &lt;a class=&#34;external&#34; 
   href=&#34;https://codeforum.org/threads/debate-reactive-programming-with-me.5991/&#34; target=&#34;_blank&#34;
   &gt;https://codeforum.org/threads/debate-reactive-programming-with-me.5991/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Allows the editing of posts, but does not seem to indicate anywhere that the post has been edited.&lt;/li&gt;
&lt;li&gt;Its link insertion dialog is nonsensical, and does not work correctly. Links always appear as text instead of as web addresses, and the text seems to match the title of the linked page, but it is unclear how this works. It seems impossible to create a link which appears as an address and does not get replaced with some text.&lt;/li&gt;
&lt;li&gt;Result of my post: it was deleted within a few hours, and before anyone had the chance to respond. I received a message saying that they decided that they will not allow debates &amp;ldquo;as it often brings users who do not accept opposing views, along with their often rude and unwelcomed behaviour.&amp;rdquo; So, clearly, they do not understand that for agreeable discussions the world already has stackoverflow, so the world does not need them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;dreamincode.net:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dead since 2021.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;codeproject.com&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Statistics are unavailable, but it has existed since 1999, and it has always been fairly well known, so it is very big. Some improvised calculations seem to indicate that it has some 15 million members and 3,718,733 threads.&lt;/li&gt;
&lt;li&gt;It is unclear who it is backed by, but it smells very Microsoft.&lt;/li&gt;
&lt;li&gt;Their entire web application including the forums seems to be home-grown using aspx. It is very clunky and also buggy. Its looks are severely outdated, and some of its aesthetic choices are bad even for the early nineties.&lt;/li&gt;
&lt;li&gt;It does not support dark mode; when dark mode is forced using the darkreader extension, it is usable, but ugly.&lt;/li&gt;
&lt;li&gt;I registered a long time ago, so I do not remember how the experience was back then, but when I try to modify my account information today, like change my avatar, it does not work due to bugs.&lt;/li&gt;
&lt;li&gt;It has a &amp;ldquo;discussions&amp;rdquo; section, but the button for creating a new post is labelled &amp;ldquo;Ask a question&amp;rdquo;, so these guys are clearly confused. Luckily, once you start editing the post, there is a radio button for indicating whether it is a question or something else like general, news, suggestion, etc.&lt;/li&gt;
&lt;li&gt;The first time I tried to create a post, (which included one link,) it gave me a message saying that my post has been flagged as potential spam and is awaiting moderation, which is insulting and unnecessarily technical. The post was approved within a few hours.&lt;/li&gt;
&lt;li&gt;My first post: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.codeproject.com/Messages/5921375/Debate-reactive-programming-with-me&#34; target=&#34;_blank&#34;
   &gt;https://www.codeproject.com/Messages/5921375/Debate-reactive-programming-with-me&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Allows editing of posts, but when I added a single character to the title, the post went back into the moderation queue for a couple of hours. These folks appear to have a severe problem with spammers.&lt;/li&gt;
&lt;li&gt;Result of my post: several people posted answers, but each of them was a self-contained conclusive statement largely agreeing with me and therefore not constituting debate.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;groups.google.com/g/archforum&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Last post was in 2012.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;developerfusion.com/t/architecture/forum&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Last post was in 2012.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;quora.com&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disqualified due to extremely annoying format: each question consists of a single headline and presented impersonally, so it could be generated by a bot; question-and-answer formula stifles debate; advertisements cannot be blocked by an ad-blocker; advertisements and irrelevant posts embedded in the flow of the page without sufficient visual clues to differentiate them from the relevant elements; and html specifically engineered to prevent the use of content filters to separate the wheat from the chaff.  A fast-food style forum.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;reddit.com&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Similar fast-food style forum as quora.com, also extremely annoying, due to a different set of equally serious reasons. (For example, their retarded, chaotic, non-hierarchical format is completely unsuitable for a website aiming to cover everything imaginable.) I had an extremely bad experience with them in the past, when I tried to post something which was suppressed without an explanation, so I do not intend to waste my time with it for a second time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://oligofren.wordpress.com&#34; target=&#34;_blank&#34;
   &gt;Carl-Erik&lt;/a&gt; 2023-01-27 09:14:09 UTC&lt;/p&gt;
&lt;p&gt;P.S. Followed you here from your profile on SO after seeing a great answer given by you on inter-thread communication via events and message passing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://michael.gr&#34; target=&#34;_blank&#34;
   &gt;michael.gr&lt;/a&gt; 2023-01-27 19:09:04 UTC&lt;/p&gt;
&lt;p&gt;Thanks, Carl-Erik! I did give dev.to a try some time ago, but I did not continue with it because the content seemed very junior. But now that you reminded me of it, I will give it another try.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://oligofren.wordpress.com&#34; target=&#34;_blank&#34;
   &gt;Carl-Erik&lt;/a&gt; 2023-01-27 09:13:18 UTC&lt;/p&gt;
&lt;p&gt;Hi, Michael. I feel the pain :-) Finding such forums is generally not easy. For answerable questions the StackExchange network is a gem; StackOverflow for the technical details and the Software Engineering for more high-level stuff.&lt;/p&gt;
&lt;p&gt;But they both eschew open-ended discussions, which is what I find that you are seeking. One surprising newcomer might be DEV. For a while, I thought this was a curated site where one found low-quality articles on &amp;ldquo;This is how you do X in React&amp;rdquo;, etc. It was only when I critiqued the quality of one such article that I found out that it is basically Medium for programmers: a self-publication platform with comments. So that answered the quality bit: it depends on the author.&lt;/p&gt;
&lt;p&gt;But recently, I have found that more senior software developers write here as well and some of these resulting discussions have been really, really good! One such example is the discussion that spiralled out of this innocuous looking piece called &amp;ldquo;Whatever happened to components being just a visual thing&amp;rdquo;:
&lt;a class=&#34;external&#34; 
   href=&#34;https://dev.to/redbar0n/what-happened-to-components-being-just-a-visual-thing-22hc&#34; target=&#34;_blank&#34;
   &gt;https://dev.to/redbar0n/what-happened-to-components-being-just-a-visual-thing-22hc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Super interesting tidbits in a day where frontend architecture talks usually are super shallow. Turns out what I have been missing is discussion of &amp;ldquo;app-centric&amp;rdquo; architectures vs the nowadays more common &amp;ldquo;component-centric&amp;rdquo; architecture (what we are mostly doing). Loads of great stuff, even though some of the stuff went over my head.&lt;/p&gt;
&lt;p&gt;Keywords from the discussion that spanned tens of comments, some spanning thousands of words:
Steve Krug (of &amp;ldquo;Don&amp;rsquo;t make me think&amp;rdquo;), Martin Fowler (of everything software design related), Pete Hunt (of the original React team), Pete Heard, reactive programming, MVC, MVVM, Robert C. Martin&amp;rsquo;s, Trygve Reenskaug, Smalltalk, Active Record, template languages vs JS, Niladic Components, &amp;hellip;&lt;/p&gt;
&lt;p&gt;The discussion essentially touches everything one ever learned about software architecture and design mixed into a greater discussion on how frontends can, have and should be designed. Puh!&lt;/p&gt;
&lt;p&gt;If you start a discussion (essentially write a piece) that people find interesting, eventually interested parties will find it and write back (and might follow you for more).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://michael.gr&#34; target=&#34;_blank&#34;
   &gt;michael.gr&lt;/a&gt; 2024-01-30 06:20:56 UTC&lt;/p&gt;
&lt;p&gt;For reference, the answer that Carl-Erik was referring to was probably this one: Stack Overflow: How should I unit test multithreaded code? &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/74574386/773113&#34; target=&#34;_blank&#34;
   &gt;https://stackoverflow.com/a/74574386/773113&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Definition: Collaborator</title>
        <link>//localhost:1313/p/definition-collaborator/</link>
        <pubDate>Mon, 16 Jan 2023 12:58:35 +0000</pubDate>
        
        <guid>//localhost:1313/p/definition-collaborator/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/definition-collaborator/media/collaboration.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;p&gt;I have been coming across the term &lt;em&gt;&lt;strong&gt;collaborator&lt;/strong&gt;&lt;/em&gt; in software literature, and I have been using it too in my own writings, but without having seen it defined. I tried searching for its definition, but could not find any. In UML the term &lt;em&gt;&lt;strong&gt;collaboration&lt;/strong&gt;&lt;/em&gt; is vaguely described, but not the term &lt;em&gt;collaborator&lt;/em&gt;. After &lt;a class=&#34;external&#34; 
   href=&#34;https://softwareengineering.stackexchange.com/questions/443097/definition-of-collaborators-of-an-object-in-software-design&#34; target=&#34;_blank&#34;
   &gt;asking on Software Engineering Stack Exchange&lt;/a&gt; I was pointed to what is in almost all certainty the original definition, but it turns out that it is very old, and slightly problematic, so I thought I should provide a modern definition here, at the very least for use in my own writings.&lt;/p&gt;
&lt;p&gt;Here it goes:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  **A *collaborator* is a component invoked by another component to do a    job.**
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;(And since the context is software, these are, of course, software components.)&lt;/p&gt;
&lt;h3 id=&#34;origin-of-the-term&#34;&gt;Origin of the term
&lt;/h3&gt;&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Collaborators were introduced as a concept in a paper by Kent Beck and Ward Cunningham in 1989 (See &lt;a class=&#34;external&#34; 
   href=&#34;https://c2.com/doc/oopsla89/paper.html&#34; target=&#34;_blank&#34;
   &gt;http://c2.com/doc/oopsla89/paper.html&lt;/a&gt;) and defined as &amp;ldquo;objects which will send or be sent messages in the course of satisfying responsibilities&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;problems-with-the-original-definition&#34;&gt;Problems with the original definition
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;The original paper was written in the context of Smalltalk, which relied on message-passing, but more generally, collaborators exchange invocations.&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;in the course of satisfying responsibilities&amp;rdquo; part seems to convey no information, despite the fact that it comprises about half of the definition; it is just filler and it needs to go.&lt;/li&gt;
&lt;li&gt;The paper allowed a collaborator to be either &amp;ldquo;a service with little regard or even awareness of its client&amp;rdquo; or a &amp;ldquo;near-equal&amp;rdquo; in a &amp;ldquo;symmetric relation&amp;rdquo;; however, nowadays we tend to put emphasis on loose coupling, so collaborators are generally services: a component has knowledge of collaborators that it employs, but a collaborator has no specific knowledge of components that it is employed by.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;components-vs-interfaces&#34;&gt;&lt;strong&gt;Components vs. Interfaces&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;Depending on the scope of the discussion, the term collaborator may mean two things of different nature:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When discussing a component and its collaborators, the term collaborator usually refers to an interface, because a component is supposed to be invoking interfaces, not actual implementations.&lt;/li&gt;
&lt;li&gt;When discussing a system and the components in it, the term collaborator refers to an actual component implementing one or more interfaces, because components is what systems consist of.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When there is a need to differentiate between the two, the terms &lt;em&gt;Collaborator Interface&lt;/em&gt; and &lt;em&gt;Collaborator Component&lt;/em&gt; can be used.&lt;/p&gt;
&lt;h3 id=&#34;availability&#34;&gt;&lt;strong&gt;Availability&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;The term does not imply any particular mechanism for making a collaborator component available to a component that wants to use it. The collaborator might be hard-coded, might be supplied as a parameter to an interface method call, might be injected, etc. If the mechanism by which a collaborator is being made available is unclear, and if it matters, then it should be explicitly stated.&lt;/p&gt;
&lt;p&gt;However, in software architecture we are usually discussing collaborators that may appear in architectural diagrams, and these tend to be injectable. Collaborators that are hard-coded or supplied as parameters tend to be small-scale implementation details that generally do not appear in architectural diagrams.&lt;/p&gt;
&lt;h3 id=&#34;delivery-of-invocations&#34;&gt;&lt;strong&gt;Delivery of invocations&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;The term does not imply any particular mechanism for placing invocations; one collaborator might be invokable via programmatic interface method calls, while another might be invokable via message-passing, and yet another might be invokable via REST request-response pairs; if the mechanism of placing invocations is unclear, and if it matters, then it should be explicitly stated.&lt;/p&gt;
&lt;p&gt;Having said that, I should add that in most cases it should not matter, because writing software using any invocation mechanism other than programmatic interface method calls is misguided; things like message-passing or REST requests and responses are:&lt;/p&gt;
&lt;p&gt;a) Invocation delivery details, and&lt;/p&gt;
&lt;p&gt;b) System deployment and wiring concerns.&lt;/p&gt;
&lt;p&gt;Therefore, they should always be abstracted away, ideally in a completely automatic and transparent way, so that we never have to deal with them in any way whatsoever when writing code. Thus, when I speak of invocations between collaborators, and unless I explicitly state otherwise, I mean programmatic interface method calls, with the provision that some automatic and transparent conversion between such calls and some other invocation delivery mechanism might be taking place under the hood if necessary.&lt;/p&gt;
&lt;h3 id=&#34;similarities-and-differences-from-dependencies&#34;&gt;Similarities and differences from dependencies
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;From an architectural point of view, where any components worth discussing are injectable, collaborator components are never dependencies, because no component depends on any particular implementation of another component. However, the interfaces of the collaborators are dependencies of the components that invoke them, because a component needs to import an interface in order to make invocations to it, otherwise it will not compile. (Assuming we are using a &lt;em&gt;real&lt;/em&gt; programming language, meaning a &lt;em&gt;strongly typed&lt;/em&gt; programming language.)&lt;/li&gt;
&lt;li&gt;Collaborator components that are available via hard-coding are of course dependencies, because when a component is hard-coded to make use of a certain component, it explicitly depends on that particular concrete implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Reference:
&lt;a class=&#34;external&#34; 
   href=&#34;https://softwareengineering.stackexchange.com/q/443097/41811&#34; target=&#34;_blank&#34;
   &gt;softwareengineering.stackexchange.com - Definition of &amp;ldquo;collaborators&amp;rdquo;
(of an object) in Software Design?&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: &amp;ldquo;Collaboration&amp;rdquo; by michael.gr, using &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/icon/gear-1031260/&#34; target=&#34;_blank&#34;
   &gt;&amp;lsquo;Gear&amp;rsquo; by Lluisa Iborra&lt;/a&gt; and &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/icon/hands-making-a-circle-4289633/&#34; target=&#34;_blank&#34;
   &gt;&amp;lsquo;hands making a circle&amp;rsquo; by Oleksandr Panasovskyi&lt;/a&gt; from the Noun Project.&lt;/p&gt;</description>
        </item>
        <item>
        <title>If you are using mock objects you are doing it wrong</title>
        <link>//localhost:1313/p/if-you-are-using-mock-objects-you-are-doing-it-wrong/</link>
        <pubDate>Sat, 14 Jan 2023 14:13:37 +0000</pubDate>
        
        <guid>//localhost:1313/p/if-you-are-using-mock-objects-you-are-doing-it-wrong/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/if-you-are-using-mock-objects-you-are-doing-it-wrong/images/mocking.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;h4 id=&#34;abstract&#34;&gt;Abstract:
&lt;/h4&gt;&lt;p&gt;The practice of using Mock Objects in automated software testing is examined from a critical point of view and found to be highly problematic. Opinions of some well known industry speakers are cited. The supposed benefits of Mock Objects are shown to be either no real benefits, or achievable via alternative means.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction
&lt;/h3&gt;&lt;p&gt;The automated software testing technique which is predominant in the industry today is Unit Testing. The goal of Unit Testing is to achieve defect localization, and to this effect it requires each component to be tested in strict isolation from its collaborators.&lt;/p&gt;
&lt;p&gt;Testing components in isolation from each other poses certain challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;While being tested, the component-under-test makes invocations to collaborator interfaces; since the collaborator components are not present, some kind of substitute must be there to implement the collaborator interfaces and receive those invocations.&lt;/li&gt;
&lt;li&gt;For each invocation that the component-under-test makes to a collaborator, it expects to receive back some result; therefore, the substitute receiving the invocation must be capable of generating a result that matches the result that would be generated by the real collaborator.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The technique which is predominant in the industry today for providing the component-under-test with substitutes of its collaborators is &lt;em&gt;&lt;strong&gt;Mock Objects&lt;/strong&gt;&lt;/em&gt;, or just mocks.&lt;/p&gt;
&lt;h3 id=&#34;how-do-mocks-work&#34;&gt;How do mocks work?
&lt;/h3&gt;&lt;p&gt;Mocks are based on the premise that the real work done by collaborators in a production environment is irrelevant during testing, and all that the component-under-test really needs from them is the results that they return when invoked. A test exercises the component-under-test in a specific way, therefore the component-under-test is expected to invoke its collaborators in ways which are known in advance; thus, regardless of how the real collaborators would work, the mocks which replace them do not need to contain any functionality; all they need to do is to yield the same results that the real collaborators would have returned, which are also known in advance.&lt;/p&gt;
&lt;p&gt;To this effect, each test dynamically creates and configures as many mocks as necessary to substitute each one of the collaborators of the component-under-test, with the help of some mocking framework. These frameworks are so popular that there exists a proliferation of them: JMock, EasyMock, Mockito, NMock, Moq, JustMock, and the list goes on.&lt;/p&gt;
&lt;p&gt;A mock object is configured to expose the same interface as the real collaborator that it substitutes, and to expect specific methods of this interface to be invoked, with specific argument values, sometimes even in a specific order of invocation. If anything goes wrong, such as an unexpected method being invoked, or a parameter having an unexpected value, the mock fails the test. A very common practice is to also fail the test if an expected method is &lt;em&gt;not&lt;/em&gt; invoked.&lt;/p&gt;
&lt;p&gt;For each one of the expected methods, the mock is configured to yield a prefabricated result which is intended to match the result that the real collaborator would have produced if it was being used, and if it was working exactly according to its specification.&lt;/p&gt;
&lt;p&gt;Or at least, that is the intention.&lt;/p&gt;
&lt;h4 id=&#34;drawbacks-of-mocks&#34;&gt;Drawbacks of Mocks
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complex and laborious&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;In each test it is not enough to invoke the component-under-test to perform a computation and check the results; we also have to configure a mock for each one of the collaborators of the component, to anticipate every single call that the component will be making to them while performing the computation, and for each call to fabricate a result which matches the result that the real collaborator would have returned from that call.&lt;/li&gt;
&lt;li&gt;Luckily, mocking frameworks lessen the amount of code necessary to accomplish this, but no matter how terse the mocking code is, the fact still remains that it constitutes substantial additional functionality which represents considerable additional complexity.&lt;/li&gt;
&lt;li&gt;One of the well-known caveats of software testing is that a test failure does not necessarily indicate a defect in the production code; it always indicates a defect either in the production code or in the test itself, and the only way to know is to troubleshoot. Thus, the more code we put in tests, and the more complex this code is, the more time we end up wasting in chasing and fixing bugs in the tests themselves rather than in the code that they are meant to test.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Over-specified&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;By anticipating every single call that the component-under-test makes to its collaborators, we are claiming to have detailed knowledge of the inner workings of the component-under-test, and we are concerned not only with what it accomplishes, but also with every little detail about how it goes on about accomplishing it. Essentially, we are implementing all of our application logic twice: once with production code expressing the logic in imperative mode, and once more with testing code expressing the same logic in expectational mode. In both cases, we write copious amounts of code describing what should happen in excruciatingly meticulous detail.&lt;/li&gt;
&lt;li&gt;Note that over-specification might not even be a goal in and of itself in some cases, but with mocking it is unavoidable in all cases: Each request that the component-under-test sends to its collaborators could conceivably be ignored, but the component-under-test still needs to receive some meaningful result in response to that request, so as to continue functioning during the remainder of the test; unfortunately, the only way that mocks can fabricate individual responses is by anticipating individual requests, even if the intention of the test is not to verify whether the requests are being made.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Presumptuous&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;When using mocks we are claiming to not only have detailed knowledge of the calls that the component-under-test makes to its collaborators, but also detailed knowledge of the results that would be returned by the real collaborators in a production environment.&lt;/li&gt;
&lt;li&gt;Furthermore, the results returned by a collaborator depend on the state that the collaborator is in, which in turn depends on previous calls made to it, but a mock is by its nature incapable of emulating state, so when using mocks we are also claiming to have knowledge of the state transitions that the real collaborators undergo in a production environment, and of the effect that these state transitions have on the results that they return.&lt;/li&gt;
&lt;li&gt;Such exorbitant presumptuousness might be okay if we are building high-criticality software, where each collaborator is likely to have requirements and specification that are well-defined and unlikely to change; however, in all other software, which is regular, commercial, non-high-criticality software, things are a lot less strict: not only the requirements and specifications change all the time, but also, by established practice, both the requirements, and the specification, and even the documentation, tend to be the code itself, and the code changes every time a new commit is made to the source code repository. Thus, the only way to know exactly how a collaborator behaves tends to be to actually invoke it and see what it does, while the mechanism which ensures that it does what it is supposed to do is the tests of that collaborator itself, which are unrelated to the tests of components that invoke it.&lt;/li&gt;
&lt;li&gt;As a result of all this, the practice of mocking often places us in the all too familiar situation where our Unit Tests all pass with flying colors, but our Integration Tests miserably fail because the behavior of the real collaborators turns out to be different from what the mocks assumed it would be.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fragile&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;By its nature, a mock object has no option but to fail the test if the interactions between the component under test and its collaborators deviate from what it expects. However, these interactions may legitimately change as software evolves. This may happen due to the application of a bug-fix, due to refactoring, or simply because as we write new code we invariably have to also modify existing code to interact with the new code that we are adding. Thus, when using mocks, every time we change the behavior of production code, we also have to fix tests to expect the new behavior. (Not only do we have to write all of our application logic twice, we also have to perform all of its maintenance twice.)&lt;/li&gt;
&lt;li&gt;The original promise of Automated Software Testing was to enable us to continuously evolve our software without fear of breaking it. The idea is that whenever you modify the production code, you can re-run the tests to ensure that everything still works. When using mocks this does not work, because every time you change the slightest thing in the production code, the tests break. As a result, many programmers are hesitant to make needed changes to production code because of all the changes in testing code that would be required. The understanding is growing within the software engineering community that mock objects actually hinder software development instead of facilitating it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-reusable&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Mocks exercise the implementation of a component rather than its interface. Thus, when using mocks, it is impossible to reuse the same testing code to validate multiple different components that implement the same public interface but employ different collaborators. For example:
&lt;ul&gt;
&lt;li&gt;It is impossible to completely rewrite the component and reuse the old tests to make sure that the new implementation works exactly as the old one did.&lt;/li&gt;
&lt;li&gt;It is impossible to use a single test suite to exercise both a real component and its fake.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unenlightening&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Ideally, a set of tests for a certain component should act as sample code demonstrating usage scenarios of that component. A programmer who is not familiar with a particular component should be able to read the tests of that component and gain a fairly good idea of what it can do, what it cannot do, and how to write production code that interacts with it.&lt;/li&gt;
&lt;li&gt;Unfortunately, when using mocks, the tests are full of cryptic mock-related jabber, which obscures the actual usage of the component-under-test, and so the enlightening bits are lost in the noise.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;what-do-others-say&#34;&gt;What do others say?
&lt;/h4&gt;&lt;p&gt;I am certainly not the only one to voice dissatisfaction with mocks. People have been noticing that although automated software testing is intended to facilitate refactoring by ensuring that the code still works after each change that we make, the use of mocks often hinders refactoring, because the tests are so tied to the implementation that you cannot change anything without breaking the tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the video &lt;em&gt;Thoughtworks - TW Hangouts: Is TDD dead?&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=z9quxZsLcfo&#34; target=&#34;_blank&#34;
   &gt;youtube&lt;/a&gt;, &lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/articles/is-tdd-dead/&#34; target=&#34;_blank&#34;
   &gt;text digest&lt;/a&gt;) at 21&amp;rsquo;:10&amp;rsquo;&amp;rsquo; Kent Beck states &amp;ldquo;My personal practice is I mock almost nothing.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In the same video, at 23&amp;rsquo;:56&amp;rsquo;&amp;rsquo; Martin Fowler adds &amp;ldquo;I&amp;rsquo;m with Kent, I hardly ever use mocks.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In the &lt;em&gt;Fragile Test&lt;/em&gt; section of his book &lt;em&gt;xUnit Test Patterns: Refactoring Test Code&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://xunitpatterns.com/&#34; target=&#34;_blank&#34;
   &gt;xunitpatterns.com&lt;/a&gt;) author Gerard Meszaros admits that &amp;ldquo;extensive use of Mock Objects causes overcoupled tests.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;In his presentation &lt;em&gt;TDD, where did it all go wrong?&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.infoq.com/presentations/tdd-original/&#34; target=&#34;_blank&#34;
   &gt;InfoQ&lt;/a&gt;, &lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=EZ05e7EMOLM&#34; target=&#34;_blank&#34;
   &gt;YouTube&lt;/a&gt;) at 49&amp;rsquo;:32&amp;rsquo;&amp;rsquo; Ian Cooper states &amp;ldquo;I argue quite heavily against mocks because they are overspecified.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that in an attempt to avoid sounding too blasphemous, these people refrain from suggesting that mocks should be abolished; however, it is evident that 3 out of 4 of them are strongly against mocks, and we do not need to read much between the lines to figure out that they would probably be calling for the complete abolition of mocks if they had a viable and universally applicable alternative to propose.&lt;/p&gt;
&lt;h4 id=&#34;so-if-not-mocking-then-what&#34;&gt;So, if not mocking, then what?
&lt;/h4&gt;&lt;p&gt;Mocking has been such a great hit with the software industry because it achieves multiple different goals at once. Here is a list of the supposed benefits of mocking, and for each one of them an explanation of why it is not really a benefit, or how it can be achieved without mocking:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mocking achieves defect localization by eliminating collaborators from the picture and allowing components to be tested in strict isolation from each other.
&lt;ul&gt;
&lt;li&gt;Defect localization is useful, but it is not an absolute necessity, and it does not have to be done to absolute perfection as mocking aims to do; we can achieve more than good enough defect localization by testing each component in integration with its collaborators, simply by arranging the order in which tests are executed to ensure that by the time a component gets tested, all of its collaborators have already passed their tests. See &lt;a 
   href=&#34;//localhost:1313/p/incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking allows a component to be tested without the performance overhead of instantiating and invoking its real collaborators.
&lt;ul&gt;
&lt;li&gt;The performance overhead of instantiating and invoking the real collaborators is not always prohibitive, or even noticeable, so in many cases it is perfectly fine to test a component in integration with its real collaborators. See &lt;a 
   href=&#34;//localhost:1313/p/incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In the limited number of cases where the performance overhead is indeed prohibitive, it can be avoided with the use of Fakes instead of Mocks. See &lt;a 
   href=&#34;//localhost:1313/p/testing-with-fakes-instead-of-mocks/&#34;
   &gt;Testing with Fakes instead of Mocks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking allows us to examine invocations being made by the component-under-test to its collaborators, to ensure that they are issued exactly as expected.
&lt;ul&gt;
&lt;li&gt;In most cases, examining the invocations made by the component-under-test to its collaborators is in fact bad practice, because it constitutes white-box testing. The only reason why this is being widely practiced in the industry is because mocking does not work otherwise, so in this regard mocking contains a certain element of a self-serving paradigm.&lt;/li&gt;
&lt;li&gt;In those rare cases where examining the invocations is in fact necessary, it is still bad practice to do so programmatically, because it results in tests that are over-specified and fragile.&lt;/li&gt;
&lt;li&gt;What we can do instead is to record the interactions during each test run, visually compare the latest recording with that of the last known good run, and decide whether the differences match our expectations; if they do not match, then we must keep working on our code; but if they do match, then we are done without the need to go fixing any tests. See &lt;a 
   href=&#34;//localhost:1313/p/audit-testing/&#34;
   &gt;Audit Testing&lt;/a&gt; and &lt;a 
   href=&#34;//localhost:1313/p/collaboration-monitoring/&#34;
   &gt;Collaboration Monitoring&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking allows us to fabricate the results returned from a collaborator to the component-under-test, so as to guarantee that they are free from defects that could be caused by bugs in the implementation of the real collaborator.
&lt;ul&gt;
&lt;li&gt;Fabricating the results that would have been returned by a real collaborator is in fact bad practice, because it will not magically make any bugs go away, (in this sense it can be likened to ostrich policy,) and because as I have already explained, it is highly presumptuous. The definitive authority on what results are returned by a certain collaborator is the real implementation of that collaborator, or a fake thereof, which in turn necessitates integration testing. See &lt;a 
   href=&#34;//localhost:1313/p/incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking allows us to verify the correctness of components that generate their output by means of forwarding results to collaborators rather than by returning results from invocations.
&lt;ul&gt;
&lt;li&gt;Even in this case, &lt;em&gt;Collaboration Monitoring&lt;/em&gt; can be used instead of mocking, to verify that the results are generated as expected without having to programmatically describe what the results should be and without having to go fixing tests each time we modify the component under test and deliberately change something about the results it generates. See &lt;a 
   href=&#34;//localhost:1313/p/audit-testing/&#34;
   &gt;Audit Testing&lt;/a&gt; and &lt;a 
   href=&#34;//localhost:1313/p/collaboration-monitoring/&#34;
   &gt;Collaboration Monitoring&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking allows us to start testing a component while one or more of its collaborators are not ready yet for integration because they are still in development, and no fakes of them are available either.
&lt;ul&gt;
&lt;li&gt;This is true, but once the collaborators (or fakes thereof) become available, it is best to integrate them in the tests, and to unceremoniously throw away the mocks. See &lt;a 
   href=&#34;//localhost:1313/p/incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mocking allows us to develop a component without depending on factors that we have no control over, such as the time of delivery of collaborators, the quality of their implementation, and the quality of their testing. With the use of Mocks we can claim that our component is complete and fully tested, based on nothing but the specification of its collaborators, and we can claim that it should work fine in integration with its collaborators when they happen to be delivered, and if they happen to work according to spec.
&lt;ul&gt;
&lt;li&gt;True, but this implies a very bureaucratic way of working, and utter lack of trust towards the developers of the collaborators; it is best if it never comes to that.&lt;/li&gt;
&lt;li&gt;We can still avoid the use of mocks by creating fakes of the collaborators ourselves. See &lt;a 
   href=&#34;//localhost:1313/p/testing-with-fakes-instead-of-mocks/&#34;
   &gt;Testing with Fakes instead of Mocks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize, mocks can always be replaced with one or more of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fakes (see &lt;a 
   href=&#34;//localhost:1313/p/testing-with-fakes-instead-of-mocks/&#34;
   &gt;Testing with Fakes instead of Mocks&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Incremental Integration Testing (see &lt;a 
   href=&#34;//localhost:1313/p/incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Audit Testing (see &lt;a 
   href=&#34;//localhost:1313/p/audit-testing/&#34;
   &gt;Audit Testing&lt;/a&gt;) and Collaboration Monitoring (see &lt;a 
   href=&#34;//localhost:1313/p/collaboration-monitoring/&#34;
   &gt;Collaboration Monitoring&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;As we have shown, the practice of using Mock Objects in automated software testing is laborious, over-specified, presumptuous, and leads to tests that are fragile and non-reusable, while each of the alleged benefits of using mocks is either not a real benefit, or can be realized by other means, which we have named.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/if-you-are-using-mock-objects-you-are-doing-it-wrong/images/grumpy-cat-mock-objects.jpg&#34;
	width=&#34;797&#34;
	height=&#34;1024&#34;
	srcset=&#34;//localhost:1313/p/if-you-are-using-mock-objects-you-are-doing-it-wrong/images/grumpy-cat-mock-objects_hu_8156248a341d61af.jpg 480w, //localhost:1313/p/if-you-are-using-mock-objects-you-are-doing-it-wrong/images/grumpy-cat-mock-objects_hu_5b4ff396469f2342.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;186px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Mandatory grumpy cat meme - &amp;ldquo;Mock objects - they are horrible&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: &amp;ldquo;Mocking&amp;rdquo; by michael.gr, based on &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/icon/mock-2657532/&#34; target=&#34;_blank&#34;
   &gt;&amp;lsquo;mock&amp;rsquo; by &amp;lsquo;Iconbox&amp;rsquo; from the noun project.&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Collaboration Monitoring</title>
        <link>//localhost:1313/p/collaboration-monitoring/</link>
        <pubDate>Fri, 06 Jan 2023 13:03:22 +0000</pubDate>
        
        <guid>//localhost:1313/p/collaboration-monitoring/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/collaboration-monitoring/images/collaboration-monitoring.png&#34;
	width=&#34;1024&#34;
	height=&#34;512&#34;
	srcset=&#34;//localhost:1313/p/collaboration-monitoring/images/collaboration-monitoring_hu_3c58b5508de82250.png 480w, //localhost:1313/p/collaboration-monitoring/images/collaboration-monitoring_hu_1f58869c4f30abf2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;abstract&#34;&gt;Abstract
&lt;/h3&gt;&lt;p&gt;An automated software testing technique is presented which solves the fragile test problem of white-box testing by allowing us to ensure that the component-under-test interacts with its collaborators according to our expectations without having to stipulate our expectations as test code, without having the tests fail each time our expectations change, and without having to go fixing test code each time this happens.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary
&lt;/h3&gt;&lt;p&gt;In automated software testing it is sometimes necessary to ensure not only that given specific input, the component-under-test produces correct output, (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Black-box_testing&#34; target=&#34;_blank&#34;
   &gt;Black-Box Testing&lt;/a&gt;,) but also that while doing so, it interacts with its collaborators in certain expected ways. (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/White-box_testing&#34; target=&#34;_blank&#34;
   &gt;White-Box Testing&lt;/a&gt;.) The prevailing technique for achieving white-box testing (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Mock_object&#34; target=&#34;_blank&#34;
   &gt;Mock Objects&lt;/a&gt;) requires copious amounts of additional code in the tests to describe the interaction that are expected to happen, and fails the tests if the actual interactions deviate from the expected ones.&lt;/p&gt;
&lt;p&gt;Unfortunately, the interactions often change due to various reasons, for example applying a bug fix, performing refactoring, or modifying existing code in order to accommodate the addition of new code intended to introduce new functionality; so, tests keep breaking all the time, (the &lt;a class=&#34;external&#34; 
   href=&#34;https://xunitpatterns.com/Fragile%20Test.html&#34; target=&#34;_blank&#34;
   &gt;Fragile Test&lt;/a&gt; problem,) requiring constant maintenance, which imposes a heavy burden on the Software Development process.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Collaboration Monitoring&lt;/strong&gt;&lt;/em&gt; is a technique for white-box testing where during a test run we record detailed information about the interactions between collaborators, we compare the recording against that of a previous test run, and we visually examine the differences to determine whether the changes observed in the interactions are as expected according to the changes that were made in the code. Thus, no code has to be written to describe in advance how collaborators are expected to interact, and no tests have to be fixed each time the expectations change.&lt;/p&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The problem
&lt;/h3&gt;&lt;p&gt;Most software testing as conventionally practiced all over the world today consists of two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Result Validation:&lt;/strong&gt;&lt;/em&gt; ascertaining that given specific input, the component-under-test produces specific expected output.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Collaboration Validation:&lt;/strong&gt;&lt;/em&gt; ensuring that while performing a certain computation, the component-under-test interacts with its collaborators in specific expected ways.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I argue elsewhere, in the vast majority of cases, Collaboration Validation is ill-advised, because it constitutes white-box testing; however, there are some cases where it is necessary, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In high-criticality software, which is all about safety, not only the requirements must be met, but also nothing must be left to chance. Thus, the cost of white-box testing is justified, and the goal is in fact to ensure that the component-under-test not only produces correct results, but also that while doing so, it interacts with its collaborators as expected.&lt;/li&gt;
&lt;li&gt;In reactive programming, the component-under-test does not produce output by returning results from function calls; instead, it produces output by forwarding results to collaborators. Thus, even if all we want to do is to ascertain the correctness of the component&amp;rsquo;s output, we have to examine how it interacts with its collaborators, because that is the only way to observe its output.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The prevalent mechanism by which the Software Industry achieves Collaboration Validation today is Mock Objects. As I argue elsewhere, (see &lt;a 
   href=&#34;//localhost:1313/p/if-you-are-using-mock-objects-you-are-doing-it-wrong/&#34;
   &gt;If you are using mock objects you are doing it wrong&lt;/a&gt;) the use of mocks is generally ill-advised due to various reasons, but with respect to Collaboration Validation in specific, the problem with mocks is that their use is extremely laborious:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When we write a test for a certain component, it is counter-productive to have to stipulate in code exactly how we expect it to interact with its collaborators.&lt;/li&gt;
&lt;li&gt;When we revise the implementation of a component, the component may now legitimately start interacting with its collaborators in a different way; when this happens, it is counter-productive to have the tests fail, and to have to go fix them so that they stop expecting the old interactions and start expecting the new interactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The original promise of automated software testing was to allow us to modify code without the fear of breaking it, but with the use of mocks the slightest modification to the code causes the tests to fail, so the code always looks broken, and the tests always require fixing.&lt;/p&gt;
&lt;p&gt;This is particularly problematic in light of the fact that there is nothing about the concept of Collaboration Validation which requires that the interactions between collaborators must be stipulated in advance, nor that the tests must fail each time the interactions change; all that is required is that we must be able to tell whether the interactions between collaborators are as expected or not. Thus, Collaboration Validation does not necessitate the use of mocks; it could conceivably be achieved by some entirely different means.&lt;/p&gt;
&lt;h3 id=&#34;the-solution&#34;&gt;The Solution
&lt;/h3&gt;&lt;p&gt;If we want to ensure that given specific input, a component produces expected results, we do of course have to write some test code to exercise the component as a black-box. If we also want to ensure that the component-under-test interacts with its collaborators in specific ways while it is being exercised, this would be white-box testing, so it would be best if it does not have to also be written in code. To achieve this without code, all we need is the ability to somehow capture the interactions so that we can visually examine them and decide whether they are in agreement with our expectations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If they are not as expected, then we have to keep working on the production code and/or the black-box testing code.&lt;/li&gt;
&lt;li&gt;If they are as expected, then we are done: we can commit our code, and call it a day, without having to modify any white-box tests!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The trick is to do so in a convenient, iterative, and fail-safe way, meaning that the following must hold true:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a change in the code causes a change in the interactions, there should be some kind of indication telling us that the interactions have now changed, and this indication should be so clear that we cannot possibly miss it.&lt;/li&gt;
&lt;li&gt;Each time we modify some code and run the tests, we want to be able to see what has changed in the interactions as a result of only those modifications, so that we do not have to pore through long lists of irrelevant interactions, and so that no information gets lost in the noise.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To achieve this, I use a technique that I call Collaboration Monitoring.&lt;/p&gt;
&lt;p&gt;Collaboration Monitoring is based on another testing technique that I call Audit Testing, so it might be a good idea to read the related paper before proceeding: &lt;a 
   href=&#34;//localhost:1313/p/audit-testing/&#34;
   &gt;Audit Testing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let us assume that we have a component that we want to test, which invokes interface T as part of its job. In order to test the component, we have to wire it with a collaborator that implements T. For this, we can use either the real collaborator that would be wired in the production environment, or a Fake thereof. Regardless of what we choose, we have a very simple picture which looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/collaboration-monitoring/images/collaboration-monitor-1.png&#34;
	width=&#34;422&#34;
	height=&#34;74&#34;
	srcset=&#34;//localhost:1313/p/collaboration-monitoring/images/collaboration-monitor-1_hu_8cbeb5070d7d33.png 480w, //localhost:1313/p/collaboration-monitoring/images/collaboration-monitor-1_hu_422fd14dddc93b76.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;570&#34;
		data-flex-basis=&#34;1368px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Note that with this setup we can exercise the component-under-test as a black-box, but we cannot yet observe how it interacts with its collaborator.&lt;/p&gt;
&lt;p&gt;In order to observe how the component-under-test interacts with its collaborator, we interject between the two of them a new component, called a &lt;em&gt;&lt;strong&gt;Collaboration Monitor&lt;/strong&gt;&lt;/em&gt;, which is a decorator of T. The purpose of this Collaboration Monitor is to record into a text file information about each function call that passes through it. The text file is called a &lt;em&gt;&lt;strong&gt;Snoop File&lt;/strong&gt;&lt;/em&gt;, and it is a special form of &lt;em&gt;&lt;strong&gt;Audit File&lt;/strong&gt;&lt;/em&gt;. (See &lt;a 
   href=&#34;//localhost:1313/p/audit-testing/&#34;
   &gt;Audit Testing&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Thus, we now have the following picture:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/collaboration-monitoring/images/collaboration-monitor-2.png&#34;
	width=&#34;568&#34;
	height=&#34;193&#34;
	srcset=&#34;//localhost:1313/p/collaboration-monitoring/images/collaboration-monitor-2_hu_6876382b85ecd6f0.png 480w, //localhost:1313/p/collaboration-monitoring/images/collaboration-monitor-2_hu_88f51d25c12dfe11.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;294&#34;
		data-flex-basis=&#34;706px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;The information that the Collaboration Monitor saves for each function call includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The name of the function.&lt;/li&gt;
&lt;li&gt;A serialization of the value of each parameter that was passed to the function.&lt;/li&gt;
&lt;li&gt;A serialization of the return value of the function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As per Audit Testing, the Snoop File is saved in the source code tree, right next to the source code file of the test that generated it, and gets committed into the Source Code Repository / Version Control System along with the source code. For example, if we have &lt;code&gt;SuchAndSuchTest.java&lt;/code&gt;, then after running the tests for the first time we will find a &lt;code&gt;SuchAndSuchTest.snoop&lt;/code&gt; file right next to it. We can examine this file to ensure that the component-under-test interacted with the collaborator exactly as expected.&lt;/p&gt;
&lt;p&gt;As we continue developing our system, the modifications that we make to the code will sometimes have no effect on how collaborators interact with each other, and sometimes will cause the collaborators to start interacting differently. Thus, as we continue running our tests while developing our system, we will be observing the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For as long as the collaborations continue in exactly the same way, the contents of the Snoop Files remain unchanged, despite the fact that the files are re-generated on each test run.&lt;/li&gt;
&lt;li&gt;As soon as some collaborations change, the contents of some Snoop Files will change.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As per Audit Testing, we can then leverage our Version Control System and our Integrated Development Environment to take care of the rest of the workflow, as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When we make a revision in the production code or in the testing code, and as a result of this revision the interactions between the component-under-test and its collaborators are now even slightly different, we will not fail to take notice because our Version Control System will show the corresponding Snoop File as modified and in need of committing.&lt;/li&gt;
&lt;li&gt;By asking our Integrated Development Environment to show us a &amp;ldquo;diff&amp;rdquo; between the current snoop file and the unmodified version, we can see precisely what has changed without having to pore through the entire snoop file.&lt;/li&gt;
&lt;li&gt;If the observed interactions are not exactly what we expected them to be according to the revisions we just made, we keep working on our revision.&lt;/li&gt;
&lt;li&gt;When we are confident that the differences in the interactions are exactly as expected according to the changes that we made to the code, we commit our revision, along with the Snoop Files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-about-code-review&#34;&gt;What about code review?
&lt;/h3&gt;&lt;p&gt;As per Audit Testing, the reviewer is able to see both the changes in the code, and the corresponding changes in the Snoop Files, and vouch for them, or not, as the case might be.&lt;/p&gt;
&lt;h3 id=&#34;requirements&#34;&gt;Requirements
&lt;/h3&gt;&lt;p&gt;For Collaboration Monitoring to work, snoop files must be free from non-deterministic noise, and it is best if they are also free from deterministic noise. For more information about these types of noise and what you can do about them, see &lt;a 
   href=&#34;//localhost:1313/p/audit-testing/&#34;
   &gt;Audit Testing&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;automation&#34;&gt;Automation
&lt;/h3&gt;&lt;p&gt;When using languages like Java and C# which support reflection and intermediate code generation, we do not have to write Collaboration Monitors by hand; we can instead create a facility which will be automatically generating them for us on demand, at runtime. Such a facility can be very easily written with the help of Intertwine (see &lt;a 
   href=&#34;//localhost:1313/p/intertwine/&#34;
   &gt;Intertwine&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Using Intertwine, we can create a Collaboration Monitor for any interface T. Such a Collaboration Monitor works as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contains an Entwiner of T so that it can expose interface T without any hand-written code implementing interface T. The Entwiner delegates to an instance of &lt;code&gt;AnyCall&lt;/code&gt;, which expresses each invocation in a general-purpose form.&lt;/li&gt;
&lt;li&gt;Contains an implementation of &lt;code&gt;AnyCall&lt;/code&gt; which serializes all necessary information about the invocation into the Snoop File.&lt;/li&gt;
&lt;li&gt;Contains an untwiner of T, so that it can convert each invocation from &lt;code&gt;AnyCall&lt;/code&gt; back to an instance of T, without any hand-written code for invoking interface T.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;comparison-of-workflows&#34;&gt;Comparison of Workflows
&lt;/h4&gt;&lt;p&gt;Here is a step-by-step comparison of the software development process when using mocks, and when using collaboration monitoring.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Workflow using Mock Objects:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Modify the production code and/or the black-box part of the tests.&lt;/li&gt;
&lt;li&gt;Run the tests.
&lt;ul&gt;
&lt;li&gt;If the tests pass:
&lt;ul&gt;
&lt;li&gt;Done.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the tests fail:
&lt;ul&gt;
&lt;li&gt;Troubleshoot why this is happening.
&lt;ul&gt;
&lt;li&gt;If either the production code or the black-box part of the tests is
wrong:
&lt;ul&gt;
&lt;li&gt;Go to step 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the white-box part of the tests is wrong:
&lt;ul&gt;
&lt;li&gt;Modify the white-box part of the tests (the mocking code) to stop expecting the old interactions and start expecting the new interactions.&lt;/li&gt;
&lt;li&gt;Go to step 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Workflow using Collaboration Monitoring:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Modify the production code and/or the tests.&lt;/li&gt;
&lt;li&gt;Run the tests.
&lt;ul&gt;
&lt;li&gt;If the tests pass:
&lt;ul&gt;
&lt;li&gt;If the interactions have remained unchanged:
&lt;ul&gt;
&lt;li&gt;Done.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the interactions have changed:
&lt;ul&gt;
&lt;li&gt;Visually inspect the changes.
&lt;ul&gt;
&lt;li&gt;If the interactions agree with our expectations:
&lt;ul&gt;
&lt;li&gt;Done.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the interactions differ from our expectations:
&lt;ul&gt;
&lt;li&gt;Go to step 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the tests fail:
&lt;ul&gt;
&lt;li&gt;Go to step 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;Collaboration Monitoring is an adaptation of Audit Testing which allows the developer to write black-box tests which only exercise the public interface of the component-under-test, while remaining confident that the component interacts with its collaborators inside the black box according to their expectations, without having to write white-box testing code to stipulate the expectations, and without having to modify white-box testing code each time the expectations change.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: &amp;ldquo;Collaboration Monitoring&amp;rdquo; by michael.gr based on original work &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/icon/monitoring-4861371/&#34; target=&#34;_blank&#34;
   &gt;&amp;lsquo;monitoring&amp;rsquo; by Arif Arisandi&lt;/a&gt; and &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/icon/gears-1705750/&#34; target=&#34;_blank&#34;
   &gt;&amp;lsquo;Gears&amp;rsquo; by Free Fair &amp;amp; Healthy&lt;/a&gt; from the Noun Project.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Testing with Fakes instead of Mocks</title>
        <link>//localhost:1313/p/testing-with-fakes-instead-of-mocks/</link>
        <pubDate>Fri, 30 Dec 2022 14:01:26 +0000</pubDate>
        
        <guid>//localhost:1313/p/testing-with-fakes-instead-of-mocks/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/testing-with-fakes-instead-of-mocks/media/fake.png&#34;
	width=&#34;2000&#34;
	height=&#34;1000&#34;
	srcset=&#34;//localhost:1313/p/testing-with-fakes-instead-of-mocks/media/fake_hu_94f7aa407fc2e88a.png 480w, //localhost:1313/p/testing-with-fakes-instead-of-mocks/media/fake_hu_fbb249274ecaf5fb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;abstract&#34;&gt;Abstract
&lt;/h3&gt;&lt;p&gt;What are &lt;em&gt;fakes&lt;/em&gt;, what are their benefits, and why they are incontestably preferable over &lt;em&gt;mocks&lt;/em&gt;. Also, how to create fakes if needed.&lt;/p&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction
&lt;/h4&gt;&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;When testing a component it is often necessary to refrain from connecting it with the real collaborators that it would be connected with in a production environment, and instead to connect it with special substitutes of its collaborators, also known as &lt;em&gt;test doubles&lt;/em&gt;, which are more suitable for testing than the real ones.&lt;/p&gt;
&lt;p&gt;One book that names and describes various kinds of test doubles is &lt;em&gt;xUnit Test Patterns: Refactoring Test Code&lt;/em&gt; by Gerard Meszaros, (&lt;a class=&#34;external&#34; 
   href=&#34;https://xunitpatterns.com/&#34; target=&#34;_blank&#34;
   &gt;xunitpatterns.com&lt;/a&gt;) though I first read about them from &lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/bliki/TestDouble.html&#34; target=&#34;_blank&#34;
   &gt;martinfowler.com - TestDouble&lt;/a&gt;, which refers to Meszaros as the original source.&lt;/p&gt;
&lt;p&gt;There exist a few different kinds of test doubles; by far the most commonly used kind is mocks, which, as I explain elsewhere, are a very bad idea and should be avoided like COVID-19. (See &lt;a 
   href=&#34;//localhost:1313/p/if-you-are-using-mock-objects-you-are-doing-it-wrong/&#34;
   &gt;If you are using mock objects you are doing it wrong&lt;/a&gt;.) Another kind of test double, which does not suffer from the disadvantages of mocks, is &lt;em&gt;&lt;strong&gt;Fake Objects&lt;/strong&gt;&lt;/em&gt;, or simply &lt;em&gt;&lt;strong&gt;fakes&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;what-are-fakes&#34;&gt;What are fakes
&lt;/h3&gt;&lt;p&gt;In just one word, a fake is an emulator.&lt;/p&gt;
&lt;p&gt;In a bit more detail, a fake is a component that fully implements the interface of the real component that it substitutes, or at any rate the subset of that interface that we have a use for; it maintains state which is equivalent to the state of the real component, and based on this state it provides the full functionality of the real component, or a very convincing illusion thereof; to achieve this, it makes some compromises which either do not matter during testing, or are actually desirable during testing. Examples of such compromises are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Having limited capacity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not being scalable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not being distributed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not remembering any state from run to run.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pretending to interact, but not actually interacting, with the physical world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generating fake data that would be unusable in a real production scenario.&lt;/p&gt;
&lt;p&gt;A fake can be more suitable for testing than the real thing in the following ways:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By performing much better than the real thing; for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by keeping state in-memory instead of persisting to the file-system.&lt;/li&gt;
&lt;li&gt;by working locally instead of over the network.&lt;/li&gt;
&lt;li&gt;by pretending that the time has come for the next timer to fire instead of having to wait for that timer to fire.&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By being deterministic; for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by fabricating time-stamps instead of querying the system clock.&lt;/li&gt;
&lt;li&gt;by fabricating entities such as GUIDs, that would otherwise introduce randomness.&lt;/li&gt;
&lt;li&gt;by utilizing a single thread, or forcing threads to work in a lock-step fashion.&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By avoiding undesirable interactions with the real world; for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;by pretending that a mass e-mail was sent instead of actually sending it.&lt;/li&gt;
&lt;li&gt;by pretending that an application-modal message box popped up, and that the user picked one of the available choices, instead of allowing an actual modal message box to block the running of tests on the developer&amp;rsquo;s computer, or, worse yet, on some continuous build server in some data center out there.&lt;/li&gt;
&lt;li&gt;by pretending that an industrial robot made a certain movement, instead of causing an actual robot to move on a factory floor.&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few examples of frequently used fakes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Various in-memory file-system libraries exist for various platforms, which can be used in place of the actual file-systems on those platforms.&lt;/li&gt;
&lt;li&gt;HSQLDB and H2 for Java, in-memory DbContext for DotNet EntityFramework, etc. are in-memory database systems that can be used in place of actual Relational Database Management Systems when testing.&lt;/li&gt;
&lt;li&gt;EmbeddedKafka can be used in place of an actual pair of Kafka + Zookeeper instances.&lt;/li&gt;
&lt;li&gt;A pseudo-random number generator seeded with a known constant value acts as a fake of the same pseudo-random number generator seeded with a practically random value such as the current time coordinate.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To recap:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fakes refrain from performing the actual operations that the real thing would perform, (e.g. when a file is created while using an in-memory file-system, no file gets created on disk,) but:&lt;/li&gt;
&lt;li&gt;They do go through all the motions, (e.g. attempting to create a file using an invalid filename will cause an error just as in a real file-system,) and:&lt;/li&gt;
&lt;li&gt;They do maintain the same state, (e.g. reading a file from an in-memory file-system will yield the exact same data that were previously written to
it,) so:&lt;/li&gt;
&lt;li&gt;They do fully behave as if the operations were actually performed as far as the component-under-test is concerned, while:&lt;/li&gt;
&lt;li&gt;The compromises that they make in order to achieve this are inconsequential or even desirable when testing. (e.g. during a test run it does not matter if files created during a previous test run do not exist anymore, and as a matter of fact it is better if they do not exist.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the terminology is a bit unfortunate: fakes are not nearly as fake as mocks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mocks are the ultimate in fakery because:
&lt;ul&gt;
&lt;li&gt;They only respond to invocations that we prescribe in each test, based on our assumptions as to how the component-under-test would invoke the real thing.&lt;/li&gt;
&lt;li&gt;They maintain no state.&lt;/li&gt;
&lt;li&gt;They contain no functionality.&lt;/li&gt;
&lt;li&gt;They only return results that we prefabricate in each test, based on our assumptions as to how the real thing would respond.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fakes are not quite as fake as their name suggests, because:
&lt;ul&gt;
&lt;li&gt;They expose the same interface as the real thing.&lt;/li&gt;
&lt;li&gt;They maintain an equivalent state as the real thing.&lt;/li&gt;
&lt;li&gt;They implement equivalent functionality as the real thing.&lt;/li&gt;
&lt;li&gt;They return the exact same results as the real thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;benefits-of-fakes&#34;&gt;Benefits of fakes
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;By using a fake instead of the real thing:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;We achieve better performance, so that our tests run quickly.&lt;/li&gt;
&lt;li&gt;We avoid non-determinism during testing, so our tests are repeatable.&lt;/li&gt;
&lt;li&gt;We avoid undesirable interactions with the real world, so nobody gets hurt.&lt;/li&gt;
&lt;li&gt;We have less code to write, since a fake is usually simpler to set up than the real thing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;By using a fake instead of a mock:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;We save ourselves from having to write complicated mocking code in each test.&lt;/li&gt;
&lt;li&gt;We do not need to claim any knowledge as to how the component under test invokes its collaborators.&lt;/li&gt;
&lt;li&gt;We do not have to make assumptions about the state in which the collaborators are at any given moment.&lt;/li&gt;
&lt;li&gt;We do not have to make assumptions as to what results would be returned by each collaborator in each invocation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In both cases:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;We are incorporating in our tests a collaborator which has already been tested and can be reasonably assumed to be free of defects. Thus, in the event of a test failure we can be fairly confident that the defect lies in the component-under-test, (or in the test itself,) but not in one of the collaborators, so we achieve defect localization, which is the aim of Unit Testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;creating-fakes-of-our-own-components&#34;&gt;Creating fakes of our own components
&lt;/h3&gt;&lt;p&gt;In some cases we may want to create a fake ourselves, as a substitute of one of our own components. Not only will this allow other components to start their testing as early as possible without the need for mocks, but also, a non-negligible part of the effort invested in the creation of the fake will be reusable in the creation of the real thing, while the process of creating the fake is likely to yield valuable lessons which can guide the creation of the real thing. Thus, any effort that goes into creating a fake of a certain component represents a much better investment than the effort of creating a multitude of throw-away mocks for various isolated operations on that component.&lt;/p&gt;
&lt;p&gt;One might argue that keeping a fake side-by-side with the real thing may represent a considerable additional maintenance overhead, but in my experience the overhead of doing so is nowhere near the overhead of maintaining a proliferation of mocks for the real thing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each time the implementation of the real thing changes without any change to its specification, (such as, for example, when applying some refactoring, or a bug fix,) some mocks must be modified, some must even be rewritten, while the fake usually does not have to be touched at all.&lt;/li&gt;
&lt;li&gt;When the specification of the real thing changes, the mocks have to be rewritten, and the fake has to be modified, but the beauty of the fake is that it is a self-contained module which implements a known abstraction, so it is easy to maintain, whereas every single snippet of mocking code is nothing but incidental complexity, and thus hard to maintain.&lt;/li&gt;
&lt;li&gt;In either case, a single change in the real thing will generally require a single corresponding change in the fake, whereas if we are using mocks we invariably have to go changing an arbitrary number of mocking snippets scattered throughout the tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, the use of fakes instead of mocks promotes the creation of black-box tests instead of white-box tests. Once we get into the habit of writing all of our tests as black-box tests, new possibilities open up which greatly ease the development of fakes: we can now write a test for a certain module, and then reuse that test in order to test its fake. The test can be reused because it is a black-box test, so it does not care how the module works internally, therefore it can test the real thing just as well as the fake of the real thing. Once we run the test on the real thing, we run the same test on the fake, and if both pass, then from that moment on we can continue using the fake in place of the real thing in all other tests.&lt;/p&gt;
&lt;p&gt;The tests that exercise the real thing will be slow, but the real thing does not change very often, (if ever,) so here is where a testing tool like Testana shines: by using Testana we ensure that the tests exercising the real thing will only run in the rare event that the real thing actually changes. For more information about Testana, see &lt;a 
   href=&#34;//localhost:1313/p/testana-a-better-way-of-running-tests/&#34;
   &gt;Testana: A better way of running tests&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;creating-fakes-of-external-components&#34;&gt;Creating fakes of external components
&lt;/h3&gt;&lt;p&gt;If we are using an external component for which no fake is available, we may wish to create a fake for it ourselves. First, we write a test suite which exercises the external component, not really looking for defects in it, but instead using its behavior as reference for writing the tests. Once we have built our test suite to specifically pass the behavior of the external component, we can reuse it against the fake, and if it also passes, then we have sufficient reasons to believe that the behavior of the fake matches the behavior of the external component. A similar technique is described by Martin Fowler in his &lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/bliki/ContractTest.html&#34; target=&#34;_blank&#34;
   &gt;Contract Test&lt;/a&gt; post.&lt;/p&gt;
&lt;p&gt;In an ideal world where everyone would be practicing Black-Box testing, we should even be able to obtain from the creators of the external component the test suite that they have already built for testing their creation, and use it to test our fake.&lt;/p&gt;
&lt;p&gt;In an even more ideal world, anyone who develops a component for others to use would be shipping it together with its fake, so that nobody needs to get dirty with its test suite.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;Despite widespread practices in the industry, fakes are the preferred alternative to mocks. Even though they might at first seem laborious, they are actually very convenient to use, and on the long run far less expensive than mocks.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: fake moustache by michael.gr based on &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/icon/fake-mustache-31744/&#34; target=&#34;_blank&#34;
   &gt;art by Claire Jones from the Noun Project&lt;/a&gt;.&lt;/p&gt;</description>
        </item>
        <item>
        <title>On messages and message-passing</title>
        <link>//localhost:1313/p/on-messages-and-message-passing/</link>
        <pubDate>Sun, 18 Dec 2022 08:59:25 +0000</pubDate>
        
        <guid>//localhost:1313/p/on-messages-and-message-passing/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-messages-and-message-passing/media/message-passing.png&#34;
	width=&#34;2673&#34;
	height=&#34;1494&#34;
	srcset=&#34;//localhost:1313/p/on-messages-and-message-passing/media/message-passing_hu_cac0be91696add81.png 480w, //localhost:1313/p/on-messages-and-message-passing/media/message-passing_hu_4c50d0e4091ea6ab.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;429px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Over the decades, numerous software system architectures have emerged which require invocations across subsystems to be done via message-passing instead of programmatic interface method calls. Such architectures are so common that many programmers have come to regard message-passing as an end in and of itself, oblivious of the fact that it is nothing but a (poor) technical mechanism for accomplishing a certain architectural goal.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The architectural goal is to be able to perform general-purpose operations on invocations, for example routing the invocations according to configuration, or queuing the invocations for delivery on a different thread. In order to be able to do things like that, the invocations must first be expressed in a general-purpose form.&lt;/p&gt;
&lt;p&gt;Message-passing is simply the only general-purpose form that could be imagined by the pioneers who built the first asynchronous event-driven systems, or perhaps the only form that could readily be implemented using the programming languages available back then. However, in succeeding decades our thinking and our tools have advanced considerably, to the point where we now have much better ways of achieving things technically, so it might be worth taking a moment to re-examine the concept of message-passing.&lt;/p&gt;
&lt;p&gt;Here is a list of problems with message passing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Custom message classes have to be written and maintained, usually in large numbers, constituting nothing but incidental complexity which steers focus away from the class hierarchy of the problem domain, and towards the class hierarchy of the overelaborate inter-module communication apparatus.&lt;/li&gt;
&lt;li&gt;For each invocation, a message class needs to be instantiated, filled, and submitted, requiring several lines of custom-written code. This is also nothing but incidental complexity, diverting the attention of programmers from solving the problem at hand to negotiating the trifling technicalities of placing invocations.&lt;/li&gt;
&lt;li&gt;On the receiving end, each message must be examined in order to determine what kind of message it is, usually by means of an unwieldy switch statement, and its contents have to be extracted before any useful work can be done. Again, this is all incidental complexity, contributing nothing towards the end-goal of the software system; its sole purpose is to serve the message-passing bureaucracy.&lt;/li&gt;
&lt;li&gt;In order to reduce the total number of different message classes that need to be defined, programmers often reuse message classes for different purposes, filling different parts according to each purpose. This habit further increases the total amount of incidental complexity both at the sending and at the receiving end, and very often leads to bugs due to wrongly packed or wrongly unpacked messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, message-passing exists for the sole purpose of expressing invocations in a general-purpose form, but as it turns out, its use is laborious, and it tends to flood systems with debilitating amounts of incidental complexity.&lt;/p&gt;
&lt;p&gt;The most natural, simple, convenient, straightforward, robust, maintainable, and self-documenting paradigm for making and receiving invocations, which facilitates problem-solving instead of hindering it, is programmatic interface method calls. Unfortunately, interfaces are not general-purpose in and of themselves, because each interface constitutes a unique type, requiring custom-written code to place calls to it and custom-written code to receive calls for it, thus preventing us from applying general-purpose operations on it.  So, we have two separate and seemingly conflicting concerns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to express invocations in the most convenient way&lt;/li&gt;
&lt;li&gt;How to perform general-purpose operations on the invocations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ideally, separate concerns should not be mixed; the need to somehow apply general-purpose operations on invocations should not be dictating how we write code, and it should certainly not be making our job harder. Therein lies perhaps the biggest objection to message-passing: they are an onerous contrivance that programmers by themselves would never opt to use out of their own free will, but usually gets imposed on them by software architects who do not actually have to write code using this contrivance.&lt;/p&gt;
&lt;p&gt;Message-passing has enjoyed widespread use mainly due to the historical inability of application programmers to think in terms of abstractions: it is always possible, even in systems that require message-passing, to write all application code so that it never deals with any messages at all, and uses nothing but application-specific programmatic interfaces instead; the trick is to create packaging and unpackaging adaptors, where on the sending side we are simply invoking a programmatic interface which is implemented by a packaging adaptor that creates messages, packs them, and sends them off to be enqueued, while on the receiving side a corresponding unpackaging adaptor is fed with messages from the queue, unpacks them, and calls the corresponding implementation of the interface. Alas, this arrangement requires a modicum of abstract thinking, and application programmers are generally not into that sort of thing.&lt;/p&gt;
&lt;p&gt;Furthermore, if we bother creating such packaging and unpackaging adaptors, the realization quickly starts to sink-in that all the message classes are irrelevant; there is no need to define a special message class containing a separate field for each parameter of each method, because the only code that would ever deal with such a class would be the corresponding pair of packaging and unpackaging adaptors; so, the adaptors might as well use a single universal message class which simply stores all parameters in an array of object, and voila, the entire menagerie of message classes becomes entirely unnecessary.&lt;/p&gt;
&lt;p&gt;Thus, it becomes evident that what we are really after is not message-passing per se; it is some general-purpose form of expressing invocations, so that general-purpose operations can be performed on them, and some mechanism for converting back and forth between this general-purpose form and the natural form, which is programmatic interface method calls, so that we can write code naturally. Ideally, the conversion mechanism would be automatic and transparent, so that we do not even have to write those adaptors. Messages have only existed due to the historical absence of such an automatic and transparent mechanism.&lt;/p&gt;
&lt;p&gt;Fortunately, with modern reflecting, intermediate-code-based, just-in-time compiled programming languages, today we have at our disposal all that is necessary  to build such mechanisms. For more information see &lt;a 
   href=&#34;//localhost:1313/p/intertwine/&#34;
   &gt;Intertwine&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/on-messages-and-message-passing/media/grumpy-cat-message-passing.jpg&#34;
	width=&#34;493&#34;
	height=&#34;555&#34;
	srcset=&#34;//localhost:1313/p/on-messages-and-message-passing/media/grumpy-cat-message-passing_hu_292667b1799fe58a.jpg 480w, //localhost:1313/p/on-messages-and-message-passing/media/grumpy-cat-message-passing_hu_6ad615b796b41427.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;213px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Mandatory grumpy cat meme: &amp;ldquo;Message-Passing: it&amp;rsquo;s awful&amp;rdquo; by michael.gr&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: Conceptual illustration of message-passing, by michael.gr, based on original art by Youmena and Made from the Noun Project.&lt;/p&gt;</description>
        </item>
        <item>
        <title>On Test-Driven Development (TDD)</title>
        <link>//localhost:1313/p/on-test-driven-development-tdd/</link>
        <pubDate>Thu, 15 Dec 2022 17:16:45 +0000</pubDate>
        
        <guid>//localhost:1313/p/on-test-driven-development-tdd/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-test-driven-development-tdd/media/tdd.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;

Let me get one thing out of the way first: I am open to Test-Driven Development (TDD). I am not currently practicing it, because when I gave it a try some time ago it did not seem to resonate with me, but I do not have any objections to it in principle, so I might give it another try in the future. Let us just say that it was not love at first sight, but then again some relationships do take some time to warm up.&lt;/p&gt;
&lt;p&gt;Having said that, let me now express a few reasons why I am skeptical of TDD. The previous paragraph should have established that I am not trashing TDD, I am just expressing some reservations.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Reasons why I am skeptical of TDD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The religion effect&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Advocates of TDD say that it is the only proper way of developing software, and any other way is just plain wrong. If you do not like TDD, it is because you do not understand TDD. If you don&amp;rsquo;t practice TDD, you are being unprofessional. In other words, TDD seems to have gained religion status. Its disciples are saying that their way is the one true virtuous way, and if you are not following it then you should repent and change your evil ways. As a civilization we have been there, tried that, it did not work well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The &lt;em&gt;Life of Brian&lt;/em&gt; effect&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In &lt;em&gt;Thoughtworks - TW Hangouts: Is TDD dead?&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=z9quxZsLcfo&#34; target=&#34;_blank&#34;
   &gt;youtube&lt;/a&gt;) Kent Beck (the inventor of TDD) says starting at 13&#39;19&amp;rsquo;&amp;rsquo; that there exist problems which are not amenable to solving via TDD, and when he comes across such problems, he does not use TDD. Martin Fowler adds that for him, the most important thing is to deliver properly tested code, and whether you write the tests before the production code or the other way around is secondary, and a matter of personal preference. Note how these statements constitute blasphemy among hard-core practitioners of TDD. It appears that the prophets do not endorse the creed as fervently as the adherents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The stealth effect&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Obviously you must never commit failing tests; this means that others should never be able to tell, by looking at the commit history, whether you wrote the tests first or the production code first. This in turn means that TDD is not observable, and therefore not enforceable, so perhaps we should not be too worried about something which is, by its nature, each developer&amp;rsquo;s private business.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The envy effect&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even though Test-Driven Development is a way of developing software which is based on a special way of doing testing, people seem to feel compelled to use the TDD buzzword with every opportunity, so the term is quite often used as nothing but a synonym for just plain testing. I come across articles which mention TDD in the title, but when you read the text you discover that absolutely nothing in there applies to writing the tests before the production code; therefore, the article was not about TDD, it was about testing at large. This in turn is an indication that TDD is being mentioned more often than it is actually being practiced.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Are these observations damning about TDD? No; I am just saying.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;P.S. (2025-08-08)&lt;/p&gt;
&lt;p&gt;So, I just discovered a debate between John Ousterhout and Robert Martin (Uncle Bob) about differences between John&amp;rsquo;s book &amp;ldquo;A Philosophy of Software Design&amp;rdquo; and Bob&amp;rsquo;s book &amp;ldquo;Clean Code&amp;rdquo;. The two men decided to hold the discussion mostly in the form of writing, and they posted it as a markdown document on GitHub.&lt;/p&gt;
&lt;p&gt;The debate is somewhat lengthy, and it is up to you to decide whether it is worth reading in its entirety, but here is a direct link into the TDD section of the debate:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/johnousterhout/aposd-vs-clean-code?tab=readme-ov-file#test-driven-development&#34; target=&#34;_blank&#34;
   &gt;https://github.com/johnousterhout/aposd-vs-clean-code?tab=readme-ov-file#test-driven-development&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(This is, by the way, a very interesting format for holding a debate.)&lt;/p&gt;
&lt;p&gt;It is worth noting that there is no overlap between that debate and this post of mine about TDD; the two men did not touch upon the issues I go over in my post, and my post does not touch upon the issues that were debated by the two men.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: Conceptual illustration of Test-Driven Development, by michael.gr&lt;/p&gt;</description>
        </item>
        <item>
        <title>Intertwine</title>
        <link>//localhost:1313/p/intertwine/</link>
        <pubDate>Sun, 11 Dec 2022 16:18:00 +0000</pubDate>
        
        <guid>//localhost:1313/p/intertwine/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/intertwine/media/intertwine-logo.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;abstract&#34;&gt;Abstract
&lt;/h3&gt;&lt;p&gt;A mechanism is described for automatically converting method invocations of any programmatic interface into a single-method &lt;em&gt;&lt;strong&gt;normal form&lt;/strong&gt;&lt;/em&gt; and converting back to invocations of the original interface, so that general-purpose operations can be performed on the normal form without explicit knowledge of the interface being invoked. Implementations are provided for C# and for Java.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The Problem
&lt;/h3&gt;&lt;p&gt;When creating software systems of nontrivial complexity we often need to be able to apply certain operations on the invocations that are being made between certain components. Examples of such operations are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Logging:&lt;/strong&gt; Recording information about each invocation being made.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multicasting:&lt;/strong&gt; Delivering a single invocation to multiple recipients.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remoting:&lt;/strong&gt; Placing invocations across machine boundaries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Desynchronization:&lt;/strong&gt; Queuing invocations for later execution, possibly on a different thread.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Synchronization:&lt;/strong&gt; Obtaining and holding a lock for the duration of the invocation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transformation:&lt;/strong&gt; Converting between invocation formats, e.g. method calls to REST and back.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ordinarily, the components doing the invocations are application-specific, and the interfaces between them are also application-specific, but the operators that we want to interject between them are general-purpose, so they need to remain agnostic of the application-specific details of the invocations, in a way analogous to how a general-purpose sorting algorithm is agnostic of the application-specific format of the data it sorts.&lt;/p&gt;
&lt;p&gt;Therefore, we need some way of expressing application-specific invocations in a general-purpose form.&lt;/p&gt;
&lt;h3 id=&#34;prior-art&#34;&gt;Prior Art
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Messages and message-passing:&lt;/strong&gt; The mechanism historically used for expressing invocations in a general-purpose form is message-passing. Unfortunately, its use is laborious, and it floods systems with debilitating amounts of incidental complexity. For details, see &lt;a 
   href=&#34;//localhost:1313/p/on-messages-and-message-passing/&#34;
   &gt;On messages and message-passing&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Parameterless lambdas:&lt;/strong&gt; Application-specific method calls can be wrapped inside parameterless lambdas, and since all parameterless lambdas look the same, they can be handled by general-purpose code which may for example add them to a queue, and later dequeue and invoke them.
Unfortunately:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The wrapping of each application-specific method call inside a parameterless lambda must happen at each call site, which is cumbersome and reveals details about the underlying invocation delivery mechanism.&lt;/li&gt;
&lt;li&gt;The evaluation of the parameters that are passed to the application-specific method happens at the moment that the lambda makes the call, not at the moment that the lambda is constructed, which can lead to insidious bugs even if the evaluations have no side-effects. (And &lt;em&gt;woe to you on earth and sea&lt;/em&gt; if they do have side-effects.)&lt;/li&gt;
&lt;li&gt;The parameterless lambda completely hides the values of the parameters that are being passed to the application-specific method, as well as the identity of the method being invoked. Thus, parameterless lambdas cannot be used in scenarios that require information about each call being made.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynamic Proxies:&lt;/strong&gt; Both in Java and in C# there exist mechanisms that can be used to convert application-specific invocations to a general-purpose form, but not the other way around. These are &lt;code&gt;java.lang.reflect.Proxy&lt;/code&gt; for Java, and various libraries like Castle&amp;rsquo;s and LinFu for C#. The reverse operation can be achieved using reflection, but this involves a round-trip to native-land, which incurs a heavy performance penalty. Furthermore, these mechanisms suffer from additional issues, such as messing with exceptions, doing more work than necessary, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-solution&#34;&gt;The Solution
&lt;/h3&gt;&lt;p&gt;In order to be able to perform general-purpose operations on application-specific invocations we need a mechanism for converting application-specific invocations into a general-purpose form and back, so that the operators can act upon the general-purpose form. What follows is a description of such a mechanism, which I call &lt;em&gt;&lt;strong&gt;Intertwine&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Intertwine introduces a general-purpose form for expressing invocations, which is called &lt;em&gt;&lt;strong&gt;the normal form of invocations&lt;/strong&gt;&lt;/em&gt;, and is represented by a single method of the following signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MethodKey&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;In C#, &lt;code&gt;AnyCall&lt;/code&gt; would be a &lt;em&gt;delegate.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;In Java, &lt;code&gt;AnyCall&lt;/code&gt; would be a &lt;em&gt;single-method interface&lt;/em&gt;, otherwise known as a &lt;em&gt;functional interface&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This method signature represents the fact that every conceivable interface method call can be fully described in terms of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A return value, of the common denominator type &lt;code&gt;Object&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A unique key which identifies which method of the interface is being invoked.&lt;/li&gt;
&lt;li&gt;An array containing arguments, of the common denominator type &lt;code&gt;Object&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that the method identifier is &lt;code&gt;MethodKey&lt;/code&gt; in the Java implementation, but &lt;code&gt;int selector&lt;/code&gt; in the C# implementation. This is because the Java implementation was made a considerable time after the C# implementation, and is therefore a bit more advanced.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;MethodKey&lt;/code&gt; used in the Java implementation allows the caller and the callee to unambiguously identify methods even in situations where binary compatibility between the caller and the callee is not guaranteed, and therefore an integer method index does not necessarily refer to the same method on both the caller and the callee.&lt;/p&gt;
&lt;p&gt;The Java implementation of intertwine provides efficient means of converting back and forth between a &lt;code&gt;MethodKey&lt;/code&gt; and any of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The reflection &amp;ldquo;Method&amp;rdquo; object of the method. (This is &lt;code&gt;java.lang.reflect.Method&lt;/code&gt; in Java, or &lt;code&gt;System.Reflection.MethodInfo&lt;/code&gt; in C#.)&lt;/li&gt;
&lt;li&gt;The string representation of the prototype of the method.&lt;/li&gt;
&lt;li&gt;The zero-based method index of the method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The sample code that follows was written for C#, so it uses an &lt;code&gt;int selector&lt;/code&gt;  instead of &lt;code&gt;MethodKey key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For methods of &lt;code&gt;void&lt;/code&gt; return type the value returned by AnyCall is unspecified. (It will in all likelihood be &lt;code&gt;null&lt;/code&gt;, but nobody should rely on this.)&lt;/li&gt;
&lt;li&gt;Value types (primitives) are boxed and unboxed as necessary.&lt;/li&gt;
&lt;li&gt;Certain features such as the &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; parameters in C#, receive special handling.&lt;/li&gt;
&lt;li&gt;Other features such as properties, indexers, virtual events, etc. are nothing but syntactic sugar which is implemented using regular method calls under the hood, so they require no special handling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the problem can now be restated as follows:&lt;/p&gt;
&lt;p&gt;How to convert any interface method invocation to an invocation of an AnyCall method, and how to convert back from an invocation of an AnyCall method to an invocation of the original interface method.&lt;/p&gt;
&lt;p&gt;For this, Intertwine introduces two new concepts: &lt;em&gt;&lt;strong&gt;Entwiners&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;Untwiners&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An Entwiner of interface &lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/em&gt; is a class which exposes (implements) interface &lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/em&gt; and delegates to an instance of &lt;em&gt;AnyCall&lt;/em&gt;. It can also be thought of as a &lt;em&gt;normalizer&lt;/em&gt; or &lt;em&gt;generalizer&lt;/em&gt; or &lt;em&gt;multiplexer.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;An Untwiner of interface &lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/em&gt; is a class which exposes an &lt;em&gt;AnyCall&lt;/em&gt; method and delegates to an instance of &lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/em&gt;. It can also be thought of as a &lt;em&gt;denormalizer&lt;/em&gt; or &lt;em&gt;specializer&lt;/em&gt; or &lt;em&gt;demultiplexer.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More specifically:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The entwiner of &lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/em&gt; does the following:
&lt;ul&gt;
&lt;li&gt;Accepts an instance of &lt;code&gt;Anycall&lt;/code&gt; as a constructor parameter and stores it in a &lt;code&gt;final&lt;/code&gt;/&lt;code&gt;readonly&lt;/code&gt; field.&lt;/li&gt;
&lt;li&gt;Implements each method of &lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/em&gt; as follows:
&lt;ul&gt;
&lt;li&gt;Packs the parameters that were passed to the method into an array of &lt;code&gt;Object&lt;/code&gt;, performing any boxing necessary.&lt;/li&gt;
&lt;li&gt;Invokes anyCall passing it a key that uniquely identifies the method, and the array of parameters.&lt;/li&gt;
&lt;li&gt;Returns, possibly after unboxing, whatever was returned by the invocation of anyCall.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The untwiner of &lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/em&gt; performs the opposite and complementary operation of the entwiner, namely:
&lt;ul&gt;
&lt;li&gt;Accepts an instance of &lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/em&gt; as a constructor parameter and stores it in a &lt;code&gt;final&lt;/code&gt;/&lt;code&gt;readonly&lt;/code&gt; field.&lt;/li&gt;
&lt;li&gt;Implements the &lt;code&gt;anycall&lt;/code&gt; method of the &lt;code&gt;Anycall&lt;/code&gt; interface as follows:&lt;/li&gt;
&lt;li&gt;It uses the supplied &lt;code&gt;MethodKey&lt;/code&gt; to determine which method of  &lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/em&gt; is being invoked, and for each method it does the
following:
&lt;ul&gt;
&lt;li&gt;Unpacks the parameters from the array of &lt;code&gt;Object&lt;/code&gt;, performing any unboxing necessary.&lt;/li&gt;
&lt;li&gt;Invokes the method of &lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/em&gt;, passing it the unpacked parameters.&lt;/li&gt;
&lt;li&gt;Returns, possibly after boxing, whatever was returned by the method, or &lt;code&gt;null&lt;/code&gt; if the method was of &lt;code&gt;void&lt;/code&gt; return type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;a-hand-crafted-implementation&#34;&gt;A hand-crafted implementation
&lt;/h3&gt;&lt;p&gt;Before we look at the automatic creation of entwiners and untwiners, let us take a look at an example of how we would implement an entwiner and untwiner for a certain interface if we were to do it by hand.&lt;/p&gt;
&lt;p&gt;Let us consider the following interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;IFooable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Moo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Boo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;And let us consider the following class implementing that interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FooImplementation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Moo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;i: &amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Boo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;s: &amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;, b: &amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;And then let us consider the following method which invokes the interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InvokeFoo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fooable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;fooable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Moo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;fooable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Boo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fubar!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The InvokeFoo method can be directly hooked up to an instance of the implementing class in a completely conventional way as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Run1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fooable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FooImplementation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;InvokeFoo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fooable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now, an entwiner for our IFooable interface could be hand-crafted as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;EntwinerForFooable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;anycall&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;anycall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Moo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Boo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Whereas an untwiner for IFooable could be hand-crafted as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UntwinerForFooable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Target&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;selector&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Moo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Boo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InvalidOperationException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;With the above classes, we can now write the following piece of awesomeness:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Run2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fooable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FooImplementation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;untwiner&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UntwinerForFooable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fooable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entwiner&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EntwinerForFooable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;untwiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;InvokeFoo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entwiner&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Note that &lt;code&gt;Run2()&lt;/code&gt; has exactly the same end-result as &lt;code&gt;Run1()&lt;/code&gt;, but there is a big difference in what goes on under the hood: all outbound interface method calls from the &lt;code&gt;InvokeFoo&lt;/code&gt; function are now arriving at the entwiner, which converts them to &lt;code&gt;AnyCall&lt;/code&gt; invocations, which are then forwarded to the untwiner, which converts them back to &lt;code&gt;IFooable&lt;/code&gt; calls, which are then forwarded to our &lt;code&gt;FooImplementation&lt;/code&gt; object. This means that if we wanted to, we could interject a chain of objects between the entwiner and the untwiner, each one of these objects implementing an &lt;code&gt;AnyCall&lt;/code&gt; delegate and invoking another &lt;code&gt;AnyCall&lt;/code&gt; delegate, thus enabling us to perform any conceivable operation upon those invocations without having any built-in knowledge of the &lt;code&gt;IFooable&lt;/code&gt; interface.&lt;/p&gt;
&lt;p&gt;As the complexity of the interface increases, and as additional subtleties come into the picture, such as parameters passed with ref or out, coding entwiners and untwiners by hand can become very tedious and error-prone, so, obviously, we would like to have it automated.&lt;/p&gt;
&lt;h3 id=&#34;automating-it-with-reflection&#34;&gt;Automating it with reflection
&lt;/h3&gt;&lt;p&gt;It is possible to write a general-purpose untwiner that does its job using reflection, but reflection is slow, so the result is going to suffer performance-wise. For the sake of completeness, here is a possible implementation for a general-purpose reflecting untwiner using reflection:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ReflectingUntwiner&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//WARNING: SLOW AS MOLASSES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Reflection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MethodInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Methodinfos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;twinee&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Target&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Methodinfos&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;twinee&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetMethods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BindingFlags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Public&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;BindingFlags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NonPublic&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BindingFlags&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instance&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Methodinfos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Invoke&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Note that untwiner creation could be optimized by caching the MethodInfos of frequently used types, but that&amp;rsquo;s not the problem; the real bottleneck is the &lt;code&gt;MethodInfo.Invoke()&lt;/code&gt; call. If you put a breakpoint on the target and examine the stack, you will see that between the &lt;code&gt;AnyCall&lt;/code&gt; frame and the target frame there will be a managed-to-native transition and a native-to-managed transition, which is something to be avoided at all costs.&lt;/p&gt;
&lt;p&gt;Also note: it is impossible to write a reflecting entwiner.&lt;/p&gt;
&lt;h3 id=&#34;automating-it-with-intertwine&#34;&gt;Automating it with Intertwine
&lt;/h3&gt;&lt;p&gt;The Intertwine library will automatically generate for us a pair of optimally-performing entwiner and untwiner classes for any interface. These classes are generated at runtime, so no extra build step is needed. To accomplish this, the C# implementation of Intertwine generates MSIL and creates assemblies from it; the Java Implementation generates bytecode and creates classes from it.&lt;/p&gt;
&lt;p&gt;The following method of the &lt;code&gt;Intertwine.Factory&lt;/code&gt; class creates an entwiner:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewEntwiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;anycall&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;For &lt;code&gt;T&lt;/code&gt; we give the type of our interface, and for &lt;code&gt;anycall&lt;/code&gt; we give a delegate of ours that will be receiving calls. This method returns a reference to an implementation of our interface, provided by an Entwiner-derived class that has been dynamically generated specifically for our interface, and instantiated to work with the given &lt;code&gt;AnyCall&lt;/code&gt; instance. For every call received through a method of our interface, this special entwiner will be marshalling the arguments and forwarding the call to our &lt;code&gt;AnyCall&lt;/code&gt; delegate.&lt;/p&gt;
&lt;p&gt;The following method of the &lt;code&gt;Intertwine.Factory&lt;/code&gt; class creates an untwiner:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NewUntwiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;target&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;For target we give an implementation of our interface, and what we get is a reference to an &lt;code&gt;AnyCall&lt;/code&gt; delegate implemented by an Untwiner-derived class that was dynamically generated specifically for our interface, and instantiated to work with the given target instance. For every call received through the &lt;code&gt;AnyCall&lt;/code&gt; delegate, this special untwiner will be unmarshalling the arguments and forwarding the call to the appropriate method of our target interface.&lt;/p&gt;
&lt;p&gt;So, with the dynamically generated entwiners and untwiners we can now do the following epicness:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Run3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fooable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FooImplementation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;AnyCall&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;untwiner&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Intertwine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Factory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NewUntwiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fooable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entwiner&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Intertwine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Factory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NewEntwiner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IFooable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;untwiner&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;InvokeFoo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;entwiner&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The actual implementation of &lt;code&gt;Intertwine.Factory&lt;/code&gt; is pretty straightforward, so there is not much to talk about. As one might expect, the generated types are cached. A static factory method is generated with each generated type, for instantiating the type, so as to avoid having to call &lt;code&gt;Activator.CreateInstance()&lt;/code&gt;, because that method uses reflection. The static factory method is invoked using &lt;code&gt;Delegate.Invoke()&lt;/code&gt;, which does not use reflection. You will find the code-generating code choke-full of comments, explaining exactly what each emitted opcode does.&lt;/p&gt;
&lt;p&gt;Intertwine for C#:
&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/IntertwineCSharp&#34; target=&#34;_blank&#34;
   &gt;https://github.com/mikenakis/IntertwineCSharp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intertwine for Java:
&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/Public/tree/master/intertwine&#34; target=&#34;_blank&#34;
   &gt;https://github.com/mikenakis/Public/tree/master/intertwine&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;appendix-an-example-interface-multicasts-events-in-c&#34;&gt;Appendix: An example: Interface multicasts (events) in C#
&lt;/h3&gt;&lt;p&gt;If you are still with me you may be thinking that it is about time for a demonstration. What follows is not just an example, but actually a complete and useful application of intertwine which you may be able to start utilizing in your projects right away.&lt;/p&gt;
&lt;p&gt;The C# language has built-in support for multicasts (events) but only delegates can be used as event observers. There are many cases, however, where interfaces would be more suitable. Java does not even have built-in support for multicasts, so programmers generally have to write their own, using single-method (functional) interfaces. In either language, if you want to achieve multicasting on multi-method interfaces, you have to rewrite the multicasting code for every single method of every single interface.&lt;/p&gt;
&lt;p&gt;Consider the following interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ITableNotification&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RowInserted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fields&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fields&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RowDeleted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Key&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RowUpdated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Key&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Fields&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fields&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;And consider the following hypothetical (not actually possible) way of using it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ITableNotification&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableNotificationEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;tableNotificationEvent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_observer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;tableNotificationEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RowUpdated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fields&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The above does not work because events in C# work only with delegates, not with interfaces. However, with Intertwine, the next best thing is actually possible:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tableNotificationEventManager&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InterfaceEventManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ITableNotifcation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;tableNotificationEventManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RegisterObserver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_observer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;tableNotificationEventManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Trigger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RowUpdated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fields&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This approach is self-explanatory, and the amount of code you have to write in order to use it is optimal; you do not need to deal with anything more than what is necessary, and if you ever add a notification, it will be a new interface method, so all existing implementations of that interface will automatically be flagged by the compiler as incomplete. With the help of Intertwine, this event manager is implemented in just 150 lines of code, including extensive comments.&lt;/p&gt;
&lt;h3 id=&#34;end-notes&#34;&gt;End-notes
&lt;/h3&gt;&lt;p&gt;Back in 2011 I posted a question on stackoverflow.com, titled &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/questions/6154205/multiplexing-interface-method-calls-into-a-single-delegate-and-demultiplexing&#34; target=&#34;_blank&#34;
   &gt;Multiplexing interface method calls into a single delegate and demultiplexing&lt;/a&gt; asking if anyone knows of anything like Intertwine, but nobody did, so I built it myself.&lt;/p&gt;
&lt;p&gt;This post supersedes the original post from 2011: &lt;a 
   href=&#34;//localhost:1313/p/intertwine-normalizing-interface-invocations/&#34;
   &gt;Intertwine: Normalizing Interface Invocations&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: The Intertwine Logo, by michael.gr&lt;/p&gt;</description>
        </item>
        <item>
        <title>Jargon</title>
        <link>//localhost:1313/p/jargon/</link>
        <pubDate>Mon, 05 Dec 2022 10:48:33 +0000</pubDate>
        
        <guid>//localhost:1313/p/jargon/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/jargon/media/jargon.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;p&gt;The most awesome Stack Overflow question ever posted was deemed unsuitable for the site, so it was not just closed; it was deleted. It does not exist anymore. (See &lt;a 
   href=&#34;//localhost:1313/p/jeff-atwood-building-social-software-for-the-antisocial/&#34;
   &gt;Jeff Atwood: Building Social Software for the Antisocial&lt;/a&gt;.) The title of the question was: &amp;ldquo;New programming jargon you coined?&amp;rdquo; and as you might imagine, it received hundreds of answers.  Most of the answers would make you laugh; some would make you laugh &lt;em&gt;hard&lt;/em&gt;; some would have you in stitches.&lt;/p&gt;
&lt;p&gt;Jeff Atwood saved the top 30 or so of those answers in his blog: &lt;a class=&#34;external&#34; 
   href=&#34;https://blog.codinghorror.com/new-programming-jargon/&#34; target=&#34;_blank&#34;
   &gt;Coding Horror - New Programming Jargon&lt;/a&gt; (though these are not even the funniest ones,) and it seems like the rest of the answers are lost forever.&lt;/p&gt;
&lt;p&gt;Or are they?&lt;/p&gt;
&lt;p&gt;Well, actually, thanks to &lt;strong&gt;archive.org&lt;/strong&gt;, humanity will continue to have access to this treasure of mirth for all eternity.&lt;/p&gt;
&lt;p&gt;Here is the link: &lt;a class=&#34;external&#34; 
   href=&#34;https://web.archive.org/web/20120123121524/http://stackoverflow.com/questions/2349378/new-programming-jargon-you-coined&#34; target=&#34;_blank&#34;
   &gt;archive.org - stackoverflow.com - New programming jargon you coined?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; First read the question, then go to the last answer and start reading the answers back-to-front after skipping those with scores of -1, 0, and 1. Make sure you have an hour to spare.&lt;/p&gt;
&lt;p&gt;Here is some programming jargon which I have either coined, or picked up and doing my best to increase its popularity:&lt;/p&gt;
&lt;h3 id=&#34;magical-incantation&#34;&gt;Magical Incantation
&lt;/h3&gt;&lt;p&gt;Any code statement, function argument, command line, formulation, or construct that is necessary to get something to work as intended, which one could have never guessed, and for which absolutely no hint was provided. Also, any such construct which, after being put to use, one could never infer what it accomplishes by just looking at it.  Of course, in theory, everything is understandable if you read the book, but a) #AintNoBodyGotNoTimeFoDat, and b) are you seriously expecting programmers to memorize entire books of jargon?&lt;/p&gt;
&lt;h3 id=&#34;pearl&#34;&gt;PEARL
&lt;/h3&gt;&lt;p&gt;A keyword that I add to source code comments that explain weird, unexpected, usually lame, sometimes incredibly lame behavior of other people&amp;rsquo;s software that my software has to account for and work around.&lt;/p&gt;
&lt;h3 id=&#34;get-run-over-by-a-crocodile&#34;&gt;Get run over by a crocodile
&lt;/h3&gt;&lt;p&gt;Refers to the possibility that the programmer who has written all of the software that a company depends on might one day quit working for that company or be otherwise incapable of continuing with their duties. Combination of &amp;ldquo;get run over by a bus&amp;rdquo; and &amp;ldquo;get eaten by a crocodile&amp;rdquo;, similar to &amp;ldquo;rocket surgery&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;search-and-destroy&#34;&gt;Search and destroy
&lt;/h3&gt;&lt;p&gt;Refers to a botched &amp;ldquo;search and replace&amp;rdquo; operation that seriously fouled up the entire source code base.&lt;/p&gt;
&lt;h3 id=&#34;wtfpm&#34;&gt;WTFPM
&lt;/h3&gt;&lt;p&gt;What-The-Fucks-Per-Minute &amp;ndash; a measure of how smoothly (or not) code review is progressing.&lt;/p&gt;
&lt;h3 id=&#34;blasphemy&#34;&gt;Blasphemy
&lt;/h3&gt;&lt;p&gt;Any choice which, although technically valid, nonetheless feels wrong, like a buffer size which is not a power of two, a raster image there where a vector image would do equally well, etc.&lt;/p&gt;
&lt;h3 id=&#34;hail-mary-initialization&#34;&gt;Hail-Mary Initialization
&lt;/h3&gt;&lt;p&gt;The cargo-cult programming practice of pre-initializing a local variable with some meaningless value which is then overwritten with some other value in all execution paths.  See &lt;a 
   href=&#34;//localhost:1313/p/hail-mary-local-variable-initialization/&#34;
   &gt;Hail-Mary Initialization&lt;/a&gt;.&lt;/p&gt;</description>
        </item>
        <item>
        <title>50 things expected of developers</title>
        <link>//localhost:1313/p/50-things-expected-of-developers/</link>
        <pubDate>Wed, 12 Oct 2022 05:54:06 +0000</pubDate>
        
        <guid>//localhost:1313/p/50-things-expected-of-developers/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/50-things-expected-of-developers/images/mike_acton.png&#34;
	width=&#34;437&#34;
	height=&#34;894&#34;
	srcset=&#34;//localhost:1313/p/50-things-expected-of-developers/images/mike_acton_hu_1910536a8ea9f857.png 480w, //localhost:1313/p/50-things-expected-of-developers/images/mike_acton_hu_c5c412b73d2c9005.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;48&#34;
		data-flex-basis=&#34;117px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Games industry veteran Mike Acton gave talk/rant at Game Developers&amp;rsquo; Conference (GDC) 2019 where he listed 50 things he expects of developers: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=cV5HArLYajE&#34; target=&#34;_blank&#34;
   &gt;https://www.youtube.com/watch?v=cV5HArLYajE&lt;/a&gt;  This list was transcribed by Adam Johnson and posted here: &lt;a class=&#34;external&#34; 
   href=&#34;https://adamj.eu/tech/2022/06/17/mike-actons-expectations-of-professional-software-engineers/&#34; target=&#34;_blank&#34;
   &gt;https://adamj.eu/tech/2022/06/17/mike-actons-expectations-of-professional-software-engineers/&lt;/a&gt; and I am copying it here for posterity.&lt;/p&gt;
&lt;p&gt;I found this list useful as reference material; some of the items on this list do not apply to my job because I rarely do anything especially performance-oriented nowadays, and some of the items on the list are good to always have in mind but subject to the programmer&amp;rsquo;s own judgement, on a case by case basis, whether they should be practiced or not.&lt;/p&gt;
&lt;p&gt;Here it is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I can articulate precisely what problem I am trying to solve.
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s all too easy to get stuck in the weeds and lose track of why you&amp;rsquo;re doing what you&amp;rsquo;re doing. Keep top of mind what the actual end goal is do, and you might spot an alternative path.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I have articulated precisely what problem I am trying to solve.
&lt;ul&gt;
&lt;li&gt;Communicate the problem &amp;ldquo;out loud&amp;rdquo; to other team members, your product manager, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I have confirmed that someone else can articulate what problem I am trying to solve.
&lt;ul&gt;
&lt;li&gt;Communication! Ensure your team is all on the same page. Make sure your understanding of the problem is complete.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate why my problem is important to solve.
&lt;ul&gt;
&lt;li&gt;If you solve the problem you&amp;rsquo;re working on, who benefits, and how much?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate how much my problem is worth solving.
&lt;ul&gt;
&lt;li&gt;If you say it&amp;rsquo;s worth &amp;ldquo;as long as it takes&amp;rdquo;… Mike does not have friendly words for you. For any problem there&amp;rsquo;s a maximum amount of time and effort worth investing in solving it. At least have some idea of the upper bound.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I have a Plan B in case my solution to my current problem doesn&amp;rsquo;t work.
&lt;ul&gt;
&lt;li&gt;Imagine you&amp;rsquo;re days or hours before the deadline, and you can tell that completing Plan A will be impossible. What do you do instead? Maybe you have a simplified algorithm, or you can disable a certain subsystem. Have more than one plan.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I have already implemented my Plan B in case my solution to my current problem doesn&amp;rsquo;t work.
&lt;ul&gt;
&lt;li&gt;Mitigate risk by writing the backup version first. This means you always have a safety net and you can learn more about the problem space in order to iterate on Plan A.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate the steps required to solve my current problem.
&lt;ul&gt;
&lt;li&gt;Programming only works when you break down problems into manageable chunks. Have a sketch of the steps to the end state before you begin.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can clearly articulate unknowns and risks associated with my current problem.
&lt;ul&gt;
&lt;li&gt;There are always going to be things you don&amp;rsquo;t know. You should know where they are in your plan, so you can manage them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I have not thought or said &amp;ldquo;I can just make up the time&amp;rdquo; without immediately talking to someone.
&lt;ul&gt;
&lt;li&gt;Say it&amp;rsquo;s Wednesday, you have a project due on Friday, and you get some new task dropped on your lap. You think &amp;ldquo;I&amp;rsquo;ll do the new thing now, and make up the time for the original task by Friday&amp;rdquo;… mistake! Communicate about the conflict on Wednesday. Your product manager will help manage the timing and risk.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I write a &amp;ldquo;framework&amp;rdquo; and have used it multiple times to actually solve a problem it was intended to solve.
&lt;ul&gt;
&lt;li&gt;If you&amp;rsquo;re writing a tool of some kind, you should verify it works in practice. Too often people create something in isolation and it doesn&amp;rsquo;t end up delivering in the real world.&lt;/li&gt;
&lt;li&gt;(This is how Django came to be: from a real team making real websites, on deadlines!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate what the test for completion of my current problem is.
&lt;ul&gt;
&lt;li&gt;If you don&amp;rsquo;t know when to stop, you might find yourself going down rabbit holes, chasing unimportant marginal gains.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate the hypothesis related to my problem and how I could falsify it.
&lt;ul&gt;
&lt;li&gt;If a hypothesis cannot be proven wrong, there&amp;rsquo;s no knowledge to be gained. As Karl Popper showed, science only works through falsification.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate the (various) latency requirements for my current problem.
&lt;ul&gt;
&lt;li&gt;Any time you write code, you should consider when the output data is required. Not every caller needs output data instantly, and nor do you have an unbounded amount of time to perform everything. At least get an idea of the sensible bounds.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate the (various) throughput requirements for my current problem.
&lt;ul&gt;
&lt;li&gt;How much data needs to come through the system? How many bytes, requests, or frames per second?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate the most common concrete use case of the system I am developing.
&lt;ul&gt;
&lt;li&gt;You should know what actual users of your system will actually be doing most of the time. Having a vague idea doesn&amp;rsquo;t help, since knowing which patterns are common informs which way to write a given piece of code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I know the most common actual, real-life values of the data I am transforming.
&lt;ul&gt;
&lt;li&gt;Beyond use cases, you should know the data inside the system. For example, if your function works with integers, you&amp;rsquo;d probably write it quite differently if 99% of the values are 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I know the acceptable ranges of values of all the data I am transforming.
&lt;ul&gt;
&lt;li&gt;Computer systems always have limits. Know the ranges for the data types you&amp;rsquo;re working with (and enforce them).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate what will happen when (somehow) data outside that range enters the system.
&lt;ul&gt;
&lt;li&gt;Murphy&amp;rsquo;s Law says &amp;ldquo;anything that can go wrong will go wrong&amp;rdquo;. Know how your system will behave in such cases, and handle such problems if necessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate a list of input data into my system roughly sorted by likelihood.
&lt;ul&gt;
&lt;li&gt;Have an idea of the space of possible data, what&amp;rsquo;s most likely, second most likely, etc. Code appropriately, for example checking for common error conditions first.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I know the frequency of change of the actual, real-life values of the data I am transforming.
&lt;ul&gt;
&lt;li&gt;Reason about the frequency of change and figure out how often you&amp;rsquo;ll want to calculate derived values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I have (at least partially) read the (available) documentation for the hardware, platform, and tools I use most commonly.
&lt;ul&gt;
&lt;li&gt;Read the friendly manual! Go a step beyond day-to-day reference, and try reading the full documentation to gain a deep understanding.&lt;/li&gt;
&lt;li&gt;(Jens Oliver Meiert calls reading the HTML specification the Web Developer&amp;rsquo;s Pilgrimage.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I have sat and watched an actual user of my system.
&lt;ul&gt;
&lt;li&gt;Watching users can massively break shift your view of how your software works. Do it!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I know the slowest part of the users of my system&amp;rsquo;s workflow with high confidence.
&lt;ul&gt;
&lt;li&gt;Any workflow has a bottleneck. Make sure you know what it is so you can focus efforts there, if need be.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I know what information users of my system will need to make effective use of the solution.
&lt;ul&gt;
&lt;li&gt;Think about what documentation or data users need to understand and use your solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate the finite set of hardware I am designing my solution to work for.
&lt;ul&gt;
&lt;li&gt;Software requires hardware. Know what hardware your program targets, such as:
&lt;ul&gt;
&lt;li&gt;CPU architectures&lt;/li&gt;
&lt;li&gt;Minimum requirements for memory, CPU speed, and network bandwidth&lt;/li&gt;
&lt;li&gt;Input devices&lt;/li&gt;
&lt;li&gt;Output devices&lt;/li&gt;
&lt;li&gt;The environment the hardware runs in (e.g. data centre or living room)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate how that set of hardware specifically affects the design of my system.
&lt;ul&gt;
&lt;li&gt;If you&amp;rsquo;re targeting low end devices, how do you ensure you don&amp;rsquo;t exhaust memory? If some users don&amp;rsquo;t have pointing devices, how do you accommodate them?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I have recently profiled the performance of my system.
&lt;ul&gt;
&lt;li&gt;If you&amp;rsquo;re developing a local app, run profiling tools regularly to gain an idea of performance over time. With server based programs, you can install an APM (Application Performance Monitoring) tool in production and have continuous profiling data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I have recently profiled memory usage of my system.
&lt;ul&gt;
&lt;li&gt;Make sure you aren&amp;rsquo;t wasting memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I have used multiple different profiling methods to measure the performance of my system.
&lt;ul&gt;
&lt;li&gt;There&amp;rsquo;s no perfect profiling tool, so know how to use more than one.&lt;/li&gt;
&lt;li&gt;For example, some great Python profilers are cProfile, py-spy, Austin, Scalene, Fil, and memray. They all have different characteristics and complement each other.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I know how to significantly improve the performance of my system without changing the input/output interface of the system.
&lt;ul&gt;
&lt;li&gt;Do you know the next step to optimize your system? You don&amp;rsquo;t have to do it right now, as it may not be worth it, but you should have an idea what you&amp;rsquo;d do next to make your code faster. For example, use a faster but less convenient data structure, or convert a hot function into a faster language (such as Python to C with Cython).&lt;/li&gt;
&lt;li&gt;This should also guide you to designing interfaces that are optimizable in the first place. For example, don&amp;rsquo;t commit to returning expensive-to-compute results immediately, but instead return a promise.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I know specifically how I can and will debug live release builds of my work when they fail.
&lt;ul&gt;
&lt;li&gt;Bugs are inevitable. You should know the tools that will let you work through those problems in production, such as logs, debuggers, or a live shell.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I know what data I am reading as part of my solution and where it comes from.
&lt;ul&gt;
&lt;li&gt;Know where the data comes from, in what format, and how you can read it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I know how often I am reading data I do not need as part of my solution.
&lt;ul&gt;
&lt;li&gt;Data access is rarely optimal. You&amp;rsquo;ll often be moving data that&amp;rsquo;s not required for your solution, such as unnecessary fields or wrapper objects. If you don&amp;rsquo;t know about this waste, you can&amp;rsquo;t reason about whether it&amp;rsquo;s worth the overhead or not.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I know what data I am writing as part of my solution and where it is used.
&lt;ul&gt;
&lt;li&gt;All output data is intended for use by a human or another program. Be organized enough to know what the downstream consumers of your output are.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I know how often I am writing data I do not need to as part of my solution.
&lt;ul&gt;
&lt;li&gt;Data output is also rarely optimal. Are you frequently writing out data that hasn&amp;rsquo;t changed? Are you writing many fields when only one is used downstream? Again, know about it so you can reason about it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate how all the data I use is laid out in memory.
&lt;ul&gt;
&lt;li&gt;Many programming languages and frameworks can handle memory for you, but that doesn&amp;rsquo;t abdicate you of responsibility. Know how your tools lay out memory, so you can tell when another approach makes sense.&lt;/li&gt;
&lt;li&gt;For example, in Python most objects are based on dictionaries, so you should have a solid understanding of how they work, and alternatives like slotted classes or arrays.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I never use the phrase &amp;ldquo;platform independent&amp;rdquo; when referring to my work.
&lt;ul&gt;
&lt;li&gt;Any system depends on many things below it. Know what they are.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I never use the phrase &amp;ldquo;future proof&amp;rdquo; when referring to my work.
&lt;ul&gt;
&lt;li&gt;Future-proofing is &amp;ldquo;100% a fool&amp;rsquo;s errand&amp;rdquo;. &amp;ldquo;You can&amp;rsquo;t pre-solve problems you have no information of.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can schedule my own time well.
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;You&amp;rsquo;re an adult person, just use a calendar.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I am vigilant about not wasting others&amp;rsquo; time.
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t waste time asking questions that you can google in five seconds. But also don&amp;rsquo;t waste loads of time struggling for days alone when you could get help from a team member in minutes! Find the balance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I actively seek constructive feedback and take it seriously.
&lt;ul&gt;
&lt;li&gt;Ask for feedback and do something about it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I am not actively avoiding any uncomfortable (professional) conversations.
&lt;ul&gt;
&lt;li&gt;If there&amp;rsquo;s something wrong at work, don&amp;rsquo;t put off talking about it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I am not actively avoiding any (professional) conflicts.
&lt;ul&gt;
&lt;li&gt;If you&amp;rsquo;ve noticed something is going wrong, whether technically or communication wise, get those conflicts out in the open. Letting them stew never helps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I consistently interact with other professionals, professionally.
&lt;ul&gt;
&lt;li&gt;Be courteous and professional! Mike jokes about setting an incredibly low bar: no yelling, no hitting, …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I can articulate what I believe others should expect from me.
&lt;ul&gt;
&lt;li&gt;Have a standard for yourself and be ready to tell your co-workers what it is.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I do not require multiple reminders to respond to a request or complete work.
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Waiting for someone else to poke you is not an effective way to get your job done.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I pursue opportunities to return value to the commons (when appropriate).
&lt;ul&gt;
&lt;li&gt;All our work builds on top of the work of countless others. At some point, you&amp;rsquo;ll have opportunities to give back to the community at large. For example, talking at meetups, making open source contributions, or even just discussing topics with your team to boost everyone&amp;rsquo;s skills.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I actively work to bring value to the people I work with.
&lt;ul&gt;
&lt;li&gt;You&amp;rsquo;re part of a team, so work to help them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I actively work to ensure under-represented voices are heard.
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t stand by leaving this to be someone else&amp;rsquo;s problem. Do something to make sure that minorities are heard. This might mean ensuring that the minority person at work gets a chance to speak, that your hiring process is unbiased, or that your website is accessible for users who rely on screen readers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>On Microsoft &#34;Visual&#34; products</title>
        <link>//localhost:1313/p/on-microsoft-visual-products/</link>
        <pubDate>Tue, 16 Aug 2022 11:35:17 +0000</pubDate>
        
        <guid>//localhost:1313/p/on-microsoft-visual-products/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-microsoft-visual-products/images/visio-logo.png&#34;
	width=&#34;512&#34;
	height=&#34;512&#34;
	srcset=&#34;//localhost:1313/p/on-microsoft-visual-products/images/visio-logo_hu_1ee2c59c93abfae8.png 480w, //localhost:1313/p/on-microsoft-visual-products/images/visio-logo_hu_8a189bfcc0cec774.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;This post is intended as support material for another post of mine; see &lt;a 
   href=&#34;//localhost:1313/p/towards-authoritative-software-design/&#34;
   &gt;Towards Authoritative Software Design&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One day back in the early nineties, when people were using &lt;strong&gt;Windows 3.0&lt;/strong&gt; and the &lt;strong&gt;Microsoft C/C++ Compiler&lt;/strong&gt;, a colleague showed me a software design that for the first time he had done not on whiteboard, nor on paper, but on a computer screen, using a new drawing tool called &lt;strong&gt;Visio&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading:  &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-microsoft-visual-products/images/visio-1.0-screenshot1.png&#34;
	width=&#34;640&#34;
	height=&#34;480&#34;
	srcset=&#34;//localhost:1313/p/on-microsoft-visual-products/images/visio-1.0-screenshot1_hu_827134514accb683.png 480w, //localhost:1313/p/on-microsoft-visual-products/images/visio-1.0-screenshot1_hu_6568a10c471fe3c3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-microsoft-visual-products/images/visio-1.0-screenshot2.png&#34;
	width=&#34;640&#34;
	height=&#34;480&#34;
	srcset=&#34;//localhost:1313/p/on-microsoft-visual-products/images/visio-1.0-screenshot2_hu_4063c9b7f6c3f47c.png 480w, //localhost:1313/p/on-microsoft-visual-products/images/visio-1.0-screenshot2_hu_a3f52817d811c4cc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Screenshots of Visio 1.0 running under Windows 3.1.&lt;/p&gt;
&lt;p&gt;He showed me interconnected components laid out on a canvas, and as he moved one of the components, the drawing tool re-routed the lines to maintain the connections to other components. This meant that Visio was not just a pixel drawing utility like Microsoft Paint; it had some understanding of the structure of the information that was being displayed.&lt;/p&gt;
&lt;p&gt;We both knew that the next logical thing to ask from such a tool would be to automatically produce an actual running software system according to that design; alas, Visio could do no such thing. In our eyes, the product embodied a latent promise for such functionality, but no such functionality was there.&lt;/p&gt;
&lt;p&gt;Back then, Visio was not yet owned by Microsoft, but the two companies were obviously in talks, because the first pre-release version of Visio had been distributed by Microsoft in a floppy disc containing other Microsoft Software. (For more information about the early relationship between
Microsoft and Visio, read &lt;a class=&#34;external&#34; 
   href=&#34;https://www.visiocorp.info/early-days.aspx&#34; target=&#34;_blank&#34;
   &gt;The Early Days of Visio Corporation - Recollections by Ted Johnson, Visio Co-founder&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Then, in 1993 Microsoft announced the successor to their &lt;strong&gt;Microsoft C/C++&lt;/strong&gt; compiler, and the name of the new product was going to be &lt;strong&gt;Microsoft Visual C++&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-microsoft-visual-products/images/microsoft-visual-cpp-touched.jpg&#34;
	width=&#34;1106&#34;
	height=&#34;1026&#34;
	srcset=&#34;//localhost:1313/p/on-microsoft-visual-products/images/microsoft-visual-cpp-touched_hu_ae1eb30e1d2d7a23.jpg 480w, //localhost:1313/p/on-microsoft-visual-products/images/microsoft-visual-cpp-touched_hu_3f9f702db12a2ad4.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;107&#34;
		data-flex-basis=&#34;258px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Even before we could get our hands on the new compiler, we could not help but speculate what Microsoft might mean by &amp;ldquo;visual&amp;rdquo; in the product name, and our hopes were high that they would have made good on the promise of visual tools for software design.&lt;/p&gt;
&lt;p&gt;Alas, nothing of that sort happened; Microsoft Visual C++ was just another command-line toolset, and the term &amp;ldquo;visual&amp;rdquo; in the title was nothing but marketing deceit.&lt;/p&gt;
&lt;p&gt;Then a few more years passed, and in 1997 Microsoft announced their first true Integrated Development Environment (IDE), which was going to be called &lt;strong&gt;Microsoft Visual Studio&lt;/strong&gt; starting with version 5.0, a.k.a. &amp;lsquo;97.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-microsoft-visual-products/images/visual-studio-97.jpg&#34;
	width=&#34;570&#34;
	height=&#34;437&#34;
	srcset=&#34;//localhost:1313/p/on-microsoft-visual-products/images/visual-studio-97_hu_1556da44acd52c59.jpg 480w, //localhost:1313/p/on-microsoft-visual-products/images/visual-studio-97_hu_8f837d95c2f22452.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;130&#34;
		data-flex-basis=&#34;313px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Again, we hoped that this time they would deliver visual software design tools, and again were disappointed: sure, Microsoft was finally providing programmers with an IDE, and an IDE is admittedly a visual sort of thing, but there was still no sign of any actual visual software design tools.&lt;/p&gt;
&lt;p&gt;A few more years passed, and in 2000 Visio was acquired by Microsoft and became &lt;em&gt;&lt;strong&gt;Microsoft Visio&lt;/strong&gt;&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Microsoft_Visio&#34; target=&#34;_blank&#34;
   &gt;see Wikipedia&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-microsoft-visual-products/images/microsoft-visio-2000.gif&#34;
	width=&#34;550&#34;
	height=&#34;344&#34;
	srcset=&#34;//localhost:1313/p/on-microsoft-visual-products/images/microsoft-visio-2000_hu_cb57b82d78dfa1b3.gif 480w, //localhost:1313/p/on-microsoft-visual-products/images/microsoft-visio-2000_hu_12b7f4612b1968ea.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;383px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;When we saw that acquisition happening, we thought that perhaps it was the one thing that was missing for that long unfulfilled promise to finally become a reality; surely, the next release of Visual Studio would have Visio built-in, allowing us to create our software designs and then launch them, right?&lt;/p&gt;
&lt;p&gt;So, a couple of years later, in 2002 another major release of Visual Studio was announced, which was  to be named &lt;strong&gt;Visual Studio Dot Net.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-microsoft-visual-products/images/microsoft-visual-studio-net-professional-logo.png&#34;
	width=&#34;672&#34;
	height=&#34;179&#34;
	srcset=&#34;//localhost:1313/p/on-microsoft-visual-products/images/microsoft-visual-studio-net-professional-logo_hu_5f4aa20bd28191ac.png 480w, //localhost:1313/p/on-microsoft-visual-products/images/microsoft-visual-studio-net-professional-logo_hu_bddccdbcfe032a46.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;375&#34;
		data-flex-basis=&#34;901px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;As it turned out, that new version was nothing but the exact same old version, with bundled support for the Dot Net platform, and a tacky product name slapped onto it. Visio was not in any way connected to Visual Studio, and instead it had become part of the offerings around Microsoft Office.&lt;/p&gt;
&lt;p&gt;So, by that time, we finally accepted the realization that Microsoft&amp;rsquo;s plan for world domination was not so much about actual software development breakthroughs but more about tacky product names.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: The logo from Visio version 1.0.&lt;/p&gt;</description>
        </item>
        <item>
        <title>On Visual Programming Languages</title>
        <link>//localhost:1313/p/on-visual-programming-languages/</link>
        <pubDate>Tue, 16 Aug 2022 10:48:21 +0000</pubDate>
        
        <guid>//localhost:1313/p/on-visual-programming-languages/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-visual-programming-languages/media/visual-programming-language-logos.png&#34;
	width=&#34;1930&#34;
	height=&#34;851&#34;
	srcset=&#34;//localhost:1313/p/on-visual-programming-languages/media/visual-programming-language-logos_hu_6f5c07acbb8eefc7.png 480w, //localhost:1313/p/on-visual-programming-languages/media/visual-programming-language-logos_hu_a5cadf1cf0abeb9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;226&#34;
		data-flex-basis=&#34;544px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;This post is intended as support material for another post of mine; see &lt;a 
   href=&#34;//localhost:1313/p/towards-authoritative-software-design/&#34;
   &gt;Towards Authoritative Software Design&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The idea of creating software using visual tools has existed ever since the first aspiring programmer was bitterly disillusioned by discovering that programming almost exclusively entails writing lots of little text files containing nothing but boring and cryptic text.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Given the relative abundance of people who engage in programming, and the relative scarcity of people who engage in software design, it should come as no surprise that visual software development has largely been regarded as an issue of visual programming rather than an issue of visual software design.&lt;/p&gt;
&lt;p&gt;Thus, there has been a multitude of attempts to create so-called &lt;em&gt;Visual Programming Languages&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Visual_programming_language&#34; target=&#34;_blank&#34;
   &gt;see Wikipedia&lt;/a&gt;) such as Snap!, Scratch, EduBlocks, Blockly, etc. where code is expressed not as boring text, but instead as colorful blocks on a canvas.&lt;/p&gt;
&lt;p&gt;The following example is borrowed from &lt;em&gt;Computer Science with Snap!&lt;/em&gt; by Eckart Modrow from University of Goettingen, 2018.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-visual-programming-languages/media/snap.png&#34;
	width=&#34;482&#34;
	height=&#34;476&#34;
	srcset=&#34;//localhost:1313/p/on-visual-programming-languages/media/snap_hu_84af3caed02486.png 480w, //localhost:1313/p/on-visual-programming-languages/media/snap_hu_90a46c1f922f2411.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;243px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Unfortunately, the blocks used in these visual programming languages tend to faithfully mirror the structure and concepts of textual code, so even though at first glance the two might seem different, a closer examination reveals that they are actually equivalent: it is still all just variables, expressions, flow control statements, function invocations, and even word-wrapping when an expression is too long to fit in the page; there is no real paradigm shift.&lt;/p&gt;
&lt;p&gt;The usefulness of these languages goes as far as teaching the basic principles of programming to kids, using elements that are colorful and can be manipulated with the mouse, but no further, because as it turns out, code expressed as text is far more expressive, terse, and malleable than blocks.&lt;/p&gt;
&lt;p&gt;(Not to mention, less distracting and less likely to cause epileptic seizures due to excessive application of color.)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: Logos of various visual programming languages.&lt;/p&gt;</description>
        </item>
        <item>
        <title>On UML (oh, do not get me started)</title>
        <link>//localhost:1313/p/on-uml-oh-do-not-get-me-started/</link>
        <pubDate>Tue, 16 Aug 2022 09:20:46 +0000</pubDate>
        
        <guid>//localhost:1313/p/on-uml-oh-do-not-get-me-started/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-uml-oh-do-not-get-me-started/media/uml-logo.png&#34;
	width=&#34;824&#34;
	height=&#34;548&#34;
	srcset=&#34;//localhost:1313/p/on-uml-oh-do-not-get-me-started/media/uml-logo_hu_de0c20afdc618ca9.png 480w, //localhost:1313/p/on-uml-oh-do-not-get-me-started/media/uml-logo_hu_f720d5921c77bad1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;This post is intended as support material for another post of mine; see &lt;a 
   href=&#34;//localhost:1313/p/towards-authoritative-software-design/&#34;
   &gt;Towards Authoritative Software Design&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Universal Modeling Language (UML) (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Unified_Modeling_Language&#34; target=&#34;_blank&#34;
   &gt;Wikipedia&lt;/a&gt;) was intended to be a standard notation for expressing software designs, and to replace the multitude of ad-hoc notations that software architects have been using on various mediums such as whiteboard, paper, and general-purpose box-and-arrow diagram-drawing software. The idea was that by following a standard notation which prescribes a specific way of expressing each concept, every diagram would be readily and unambiguously understood by everyone.&lt;/p&gt;
&lt;p&gt;It has miserably failed.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;UML is probably very close to the top of the list of things that everyone mentions, but nobody uses, and this is due to a number of good reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is incredibly comprehensive, to the point where its sheer size acts as a very strong deterrent to most people attempting to learn it. There are about 20 different types of diagrams for different purposes, each with its own complete set of meticulously detailed notation and rules. UML actually begins to make sense once you realize that it has mostly been an effort to catalogue every imaginable type of diagram used in software development, and standardize the notation used in it, while most of these diagram types are actually irrelevant, or very seldom relevant, to our daily job. However, even if you pick a single diagram type that you happen to have some use for, and decide to learn just that one, the notation is still so comprehensive that the task is daunting.&lt;/li&gt;
&lt;li&gt;Most of UML is so rarely useful that it is not worth the learning effort. In the extremely rare event that a software development team is to have a meeting in which they could benefit from having an &lt;em&gt;&lt;strong&gt;Interaction Overview Diagram&lt;/strong&gt;&lt;/em&gt; to point at, it will be a lot easier to use some ad-hoc but intuitive notation to get the point across, than to only schedule the meeting &lt;em&gt;&lt;strong&gt;after&lt;/strong&gt;&lt;/em&gt; every single one of the attendees has completed a UML course to refresh upon the intricacies of the &lt;em&gt;UML Interaction Overview Diagram&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The type of UML diagram that has received most attention in the software engineering profession is the &lt;em&gt;&lt;strong&gt;UML Class Diagram&lt;/strong&gt;&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Class_diagram&#34; target=&#34;_blank&#34;
   &gt;see Wikipedia&lt;/a&gt;) which deals with representing a class, the structure of a class, and its relationships with other classes. Unfortunately:
&lt;ul&gt;
&lt;li&gt;The UML Class Diagram insists on prescribing a very specific type of notation for everything about a class, and this notation is not always intuitive, thus posing the same obstacles to understanding as posed by program code written in apocryphal syntax and convoluted structure: in both cases, it is all jargon. This might not be an issue for those who have already gone through the trouble of learning the jargon, but the uninitiated are bound to question the usefulness of the entire exercise.&lt;/li&gt;
&lt;li&gt;The UML Class Diagram prescribes its notation in excruciatingly meticulous detail, so there is no information hiding, and no abstraction: the amount of information contained in a UML Class Diagram is roughly the same as the amount of information contained in a C or C++ header file, or in a Java Interface, so there is virtually nothing to be gained by looking at one vs. looking at the other, which in turn seriously begs the question of why should we be doing double book-keeping.&lt;/li&gt;
&lt;li&gt;The UML Class Diagram is much too low-level and too finely detailed to be pertinent to software systems design, where the unit of interest is the system component, corresponding to an entire module, rather than to individual classes within a module. It is also becoming even less pertinent as classes are becoming less important in programming due to the modern shift towards functional rather than object-oriented programming.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UML is mostly used as documentation, meaning that its role tends to be indicative or suggestive, and usually non-enforceable and non-materializable. This means that mistakes made in the use of the meticulously detailed notation generally go undetected, or might be detected by colleagues, but not by automated validation tools, because for most types of UML diagrams, there exist no such tools.&lt;/li&gt;
&lt;li&gt;UML is trying to solve problems which do not exist: When a human needs to communicate something to a machine, this has to be done in a perfectly inambiguous fashion, which makes special notation necessary, i.e. jargon. However, when there is no machine involved, and a human simply needs to communicate something to other humans, what matters most is to get the point across, so jargon is actually undesirable, despite the unambiguousness that it would bring. That is okay, because humans thrive in ambiguity. In other words, UML is an attempt to apply a rigid engineering discipline to a form of communication which is fine as it is: free and fluid. (One of the &amp;ldquo;Three Amigos&amp;rdquo; that created UML had a military background; coincidence? maybe.)&lt;/li&gt;
&lt;li&gt;In an attempt to make UML more pertinent to the software development process, some UML tools offer some automatic code generation features. Unfortunately, automatic code generation is almost always a bad idea, because each time the design changes, code generation must be re-applied, but this invariably results in the following bad things happening to code that has already been hand-written by programmers:
&lt;ul&gt;
&lt;li&gt;Hand-written code is overwritten with auto-generated code and thus forever lost, or&lt;/li&gt;
&lt;li&gt;Hand-written code does not compile anymore due to dependencies on automatically generated definitions which have now changed, or, more often,&lt;/li&gt;
&lt;li&gt;Both of the above.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The idea that you can apply automatic code generation once and never repeat it stems from the &amp;ldquo;all design up-front&amp;rdquo; doctrine, which may have been strong back in the 1990s when the foundations of UML were laid down, but the doctrine died soon thereafter, and it has been dead for decades now.&lt;/li&gt;
&lt;li&gt;From the plethora of diagram types offered by UML, the only one that could perhaps be useful in our daily jobs is the &lt;em&gt;&lt;strong&gt;UML Component Diagram&lt;/strong&gt;&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Component_diagram&#34; target=&#34;_blank&#34;
   &gt;see Wikipedia&lt;/a&gt;) but there exist no tools that I am aware of that are capable of either guiding the composition of such a diagram from existing software components, or materializing such a diagram into a running system. Furthermore, if any such tools were to be introduced, they are unlikely to be well-received, because by now people have developed a distaste towards UML and anything associated with it.&lt;/li&gt;
&lt;li&gt;UML literature follows a lofty &lt;em&gt;&lt;strong&gt;standardspeak&lt;/strong&gt;&lt;/em&gt; writing style which is incomprehensible. I tried looking up the term &amp;ldquo;collaboration&amp;rdquo; and here is what I found &lt;a class=&#34;external&#34; 
   href=&#34;https://www.ibm.com/docs/en/idsa?topic=diagrams-collaborations&#34; target=&#34;_blank&#34;
   &gt;in IBM literature&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In UML diagrams, a collaboration is a type of structured classifier in which roles and attributes co-operate to define the internal structure of  a classifier.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There are two problems with this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The definition depends on other definitions. This happens everywhere in UML. So, in order to understand a certain term you first have to understand other terms, and quite often the definitions make circles, so in order to understand anything you have to have superpowers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This kind of looks like a recursive definition. They may be implying that there is something hierarchical in the nature of the concept, but they are not saying it. Definitions are written with the goal of being correct, not with the goal of being understood.  (And since we do not understand them, we cannot tell whether they are correct.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Okay, let&amp;rsquo;s look at the next sentence:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You use a collaboration when you want to define only the roles and connections that are required to accomplish a specific goal of the collaboration.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Surprise! Recursion again. Sorry, but now it makes absolutely no sense. And that&amp;rsquo;s how it goes with UML.&lt;/p&gt;
&lt;p&gt;To summarize:&lt;/p&gt;
&lt;p&gt;UML is &lt;em&gt;&lt;strong&gt;insufferably baroque&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It should have never been, and it should cease to be.&lt;/p&gt;
&lt;p&gt;It should be let go into the good night.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-uml-oh-do-not-get-me-started/media/grumpy-cat-uml.jpg&#34;
	width=&#34;1715&#34;
	height=&#34;1553&#34;
	srcset=&#34;//localhost:1313/p/on-uml-oh-do-not-get-me-started/media/grumpy-cat-uml_hu_bef019e84b4ea75.jpg 480w, //localhost:1313/p/on-uml-oh-do-not-get-me-started/media/grumpy-cat-uml_hu_1719cd72479ad91e.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;110&#34;
		data-flex-basis=&#34;265px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Mandatory Grumpy Cat Meme. &amp;ldquo;UML: I hate it.&amp;rdquo;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: The UML logo, by Object Management Group®, Inc. from &lt;a class=&#34;external&#34; 
   href=&#34;https://www.uml.org/&#34; target=&#34;_blank&#34;
   &gt;uml.org&lt;/a&gt;; Public Domain.&lt;/p&gt;</description>
        </item>
        <item>
        <title>So the &#34;master&#34; branch is not kosher anymore</title>
        <link>//localhost:1313/p/so-the-master-branch-is-not-kosher-anymore/</link>
        <pubDate>Fri, 27 May 2022 09:12:37 +0000</pubDate>
        
        <guid>//localhost:1313/p/so-the-master-branch-is-not-kosher-anymore/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/so-the-master-branch-is-not-kosher-anymore/media/slavery-cropped.jpg&#34;
	width=&#34;2775&#34;
	height=&#34;1684&#34;
	srcset=&#34;//localhost:1313/p/so-the-master-branch-is-not-kosher-anymore/media/slavery-cropped_hu_8ae04781ddc88246.jpg 480w, //localhost:1313/p/so-the-master-branch-is-not-kosher-anymore/media/slavery-cropped_hu_58a6348cfbae9cec.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;395px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;The origins of the debate go so far back that they are lost in the mists of time, but a good starting point (which contains references to prior debate) is an Internet Draft from 2018 titled &lt;em&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://datatracker.ietf.org/doc/draft-knodel-terminology/&#34; target=&#34;_blank&#34;
   &gt;Terminology, Power, and Inclusive Language in Internet-Drafts and RFCs&lt;/a&gt;&lt;/em&gt;. Some especially &lt;a class=&#34;external&#34; 
   href=&#34;https://www.urbandictionary.com/define.php?term=woke&#34; target=&#34;_blank&#34;
   &gt;woke&lt;/a&gt; communities like the Python community had already started applying some of the recommendations in this draft as early as 2019, but things really picked up steam in 2020, with &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Murder_of_George_Floyd&#34; target=&#34;_blank&#34;
   &gt;the murder of George Floyd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Programmers all over the world, the overwhelming majority of whom are white boys, wanted to feel like they are doing something about the whole &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Black_Lives_Matter&#34; target=&#34;_blank&#34;
   &gt;Black Lives Matter&lt;/a&gt; thing, but killing cops is a bit difficult, let alone messy, not to mention risky, and what if there is one good cop in the USA and we kill him? &amp;ndash; so they resorted to the next best thing: &lt;em&gt;using more sensitive language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Naturally, every company that caters to &lt;a class=&#34;external&#34; 
   href=&#34;https://www.urbandictionary.com/define.php?term=Wokey&#34; target=&#34;_blank&#34;
   &gt;wokeys&lt;/a&gt; needed to show that they are more woke than the next one, and changing terminology is such a cheap and easy thing to do compared to the amount of good publicity it generates that it is actually a bargain; thus, all mega-corporations were suddenly competing on who will revise more politically incorrect terms faster. This involved the identification of politically incorrect terms that we were previously unaware of, and in some cases even the invention of some.&lt;/p&gt;
&lt;p&gt;The 2018 Internet Draft about inclusive language says nothing about the master branch; it suggests, among other things, to rename the term master/slave to something else, e.g. primary/secondary. This change is arguably worth making; not so much because of its inherent merit, (it has very little of that,) but because we have to acknowledge the possibility that we are unable to put ourselves in the shoes of people who might be hurt by the use of the term. Rumor has it that if you ask actual black people about this issue, they are likely to tell you that they don&amp;rsquo;t give a damn, but this is destined to slide by. Making this change also presupposes that we feel compelled to go out of our way to ease the pain of people who for whatever reasons feel hurt by various things, but that can also arguably be regarded as a reasonable thing to do.&lt;/p&gt;
&lt;p&gt;I am worried that one day people might start feeling hurt by the fact that I am sporting a beard, due to the unbearably toxic masculinity that it exudes and what not, but I guess I will deal with that when the day comes.&lt;/p&gt;
&lt;p&gt;Now, if the abolition of master/slave hardly had any real grounds to stand on, the abolition of the master branch is absolutely groundless, because in this case the word &amp;ldquo;master&amp;rdquo; is used in the sense of &amp;ldquo;original&amp;rdquo;, as in &amp;ldquo;master recording&amp;rdquo;. (See&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wiktionary.org/wiki/master&#34; target=&#34;_blank&#34;
   &gt;&amp;ldquo;master&amp;rdquo; in wiktionary.org&lt;/a&gt;.) However, if we acknowledge someone the right to be offended by master/slave, then who are we to take away their right to also be offended by master branch? After all, don&amp;rsquo;t forget that we have already established that we are incapable of putting ourselves in their shoes, right?&lt;/p&gt;
&lt;p&gt;So, once the abolition of &amp;ldquo;master/slave&amp;rdquo; was unanimously agreed upon, the master branch was naturally next. It was just a matter of &lt;em&gt;the innocent paying along with the guilty&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;After some debate, (see &lt;a class=&#34;external&#34; 
   href=&#34;https://git.github.io/rev_news/2020/07/29/edition-65/&#34; target=&#34;_blank&#34;
   &gt;Git Rev News: Edition 65&lt;/a&gt;) both git and GitHub announced in 2020 that they were moving in the direction of renaming the default branch from &amp;ldquo;master&amp;rdquo; to main. In October of that year, GitHub &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/github/renaming&#34; target=&#34;_blank&#34;
   &gt;proceeded with the change&lt;/a&gt;. Lots of other mega-corporations followed suit. One article which skips the whys and the why-nots and just talks about the technical aspects of this transition is &lt;a class=&#34;external&#34; 
   href=&#34;https://www.biteinteractive.com/of-git-and-github-master-and-main/&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Of Git and GitHub, Master and Main&lt;/em&gt; by Matt Neuburg, 2021&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, we shall all rename our &amp;ldquo;master&amp;rdquo; branches to &amp;ldquo;main&amp;rdquo;. You might &lt;em&gt;think&lt;/em&gt; that you can get away with using &amp;ldquo;main&amp;rdquo; only for new projects and leaving old projects alone, but that will not quite cut it, because then you will be left with eternal confusion since you will have different projects with different default branch names and you will have to always remember which is which. Trying to remember things is the stuff mistakes are made of, and mistakes with branches tend to have very severe consequences. So, all master branches will have to be renamed to main everywhere.&lt;/p&gt;
&lt;p&gt;Is it silly? Yes. Is it a waste of time? Yes. Is it giving in to &lt;a class=&#34;external&#34; 
   href=&#34;https://www.urbandictionary.com/define.php?term=Wokeism&#34; target=&#34;_blank&#34;
   &gt;wokeism&lt;/a&gt;? Yes. But you have to pick your battles. You have to question whether you want to engage in an argument with a broader cause that you are already in alignment with anyway. As a manager, it is easier to suffer the small technical pain of transitioning from &amp;ldquo;master&amp;rdquo; to main&amp;quot; than to spend valuable time debating the whole silly thing, and running the risk of appearing as a bigot in the process.&lt;/p&gt;
&lt;p&gt;Having said all that, let me state that on the broad picture, I am completely with Bill Maher on this: the liberal world is going mad with political correctness, sense of entitlement, &lt;a class=&#34;external&#34; 
   href=&#34;https://www.urbandictionary.com/define.php?term=snowflakeism&#34; target=&#34;_blank&#34;
   &gt;snowflakeism&lt;/a&gt;, and &lt;a class=&#34;external&#34; 
   href=&#34;https://www.urbandictionary.com/define.php?term=wokeness&#34; target=&#34;_blank&#34;
   &gt;wokeness&lt;/a&gt;.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/so-the-master-branch-is-not-kosher-anymore/media/grumpy-cat-wokeness.jpg&#34;
	width=&#34;843&#34;
	height=&#34;565&#34;
	srcset=&#34;//localhost:1313/p/so-the-master-branch-is-not-kosher-anymore/media/grumpy-cat-wokeness_hu_bfd19a0acccbf67b.jpg 480w, //localhost:1313/p/so-the-master-branch-is-not-kosher-anymore/media/grumpy-cat-wokeness_hu_6dd0e5589091004e.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;358px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Mandatory grumpy cat meme: Wokeness? How About NO.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</description>
        </item>
        <item>
        <title>Bathyscaphe</title>
        <link>//localhost:1313/p/bathyscaphe/</link>
        <pubDate>Tue, 19 Apr 2022 10:54:08 +0000</pubDate>
        
        <guid>//localhost:1313/p/bathyscaphe/</guid>
        <description>&lt;p&gt;![[media/bathyscaphe-logo.svg]]&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract
&lt;/h2&gt;&lt;p&gt;This article introduces Bathyscaphe, an open-source java library that you can use to assert that your objects are immutable and/or thread-safe.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The problem
&lt;/h2&gt;&lt;p&gt;Programmers all over the world are embracing immutability more and more; however, mutation is still a thing, and in all likelihood will continue being a thing for as long as there will be programmers. In a world where both mutable and immutable objects exist side by side, there is often a need to ascertain that an object is of the immutable variety before proceeding to use it for certain purposes. For example, when an object is used as a key in a hash map, it better be immutable, or else the hash code of the key may change, causing the map to severely malfunction.&lt;/p&gt;
&lt;p&gt;Furthermore, when an object is not immutable, there is often the need to ascertain that it is at least thread-safe before sharing it between threads, otherwise there will be race conditions, with catastrophic results.&lt;/p&gt;
&lt;p&gt;Note that when any of the above goes wrong, it tends to be a bug which is very difficult to troubleshoot.&lt;/p&gt;
&lt;p&gt;Unfortunately, assessment of thread safety and immutability is not an easy task. Most don&amp;rsquo;t even consider it, few talk about it, even fewer attempt it. Programmers all over the world are accustomed to routinely using objects in situations where thread-safety and/or immutability are absolute requirements, but without ever ascertaining them, essentially &lt;em&gt;praying&lt;/em&gt; that the objects be thread-safe and/or immutable.&lt;/p&gt;
&lt;p&gt;As far as I can tell, in the world of the JVM there exist no libraries that will ascertain thread-safety. As for immutability, there are some that purport to do so, but Judging by how marginal status these libraries have in the greater technology landscape, they are not being put into much use. This is not surprising, because they rely exclusively on static analysis, which does not really solve the problem, as I will show.&lt;/p&gt;
&lt;h2 id=&#34;introducing-bathyscaphe&#34;&gt;Introducing Bathyscaphe
&lt;/h2&gt;&lt;p&gt;Bathyscaphe aims to give the Java world another chance at addressing the problem of thread-safety and immutability assessment instead of letting it linger on like a chronic ailment. Bathyscaphe is really easy to use, and produces correct and useful results. It is also very small:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The JAR file is only about 100 kilobytes.&lt;/li&gt;
&lt;li&gt;Setting aside the test module, which necessarily depends on JUnit, Bathyscaphe does not have any dependencies outside the Java Runtime Environment. Let me repeat this: Bathyscaphe. Has. No. Dependencies. It depends on nothing. When you include Bathyscaphe in a project, you are including its tiny JAR file and nothing else.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;why-existing-solutions-do-not-work&#34;&gt;Why existing solutions do not work
&lt;/h2&gt;&lt;p&gt;Oftentimes we can tell whether an object is mutable or immutable just by looking at its class, and indeed there exist static analysis tools that examine classes and classify them as either mutable or immutable. The widespread understanding is that once a class has been classified, all instances of that class can receive the same classification. However, in many cases it is not enough to just look at the class to determine immutability; instead, it is necessary to examine each and every instance of the class at runtime. When static analysis tools assess such classes, they yield results that are erroneous, or in the best case useless.&lt;/p&gt;
&lt;p&gt;Examples where static analysis &lt;em&gt;&lt;strong&gt;does not&lt;/strong&gt;&lt;/em&gt; work and &lt;strong&gt;cannot&lt;/strong&gt; work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Static analysis does not work when a class contains a field which is final, receives its value from a constructor parameter, and the type of the field is an interface or a non-final class. Static analysis can determine that the field itself will not mutate, but has no way of knowing whether the value referenced by the field can mutate.
&lt;ul&gt;
&lt;li&gt;In order to err on the safe side, static analysis tools tend to assess
classes containing such fields as mutable, but this is arbitrary, and it
constitutes a false negative when the field is in fact initialized with an
immutable value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static analysis does not work when a class is an unmodifiable collection of elements, where the elements can be of any type. The most famous examples in this category are the JDK-internal classes &lt;code&gt;java.util.ListN&lt;/code&gt; and &lt;code&gt;java.util.List12&lt;/code&gt;, instances of which are returned by &lt;code&gt;java.util.List.of()&lt;/code&gt; and its overloads.
&lt;ul&gt;
&lt;li&gt;Some static analysis tools assess such classes as immutable, which can be
a false positive, e.g. in the case of &lt;code&gt;List.of( new StringBuilder() )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Some static analysis tools assess such classes as mutable, which can be a
false negative, e.g. in the case of &lt;code&gt;List.of( 1 )&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static analysis does not work when a class is &lt;em&gt;&lt;strong&gt;freezable&lt;/strong&gt;&lt;/em&gt;. By this we mean a class whose instances begin life as mutable, and are at some point instructed to transition from being mutable to being immutable. For an explanation as to why freezable classes are important, see related appendix.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the above it follows that in many cases, examining a class is not enough; in these cases, we need to examine each and every instance of the class at runtime. Furthermore, we need to examine not only the instance at hand, but the entire object graph referenced by that instance. In other words, we must not just assess shallow (superficial) immutability, we must assess deep immutability. That&amp;rsquo;s what Bathyscaphe does. And that&amp;rsquo;s why it is called Bathyscaphe.&lt;/p&gt;
&lt;h2 id=&#34;how-bathyscaphe-works&#34;&gt;How Bathyscaphe Works
&lt;/h2&gt;&lt;p&gt;In a nutshell, Bathyscaphe uses reflection to examine each field of a class, and recursively the type of each field. If all fields of a class can be conclusively assessed as immutable, then all instances of that class will be assessed as immutable. However, if the actual type of the runtime value of a certain field cannot be known by a static examination of the class, then for each instance of the class at runtime, Bathyscaphe will read the value of the field, obtain the actual type of the value, and recursively assess the type of that value.&lt;/p&gt;
&lt;p&gt;In most cases Bathyscaphe can determine by itself whether a field is immutable or not; however, in some cases, things are not what they seem to be. For example, lazily initialized fields look mutable, but they are effectively immutable. Bathyscaphe does not attempt to analyze bytecode and detect how a certain field is used; that kind of detective work belongs to the realm of static analysis tools. In such cases, it is necessary to guide Bathyscaphe by using annotations to mark fields that might look mutable but should be considered as immutable.&lt;/p&gt;
&lt;p&gt;These annotations are essentially claims made by the programmer: Bathyscaphe does not, and cannot, verify the truthfulness of these claims. In this sense, Bathyscaphe does not provide a 100% fool-proof solution, because the programmer may code these annotations wrongly. In the future some synergy between Bathyscaphe and static analysis tools might be achieved, so as to provide 100% fool-proof results, but the benefit of using Bathyscaphe &lt;em&gt;&lt;strong&gt;now&lt;/strong&gt;&lt;/em&gt; lies in the fact that given correct annotations, Bathyscaphe will yield correct and usable results in all cases, whereas static analysis &lt;em&gt;does not&lt;/em&gt; work in all cases and by its nature &lt;em&gt;cannot&lt;/em&gt; work in all cases.&lt;/p&gt;
&lt;h2 id=&#34;where-to-find-bathyscaphe&#34;&gt;Where to find Bathyscaphe
&lt;/h2&gt;&lt;p&gt;Bathyscaphe is hosted on GitHub; see &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/Bathyscaphe&#34; target=&#34;_blank&#34;
   &gt;https://github.com/mikenakis/Bathyscaphe&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;appendix-goals-of-bathyscaphe&#34;&gt;Appendix: Goals of Bathyscaphe
&lt;/h2&gt;&lt;p&gt;I decided to write my own immutability assessment facility with the following
goals in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I want to be able to write framework-level code such as the following:
&lt;ul&gt;
&lt;li&gt;A hash-map which asserts that any and all keys added to it are immutable.&lt;/li&gt;
&lt;li&gt;A message-passing framework which asserts that every single message that it is asked to deliver is either immutable or at the very least thread-safe.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I want results that are always accurate, meaning that there must be no false positives or false negatives, no compromises, no &amp;ldquo;aiming to cover the majority of use cases&amp;rdquo;. All use cases should be covered, and they should be covered correctly.&lt;/li&gt;
&lt;li&gt;I want to assess the immutability of objects, not classes, because I have observed that from a certain class we can sometimes construct instances that are mutable, and sometimes construct instances that are immutable. For example, both of the following method calls yield instances of the exact same class, and yet one instance is mutable, while the other instance is immutable:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List.of( 1 )&lt;/code&gt; (immutable)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List.of( new StringBuilder() )&lt;/code&gt; (mutable)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I want to assess the immutability of the entire graph of objects referenced by a certain object, not the immutability of that object alone. In other words, I want deep immutability assessment, as opposed to shallow or superficial immutability assessment.&lt;/li&gt;
&lt;li&gt;When assessment cannot be achieved in an entirely automatic fashion, (as the case is, for example, with classes that perform lazy initialization,) I want to be able to achieve it by either:
&lt;ul&gt;
&lt;li&gt;adding special annotations to certain fields, or&lt;/li&gt;
&lt;li&gt;adding a manual preassessment (assessment override) for that specific  class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I want the immutability assessment facility to account for freezable classes. This necessitates the introduction of a special self-assessment interface, so that instances can be asked whether they are immutable or not.&lt;/li&gt;
&lt;li&gt;When an immutability assertion fails, meaning that an object which I had intended to be immutable has been found to actually be mutable, I want to receive extensive diagnostics in human-readable form, explaining precisely why this happened.&lt;/li&gt;
&lt;li&gt;I want the immutability assessment library which achieves all this to be attractive to programmers, by being:
&lt;ul&gt;
&lt;li&gt;very easy to integrate&lt;/li&gt;
&lt;li&gt;very easy to use&lt;/li&gt;
&lt;li&gt;very small&lt;/li&gt;
&lt;li&gt;having no dependencies.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;appendix-non-goals-of-bathyscaphe&#34;&gt;Appendix: Non-goals of Bathyscaphe
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Predicting what code will do.
&lt;ul&gt;
&lt;li&gt;That is the job of static analysis tools. Bathyscaphe is meant to issue accurate and useful assessments assuming correctly annotated classes. The correctness of the annotations is a lesser, and largely different problem, which is suitable as the focus of static analysis tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dealing with untrustworthy classes.
&lt;ul&gt;
&lt;li&gt;Immutability can always be compromised via reflection, so trying to assess immutability in an environment which is not completely trustworthy is a hopeless endeavor.&lt;/li&gt;
&lt;li&gt;Therefore, assessment is to be done on a full-trust basis.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dealing with buggy classes.
&lt;ul&gt;
&lt;li&gt;If a class promises, either by means of annotations or the self-assessment interface, that it will behave immutably, but in fact it does not, the fault is with that class, not with the immutability assessment facility.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dealing with inaccessible classes.
&lt;ul&gt;
&lt;li&gt;Due to security restrictions, the inner workings of certain JDK classes are inaccessible.&lt;/li&gt;
&lt;li&gt;Since every single one of those classes can receive a manual preassessment, this is not an issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dealing with farcery.
&lt;ul&gt;
&lt;li&gt;If we create a subclass of a mutable class and override each mutation method to always throw an exception, do we have a mutable or immutable class in our hands?&lt;/li&gt;
&lt;li&gt;Some say it is mutable;&lt;/li&gt;
&lt;li&gt;others say it is immutable;&lt;/li&gt;
&lt;li&gt;I say it is a farce, and not worth considering.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance.
&lt;ul&gt;
&lt;li&gt;Immutability assessment can be computationally expensive, but it is only meant to be performed through assertions, so its overhead is to be suffered only on development runs.&lt;/li&gt;
&lt;li&gt;On production runs, where assertions are supposed to be disabled, the performance penalty of using Bathyscaphe is to be zero.&lt;/li&gt;
&lt;li&gt;Therefore, performance is not an issue.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Non-assertive assessment.
&lt;ul&gt;
&lt;li&gt;Non-assertive assessment means yielding an assessment result object which can then be further examined, as opposed to assertive assessment which means either passing the immutability check or throwing an exception.&lt;/li&gt;
&lt;li&gt;Non-assertive assessment would require publicly exposing the entire assessment hierarchy of Bathyscaphe, which would then make bathyscaphe impossible to refactor without breaking code that is already making use of it.&lt;/li&gt;
&lt;li&gt;Therefore, non-assertive assessment is not a goal.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static analysis.
&lt;ul&gt;
&lt;li&gt;While it is indeed possible in many cases to conclusively assess a class as mutable or immutable by just looking at the class, in many other cases (and certainly in all &lt;em&gt;interesting&lt;/em&gt; cases) examining the class is not enough, as the example of &lt;code&gt;List.of( 1 )&lt;/code&gt; vs. &lt;code&gt;List.of( new StringBuilder())&lt;/code&gt; demonstrates.&lt;/li&gt;
&lt;li&gt;Thus, the use of Bathyscaphe as a static analysis tool is not a goal.&lt;/li&gt;
&lt;li&gt;If you need a static immutability analysis tool for Java, please see &amp;ldquo;MutabilityDetector&amp;rdquo; on github:
&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/MutabilityDetector&#34; target=&#34;_blank&#34;
   &gt;https://github.com/MutabilityDetector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;appendix-a-note-on-reference-types&#34;&gt;Appendix: A note on reference types
&lt;/h3&gt;&lt;p&gt;If you decide to incorporate Bathyscaphe in a project, the first thing you are likely to do is what I did: introduce your own HashMap class which asserts that every key added to it is immutable. In doing so you might discover some bugs in your code, but you will also notice something seemingly strange: Bathyscaphe is preventing you from using reference types as keys, which kind of makes sense because they are in fact mutable, but you have never had any issues with that before, so why is it becoming a problem now?&lt;/p&gt;
&lt;p&gt;What is happening is that your reference types refrain from overriding &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt;, so they inherit the reference-equals function and the identity hash-code function from &lt;code&gt;Object&lt;/code&gt;. A reference to an object remains the same regardless of mutations that the object undergoes during its lifetime, and the same holds true for its identity hash-code. This has been allowing you to use reference types as keys in in hash maps, despite the fact that they undergo mutations, but it has only been working by coincidence.&lt;/p&gt;
&lt;p&gt;Another word for &amp;ldquo;coincidence&amp;rdquo; is &amp;ldquo;accident&amp;rdquo;, and Bathyscaphe is meant to be used precisely in order to avoid accidents, so you cannot keep doing this anymore. From now on, you will have to be using  &lt;code&gt;IdentityHashMap&lt;/code&gt; for reference types, and &lt;code&gt;HashMap&lt;/code&gt; for value types.&lt;/p&gt;
&lt;h3 id=&#34;appendix-a-note-on-so-called-immutable-collections&#34;&gt;Appendix: A note on so-called immutable collections
&lt;/h3&gt;&lt;p&gt;When Java 9 introduced the new &lt;code&gt;java.util.List.of()&lt;/code&gt; method and its various overloads, the documentation referred to the objects returned by that method as immutable lists. Specifically, in the Java 9 API docs we read &amp;ldquo;Returns an &lt;em&gt;&lt;strong&gt;immutable&lt;/strong&gt;&lt;/em&gt; list containing one element.&amp;rdquo; Later, the Java people realized that this is inaccurate, so in JDK issue 8191517 hey decided among other things to &amp;ldquo;Adjust terminology to prefer &amp;lsquo;unmodifiable&amp;rsquo; over &amp;lsquo;immutable&amp;rsquo;.&amp;rdquo; Thus, if we look at the documentation today, (for example, in the Java 18 API documentation,) it reads &amp;ldquo;Returns an &lt;em&gt;&lt;strong&gt;unmodifiable&lt;/strong&gt;&lt;/em&gt; list containing one element.&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 9 API docs: &lt;a class=&#34;external&#34; 
   href=&#34;https://docs.oracle.com/javase/9/docs/api/java/util/List.html&#34; target=&#34;_blank&#34;
   &gt;https://docs.oracle.com/javase/9/docs/api/java/util/List.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JDK issue 8191517: &lt;a class=&#34;external&#34; 
   href=&#34;https://bugs.openjdk.java.net/browse/JDK-8191517&#34; target=&#34;_blank&#34;
   &gt;https://bugs.openjdk.java.net/browse/JDK-8191517&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 18 API docs: &lt;a class=&#34;external&#34; 
   href=&#34;https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/List.html&#34; target=&#34;_blank&#34;
   &gt;https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/List.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dropping the word &amp;ldquo;immutable&amp;rdquo; was the right thing to do, because there is no such thing as an immutable collection, at least when type erasure is involved. That&amp;rsquo;s because a collection contains elements, the immutability of which it is in no position to vouch for.&lt;/p&gt;
&lt;p&gt;Unfortunately, the term &amp;ldquo;unmodifiable&amp;rdquo; is also problematic for describing these collections, because that term already had a meaning before &lt;code&gt;List.of()&lt;/code&gt; was introduced, and the meaning was &amp;ldquo;an unmodifiable-&lt;em&gt;&lt;strong&gt;to-you&lt;/strong&gt;&lt;/em&gt; view
of &lt;strong&gt;my&lt;/strong&gt; collection, which is still &lt;em&gt;&lt;strong&gt;very mutable&lt;/strong&gt;&lt;/em&gt;, and any mutations I make &lt;em&gt;&lt;strong&gt;will be visible to you&lt;/strong&gt;&lt;/em&gt;.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Luckily, &lt;code&gt;List.of()&lt;/code&gt; does better than that: it returns a list that cannot be modified by anyone. So, I would rather call it &amp;ldquo;unchangeable&amp;rdquo; or &amp;ldquo;superficially immutable&amp;rdquo; to indicate that it falls short of achieving true immutability only in the sense that it cannot guarantee deep immutability.&lt;/p&gt;
&lt;h3 id=&#34;appendix-a-note-on-assessment-overrides&#34;&gt;Appendix: A note on assessment overrides
&lt;/h3&gt;&lt;p&gt;An assessment override on an effectively immutable class (for example, on a class which contains a lazily initialized field) is a drastic measure which should be used as seldom as possible. That&amp;rsquo;s because an assessment override is also a blanket measure: it will prevent the immutability assessment facility from ascertaining the immutability of not only the lazily initialized field, but also of all other fields in the class, and in so doing it may hide errors. Assessment overrides should only be used on classes whose source code we do not control, and therefore we cannot annotate on a field-per-field basis.&lt;/p&gt;
&lt;h3 id=&#34;appendix-freezable-classes&#34;&gt;Appendix: Freezable classes
&lt;/h3&gt;&lt;p&gt;As a rule, immutable objects tend to be immutable-upon-construction, meaning that any and all objects that they reference must be supplied as constructor parameters. There is, however, an exception: there is a category of objects called &amp;ldquo;freezable&amp;rdquo; which begin their life as mutable, (so that they can undergo complex initialization,) and are at some later moment instructed to transition to being immutable, that is, to &amp;ldquo;freeze&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Freezing happens in-place, it is permanent from the moment it is applied, and it is trivial to implement: all it takes is to set a &lt;code&gt;frozen&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt;. (A few more things are nice to have, for example assertions ensuring that no mutation methods are invoked once frozen, and splitting the interface of the object in two separate interfaces for mutable and immutable functionality respectively, so that once the object has been frozen, we can forget our reference to the mutable interface and only retain the immutable one.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Freezing is useful for performance:
&lt;ul&gt;
&lt;li&gt;Creating a mutable object, initializing it, and then freezing it performs much better than creating a mutable object, initializing it, and then copying its contents into a freshly allocated immutable object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Freezing can achieve things that are otherwise hard, or impossible:
&lt;ul&gt;
&lt;li&gt;The creation of immutable cyclic graphs requires objects to be mutable while the graph is being constructed, and to become immutable in-place once construction is complete. This problem cannot be solved using the builder pattern, because the builder is bound to run into the same problem: how to construct A with a reference to B when B must be constructed with a reference to A.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To accommodate freezable classes, Bathyscaphe introduces the &lt;code&gt;ImmutabilitySelfAssessable&lt;/code&gt; interface. If a class implements this interface, then Bathyscaphe will be invoking instances of this class to ask them whether they are immutable or not.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: the Bathyscaphe logo, a line drawing of &lt;em&gt;&lt;strong&gt;bathyscaphe Trieste&lt;/strong&gt;&lt;/em&gt; by michael.gr, based on art found at &lt;a class=&#34;external&#34; 
   href=&#34;https://bertrandpiccard.com/3-generations/jacques-piccard&#34; target=&#34;_blank&#34;
   &gt;bertrandpiccard.com&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Incremental Integration Testing</title>
        <link>//localhost:1313/p/incremental-integration-testing/</link>
        <pubDate>Tue, 14 Dec 2021 09:07:09 +0000</pubDate>
        
        <guid>//localhost:1313/p/incremental-integration-testing/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/incremental-integration-testing/media/incremental_integration_testing.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;abstract&#34;&gt;Abstract
&lt;/h3&gt;&lt;p&gt;A new method for &lt;em&gt;&lt;strong&gt;Automated Software Testing&lt;/strong&gt;&lt;/em&gt; is presented as an alternative to &lt;em&gt;&lt;strong&gt;Unit Testing&lt;/strong&gt;&lt;/em&gt;. The new method retains the benefit of Unit Testing, which is &lt;em&gt;&lt;strong&gt;Defect Localization&lt;/strong&gt;&lt;/em&gt;, but eliminates white-box testing and mocking, thus greatly lessening the effort of writing and maintaining tests.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary
&lt;/h3&gt;&lt;p&gt;Unit Testing aims to achieve Defect Localization by replacing the collaborators of the Component Under Test with Mocks. As we will show, the use of Mocks is laborious, complicated, over-specified, presumptuous, and constitutes testing against the implementation, not against the interface, thus leading to brittle tests that hinder refactoring rather than facilitating it.&lt;/p&gt;
&lt;p&gt;To avoid these problems, &lt;em&gt;&lt;strong&gt;Incremental Integration Testing&lt;/strong&gt;&lt;/em&gt; allows each component to be tested in integration with its collaborators, (or with Fakes thereof,) thus completely abolishing Mocks. Defect Localization is achieved by arranging the order in which tests are executed so that the collaborators of a component get tested before the component gets tested, and stopping as soon as a defect is encountered.&lt;/p&gt;
&lt;p&gt;Thus, when a test discovers a defect, we can be sufficiently confident that the defect lies in the component being tested, and not in any of its collaborators, because by that time, the collaborators have passed their tests.&lt;/p&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The problem
&lt;/h3&gt;&lt;p&gt;The goal of automated software testing in general, regardless of what kind of testing it is, is to exercise a software system under various usage scenarios to ensure that it meets its requirements and that it is free from defects. The most simple and straightforward way to achieve this is to set up some input, invoke the system to perform a certain job, and then examine the output to ensure that it is what it is expected to be.&lt;/p&gt;
&lt;p&gt;Unfortunately, this approach only really works in the &amp;ldquo;sunny day&amp;rdquo; scenario: if no defects are discovered by the tests, then everything is fine; however, if defects are discovered, we are faced with a problem: the system consists of a large network of collaborating software components, and the test is telling us that there is a defect somewhere, but it is unclear in which component the problem lies. Even if we divide the system into subsystems and try to test each subsystem separately, each subsystem may still consist of many components, so the problem remains.&lt;/p&gt;
&lt;p&gt;What it ultimately boils down to is that each time we test a component, and a defect is discovered, it is unclear whether the defect lies in the component being tested, or in one or more of its collaborators.&lt;/p&gt;
&lt;p&gt;Ideally, we would like each test to be conducted in such a way as to detect defects specifically in the component that is being tested, instead of extraneous defects in its collaborators; in other words, we would like to achieve &lt;em&gt;Defect Localization&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-existing-solution-unit-testing&#34;&gt;The existing solution: Unit Testing
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Unit_testing&#34; target=&#34;_blank&#34;
   &gt;Unit Testing&lt;/a&gt; was invented specifically in order to achieve defect localization. It takes an extremely drastic approach: if the use of collaborators introduces uncertainties, one way to eliminate those uncertainties is to eliminate the collaborators. Thus, Unit Testing aims to test each component in strict isolation. Hence, its name.&lt;/p&gt;
&lt;p&gt;To achieve this remarkably ambitious goal, Unit Testing refrains from supplying the component under test with the actual collaborators that it would normally receive in a production environment; instead, it supplies the component under test with specially crafted &lt;em&gt;&lt;strong&gt;substitutes&lt;/strong&gt;&lt;/em&gt; of its collaborators, otherwise known as &lt;em&gt;&lt;strong&gt;test doubles&lt;/strong&gt;&lt;/em&gt;. There exist a few different kinds of substitutes, but by far the most widely used kind is &lt;em&gt;&lt;strong&gt;Mocks.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Each Mock must be hand-written for every individual test that is performed; it exposes the same interface as the real collaborator that it substitutes, and it expects specific methods of that interface to be invoked by the component-under-test, with specific argument values, sometimes even in a specific order of invocation. If anything goes wrong, such as an unexpected method being invoked, an expected method &lt;em&gt;not&lt;/em&gt; being invoked, or a parameter having an unexpected value, the Mock fails the test. When the component-under-test invokes one of the methods that the Mock expects to be invoked, the Mock does nothing of the sort that the real collaborator would do; instead, the Mock is hard-coded to yield a fabricated response which is intended to exactly match the response that the real collaborator would have produced if it was being used, and if it was working exactly according to its specification.&lt;/p&gt;
&lt;p&gt;Or at least, that is the intention.&lt;/p&gt;
&lt;h3 id=&#34;drawbacks-of-unit-testing&#34;&gt;Drawbacks of Unit Testing
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complex and laborious&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;In each test it is not enough to simply set up the input, invoke the component, and examine the output; we also have to anticipate every single call that the component will make to its collaborators, and for each call we have to set up a mock, expecting specific parameter values, and producing a specific response aiming to emulate the real collaborator under the same circumstances. Luckily, mocking frameworks lessen the amount of code necessary to accomplish this, but no matter how terse the mocking code is, the fact still remains that it implements a substantial amount of functionality which represents considerable complexity.&lt;/li&gt;
&lt;li&gt;One of the well-known caveats of software testing at large (regardless of what kind of testing it is) is that a test failure does not necessarily indicate a defect in the production code; it always indicates a defect either in the production code, or in the test itself. The only way to know is to troubleshoot. Thus, the more code we put in tests, and the more complex this code is, the more time we end up wasting in chasing and fixing bugs in the tests themselves rather than in the code that they are meant to test.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Over-specified&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Unit Testing is concerned not only with what a component accomplishes, but also with every little detail about how the component goes on about accomplishing it. This means that when we engage in Unit Testing we are essentially expressing all of our application logic twice: once with production code expressing the logic in imperative mode, and once more with testing code expressing the same logic in expectational mode. In both cases, we write copious amounts of code describing what should happen in excruciatingly meticulous detail.&lt;/li&gt;
&lt;li&gt;Note that with Unit Testing, over-specification might not even be goal in and of itself in some cases, but it is unavoidable in all cases. This is due to the elimination of the collaborators: the requests that the component under test sends to its collaborators could conceivably be routed into a black hole and ignored, but in order for the component under test to continue working so as to be tested, it still needs to receive a meaningful response to each request; thus, the test has to expect each request in order to produce each needed response, even if the intention of the test was not to know how, or even whether, the request is made.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Presumptuous&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Each Unit Test claims to have detailed knowledge of not only how the component-under-test invokes its collaborators, but also how each real collaborator would respond to each invocation in a production environment, which is a highly presumptuous thing to do.&lt;/li&gt;
&lt;li&gt;Such presumptuousness might be okay if we are building high-criticality software, where each collaborator is likely to have requirements and specification that are well-defined and unlikely to change; however, in all other software, which is regular, commercial, non-high-criticality software, things are a lot less strict: not only the requirements and specifications change all the time, but also quite often, the requirements, the specification, even the documentation, is the code itself, and the code changes every time a new commit is made to the source code repository. This might not be ideal, but it is pragmatic, and it is established practice. Thus, the only way to know exactly how a component behaves tends to be to actually invoke the latest version of that component and see how it responds, while the mechanism which ensures that these responses are what they are supposed to be is the tests of that component itself, which are unrelated to the tests of components that depend on it.&lt;/li&gt;
&lt;li&gt;As a result of this, Unit Testing often places us in the all too familiar situation where our Unit Tests all pass with flying colors, but our Integration Tests miserably fail because the behavior of the real collaborators turns out to be different from what the mocks assumed it would be.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fragile&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;During Unit Testing, if the interactions between the component under test and its collaborators deviate even slightly from our expectations, the test fails. However, these interactions may legitimately change as software evolves. This may happen due to the application of a bug-fix, due to refactoring, or due to the fact that whenever new code is added to implement new functionality, preexisting code must almost always be modified to accommodate the new code. With Unit Testing, every time we change the inner workings of production code, we have to go fixing all related tests to expect the new inner workings of that code.&lt;/li&gt;
&lt;li&gt;The original promise of Automated Software Testing was to enable us to continuously evolve software without fear of breaking it. The idea is that whenever you make a modification to the software, you can re-run the tests to ensure that everything still works as before. With Unit Testing this does not work, because every time you change the slightest thing in the production code you have to also change the tests, and you have to do this even for changes that are only internal. The understanding is growing within the software engineering community that Unit Testing with mocks actually hinders refactoring instead of facilitating it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-reusable&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Unit Testing exercises the implementation of a component rather than its interface. As such, the Unit Test of a certain component can only be used to test that component and nothing else. Thus, with Unit Testing the following things are impossible:
&lt;ul&gt;
&lt;li&gt;Completely rewrite a piece of production code and then reuse the old tests to make sure that the new implementation works exactly as the old one did.&lt;/li&gt;
&lt;li&gt;Reuse the same test to test multiple different components that implement the same interface.&lt;/li&gt;
&lt;li&gt;Use a single test to test multiple different implementations of a certain component, created by independently working development teams taking different approaches to solving the same problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above disadvantages of Unit Testing are direct consequences of the fact that it is White-Box Testing by nature. What we need to be doing instead is Black-Box testing, which means that Unit Testing should be avoided, despite the entire Software Industry&amp;rsquo;s addiction to it.&lt;/p&gt;
&lt;p&gt;Note that I am not the only one to voice dissatisfaction with Unit Testing with Mocks. People have been noticing that although tests are intended to facilitate refactoring by ensuring that the code still works after refactoring, tests often end up hindering refactoring, because they are so tied to the implementation that you can&amp;rsquo;t refactor anything without breaking the tests. This problem has been identified by renowned personalities such as Martin Fowler and Ian Cooper, and even by Ken Beck, the inventor of Test-Driven Development (TDD).&lt;/p&gt;
&lt;p&gt;In the video &lt;em&gt;Thoughtworks - TW Hangouts: Is TDD dead?&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=z9quxZsLcfo&#34; target=&#34;_blank&#34;
   &gt;youtube&lt;/a&gt;) at 21&amp;rsquo;:10&amp;rsquo;&amp;rsquo; Kent Beck says &amp;ldquo;My personal practice is I mock almost nothing&amp;rdquo; and at 23&amp;rsquo;:56&amp;rsquo;&amp;rsquo; Martin Fowler says &amp;ldquo;I&amp;rsquo;m with Kent, I hardly ever use mocks&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;In the &lt;em&gt;Fragile Test&lt;/em&gt; section of his book &lt;em&gt;xUnit Test Patterns: Refactoring Test Code&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://xunitpatterns.com/&#34; target=&#34;_blank&#34;
   &gt;xunitpatterns.com&lt;/a&gt;) author Gerard Meszaros states that extensive use of Mock Objects causes overcoupled tests.&lt;/p&gt;
&lt;p&gt;In his presentation &lt;em&gt;TDD, where did it all go wrong?&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.infoq.com/presentations/tdd-original/&#34; target=&#34;_blank&#34;
   &gt;InfoQ&lt;/a&gt;, &lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=EZ05e7EMOLM&#34; target=&#34;_blank&#34;
   &gt;YouTube&lt;/a&gt;) at 49&amp;rsquo;:32&amp;rsquo;&amp;rsquo; Ian Cooper says &amp;ldquo;I argue quite heavily against mocks because they are overspecified.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Note that in an attempt to avoid sounding too blasphemous, none of these people calls for the complete abolition of mocks, they only warn against the excessive use of mocks. Furthermore, do not seem to be isolating the components under test, and yet they seem to have little, if anything, to say about any alternative means of achieving defect localization.&lt;/p&gt;
&lt;h3 id=&#34;a-new-solution-incremental-integration-testing&#34;&gt;A new solution: Incremental Integration Testing
&lt;/h3&gt;&lt;p&gt;If we were to abandon Unit Testing with mocks, then one might ask what should we be doing instead. Obviously, we must somehow continue testing our software, and it would be nice if we can continue to be enjoying the benefits of defect localization.&lt;/p&gt;
&lt;p&gt;As it turns out, eliminating the collaborators is just one way of achieving defect localization; another, more pragmatic approach is as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Allow each component to be tested in integration with its collaborators, but only after each of the collaborators has undergone its own testing, and has successfully passed it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Thus, any observed malfunction can be attributed with a high level of confidence to the component being tested, and not to any of its collaborators, because the collaborators have already been tested.&lt;/p&gt;
&lt;p&gt;I call this &lt;em&gt;&lt;strong&gt;Incremental Integration Testing&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;An alternative way of arriving at the idea of Incremental Integration Testing begins with the philosophical observation that strictly speaking, there is no such thing as a Unit Test; there always exist collaborators which by established practice we never mock and invariably integrate in Unit Tests without blinking an eye; these are, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many of the external libraries that we use.&lt;/li&gt;
&lt;li&gt;Most of the functionality provided by the Runtime Environment in which our software runs.&lt;/li&gt;
&lt;li&gt;Virtually all of the functionality provided by the Runtime Library of the language we are using.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nobody mocks standard collections such as array-lists, linked-lists, hash-sets, and hash-maps; very few people bother with mocking filesystems; nobody would mock a math library, a serialization library, and the like; even if one was so paranoid as to mock those, at the extreme end, nobody mocks the MUL and DIV instructions of the CPU; so clearly, there are always some things that we take for granted, and we allow ourselves the luxury of taking these things for granted because we believe that they have been sufficiently tested by their respective creators and can be reasonably assumed to be free of defects.&lt;/p&gt;
&lt;p&gt;So, why not also take our own creations for granted once we have tested them? Are we testing them sufficiently or not?&lt;/p&gt;
&lt;h3 id=&#34;prior-art&#34;&gt;Prior Art
&lt;/h3&gt;&lt;p&gt;An internet search for &amp;ldquo;Incremental Integration Testing&amp;rdquo; does yield some results. An examination of those results reveals that they refer to some strategy for integration testing which is meant to be performed manually by human testers, constitutes an alternative to big-bang integration testing, and requires full Unit Testing of the traditional kind to have already taken place. I am hereby appropriating this term, so from now on it shall mean what I intend it to mean. If a context ever arises where disambiguation is needed, the terms &amp;ldquo;automated&amp;rdquo; vs. &amp;ldquo;manual&amp;rdquo; can be used.&lt;/p&gt;
&lt;p&gt;The first hints to Incremental Integration Testing can actually be found in the classic 1979 book &lt;em&gt;The Art of Software Testing&lt;/em&gt; by Glenford Myers. In chapter 5 &amp;ldquo;Module (Unit) Testing&amp;rdquo; the author plants the seeds of what later became white-box testing with mocks by writing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[…] since module B calls module E, something must be present to receive control when B calls E. A stub module, a special module given the name &amp;ldquo;E&amp;rdquo; that must be coded to simulate the function of module E, accomplishes this.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;then, the author proceeds to write:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The alternative approach is incremental testing. Rather than testing each module in isolation, the next module to be tested is first combined with the set of modules &lt;em&gt;&lt;strong&gt;that have already been tested.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(emphasis mine.)&lt;/p&gt;
&lt;p&gt;Back in 1979, Glen Myers envisioned these approaches to testing as being carried out by human testers, manually launching tests and receiving printouts of results to examine. He even envisioned employing multiple human testers to perform multiple tests in parallel. In the last several decades we have much better ways of doing all of that.&lt;/p&gt;
&lt;h3 id=&#34;implementing-the-solution-the-poor-mans-approach&#34;&gt;Implementing the solution: the poor man&amp;rsquo;s approach
&lt;/h3&gt;&lt;p&gt;As explained earlier, Incremental Integration Testing requires that when we test a component, all of its collaborators must have already been tested. Thus, Incremental Integration Testing necessitates exercising control over the order in which tests are executed.&lt;/p&gt;
&lt;p&gt;Most testing frameworks execute tests in alphanumeric order, so if we want to change the order of execution all we have to do is to appropriately name the tests, and the directories in which they reside.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;Let us suppose that we have the following modules:&lt;/p&gt;
&lt;p&gt;com.acme.alpha_depends_on_bravo&lt;br&gt;
com.acme.bravo_depends_on_nothing&lt;br&gt;
com.acme.charlie_depends_on_alpha&lt;/p&gt;
&lt;p&gt;Note how the modules are listed alphanumerically, but they are not listed in order of dependency.&lt;/p&gt;
&lt;p&gt;Let us also suppose that we have one test suite for each module. By default, the names of the test suites follow the names of the modules that they test, so again, a listing of the test suites in alphanumeric order does not match the order of dependency of the modules that they test:&lt;/p&gt;
&lt;p&gt;com.acme.alpha_depends_on_bravo_&lt;strong&gt;tests&lt;/strong&gt;&lt;br&gt;
com.acme.bravo_depends_on_nothing_&lt;strong&gt;tests&lt;/strong&gt;&lt;br&gt;
com.acme.charlie_depends_on_alpha_&lt;strong&gt;tests&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To achieve Incremental Integration Testing, we add a suitably chosen prefix to the name of each test suite, as follows:&lt;/p&gt;
&lt;p&gt;com.acme.&lt;strong&gt;T02&lt;/strong&gt;_alpha_depends_on_bravo_tests&lt;br&gt;
com.acme.&lt;strong&gt;T01&lt;/strong&gt;_bravo_depends_on_nothing_tests&lt;br&gt;
com.acme.&lt;strong&gt;T03&lt;/strong&gt;_charlie_depends_on_alpha_tests&lt;/p&gt;
&lt;p&gt;Note how the prefixes have been chosen in such a way as to establish a new alphanumerical order for the tests. Thus, an alphanumeric listing of the test suites now lists them in order of dependency of the modules that they test:&lt;/p&gt;
&lt;p&gt;com.acme.T01_bravo_depends_on_nothing_tests&lt;br&gt;
com.acme.T02_alpha_depends_on_bravo_tests&lt;br&gt;
com.acme.T03_charlie_depends_on_alpha_tests&lt;/p&gt;
&lt;p&gt;At this point Java developers might object that this is impossible, because in Java, the tests always go in the same module as the production code, directory names must match package names, and test package names always match production package names. Well, I have news for you: they don&amp;rsquo;t have to. The practice of doing things this way is very widespread in the Java world, but there are no rules that require it: the tests do not in fact have to be in the same module, nor in the same package as the production code. The only inviolable rule is that directory names must match package names, but you can call your test packages whatever you like, and your test directories accordingly.&lt;/p&gt;
&lt;p&gt;Java developers tend to place tests in the same module as the production code simply because the tools (maven) have a built-in provision for this, without ever questioning whether there is any actual benefit in doing so. Spoiler: there isn&amp;rsquo;t. As a matter of fact, in the DotNet world there is no such provision, and nobody complains. Furthermore, Java developers tend to place tests in the same package as the production code for no purpose other than to make package-private entities of their production code accessible from their tests, but this is testing against the implementation, not against the interface, and therefore, as I have already explained, it is misguided.&lt;/p&gt;
&lt;p&gt;So, I know that this is a very hard thing to ask from most Java developers, but trust me, if you would only dare to take a tiny step off the beaten path, if you would for once do something in a certain way for reasons other than &amp;ldquo;everyone else does it this way&amp;rdquo;, you can very well do the renaming necessary to achieve Incremental Integration Testing.&lt;/p&gt;
&lt;p&gt;Now, admittedly, renaming tests in order to achieve a certain order of execution is not an ideal solution. It is awkward, it is thought-intensive since we have to figure out the right order of execution by ourselves, and it is error-prone because there is nothing to guarantee that we will get the order right. That&amp;rsquo;s why I call it &amp;ldquo;the poor man&amp;rsquo;s approach&amp;rdquo;. Let us now see how all of this could be automated.&lt;/p&gt;
&lt;h3 id=&#34;implementing-the-solution-the-automated-approach&#34;&gt;Implementing the solution: the automated approach
&lt;/h3&gt;&lt;p&gt;Here is an algorithm to automate Incremental Integration Testing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Begin by building a model of the dependency graph of the entire software system.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;This requires system-wide static analysis to discover all components in our system, and all dependencies of each component. I did not say it was going to be easy.&lt;/li&gt;
&lt;li&gt;The graph should not include external dependencies, since they are presumed to have already been tested by their respective creators.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Test each leaf node in the model.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;A leaf node in the dependency graph is a node which has no dependencies; at this level, a Unit Test is indistinguishable from an Integration Test, because there are no dependencies to either integrate or mock.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If any malfunction is discovered during step 2, then stop as soon as step 2 is complete.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;If a certain component fails to pass its test, it is counter-productive to proceed with the tests of components that depend on it. Unit Testing seems to be completely oblivious to this little fact; Incremental Integration Testing fixes this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Remove the leaf nodes from the model of the dependency graph.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Thus removing the nodes that were previously tested in step 2, and obtaining a new, smaller graph, where a different set of nodes are now the leaf nodes.&lt;/li&gt;
&lt;li&gt;The dependencies of the new set of leaf nodes have already been successfully tested, so they are of no interest anymore: they are as good as external dependencies now.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repeat starting from step 2, until there are no more nodes left in the model.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Allowing each component to be tested in integration with its collaborators, since they have already been tested.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;No testing framework that I know of (JUnit, MSTest, etc.) is capable of doing the above; for this reason, I have developed a utility which I call &lt;em&gt;&lt;strong&gt;Testana&lt;/strong&gt;&lt;/em&gt;, that does exactly that.&lt;/p&gt;
&lt;p&gt;Testana will analyze a system to discover its structure, will analyze modules to discover dependencies and tests, and will run the tests in the right order so as to achieve Incremental Integration Testing. It will also do a few other nice things, like keep track of last successful test runs, and examine timestamps, so as to refrain from running tests whose dependencies have not changed since the last successful test run. For more information, see &lt;a 
   href=&#34;//localhost:1313/p/testana-a-better-way-of-running-tests/&#34;
   &gt;Testana: A better way of running tests&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;what-if-my-dependencies-are-not-discoverable&#34;&gt;What if my dependencies are not discoverable?
&lt;/h3&gt;&lt;p&gt;Some very trendy practices of our modern day and age include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using scripting languages, where there is no notion of types, and therefore no way of discovering dependencies via static analysis.&lt;/li&gt;
&lt;li&gt;Breaking up systems into disparate source code repositories, so there is no single system on which to perform system-wide static analysis to discover dependencies.&lt;/li&gt;
&lt;li&gt;Incorporating multiple different programming languages in a single system, (following the polyglot craze,) thus hindering system-wide static analysis, since it now needs to be performed on multiple languages and across language barriers.&lt;/li&gt;
&lt;li&gt;Making modules interoperate not via normal programmatic interfaces, but instead via various byzantine mechanisms such as REST, whose modus operandi is binding by name, thus making dependencies undiscoverable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are following any of the above trendy practices, then you cannot programmatically discover dependencies, so you have no way of automating Incremental Integration Testing, so you will have to manually specify the order in which your tests will run, and you will have to keep maintaining this order manually.&lt;/p&gt;
&lt;p&gt;Sorry, but silly architectural choices do come with consequences.&lt;/p&gt;
&lt;h3 id=&#34;what-about-performance&#34;&gt;What about performance?
&lt;/h3&gt;&lt;p&gt;One might argue that Incremental Integration Testing does not address one very important issue which is nicely taken care of by Unit Testing with Mocks, and that issue is performance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When collaborators are replaced with Mocks, the tests tend to be fast.&lt;/li&gt;
&lt;li&gt;When actual collaborators are integrated, such as file systems, relational database management systems, messaging queues, and what not, the tests can become very slow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To address the performance issue I recommend the use of &lt;em&gt;&lt;strong&gt;Fakes&lt;/strong&gt;&lt;/em&gt;, not Mocks. For an explanation of what Fakes are, and why they are incontestably preferable over Mocks, please read &lt;a 
   href=&#34;//localhost:1313/p/testing-with-fakes-instead-of-mocks/&#34;
   &gt;Testing with Fakes instead of Mocks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By supplying a component under test with a Fake instead of a Mock we benefit from great performance, while utilizing a collaborator which has already been tested by its creators and can be reasonably assumed to be free of defects. In doing so, we continue to avoid White-Box Testing and we keep defects localized.&lt;/p&gt;
&lt;p&gt;Furthermore, nothing prevents us from having our CI/CD server run the test of each component twice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once in integration with Fakes&lt;/li&gt;
&lt;li&gt;Once in integration with the actual collaborators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will be slow, but CI/CD servers generally do not mind. The benefit of doing this is that it gives further guarantees that everything works as intended.&lt;/p&gt;
&lt;h3 id=&#34;benefits-of-incremental-integration-testing&#34;&gt;Benefits of Incremental Integration Testing
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;It greatly reduces the effort of writing and maintaining tests, by eliminating the need for mocking code in each test.&lt;/li&gt;
&lt;li&gt;It allows our tests to engage in Black-Box Testing instead of White-Box Testing. For an in-depth discussion of what is wrong with White-Box Testing, see &lt;a 
   href=&#34;//localhost:1313/p/white-box-vs-black-box-testing/&#34;
   &gt;White-Box vs. Black-Box Testing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It makes tests more effective and accurate, by eliminating assumptions about the behavior of the real collaborators.&lt;/li&gt;
&lt;li&gt;It simplifies our testing operations by eliminating the need for two separate testing phases, one for Unit Testing and one for Integration Testing.&lt;/li&gt;
&lt;li&gt;It is unobtrusive, since it does not dictate how to construct the tests, it only dictates the order in which the tests should be executed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arguments-and-counter-arguments&#34;&gt;Arguments and counter-arguments
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Argument: Incremental Integration Testing assumes that a component which has been tested is free of defects.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A well-known caveat of software testing is that it cannot actually prove that software is free from defects, because it necessarily only checks for defects that we have anticipated and tested for. As Edsger W. Dijkstra famously put it, &amp;ldquo;program testing can be used to show the presence of bugs, but never to show their absence!&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Counter-arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I am not claiming that once a component has been tested, it has been proven to be free from defects; all I am saying is that it can reasonably be assumed to be free from defects. Incremental Integration Testing is not meant to be a perfect solution; it is meant to be a pragmatic solution.&lt;/li&gt;
&lt;li&gt;The fact that testing cannot prove the absence of bugs does not mean that everything is futile in this vain world, and that we should abandon all hope in despair: testing might be imperfect, but it is what we can do, and it is in fact what we do, and practical, real-world observations show that it is quite effective.&lt;/li&gt;
&lt;li&gt;Most importantly: Any defects in an insufficiently tested component will not magically disappear if we mock that component in the tests of its dependents.
&lt;ul&gt;
&lt;li&gt;In this sense, the practice of mocking collaborators can arguably be likened to &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Ostrich_policy&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Ostrich policy&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;On the contrary, continuing to integrate that component in subsequent tests gives us incrementally more opportunities to discover defects in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Argument: Incremental Integration Testing fails to achieve complete defect localization.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If a certain component has defects which were not detected when it was being tested, these defects may cause tests of collaborators of that component to fail, in which case it will be unclear where the defect lies.&lt;/p&gt;
&lt;p&gt;Counter-arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is true that Incremental Integration Testing may fall short of achieving defect localization when collaborators have defects despite having already been tested. It is also true that Unit Testing with Mocks does not suffer from that problem when collaborators have defects; but then again, neither does it detect those defects. For that, it is necessary to always follow a round of Unit Testing with a round of Integration Testing. However, when the malfunction is finally observed during Integration Testing, we are facing the exact same problem that we would have faced if we had done a single round of Incremental Integration Testing instead: a malfunction is being observed which is not due to a defect in the root component of the integration, but instead due to a defect in some unknown collaborator. The difference is that Incremental Integration Testing gets us there faster.&lt;/li&gt;
&lt;li&gt;Let us not forget that the primary goal of software testing is to guarantee that software works as intended, and that defect localization is an important but nonetheless secondary goal. Incremental Integration Testing goes a long way towards achieving defect localization, but it may not achieve it perfectly, in favor of other conveniences, such as making it far more easy to write and maintain tests. So, it all boils down to whether Unit Testing represents overall more or less convenience than Incremental Integration Testing. I assert that Incremental Integration Testing is unquestionably far more convenient than Unit Testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Argument: Incremental Integration Testing only tests behavior; it does not check what is going on under the hood.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With Unit Testing, you can ensure that a certain module not only produces the right results, but also that it follows an expected sequence of steps to produce those results. With Incremental Integration Testing you cannot observe the steps, you can only check the results. Thus, the internal workings of a component might be slightly wrong, or less than ideal, and you would never know.&lt;/p&gt;
&lt;p&gt;Counter-arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is true, and this is why Incremental Integration Testing might be unsuitable for high-criticality software, where White-Box Testing is the explicit intention, since it is necessary to ensure not only that the software produces correct results, but also that its internals are working exactly according to plan. However, Incremental Integration Testing is not being proposed as a perfect solution, it is being proposed as a pragmatic solution: the vast majority of software being developed in the world is regular, commercial-grade, non-high-criticality software, where Black-Box Testing is appropriate and sufficient, since all that matters is that the requirements be met. Essentially, Incremental Integration Testing represents the realization that in the general case, tests which worry not only about the behavior, but also about the inner workings of a component, constitute over-engineering. For a more in-depth discussion about this, please read &lt;a 
   href=&#34;//localhost:1313/p/white-box-vs-black-box-testing/&#34;
   &gt;White-Box vs. Black-Box Testing&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In order to make sure that everything is happening as expected under the hood, you do not have to stipulate in excruciating detail what should be happening, you do not have to fail the tests at the slightest sign of deviation from what was expected, and you do not have to go fixing tests each time the expectations change. Another way of ensuring the same thing is to simply:
&lt;ul&gt;
&lt;li&gt;Gain visibility into what is happening under the hood.&lt;/li&gt;
&lt;li&gt;Be notified when something different starts happening.&lt;/li&gt;
&lt;li&gt;Visually examine what is now different.&lt;/li&gt;
&lt;li&gt;Vouch for the differences being as expected.
For more details about this, see &lt;a 
   href=&#34;//localhost:1313/p/collaboration-monitoring/&#34;
   &gt;Collaboration Monitoring&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Argument: Incremental Integration Testing prevents us from picking a single test and running it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With Unit Testing, we can pick any individual test and run it. With Incremental Integration Testing, running an individual test of a certain component is meaningless unless we first run the tests of the collaborators of that component.&lt;/p&gt;
&lt;p&gt;Counter-arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Picking an individual test and running it is meaningless under all scenarios. It is usually done in the interest of saving time, but it is based on the assumption that we know what tests have been affected by the changes we just made to the source code. This is never a safe assumption to make.&lt;/li&gt;
&lt;li&gt;Instead of picking an individual test and running it, we need a way to automatically run all tests that have been affected by the changes we just made, which requires knowledge of the dependency graph of the system.&lt;/li&gt;
&lt;li&gt;If you are unsure as to exactly what you just changed, and exactly what depends on it, then consider using a tool like Testana, which figures all this out for you. See &lt;a 
   href=&#34;//localhost:1313/p/testana-a-better-way-of-running-tests/&#34;
   &gt;Testana: A better way of running tests&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Argument: Incremental Integration Testing requires additional tools.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Incremental Integration Testing is not supported by any of the popular testing frameworks, which means that in order to start practicing it, new tools are necessary. Obtaining such tools might be very difficult, if not impossible, and creating such tools might be difficult, because they would have to do advanced stuff like system-wide static analysis to discover the dependency graph of a system.&lt;/p&gt;
&lt;p&gt;Counter-arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;My intention is to show the way; if people see the way, the tools will come.&lt;/li&gt;
&lt;li&gt;I have already built such a tool which is compatible with some combinations of programming languages, build systems, and testing frameworks; see &lt;a 
   href=&#34;//localhost:1313/p/testana-a-better-way-of-running-tests/&#34;
   &gt;Testana: A better way of running tests&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Even in lack of tools, it is possible to start experimenting with Incremental Integration Testing today by following the poor-man&amp;rsquo;s approach, which consists of simply naming the tests, and the directories in which they reside, in such a way that your existing testing framework will run them in the right order. This is described in the &amp;ldquo;poor man&amp;rsquo;s approach&amp;rdquo; section of this paper.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;Unit Testing was invented in order to achieve defect localization, but as we have shown, it constitutes White-Box Testing, so it is laborious, over-complicated, over-specified, and presumptuous. Furthermore, it is not even, strictly speaking, necessary. Incremental Integration Testing is a pragmatic approach which achieves almost the same degree of defect localization but without the use of mocks, and in so doing it greatly reduces the effort of developing and maintaining tests.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: &lt;em&gt;Incremental Integration Testing&lt;/em&gt; by michael.gr&lt;/p&gt;</description>
        </item>
        <item>
        <title>So, what is a Microservice, anyway?</title>
        <link>//localhost:1313/p/so-what-is-a-microservice-anyway/</link>
        <pubDate>Thu, 14 Oct 2021 17:39:23 +0000</pubDate>
        
        <guid>//localhost:1313/p/so-what-is-a-microservice-anyway/</guid>
        <description>&lt;p&gt;This article attempts to shed some light on what a microservice really is; it
is meant as support material for other posts of mine that discuss
microservices, mainly
&lt;a 
   href=&#34;//localhost:1313/p/the-stateful-microservice/&#34;
   &gt;The Stateful Microservice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/so-what-is-a-microservice-anyway/media/microservices.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;what-is-a-microservice&#34;&gt;What is a microservice?
&lt;/h3&gt;&lt;p&gt;If you go looking for information on what a microservice is, you will find
many different descriptions, exhibiting considerable difference of opinion.
Most claims about microservices are non-technical rather than technical, for
example the allegedly &amp;ldquo;independent&amp;rdquo; software development style around
microservices, or some alleged organization of microservices &amp;ldquo;around business
capabilities&amp;rdquo;. Even when the claims do stick within the technical realm, they
are often unwarranted; for example, I have seen statements to the effect that
a microservice is supposed to live in its very own source code repository,
that microservices must communicate with each other via nothing but REST, etc.
My favorite one is that they must necessarily be stateless. This paper is a
first step in dispelling the statelessness myth.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;To clear up the confusion a little bit, I would like to propose a purely
technical definition of a microservice which is brief and to the point:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From a purely technical standpoint, a microservice is a scalable module.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So, what I am proposing here is that the only fundamental technical
requirement for a microservice is scalability, and that all other purported
characteristics mentioned in the literature are either non-technical, or they
are byproducts of this fundamental technical requirement.&lt;/p&gt;
&lt;p&gt;You see, there was a time back in the late 1990s to early 2000s when users
were joining websites at exponential rates, and servers running monolithic web
apps were reaching capacity and could not deliver service anymore; the
business people were asking the technologists to fix this, because they were
losing money, and the technologists were saying that they could not do
anything, because they already had the biggest, most expensive server that
money could buy. The business people would na?vely say &amp;ldquo;well, add more
servers!&amp;rdquo; to which the technologists would (equally na?vely) reply &amp;ldquo;you don&amp;rsquo;t
understand, that&amp;rsquo;s impossible!&amp;rdquo; Later on the technologists started realizing
that it is in fact possible, it just requires a radical change in their way of
thinking, and a radical redesign of all their systems. When the sums of money
at stake were high enough to justify redoing everything from scratch, scalable
systems started appearing, and are commonplace today.&lt;/p&gt;
&lt;p&gt;The new software development paradigm that was allowing web sites to achieve
scalability received a name quite some time after it first started being put
to use; the naming happened some time in the mid 2000s, and it was
&lt;em&gt;microservices&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Then of course came the evangelists. Unfortunately, when people become
salespersons of a cause, for some reason they never seem to be satisfied with
simply mentioning the one real, game-changing advantage that their product has
over the alternatives; instead, they feel compelled to throw as much as
possible at the customer, inventing advantages if possible. That&amp;rsquo;s how all the
fictitious characteristics of microservices came to be. However, the truth
remains that there was one and only one thing that business needed which could
not be achieved otherwise, and therefore business was willing to pay for it
limitlessly, and that one thing was scalability, nothing else. (1)&lt;/p&gt;
&lt;p&gt;Business could not care less whether the software gets deployed in pieces or
in a big bang; business could not care less whether development is done by
autonomous teams or by all the programmers shouting at each other in one big
room; business could not care less whether the software communicates via REST
or via pheromone secretion. Things were getting done before, and things would
continue getting done, regardless of those alleged &amp;ldquo;advantages&amp;rdquo; of
microservices. Scalability was the only thing that was impossible before
microservices and was made possible by microservices.&lt;/p&gt;
&lt;p&gt;Of course, you might not agree with this definition; if not, then please take
it as nothing but a working definition, and only for the purpose of these
papers about statelessness.&lt;/p&gt;
&lt;p&gt;There is one more characteristic of microservices which is not really fundamental, because it is a direct
consequence of the first, but it is so
important that it deserves mentioning as a requirement, and this is resilience.&lt;/p&gt;
&lt;p&gt;You see, scalable architectures are not magically capable of performing better
than monolithic ones; in fact, quite the opposite is true: in terms of raw
throughput per unit of hardware, scalable architectures perform much worse
than monolithic ones. In order to accommodate the same workload that you used
to have with a single server running a monolithic application, you might need several
servers running microservices. The benefit of the scalable architecture is
that you can in fact now throw more hardware at the problem, instead of being
stuck with a single piece of hardware. So, given enough money to buy enough
hardware you can end up with a higher sum of throughput despite the worse
throughput per unit of hardware. Thus, when we are talking about scalability, we
are usually talking about a lot of hardware. And by this I mean &lt;em&gt;an awful lot&lt;/em&gt; of hardware.&lt;/p&gt;
&lt;p&gt;Now, it just so happens that hardware, being necessarily bound to the
constraints of the &lt;em&gt;physical world?&lt;/em&gt;, has this inconvenient
characteristic called &amp;ldquo;Mean Time Before Failure&amp;rdquo; (MTBF) which is of a somewhat
statistical nature: the more pieces of hardware you have, the higher the
chances are that any one of them will fail at any given moment. Furthermore,
as these pieces age, their individual chances of failure at any given moment
increase. The result of all this is that hardware failure in server farms
becomes not just something that there is a high risk of; not even just
something that is inevitable; it actually becomes a regularly occurring
phenomenon. As such, hardware failure cannot be addressed on an as-needed
basis via crisis management responses; it must be addressed systematically, as
a normal part of the operation of the system. This means that the software
that runs on that hardware must be capable of continuing to function as if
nothing happened despite pieces of the hardware randomly failing and being
replaced all the time.&lt;/p&gt;
&lt;p&gt;A software system that manages to continue functioning despite parts of it
ceasing to work is called a resilient software system. If we want to add the
resilience concern into our definition, then this is what we are left with:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From a purely technical standpoint, a microservice is a scalable and resilient
module.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Further reading: &lt;a 
   href=&#34;//localhost:1313/p/on-stateless-microservices/&#34;
   &gt;On Stateless Microservices&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;(1) According to Neal Ford, this started with Pets.com; see &lt;a class=&#34;external&#34; 
   href=&#34;https://youtu.be/fYWvTYFmVYs?t=2156&#34; target=&#34;_blank&#34;
   &gt;Neal Ford: &amp;ldquo;Stories Every Developer Should Know&amp;rdquo; at YOW! 2018, starting at 35:56&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>The Stateful Microservice</title>
        <link>//localhost:1313/p/the-stateful-microservice/</link>
        <pubDate>Thu, 14 Oct 2021 16:58:10 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-stateful-microservice/</guid>
        <description>&lt;p&gt;I did a quick search for the term and did not find anything concrete, so I
thought I might as well publicly document my thoughts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/the-stateful-microservice/media/elephants.jpg&#34;
	width=&#34;2048&#34;
	height=&#34;1365&#34;
	srcset=&#34;//localhost:1313/p/the-stateful-microservice/media/elephants_hu_cfac862bf8819bb5.jpg 480w, //localhost:1313/p/the-stateful-microservice/media/elephants_hu_6c0c09c376128914.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;(Useful pre-reading:
&lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Almost everyone doing microservices today will tell you that microservices
need to be stateless. In another post of mine I explain that statelessness is
not an end in and of itself; instead, it is just a means to an end. The
desired technical ends are scalability and resilience, and statelessness is just one way of achieving them. Furthermore, I explain that statelessness
in particular is a very cowardly solution from an engineering standpoint, and
it performs very badly. For details, please see
&lt;a 
   href=&#34;//localhost:1313/p/on-stateless-microservices/&#34;
   &gt;On Stateless Microservices&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What remains to be shown is whether there exists an alternative.&lt;/p&gt;
&lt;p&gt;Obviously, an alternative to the stateless microservice would be the stateful
microservice, so what we are about to examine here is what a stateful
microservice could possibly be, and how it would compare to a stateless
microservice.&lt;/p&gt;
&lt;h4 id=&#34;what-is-a-stateful-microservice&#34;&gt;What is a stateful microservice
&lt;/h4&gt;&lt;p&gt;A stateful microservice maintains state for the purpose of expediting the
processing of incoming requests, reducing overall server load, (trading memory
for processing power and data storage traffic,) and achieving certain things
that are difficult to achieve otherwise, such as server-initiated client
updates.&lt;/p&gt;
&lt;p&gt;The state kept by a stateful microservice can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;State that has been obtained from the main data store and has possibly
undergone expensive transformations. The benefit of maintaining such
transient state within the microservice is that the data store does not
need to be re-queried, and the possibly expensive transformations do not
need to be repeated, with each incoming request; the loading and
processing of the data only needs to happen once when the microservice
starts, and to be repeated only in response to a notification from the
system&amp;rsquo;s messaging backbone that the original data in the main data store
has changed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State that does not exist in the main data store, and does not need to,
because it is of a transient nature, for example information that is only
needed during user&amp;rsquo;s visit to a web site and can be dismissed afterwards.
This can include information necessary for maintaining a session, such as
the session token, and view-related information, such as which page (or
pages) of the web site the user is currently viewing. View-related
information may be useful for the server to have for various reasons, for
example for the purpose of sending server-initiated client updates that
are specific to the web page(s) that are being viewed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State that may eventually be entered into the main data store but has not
yet been entered due to various workflow demands or optimization concerns.
For example, the user may be sequentially visiting each page of a wizard
workflow, and entering information on each page, but this information
should not be merged into the main data store unless the user first
reaches the last page of the wizard workflow and confirms their actions.&lt;/p&gt;
&lt;p&gt;From the above it should be obvious that a stateful microservice is
necessarily session-oriented, meaning that it requires a specific client to
talk to. Session-agnostic stateful microservices already exist, and we do not
think of them as anything special; they are microservices that implement
caches, containing information that is pertinent to not just one client, but
to all clients. These microservices are already scalable and resilient because
a cache can be trivially duplicated to an arbitrary degree and it can also be
destroyed and trivially re-created from scratch.&lt;/p&gt;
&lt;p&gt;We now need to show how a stateful microservice can still be called a
microservice.&lt;/p&gt;
&lt;p&gt;In a previous post of mine I examined what a microservice really is, and I
came to the conclusion that from a purely technical standpoint, it is simply a scalable and resilient module. (See
&lt;a 
   href=&#34;//localhost:1313/p/so-what-is-a-microservice-anyway/&#34;
   &gt;So, what is a Microservice, anyway?&lt;/a&gt;) Even if you disagree with this definition, and you regard microservices as
necessarily more than that, I hope you will at least agree that the purpose of
statelessness in microservices is precisely to achieve scalability and
resilience, so the definition of a microservice as a scalable and resilient
module can serve as a working definition for the purposes of this discussion.&lt;/p&gt;
&lt;p&gt;So, we need to show how stateful microservices can be scalable and resilient,
just as their stateless counterparts are.&lt;/p&gt;
&lt;p&gt;Scalability in stateful microservices can be achieved by means of a
header-inspecting, session-aware, load balancing gateway which routes new
session requests to the least busy server, and from that moment on keeps
routing requests of that same session to the same server. Under such a
scenario, rebalancing of the server farm can be achieved simply by killing
microservices on overloaded servers and letting the resilience mechanism
described next make things right.&lt;/p&gt;
&lt;p&gt;Resilience can be achieved by having each instance of a stateful microservice
continuously persisting its transient state in an efficient manner into a
high-performance backup store which is accessible by all servers in the farm.
Thus, if a microservice unexpectedly ceases to exist, it can be reconstructed
from that backup on any other server. The trick, as we shall see, is that the
backup is taken very efficiently, and in the event that the microservice needs
to be reconstructed, the restoration from the backup is also done very
efficiently.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In more detail, it works as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a client initially connects to the server farm, no session has been
established yet, so the first request that it sends is sessionless.&lt;/li&gt;
&lt;li&gt;The sessionless request arrives at the load-balancing gateway, which routes
it to the least busy server in the farm. This mostly takes care of
scalability, since we can always add more servers, which will initially be
idle, but as requests for new sessions keep arriving, they are routed to the
idle servers instead of the busy ones, so over time, the load distribution
evens out.&lt;/li&gt;
&lt;li&gt;The server that receives the sessionless request creates a new instance of a
stateful microservice to handle that request, and the session is established
between that microservice and the client.&lt;/li&gt;
&lt;li&gt;From that moment on, any further incoming requests for that same session are
routed by the gateway to the same server, and the server delegates them to
the same instance of the stateful microservice. (Alternatively, the
microservice and the client may negotiate a direct persistent connection
between the two, thus bypassing any middlemen from that moment on.)&lt;/li&gt;
&lt;li&gt;The newly spawned stateful microservice registers with the messaging
backbone of the system to receive notifications about system-wide events, so
as to be able to keep its state always up to date.&lt;/li&gt;
&lt;li&gt;The newly spawned stateful microservice loads whatever state it is going to
need, and keeps that state in memory.&lt;/li&gt;
&lt;li&gt;The microservice processes the request and sends back a response.
&lt;ul&gt;
&lt;li&gt;Possibly also changing its own transient state.&lt;/li&gt;
&lt;li&gt;Possibly also updating the main data store with information that must
always be globally available and up to date, and issuing system-wide
notifications about these changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The microservice takes a backup of itself.
&lt;ul&gt;
&lt;li&gt;The microservice serializes the entirety of its state into a binary blob&lt;/li&gt;
&lt;li&gt;The blob is written into a persistent key-value store, using the session
id as the key.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;This persistent key-value store is used as a backup, meaning that it is
written often, but it is never read unless something bad happens.
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Continuous persistence of stateful microservices is not expected to pose a
performance problem, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serialization to and from a binary format performs much better than
general-purpose serialization into a textual markup like JSON or XML.&lt;/li&gt;
&lt;li&gt;The size of the blob is expected to be relatively small. (Of the order of
kilobytes.)&lt;/li&gt;
&lt;li&gt;Key-value stores tend to have very high performance characteristics.&lt;/li&gt;
&lt;li&gt;The backup store can be physically separate from the main data store,
(even on a different network,) thus avoiding contention.&lt;/li&gt;
&lt;li&gt;The act of serializing an in-memory data structure into a single in-memory
blob and then sending that blob as one piece into persistent storage is
bound to perform far better than a series of operations to update a
structured data store. (For one thing, there are no index updates.)&lt;/li&gt;
&lt;li&gt;Persisting the blob can be done asynchronously and in parallel to the
sending of the response to the client, so it does not contribute to
user-perceived latency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For as long as the session does not expire, the stateful microservice can
remain alive, continuing to serve requests efficiently, taking advantage of
the transient state that it contains and keeps up-to-date. Contrast this
with the stateless microservice approach, which requires that any request
can be handled by any server, therefore each microservice must contain no
state at all:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The processing of each request begins with zero knowledge of the state of
the system, so persistent storage must always be queried to obtain state.&lt;/li&gt;
&lt;li&gt;These queries represent overhead, and this overhead must be suffered in
full before the request can be serviced, thus manifesting as latency to
the user.&lt;/li&gt;
&lt;li&gt;The results of these queries may not be cached, because they may at any
moment be rendered out-of-date by any other microservice in the system.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An instance of a stateful microservice may prematurely cease to exist due to
a number of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The microservice may be terminated on demand in order to rebalance the
server farm.&lt;/li&gt;
&lt;li&gt;The server hosting the microservice may become unavailable due to hardware
failure.&lt;/li&gt;
&lt;li&gt;The microservice may fall victim to the whim of the chaos monkey.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If for whatever reason a microservice ceases to exist, the gateway discovers
this either on its own, or when the next request arrives from the client.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The gateway routes the request to the least busy server in the farm.&lt;/li&gt;
&lt;li&gt;The server that receives the request sees that there is no microservice to
handle requests for that session, so it creates a new one.&lt;/li&gt;
&lt;li&gt;The newly instantiated microservice checks, whether the key-value store
contains a backup for the current session, and discovers that it does.&lt;/li&gt;
&lt;li&gt;The microservice restores its state from the backup.&lt;/li&gt;
&lt;li&gt;Operation continues from that moment on as if nothing happened.&lt;/li&gt;
&lt;li&gt;Between the moment in time that a certain microservice instance
prematurely ceases to exist, and the moment in time that a new incarnation
of that microservice is ready for showtime on a freshly assigned server,
some events from the messaging backbone may be lost. To avoid
inconsistencies in the state of the microservice, we must utilize a
messaging backbone which is capable of replaying events. For example, if
we use Kafka, then the stateful microservice can make sure to include
among its persistent state what is known in Kafka terminology as the
&amp;ldquo;consumer offset&amp;rdquo;. Thus, when the microservice gets reconstructed, it asks
Kafka for events starting at that offset, so Kafka replays any missed
events before it starts sending new ones. Thus, we ensure that the state
of the microservice is always up to date, even in the case of termination
and reconstruction.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus, stateful microservices can achieve not only scalability but also
resilience.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: Photo of two elephants friendly interacting with each other, from
&lt;a class=&#34;external&#34; 
   href=&#34;https://www.scientificamerican.com/article/elephants-never-forget/&#34; target=&#34;_blank&#34;
   &gt;The Scientific American: &lt;em&gt;Fact or Fiction?: Elephants Never Forget&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>On Stateless Microservices</title>
        <link>//localhost:1313/p/on-stateless-microservices/</link>
        <pubDate>Thu, 14 Oct 2021 10:53:38 +0000</pubDate>
        
        <guid>//localhost:1313/p/on-stateless-microservices/</guid>
        <description>&lt;p&gt;This post discusses the stateless microservice design pattern; it is meant as
support material for other posts of mine that discuss microservices, mainly
&lt;a 
   href=&#34;//localhost:1313/p/the-stateful-microservice/&#34;
   &gt;The Stateful Microservice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-stateless-microservices/media/8.png&#34;
	width=&#34;1378&#34;
	height=&#34;2048&#34;
	srcset=&#34;//localhost:1313/p/on-stateless-microservices/media/8_hu_48b7be9e0748ac79.png 480w, //localhost:1313/p/on-stateless-microservices/media/8_hu_56b2bd321fd1677a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;161px&#34;
	
&gt;
&lt;/p&gt;
&lt;h4 id=&#34;is-statelessness-a-requirement-for-a-microservice&#34;&gt;Is statelessness a requirement for a microservice?
&lt;/h4&gt;&lt;p&gt;In another post (see
&lt;a 
   href=&#34;//localhost:1313/p/so-what-is-a-microservice-anyway/&#34;
   &gt;So, what is a Microservice, anyway?&lt;/a&gt;) I examine what a microservice really is, and I come to the conclusion that from a purely technical standpoint, a working definition could be
as simple as this:&lt;/p&gt;
&lt;p&gt;A microservice is a scalable and resilient module.&lt;/p&gt;
&lt;p&gt;Even if you disagree with the terseness of this definition, and you regard
microservices as necessarily more than that, I hope you will at least agree
that it is precisely scalability and resilience that statelessness in microservices aims to address, so this definition serves its
purpose at least in the context of this series of posts.&lt;/p&gt;
&lt;p&gt;There are many who will try to convince you that in order to build a scalable
and resilient system, you need statelessness; so much so, that microservices
have almost come to be regarded as synonymous with statelessness. This post
examines whether this is that in fact so, and what is the cost of doing things
this way.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;If we take a step back for a moment and examine the issue from a somewhat
distanced point of view, we notice that there is no such thing as a stateless
software system. If there was such a thing, it would not be capable of
performing any function worth speaking of, and it would necessarily be less
useful than a brick, because a brick has physical existence, so you can, at
the very least, throw it at someone.&lt;/p&gt;
&lt;p&gt;If there is one thing that a software system necessarily has, it is state, so
there is no word that is more unsuitable to go with the word &amp;ldquo;software&amp;rdquo; than
the word &amp;ldquo;stateless&amp;rdquo;. (By the way, that is also a little something that
functional programming aficionados should perhaps take a moment to
philosophically ponder about.)&lt;/p&gt;
&lt;p&gt;What this all means is that even if you build a system using so-called
stateless microservices, that system will still have state; for example, if it
is a web shop, it will very conveniently remember me when I come to visit
again, and if I order any goods during my visit, it will very inconveniently
&lt;em&gt;not&lt;/em&gt; forget to send me an invoice. That is all happening due to state, which is
stored in the database system of the web shop. So, when people speak of
microservices with no state what they actually mean is microservices with no
&lt;em&gt;transient&lt;/em&gt; state. The state is definitely there, the system just does
not rely on any microservice remembering any of it. Each microservice
refrains from keeping any state in memory for any longer than it absolutely
has to; it always begins the processing of every single transaction by
querying the database for all necessary state, and it makes sure to persist
any changed state into the database before proclaiming the transaction
complete.&lt;/p&gt;
&lt;p&gt;Stateless microservices were invented because statelessness is an easy way of
achieving scalability and resilience: if a module does not keep any state, then an
indefinite number of copies of that module can be created to process requests in
parallel; any request arriving at the server farm can be serviced by any
instance of that module, and any subset of copies of the module can be destroyed at any moment,
without depriving the system from its ability to function.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s great, but statelessness is not an end in and of itself; it is a means
to an end; it is just one way of achieving scalability and
resilience. This is proven by the fact that the database systems upon which
stateless microservice architectures are built are most certainly not
stateless at all, and yet they do somehow manage to be scalable and resilient.
Obviously, they are doing something differently.&lt;/p&gt;
&lt;h4 id=&#34;what-is-wrong-with-statelessness&#34;&gt;What is wrong with statelessness?
&lt;/h4&gt;&lt;p&gt;When building a system which needs to be scalable and resilient, and also
needs to be very stateful as a whole, one has to begin with a scalable and
resilient data layer as a foundation. Luckily, there exist various
commercially available products that accomplish this. On top of that
foundation, one has to build their application-specific logic in a way that is
also scalable and resilient. Stateless microservices will achieve this, but
they are one of the &lt;strong&gt;worst performing&lt;/strong&gt;, and from an engineering
standpoint most &lt;em&gt;&lt;strong&gt;cowardly&lt;/strong&gt;&lt;/em&gt; ways of achieving scalability and
resilience. Choosing the stateless microservices approach is like saying the
following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;State is hard; we do not have the slightest clue as to how we can maintain
state and at the same time remain scalable and resilient; but look, the
creators of our database system are very smart folks, they seem to have
figured it all out! So, here is what we will do: we will delegate the entire
task of maintaining state to them!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That is how we arrived at the stateless microservice model, which I like to
call the &amp;ldquo;Dory&amp;rdquo; model, after the fish that suffered from amnesia in the
&lt;em&gt;Finding Nemo&lt;/em&gt; movie.&lt;/p&gt;
&lt;p&gt;In the Dory model, every single incoming transaction gets processed by a
microservice that is drawing a complete blank. Upon receiving the request, the
microservice starts with very basic questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Who am I, and what is this strange place I am running in?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Who are these folks sending me requests, and why?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Should I respond to them, or should I four-oh-three them away?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let&amp;rsquo;s start by authenticating them&amp;hellip;&lt;/p&gt;
&lt;p&gt;&amp;hellip;and it goes on like that. For every single request, there are multiple
round-trips to the database while the microservice is discovering more and more
about what it is being requested to do and whether it should in fact do it,
and even more round-trips to retrieve the information that will go into the
response, including very basic information that hardly ever changes, such as
the name of the visitor on whose behalf the request was sent, and in multi-tenancy scenarios even
the name of the tenant on whose behalf the website is being served.&lt;/p&gt;
&lt;p&gt;When the transaction is nearing completion, the stateless microservice will
meticulously store every single little piece of changed state in its exact
right place in the database, as if it is making notes to itself, lest it
forgets.&lt;/p&gt;
&lt;p&gt;Finally, once the transaction is completed, the microservice will proceed to
deliberately forget absolutely everything that it learned during the
processing of the transaction, before it starts to wait for the next
transaction.&lt;/p&gt;
&lt;p&gt;I am not going to say that this is preposterously inefficient, but
it is &lt;em&gt;&lt;strong&gt;preposterously inefficient.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Incidentally, the magnificent inefficiency of stateless microservices makes
them to a certain extent a self-serving paradigm: in order to scale up you
might think you need them, but once you have them, they will perform so badly,
that boy oh boy, are you going to need to scale up!&lt;/p&gt;
&lt;p&gt;Another problem with stateless microservices is that they cannot take any
initiative of their own, they are restricted to only responding to incoming
requests. This poses a problem with server-initiated client updates, which in
certain circles are known as &amp;ldquo;push notifications&amp;rdquo;. A server-initiated client
update happens when the server decides to send some data to the client at an
arbitrary moment in time, as a result of some event occurring on the server,
without the client first having to request that data.&lt;/p&gt;
&lt;p&gt;Actually, the very term &amp;ldquo;push notification&amp;rdquo; seems to have originated from
system designs in which such sending of data is a difficult task, as if the
developers have to put their shoulders against the notification and push it
all together to make it straddle the great divide between the server and the
client. In other designs, where asynchronous bi-directional communication is
the default mode of operation, there is no need for such laboriousness;
server-initiated client updates are just part of the normal way things work.
Alas, you cannot have that with stateless microservices, because
bi-directional communication requires the notion of a session, which in turn
implies a notion of state, which is a no-no.&lt;/p&gt;
&lt;p&gt;Consequently, software systems that utilize the stateless microservice design
pattern address the problem of server-initiated client updates in various
wacky hacky ways:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some opt to not have any; if the user wants to see what has changed, let
them refresh the page. This can cause serious problems in systems where
multiple clients may edit the same data, since the system has no way of
alerting a client that the data they are editing is also being edited by
another client at the same time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some use polling, meaning that each client keeps sending requests to the
server at regular intervals asking whether there are any updates. This is wasteful, because each of these requests represents work that needs to
be done, but very few of them will result in anything useful happening. At
the same time, in order to reduce server load, the polling cannot be too
frequent, which in turn means that there will always be a time
lapse between the moment that an event occurs on the server and the moment
that the clients take notice.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some opt to have special stateful modules working side by side with the
stateless microservices to handle the push notifications in a completely
separate way, under the assumption that notifications are a kind of optional, &amp;ldquo;nice to have&amp;rdquo; thing anyway, so if performance suffers due to lack
of scaling, or if service is interrupted due to lack of resilience, it will
not hurt too much. On top of being clunky, this approach is also
short-sighted because from the entire broad topic of server-initiated client
updates it only considers the narrow case of updates being used for the sole
purpose of on-screen notifications.&lt;/p&gt;
&lt;p&gt;Further reading: &lt;a 
   href=&#34;//localhost:1313/p/the-stateful-microservice/&#34;
   &gt;The Stateful Microservice&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: &lt;em&gt;Dory&lt;/em&gt;, the yellow-blue fish (a &lt;em&gt;Royal Blue Tang&lt;/em&gt;) that
suffered from amnesia in the 2003 movie &lt;em&gt;Finding Nemo&lt;/em&gt; by Pixar.&lt;/p&gt;</description>
        </item>
        <item>
        <title>What is wrong with Scala</title>
        <link>//localhost:1313/p/what-is-wrong-with-scala/</link>
        <pubDate>Mon, 04 Oct 2021 15:39:46 +0000</pubDate>
        
        <guid>//localhost:1313/p/what-is-wrong-with-scala/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/what-is-wrong-with-scala/media/scala.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;

This is part of a series of posts in which I am documenting what is wrong with certain popular programming languages that I am (more or less) familiar with.  The aim of these posts is to support a future post in which I will be describing what the ideal programming language would look like for me.&lt;/p&gt;
&lt;p&gt;I will be amending and revising these texts over time.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;what-is-wrong-with-scala&#34;&gt;What is wrong with Scala:
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;The garbage collector.&lt;/li&gt;
&lt;li&gt;Curly braces.&lt;/li&gt;
&lt;li&gt;Functional Nazism
&lt;ul&gt;
&lt;li&gt;It is true that Scala does not suffer from functional Nazism as much as other functional languages, but it still has some entirely unwarranted requirements and limitations that seem to have no purpose other than to hinder imperative programming:
&lt;ul&gt;
&lt;li&gt;Cannot reassign method parameters.&lt;/li&gt;
&lt;li&gt;No for-loop the way we know it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functional weirdness
&lt;ul&gt;
&lt;li&gt;Some language idioms may seem entirely natural to functional programming aficionados, but disciples of the imperative school tend to find them rather upsetting:
&lt;ul&gt;
&lt;li&gt;The ability to return the last evaluated value without an explicit return statement sometimes makes it hard to tell what will actually be returned by a function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Incredibly complex syntax
&lt;ul&gt;
&lt;li&gt;Results in torturously slow compilation.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;look ma, no semicolons&amp;rdquo; adds nothing of tangible value, but it does make things very difficult for the compiler.&lt;/li&gt;
&lt;li&gt;A compilation unit often becomes entirely unparseable from top to bottom just because of a single-character syntax error at an unknown place somewhere in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arcane syntax
&lt;ul&gt;
&lt;li&gt;Generics use square brackets instead of angle brackets.&lt;/li&gt;
&lt;li&gt;Ultra-compact generic type bound specifications are probably very convenient for the seasoned Scala programmer, but a severe deterrent for the newcomer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Companion objects feel entirely superfluous and clunky.&lt;/li&gt;
&lt;li&gt;Inelegant language keywords like &lt;code&gt;def&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;val&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Inelegant built-in collection class names like &lt;code&gt;Seq&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: the above list of disadvantages is kind of short, because I am &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; intimately familiar with the language.&lt;/p&gt;
&lt;p&gt;Feedback is more than welcome: you&amp;rsquo;d be doing me a favor. However, be aware that blogger sometimes eats comments, so be sure to save your text before submitting it. If blogger eats your comment, please e-mail it to me.&lt;/p&gt;</description>
        </item>
        <item>
        <title>What is wrong with C#</title>
        <link>//localhost:1313/p/what-is-wrong-with-c/</link>
        <pubDate>Mon, 04 Oct 2021 15:25:56 +0000</pubDate>
        
        <guid>//localhost:1313/p/what-is-wrong-with-c/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/what-is-wrong-with-c/media/csharp.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;p&gt;This is part of a series of posts in which I am documenting what is wrong with certain popular programming languages that I am (more or less) familiar with.  The aim of these posts is to support a future post in which I will be describing what the ideal programming language would look like for me.&lt;/p&gt;
&lt;p&gt;I will be amending and revising these texts over time.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;what-is-wrong-with-c&#34;&gt;What is wrong with C#:
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;The garbage collector.&lt;/li&gt;
&lt;li&gt;Curly braces.&lt;/li&gt;
&lt;li&gt;Member initializers execute in a static context.
&lt;ul&gt;
&lt;li&gt;This is far worse than Java&amp;rsquo;s deficiency of member initializers not having access to constructor parameters; this renders the language almost unusable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Delegates are superfluous and problematic.
&lt;ul&gt;
&lt;li&gt;They could have been implemented as single-method interfaces, as in Java, thus keeping the language simpler.&lt;/li&gt;
&lt;li&gt;The ability to have an anonymous method implementing a delegate is far less useful than the ability to have an anonymous class implementing an interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The built-in collection model is lame:
&lt;ul&gt;
&lt;li&gt;Arrays implement the &lt;code&gt;IList&lt;/code&gt; interface, which might initially seem like a great idea, until you realize that &lt;code&gt;IList&lt;/code&gt; has &lt;code&gt;Add()&lt;/code&gt;, &lt;code&gt;Insert()&lt;/code&gt; and &lt;code&gt;Remove()&lt;/code&gt; methods, which of course cannot be honored by an array.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;IReadOnlyList&lt;/code&gt; interface was added as an afterthought, and it is not a super-interface of &lt;code&gt;IList&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;IReadOnlyList&lt;/code&gt; interface does not have an &lt;code&gt;IndexOf()&lt;/code&gt; method. This poses problems that cannot be solved by adding an extension method, because the object implementing &lt;code&gt;IReadOnlyList&lt;/code&gt; may have its own &lt;code&gt;IEqualityComparator&lt;/code&gt;, which the extension method will be blissfully unaware of.&lt;/li&gt;
&lt;li&gt;Enumerators still have to implement the legacy, non-generic &lt;code&gt;GetEnumerator()&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;Fluent style (Linq) is limited to working almost exclusively with &lt;code&gt;IEnumerable&amp;amp;lt;&amp;amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Built-in events are problematic. They are unsuitable as a language feature and should have been left for runtime libraries to implement.
&lt;ul&gt;
&lt;li&gt;If one event handler throws, the rest will not be invoked.&lt;/li&gt;
&lt;li&gt;If one event handler causes another event handler to be removed, the removed event handler will still be invoked.&lt;/li&gt;
&lt;li&gt;An event is a special kind of thing which cannot be passed to a function, not even by reference. (As all properties are.) As a result, you have to always hand-code the addition of a handler to an event, and to also separately hand-code the corresponding removal. It is absolutely impossible to pass an event to a function, along with a handler and a boolean flag specifying whether to add or remove the handler. This makes it impossible to gather all symmetric initialization and cleanup operations in one place, which in turn leads to buggy software.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extension methods
&lt;ul&gt;
&lt;li&gt;They are a hack.&lt;/li&gt;
&lt;li&gt;They are one of the most calamitously misused features of the language.&lt;/li&gt;
&lt;li&gt;Java has shown how to do this right with default interface methods.&lt;/li&gt;
&lt;li&gt;Allegedly, default interface methods will also come to C#, but it is not like extension methods will ever be removed from the language to undo the harm they have caused.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Parameters declared with &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;out&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;Prior to the introduction of tuples, &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; parameters could sometimes come in handy, but only in very rare cases.&lt;/li&gt;
&lt;li&gt;At the same time, they are one of the most misused features of the language.&lt;/li&gt;
&lt;li&gt;Now that tuples are part of the language syntax, parameters by reference are nothing but a liability.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Names of variables poison enclosing scopes.
&lt;ul&gt;
&lt;li&gt;If you declare a local variable inside the curly braces of a &lt;code&gt;for&lt;/code&gt; loop, you are not allowed to declare a variable with the same name after the closing brace of the &lt;code&gt;for&lt;/code&gt; loop. Duh?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No function-local classes.
&lt;ul&gt;
&lt;li&gt;You can have function-local functions, which is awesome, but you cannot have function-local classes. Duh?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The language runtime is shared with other languages like Visual Basic, and some decisions have been made there in favor of Visual Basic.
&lt;ul&gt;
&lt;li&gt;For example, when you dereference a null pointer you do not get a &amp;ldquo;Null Pointer Exception&amp;rdquo;, you get an &amp;ldquo;Object Reference Is Not Set To An Instance Of An Object&amp;rdquo; exception.  (Presumably because the words &amp;ldquo;Null&amp;rdquo; and &amp;ldquo;Pointer&amp;rdquo; would cause epileptic seizures to Visual Basic programmers.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No compiler-enforced function purity.
&lt;ul&gt;
&lt;li&gt;You cannot somehow declare that a method must be pure and have the compiler enforce that the method, and any overrides of that method, are pure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No compiler-enforced immutability.
&lt;ul&gt;
&lt;li&gt;You cannot somehow declare and advertise that a class is immutable and have the compiler enforce that the class, and its descendants, are immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Certain things about the runtime are completely bonkers. For example:
&lt;ul&gt;
&lt;li&gt;The notion of a &amp;ldquo;current directory&amp;rdquo;, which is a piece of mutable global state that is shared across all threads, and even across all AppDomains within a process.  (So much for AppDomain isolation!)&lt;/li&gt;
&lt;li&gt;The behavior of the &lt;code&gt;ThreadAbortException&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;What happens to the process exit code if the dotNet process exits due to an unhandled exception. (See &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/60729865/773113&#34; target=&#34;_blank&#34;
   &gt;https://stackoverflow.com/q/60729865/773113&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Collecting a stack trace is a ridiculously slow operation.&lt;/li&gt;
&lt;li&gt;Throwing an exception is a &lt;em&gt;stupendously&lt;/em&gt; slow operation.&lt;/li&gt;
&lt;li&gt;In order to send a file to the recycle bin, everyone suggests that you should include a module called &amp;ldquo;Microsoft.VisualBasic&amp;rdquo;. Duh?
&lt;ul&gt;
&lt;li&gt;Adding injury to insult, if you try this, you will discover that it is broken, it just does not work.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No namespace-private visibility
&lt;ul&gt;
&lt;li&gt;C# has always provided assembly-private visibility, which is much more useful than Java&amp;rsquo;s package-private visibility, however at some point Java somewhat fixed that by introducing modules, and the ability to specify which packages are exposed by a module. Now C# lags behind Java in that it does not support namespace-private visibility, which means that everything is visible to everything within an assembly, which can easily lead to chaos if the assembly is large. There is a way to somewhat mitigate this by using partial classes as if they were namespaces, but it is hacky.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interface method implementations are not tied to the interfaces they implement.
&lt;ul&gt;
&lt;li&gt;When you declare a class to implement a certain interface, and then you add a method to that class which implements a certain method of that interface, there is absolutely nothing in the declaration of that method to indicate or even hint that it is implementing a method of that interface. Consequently, if you remove the interface from the list of interfaces implemented by the class, the compiler cannot warn you that methods within this class that were implementing methods of that interface are not meaningful anymore. You can try to overcome this problem with explicit interface method implementation, but it is optional and therefore its use cannot be enforced, plus if you use it then you are stuck with other problems, see below.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explicit interface method implementations are not directly accessible.
&lt;ul&gt;
&lt;li&gt;If you declare a method within a class that explicitly implements a method of an interface implemented by the class, then you cannot invoke that method from within that class, unless you first cast &lt;code&gt;this&lt;/code&gt; to that interface. What the actual fuck?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;switch&lt;/code&gt; statement requires a &lt;code&gt;break&lt;/code&gt; at the end.
&lt;ul&gt;
&lt;li&gt;If you omit the &lt;code&gt;break&lt;/code&gt; at the end, the compiler complains that &lt;code&gt;Control cannot fall out of switch from final case label&lt;/code&gt;.  Huh?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>What is wrong with Java</title>
        <link>//localhost:1313/p/what-is-wrong-with-java/</link>
        <pubDate>Mon, 04 Oct 2021 15:22:38 +0000</pubDate>
        
        <guid>//localhost:1313/p/what-is-wrong-with-java/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/what-is-wrong-with-java/media/java.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;

This is part of a series of posts in which I am documenting what is wrong with certain popular programming languages that I am (more or less) familiar with.  The aim of these posts is to support a future post in which I will be describing what the ideal programming language would look like for me.&lt;/p&gt;
&lt;p&gt;I will be amending and revising these texts over time.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;what-is-wrong-with-java&#34;&gt;What is wrong with Java:
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;The garbage collector.&lt;/li&gt;
&lt;li&gt;Curly braces.&lt;/li&gt;
&lt;li&gt;Primitive types are cumbersome.
&lt;ul&gt;
&lt;li&gt;Each one of the primitive types &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt; is a snowflake which must always be handled differently from the others.  They cannot all be treated uniformly as value types.&lt;/li&gt;
&lt;li&gt;To allow for at least some uniform treatment, one must keep converting back and forth between them and their corresponding wrapper classes (&lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;Character&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt; and &lt;code&gt;Double&lt;/code&gt;) which is clunky and inelegant.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Still no user-defined value types in 2022.
&lt;ul&gt;
&lt;li&gt;Since version 14, Java supports records, but they are still allocated on the heap and passed by reference. So, an array of 1000 records which would be a single memory block in C# is 1001 memory blocks in Java.&lt;/li&gt;
&lt;li&gt;Allegedly, a future version of Java will support value types, but knowing how bytecode is structured and how the JVM works:
&lt;ul&gt;
&lt;li&gt;This is going to be extremely difficult to achieve&lt;/li&gt;
&lt;li&gt;Will probably be a cumbersome addition to the language&lt;/li&gt;
&lt;li&gt;The existing awkward primitive types will of course stay with us forever in the name of backwards compatibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Still no value tuples in 2022.  C# has been doing a pretty good job at that.&lt;/li&gt;
&lt;li&gt;No conditional compilation.
&lt;ul&gt;
&lt;li&gt;Cannot even declare a constant whose value is externally supplied.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generics are decent, but still lacking.
&lt;ul&gt;
&lt;li&gt;Type erasure allows unsafe constructs which may result in &amp;ldquo;heap pollution&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Type erasure makes it impossible to disambiguate entities based on their generic parameters, thus making it impossible to overload based on generics.  This forces us to give artificially different names to entities that would ideally share the same name.&lt;/li&gt;
&lt;li&gt;Working with generics inevitably requires either littering the code with &lt;code&gt;@SuppressWarnings( &amp;quot;unchecked&amp;quot; )&lt;/code&gt;, or entirely disabling the &amp;ldquo;unchecked&amp;rdquo; warning, which opens up another can of worms.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No C#-style properties.&lt;/li&gt;
&lt;li&gt;No operator overloading.
&lt;ul&gt;
&lt;li&gt;In general, the language design philosophy of Java seems to be overly protectionist towards the idiot programmer, at the expense of the expert programmer who just can&amp;rsquo;t have a feature that they want because it would be potentially dangerous for the idiot. This is roughly the same narrow-minded protectionist design philosophy that has been employed by Apple and has given rise to what is known as &amp;ldquo;the mac user&amp;rdquo;, which is a code-word for &amp;ldquo;idiot&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No namespaces.
&lt;ul&gt;
&lt;li&gt;Packages are ill-conceived and lame:
&lt;ul&gt;
&lt;li&gt;Each source file must be associated with one and only one package. So, if the source file is to contain multiple classes, all these classes must belong to the same package.&lt;/li&gt;
&lt;li&gt;Each source file may contain no more than one public class. Any additional classes must be package-private.&lt;/li&gt;
&lt;li&gt;There is no equivalent to the namespace aliases of C#.&lt;/li&gt;
&lt;li&gt;Packages are unrelated to packaging. (See lack of assemblies.)&lt;/li&gt;
&lt;li&gt;Packages (and the lack of assemblies) force programmers to cram an impossibly large number of classes within the same package so as to be able to keep some of them package-private, because the moment you try moving a class into a separate package to reduce the clutter, this class must now become public, so as to remain accessible by classes from the original package.&lt;/li&gt;
&lt;li&gt;Despite the fact that package names look hierarchical, packages are not at all hierarchical:
&lt;ul&gt;
&lt;li&gt;Each package is completely separate from all other packages.&lt;/li&gt;
&lt;li&gt;There exists no special relationship between two packages by virtue of their names being one nested within the other.  (In C#, a namespace inherits from all namespaces in its ancestry line.)&lt;/li&gt;
&lt;li&gt;It is impossible to address a class in a sub-package with a partial (relative) sub-package name.&lt;/li&gt;
&lt;li&gt;This, in combination with the fact that there is no equivalent to namespace aliases, means that two classes with identical names in different packages can only be handled using fully qualified class names.&lt;/li&gt;
&lt;li&gt;Since fully qualified class names are cumbersome to work with, most people resort to assigning globally unique names to their classes.
&lt;ul&gt;
&lt;li&gt;This is very clunky, and it looks retarded, because it essentially results in class names that contain the name of their package.&lt;/li&gt;
&lt;li&gt;This is an uphill struggle and never quite successful, because you might give unique names to all your classes, but you might use some library with class names that conflict with yours, so there will always be some fully qualified class names around.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No C#-style assemblies.
&lt;ul&gt;
&lt;li&gt;Individual class files scattered all over the place are cumbersome to work with.&lt;/li&gt;
&lt;li&gt;The filesystem/jar-file duality is very cumbersome to work with.&lt;/li&gt;
&lt;li&gt;Jar files only deal with packaging; they offer no support for specifying what is exported and what is kept private.&lt;/li&gt;
&lt;li&gt;Modules were added as an after-thought, and they give some control over what to publish and what to keep private, but the unit of publication is still the package, not the class, which means that package-private classes are still necessary, which in turn means that huge packages are still necessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Class loaders are lame.
&lt;ul&gt;
&lt;li&gt;They, as well as many other language features, are a relic from the java web applet era.&lt;/li&gt;
&lt;li&gt;They are very cumbersome to work with.&lt;/li&gt;
&lt;li&gt;They unnecessarily impose a significant performance penalty by doing a lot of work on a per-class basis instead of a per-module basis.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lame access rules.
&lt;ul&gt;
&lt;li&gt;Everything that is package-private is also protected. (Duh?)&lt;/li&gt;
&lt;li&gt;Inner classes have access to private members of the enclosing class; this is probably okay; however, the enclosing class also has access to private members of inner classes, which is retarded.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Member initializers have no access to constructor parameters.&lt;/li&gt;
&lt;li&gt;Member initializers execute between the invocation of the super constructor and the statement that immediately follows it, which technically makes sense, but these jumps in the flow of execution are completely counter-intuitive to the novice programmer, who is precisely the type of programmer that the language caters to. Scala has shown how to do this right.&lt;/li&gt;
&lt;li&gt;The syntax for invoking the super constructor suggests that one might be able to insert statements before the call to super, but this is not the case. (The deviation from the C++ syntax would be justifiable if the new syntax had something to offer, but it does not.) The language falls short of doing the one sensible thing that this syntax would allow, which would be to be able to put code before the call to super, as long as this code does not try to access &lt;code&gt;this&lt;/code&gt;, for example assertions on the constructor parameters before passing them to super; but no, you cannot do that.&lt;/li&gt;
&lt;li&gt;No named / optional parameters to functions. (No default parameter values.)&lt;/li&gt;
&lt;li&gt;Default interface methods cannot be final.
&lt;ul&gt;
&lt;li&gt;Any class implementing an interface may inadvertently re-implement functionality which has already been provided by a default method.&lt;/li&gt;
&lt;li&gt;An interface cannot guarantee that a certain method will have a specific behavior because any class implementing that interface may override that behavior.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interface methods cannot be protected.
&lt;ul&gt;
&lt;li&gt;It is sometimes useful to have a certain interface method that is only visible by implementing classes, but no, we cannot have that, all methods must be public.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interface methods cannot be private.
&lt;ul&gt;
&lt;li&gt;It is sometimes useful to have a certain interface method that is only visible by default interface methods within that same interface, but no, we cannot have that, all methods must be public.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lambda argument names are not allowed to mask the names of variables of the enclosing scope. This is very lame because:
&lt;ul&gt;
&lt;li&gt;It forces the programmer to invent new, unnatural names for lambda arguments.&lt;/li&gt;
&lt;li&gt;Variables of the enclosing scope cannot be masked, so they remain accessible within the lambda, and can thus be accessed by mistake, leading to bugs that are very hard to detect.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No member literals and not even a &amp;rsquo;nameof&amp;rsquo; operator.&lt;/li&gt;
&lt;li&gt;No nullable/non-nullable semantics for reference types. (C# 8 does a fairly decent job at that.)&lt;/li&gt;
&lt;li&gt;No variable declarations inside assignment expressions. (&lt;code&gt;while( (var line = next()) != null )&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;No nested methods.
&lt;ul&gt;
&lt;li&gt;You can have a function-local class, but you cannot have a function-local function. The workaround is to declare and instantiate a function-local anonymous class containing the nested method, but this is cumbersome, unnecessarily verbose, and incurs a performance penalty.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No redefining of names (as with the &lt;code&gt;new&lt;/code&gt; keyword of C#)&lt;/li&gt;
&lt;li&gt;The long history of the language inevitably means that there are some bad choices of yore which interfere with newly introduced features. For example:
&lt;ul&gt;
&lt;li&gt;The ability to use the same name for a field and a function never really offered anything of value, but it did necessitate the introduction of the cumbersome double-colon operator when function references were added to the language.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Checked exceptions.
&lt;ul&gt;
&lt;li&gt;They were a good idea in principle, but turned out to be too cumbersome in practice.&lt;/li&gt;
&lt;li&gt;With the advent of lambdas, they represent nothing but hindrance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Collecting a stack trace (and therefore also throwing an exception) might not be as excruciatingly slow as it is in C#, but it is still unnecessarily slow, and prohibitively slow for some purposes.&lt;/li&gt;
&lt;li&gt;No feature like the __FILE__ and __LINE__ intrinsic macros of C++.
&lt;ul&gt;
&lt;li&gt;There is no way to obtain this information without walking the stack, and is especially problematic since  walking the stack is unreasonably slow.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The built-in collection model is very outdated and lame.
&lt;ul&gt;
&lt;li&gt;Arrays do not implement any of the collection interfaces so they always need special handling.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Iterator&lt;/code&gt; interface is lame.
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;hasNext()&lt;/code&gt; and &lt;code&gt;next()&lt;/code&gt; methods are unusable in a for-loop.  (A for-each loop can be used with an &lt;code&gt;Iterable&lt;/code&gt;, but then you have no access to the &lt;code&gt;Iterator&lt;/code&gt;.)&lt;/li&gt;
&lt;li&gt;A filtering iterator cannot be implemented without cumbersome look-ahead logic and then it is impossible to use it for removing items from the collection because looking ahead means that you are always past the item you want to delete.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lack of unmodifiable collection interfaces means no compile-time readonlyness.
&lt;ul&gt;
&lt;li&gt;Every single collection instance looks mutable, since it is implementing an interface that has mutation methods, but quite often is secretly immutable, meaning that if you make the mistake of invoking any of the mutation methods, you will be slapped with a runtime exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fluent collections (collection streams) are lame.
&lt;ul&gt;
&lt;li&gt;They are unnecessarily verbose
&lt;ul&gt;
&lt;li&gt;They require every single call chain to begin with a quite superfluous-looking &lt;code&gt;stream()&lt;/code&gt; operation&lt;/li&gt;
&lt;li&gt;They almost always have to be ended with an equally superfluous-looking &lt;code&gt;collect()&lt;/code&gt; operation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;They are not particularly extensible because they are entirely based on a single interface (&lt;code&gt;Stream&lt;/code&gt;). Their only point of extensibility is at the very end of each call chain, by means of custom-written collectors.&lt;/li&gt;
&lt;li&gt;Collectors are convoluted, so writing one is not trivial.&lt;/li&gt;
&lt;li&gt;Collection streams work by means of incredibly complex logic behind the scenes, so:
&lt;ul&gt;
&lt;li&gt;They are very difficult to debug.&lt;/li&gt;
&lt;li&gt;They are noticeably slower than C#-style fluent collection operations even before we consider the collection step at the end.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The collection step is tantamount to making an unnecessary safety copy of the information produced by the collection stream chain.&lt;/li&gt;
&lt;li&gt;Collection streams are unnecessarily convoluted due to the ill-conceived notion that the mechanism used for fluent collection operations should also be usable for parallel collection operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Various standard classes are implemented in lame ways. For example:
&lt;ul&gt;
&lt;li&gt;All input-output stream classes suffer a performance handicap due to unnecessarily and ill-conceivedly trying to be thread-safe.&lt;/li&gt;
&lt;li&gt;Input-output functionality is often achievable not via interfaces, but instead via abstract classes with an unnecessarily verbose set of methods, which makes extending them a tedious and error prone endeavor.  (E.g. java.io.Writer, java.io.StreamWriter.)&lt;/li&gt;
&lt;li&gt;There is no way to attempt parsing a number and obtain an indication as to whether the parsing succeeded or not, without:
&lt;ul&gt;
&lt;li&gt;Suffering the performance penalty of an exception being thrown&lt;/li&gt;
&lt;li&gt;Having to write code that catches the exception to take notice that parsing failed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;(And funnily enough, even though the Java runtime makes liberal use of checked exceptions everywhere, the parse-failed exception is unchecked.)&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The for-each loop does not do anything about closeable iterators. (The for-each loop of C# properly disposes disposable enumerators.)&lt;/li&gt;
&lt;li&gt;The try-with-resources statement requires a variable to be defined to hold the closeable object. (The equivalent &amp;lsquo;using&amp;rsquo; statement of C# has no such requirement.)&lt;/li&gt;
&lt;li&gt;The language runtime if full of always-on error checks instead of using assertions.&lt;/li&gt;
&lt;li&gt;The inner workings of the language runtime are convoluted, and its performance is hindered, by the operation of various unrequired and arguably ill-conceived mechanisms such as &amp;ldquo;access checking&amp;rdquo;, &amp;ldquo;bytecode verification&amp;rdquo;, &amp;ldquo;protection domains&amp;rdquo;, and even some optional &amp;ldquo;security manager&amp;rdquo;. (The security manager is finally being deprecated as of Java 17.)&lt;/li&gt;
&lt;li&gt;No compiler-enforced method purity.
&lt;ul&gt;
&lt;li&gt;It is not possible to declare a method as pure and have the compiler enforce that it, and any overrides of it, are in fact pure,&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No compiler-enforced immutability.
&lt;ul&gt;
&lt;li&gt;It is not possible to declare a class as immutable and have the compiler enforce that it, and any derived classes, are in fact immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Still no string interpolation in 2021.&lt;/li&gt;
&lt;li&gt;Inconsistent rules for curly braces.
&lt;ul&gt;
&lt;li&gt;In most cases, curly braces are unnecessary unless the scope they enclose consists of more than one statement.&lt;/li&gt;
&lt;li&gt;However, the curly braces are mandatory in some arbitrary cases, e.g. for method bodies and for try-catch-finally statements.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lame style conventions, for example:
&lt;ul&gt;
&lt;li&gt;Underscores are inadvisable, which is retared.&lt;/li&gt;
&lt;li&gt;Methods, fields, variables, and parameters are to be named in camelCase, which is retarded.&lt;/li&gt;
&lt;li&gt;Package names are to be named in all lowercase, which is retarded.&lt;/li&gt;
&lt;li&gt;The curly brace style is to be egyptian, which is retarded.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No means of programmatically breaking into the debugger as per the &lt;code&gt;System.Diagnostics.Debugger.Break()&lt;/code&gt; method of C#.&lt;/li&gt;
&lt;li&gt;Class&amp;lt;T&amp;gt; is a misnomer. It is actually a type, because it may stand for either a class or an interface. C# does better here, too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: the above list of disadvantages is kind of long, because I am intimately familiar with the language.&lt;/p&gt;
&lt;p&gt;Feedback is more than welcome: you&amp;rsquo;d be doing me a favor. However, be aware that blogger sometimes eats comments, so be sure to save your text before submitting it. If blogger eats your comment, please e-mail it to me.&lt;/p&gt;</description>
        </item>
        <item>
        <title>What is wrong with C&#43;&#43;</title>
        <link>//localhost:1313/p/what-is-wrong-with-c-/</link>
        <pubDate>Mon, 04 Oct 2021 14:23:59 +0000</pubDate>
        
        <guid>//localhost:1313/p/what-is-wrong-with-c-/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/what-is-wrong-with-c-/media/cplusplus.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;

This is part of a series of posts in which I am documenting what is wrong with certain popular programming languages that I am (more or less) familiar with.  The aim of these posts is to support a future post in which I will be describing what the ideal programming language would look like for me.&lt;/p&gt;
&lt;p&gt;I will be amending and revising these texts over time.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading:  &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&#34;what-is-wrong-with-c&#34;&gt;What is wrong with C++:
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Multiple inheritance.&lt;/li&gt;
&lt;li&gt;Incredibly complex syntax. (Would you like some const with your const?)&lt;/li&gt;
&lt;li&gt;Cumbersome syntax. (Member variables cannot be initialized at the point of declaration.)&lt;/li&gt;
&lt;li&gt;Requires splitting the code into header files and implementation files.&lt;/li&gt;
&lt;li&gt;The ability to use incredibly complex constructs (pointer to pointer to pointer) leads to code that is understood only by the original author, only within a short time after writing it.  After that short period of time has elapsed, there exists nobody in the entire universe who understands that code.&lt;/li&gt;
&lt;li&gt;The ability to freely manipulate pointers often leads to illegal memory accesses.&lt;/li&gt;
&lt;li&gt;Manual memory management often results in dangling pointers or memory leaks.&lt;/li&gt;
&lt;li&gt;Lack of generic types.
&lt;ul&gt;
&lt;li&gt;Templates are much more cumbersome to write than generic types.&lt;/li&gt;
&lt;li&gt;Templates do not promote abstraction.&lt;/li&gt;
&lt;li&gt;Templates result in a larger executable, which at runtime translates to a larger working set, which translates to reduced performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lack of C#-style properties.  (Though perhaps some of their functionality can be achieved by operator overloading?)&lt;/li&gt;
&lt;li&gt;Intentionally undefined behavior.
&lt;ul&gt;
&lt;li&gt;Is essentially a form of error-hiding, and often results in code that works by coincidence but will horribly break under slightly different circumstances.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No reflection.
&lt;ul&gt;
&lt;li&gt;RTTI is a very poor excuse for a substitute to reflection.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The built-in (stl) collection model is lame:
&lt;ul&gt;
&lt;li&gt;Arcane nomenclature (whoever thought you can push into a vector!)&lt;/li&gt;
&lt;li&gt;No collection class hierarchy: each collection class is a snowflake. They do not, for example, all inherit from some &lt;code&gt;Iterable&lt;/code&gt; common base class.&lt;/li&gt;
&lt;li&gt;No abstraction: each collection class has its very own snowflake iterator class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The preprocessor hinders static analysis and removes any guarantees about the semantics of the source code.&lt;/li&gt;
&lt;li&gt;Gives the programmer a false sense of control over code generation.
&lt;ul&gt;
&lt;li&gt;Thinking both at the problem-solving level and at the code generation level results in severe cognitive overhead.&lt;/li&gt;
&lt;li&gt;At the end of the day, this is all an illusion, as the optimizer will generally do things quite differently from what the programmer imagined.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;you don&amp;rsquo;t pay for what you did not order&amp;rdquo; dogma prevents a multitude of extremely useful error checks (such as array index out of range) and safeguards (such as guaranteed zero values for non-explicitly initialized members and array elements.)&lt;/li&gt;
&lt;li&gt;Curly braces.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: the above list of disadvantages is kind of short, because my C++ is a bit rusty.&lt;/p&gt;
&lt;p&gt;Feedback is more than welcome: you&amp;rsquo;d be doing me a favor. However, be aware that blogger sometimes eats comments, so be sure to save your text before submitting it. If blogger eats your comment, please e-mail it to me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2022-11-03 16:35:12 UTC&lt;/p&gt;
&lt;p&gt;Many of these things are out of date.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Member variables cannot be initialized at the point of declaration.&amp;rdquo; &amp;lt;- They can since C++11
&amp;ldquo;Requires splitting the code into header files and implementation files.&amp;rdquo; &amp;lt;- Not strictly true, pretty much everything can be in a header file since C++17
&amp;ldquo;No collection class hierarchy&amp;rdquo; &amp;ldquo;No abstraction&amp;rdquo; &amp;lt;- Since C++11 for ( type elem : range ) iteration is applicable to any range
&amp;ldquo;The preprocessor hinders static analysis and removes any guarantees about the semantics of the source code.&amp;rdquo; &amp;lt;- Static analysers can preprocess too
&amp;ldquo;a multitude of extremely useful error checks (such as array index out of range) and safeguards (such as guaranteed trap values for non-explicitly initialized members and array elements.)&amp;rdquo; &amp;lt;- undefined behaviour means debug builds are allowed to have these things, and checked equivalents are also available&lt;/p&gt;
&lt;p&gt;Others are fixable with a style guide&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Manual memory management often results in dangling pointers or memory leaks.&amp;rdquo; &amp;lt;- Memory management is done by library code.
&amp;ldquo;Templates are much more cumbersome to write than generic types.&amp;rdquo; &amp;lt;- Only when you declare a class template&amp;rsquo;s member functions out-of-line.&lt;/p&gt;
&lt;p&gt;And in some cases I&amp;rsquo;d say you are flat wrong&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Templates do not promote abstraction&amp;rdquo; &amp;lt;- You can&amp;rsquo;t add an interface to a class post-hoc, whereas you can have a class that models a type constraint post-hoc&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>White-Box vs- Black-Box Testing</title>
        <link>//localhost:1313/p/white-box-vs-black-box-testing/</link>
        <pubDate>Wed, 22 Sep 2021 13:47:17 +0000</pubDate>
        
        <guid>//localhost:1313/p/white-box-vs-black-box-testing/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://blogger.googleusercontent.com/img/a/AVvXsEjW7YbG075F9q253nTW0xSWiTzN9msG1BuZ2TgZO-mztpIBkgk9or5PoE2z-KhAx_WmfsT86Z5y6NFntAxir_gDF9PE3CCPaGQDmtx6ypfaffZirjHodfq1rM5SP8ONNI7AUmT3xHoijMhReRWmeHJZKjyPtZuyhHPAFJ6MrPUuPE7BXsGJ4gFWE36yyg=s1000&#34; target=&#34;_blank&#34;
   &gt;&lt;img src=&#34;//localhost:1313/p/white-box-vs-black-box-testing/media/tag-blogger.com,1999-blog-3494795920779884230.post-69667484864678488091.jpg&#34;
	width=&#34;640&#34;
	height=&#34;256&#34;
	srcset=&#34;//localhost:1313/p/white-box-vs-black-box-testing/media/tag-blogger.com,1999-blog-3494795920779884230.post-69667484864678488091_hu_f50f246ab2524aaf.jpg 480w, //localhost:1313/p/white-box-vs-black-box-testing/media/tag-blogger.com,1999-blog-3494795920779884230.post-69667484864678488091_hu_cde10918de1bcfd0.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;250&#34;
		data-flex-basis=&#34;600px&#34;
	
&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I have something blasphemous to tell you.&lt;/p&gt;
&lt;p&gt;Unit Testing is wrong.&lt;/p&gt;
&lt;p&gt;There, I said it.&lt;/p&gt;
&lt;p&gt;I know I just insulted most people&amp;rsquo;s sacred cow.&lt;/p&gt;
&lt;p&gt;Sorry, not sorry.&lt;/p&gt;
&lt;p&gt;I will explain, bear with me.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&#34;so-what-is-unit-testing-anyway&#34;&gt;So, what is Unit Testing anyway?
&lt;/h4&gt;&lt;p&gt;Unit Testing, according to its definition, aims to examine a module in
isolation, to make sure that it behaves as expected without uncertainties
introduced by the behavior of other modules that it interacts with. These
other modules are known as dependencies. To achieve this, the test refrains
from connecting the module with its dependencies, and instead emulates the
behavior of the dependencies. That is what makes it a Unit Test, as opposed to
an Integration Test.&lt;/p&gt;
&lt;p&gt;The emulation of the dependencies is meant to be done in a very
straightforward and inexpensive way, because if it was complicated, then it
would introduce uncertainties of its own. So, if we were to imagine for a
moment that the math library is a dependency of the module under test, (just
for the sake of the example,) when the module under test asks for the cosine
of an angle, the Unit Test does not want to invoke the actual math library to perform the cosine
computation; instead, the Unit Test makes sure beforehand to supply the module
under test with such inputs that will cause the module to work with a known
angle of say 60 degrees, so the Unit Test can anticipate that the module will ask for the cosine of a 60 degree
angle, at which point the Unit Test will supply the module under test with a hard-coded value of 0.5,
which is known to be the cosine of 60 degrees. The Unit Test then proceeds to
make sure that the module does the right thing with that 0.5 and produces the
right results.&lt;/p&gt;
&lt;p&gt;In doing so, the Unit Test expects the module under test to interact with each of its
dependencies in a strictly predetermined way: a specific set of calls is
expected to be made, in a specific order, with specific arguments. Thus, the
unit test has knowledge of exactly how the module is implemented: not only the
outputs of the module must be according to spec, but also every single little
detail about the inner workings of the module must go exactly as expected.
Therefore, Unit Testing is white-box testing by nature.&lt;/p&gt;
&lt;h4 id=&#34;what-is-wrong-with-white-box-testing&#34;&gt;What is wrong with White-Box Testing
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;White-box testing is not agnostic enough.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just as users tend to test software in ways that the developer never
thought of, (the well known &amp;ldquo;works for me but always breaks in the hands
of the user&amp;rdquo; paradox,) software tests written by developers who maintain
an agnostic stance about the inner workings of the production code are
likely to test for things that were never considered by those who wrote
the production code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;White-box testing is a laborious endeavor.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The amount of test code that has to be written and maintained often far
exceeds the amount of production code that is being tested.&lt;/li&gt;
&lt;li&gt;Each modification to the inner workings of production code requires corresponding modifications to the testing code, even if the interface and behavior of
the production code remains unchanged.&lt;/li&gt;
&lt;li&gt;With respect to procedural logic within the module under test, the Unit Test has to make sure
that every step of each workflow is followed, so the test essentially has to anticipate
every single decision that the module will make. This means that the test
duplicates all of the knowledge embodied within the module, and
essentially constitutes a repetition of all of the procedural logic of the
module, expressed in a different way. This problem has also been identified by others, and it is sometimes called the &amp;ldquo;over-specified tests problem&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;White-box testing suffers from &lt;em&gt;The Fragile Test Problem&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A bug fix in the production code more often than not causes tests to
break, which then have to be fixed. Note that this often happens even if we first write a test for the bug, which is expected to initially fail, and to start passing once the bug fix is applied: other previously existing tests will break. Unfortunately, it is often unclear to
what extent the tests are wrong, and to what extent the tests are right
but the production code suffers from other, dormant bugs, that keep
causing the tests to fail. When fixing tests as a result of bug fixes in
production, the general assumption is that the production is now correct,
therefore the test must be wrong, so the test is often hastily modified to make it pass
the existing production code. This often results in tests that &amp;ldquo;test
around&amp;rdquo; pre-existing bugs, meaning that the tests only pass if the bugs
are there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;White-box tests are not re-usable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It should be possible to completely rewrite a piece of production code and
then reuse the old tests to make sure that the new code works exactly as
the old one did. This is impossible with white-box testing.&lt;/li&gt;
&lt;li&gt;It should be possible to write a test once and use it to test multiple
different implementations of a certain module, created by independently working
development teams taking different approaches to solving the same problem.
This is also impossible with white-box testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;White-box testing hinders refactoring.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quite often, refactorings which would affect the entire code base are unattainable because they would necessitate rewriting all unit tests, even if the refactorings themselves would  have no effect on the behavior of the module, and would only require limited and harmless modifications to the production code, such as the case is when replacing one third-party library with another.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;White-box testing is highly presumptuous.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;White-box testing claims to have knowledge of exactly how the dependencies behave,
which may not be accurate. As an extreme example, the cosine of 60 is 0.5 only if that 60 is in degrees; if the cosine function of the actual math library used in production works with radians instead of degrees, then the result will
be something completely different, and the Unit Test will be achieving
nothing but ensuring that the module will only pass the test if it
severely malfunctions. In real-world scenarios the wrongful assumptions are much more subtle than a degrees vs radians discrepancy, making them a lot harder to detect and troubleshoot.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the preface of the book &lt;em&gt;&lt;strong&gt;The Art of Unit Testing&lt;/strong&gt;&lt;/em&gt; (Manning,
2009) by &lt;strong&gt;Roy Osherove&lt;/strong&gt;, the author admits to having participated in a
project which failed to a large part due to the tremendous development
burden imposed by badly designed unit tests which had to be maintained
throughout the duration of the development effort. The author does not go
into details about the design of those unit tests and what was so bad about
it, but I would dare to postulate that it was simply the fact that they were&amp;hellip;
Unit Tests.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;is-white-box-testing-good-for-anything&#34;&gt;Is white-box testing good for anything?
&lt;/h4&gt;&lt;p&gt;If you are sending humans to space, or developing any other high-criticality
system, then fine, go ahead and do white-box testing, as well as inside-out
testing, and upside-down testing, and anything else that you can think of,
because in high-criticality software, there is no amount of testing that
constitutes too much testing. However, the vast majority of software written
in the world today is not high criticality software, it is just plain normal,
garden variety, commercial software. Applying space-grade practices in the
development of commercial software does not make business sense, because
space-grade practices tend to be much more expensive than
commercial practices.&lt;/p&gt;
&lt;p&gt;In high criticality, it is all about safety; in commercial, it is all about
cost effectiveness.&lt;/p&gt;
&lt;p&gt;In high criticality, it is all about leaving nothing to chance; in commercial,
it is all about meeting the requirements.&lt;/p&gt;
&lt;h4 id=&#34;what-about-leaving-nothing-to-chance&#34;&gt;What about leaving nothing to chance?
&lt;/h4&gt;&lt;p&gt;It is true that if you do black-box testing you
cannot be absolutely sure that absolutely everything goes absolutely as
intended. For example, you may be testing a module to ensure that given a
certain input, a certain record is written to the database.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you do white-box testing, you can ensure not only that the record has the correct content,
but also that the record is written once and only once.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you do black-box
testing, all you care is that at the end of the day, a record with the correct content can be found
in the database; there may be a bug which inadvertently
causes the record to be written twice, and you would not know.&lt;/p&gt;
&lt;p&gt;So, at this point some might argue that in promoting black-box testing I am
actually advocating imperfect software. Well, guess what: in the commercial sector, there is no such
thing as perfect software; there is only software that meets its requirements,
and software that does not. If the requirements are met, then some record being written twice is just a performance concern. Furthermore, it is a performance concern not only in the sense of the performance of the running software system, but also in the sense of the performance of your development process: By established practice, it is perfectly fine to knowingly allow a record to be written twice if eliminating this duplication would require too much development work to be worth it, so how is this any different from following an efficient development methodology which might allow that record to be written twice?&lt;/p&gt;
&lt;p&gt;This is in line with the observation that nobody aims to write software that is free from imperfections. Virtually
every single method that returns a collection in all of Java code written
since the dawn of time makes a safety copy of that collection; these safety
copies are almost always unnecessary, and yet people keep making them, because
they do not want to be concerned with what is safe and what is not safe on a
case by case basis; case-by-case addressing of safety concerns is the stuff
that bugs are made of. Software that is free of bugs is software that meets
the requirements, and that&amp;rsquo;s all that counts.&lt;/p&gt;
&lt;p&gt;(Note: personally, I never make safety copies of collections; I use special
unmodifiable collection interfaces instead; but that&amp;rsquo;s a different story.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;In the book
&lt;em&gt;&lt;strong&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/strong&gt;&lt;/em&gt;
(Addison-Wesley, 1994) by &lt;em&gt;&lt;strong&gt;The Gang of Four&lt;/strong&gt;&lt;/em&gt; (Erich Gamma, Richard
Helm, Ralph Johnson, and John Vlissides) one of the principles listed is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Program against the interface, not against the implementation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Virtually all software engineers agree with this self-evident maxim, and
nobody in their right mind would take issue with it. To program against the
implementation rather than the interface is universally considered a misguided
practice.&lt;/p&gt;
&lt;p&gt;In the context of testing, the corollary to this maxim is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Test against the interface, not against the implementation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In other words, do black-box testing, not white-box testing.&lt;/p&gt;
&lt;p&gt;This is not a unique idea of my own, others have had the same idea before, and have similar things to say. Ian Cooper in his &amp;ldquo;TDD, where did it all go wrong&amp;rdquo; talk states that in TDD a Unit Test is defined as a test that runs in isolation from other tests, not a test that isolates the unit under test from other units.  In other words, the unit of isolation is the test, not the unit under test. Some excerpts from the talk are here: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=HNjlJpuA5kQ&#34; target=&#34;_blank&#34;
   &gt;Build Stuff &amp;lsquo;13: Ian Cooper - TDD, where did it all go wrong&lt;/a&gt; and the full talk is here: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=EZ05e7EMOLM&#34; target=&#34;_blank&#34;
   &gt;TDD, Where Did It All Go Wrong (Ian Cooper, 2017)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other references:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://eng.libretexts.org/Bookshelves/Computer_Science/Programming_and_Computation_Fundamentals/Book%3A_Object-Oriented_Reengineering_Patterns_%28Demeyer_Ducasse_and_Nierstrasz%29/06%3A_Tests__Your_Life_Insurance/6.05%3A_Test_the_Interface_Not_the_Implementation&#34; target=&#34;_blank&#34;
   &gt;Object-Oriented Reengineering Patterns (Demeyer, Ducasse, and Nierstrasz) - Tests - Your Life Insurance - 6.05 - Test the Interface Not the Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://web.archive.org/web/20180825215727/http://www.richardlord.net/blog/tdd/test-the-interface-not-the-implementation.html&#34; target=&#34;_blank&#34;
   &gt;Richard Lord - Test the interface, not the implementation&lt;/a&gt; (via archive.org)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;if-not-unit-testing-then-what&#34;&gt;If not Unit Testing, then what?
&lt;/h4&gt;&lt;p&gt;So, one might ask: if Unit Testing is wrong, then what should we be doing
instead? The original impetus behind the invention of Unit Testing still
remains: when we test a module we want to make sure that the observed behavior
is not affected by potential malfunction in its dependencies. How can we avoid that?&lt;/p&gt;
&lt;p&gt;The way I have been handling this in recent years is by means of a method that
I call &lt;em&gt;Incremental Integration Testing&lt;/em&gt;. You can read about it here: &lt;a 
   href=&#34;//localhost:1313/p/incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;.&lt;/p&gt;</description>
        </item>
        <item>
        <title>A Programming Language</title>
        <link>//localhost:1313/p/a-programming-language/</link>
        <pubDate>Wed, 01 Sep 2021 04:47:26 +0000</pubDate>
        
        <guid>//localhost:1313/p/a-programming-language/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/a-programming-language/media/a-programming-language-cover.jpg&#34;
	width=&#34;1000&#34;
	height=&#34;667&#34;
	srcset=&#34;//localhost:1313/p/a-programming-language/media/a-programming-language-cover_hu_d2c3b265207d8a27.jpg 480w, //localhost:1313/p/a-programming-language/media/a-programming-language-cover_hu_dc5e32d91246236f.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;abstract&#34;&gt;Abstract
&lt;/h3&gt;&lt;p&gt;My thoughts and notes on how I would like a new programming language to look like.&lt;/p&gt;
&lt;p&gt;The unique selling point of the language is:&lt;/p&gt;
&lt;p&gt;Automatic memory reclamation without garbage collection.&lt;/p&gt;
&lt;p&gt;Other selling points of the language are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple and elegant. (So that it is suitable for the academia.)&lt;/li&gt;
&lt;li&gt;Expressive. (So that it is suitable for experienced programmers.)&lt;/li&gt;
&lt;li&gt;Consistent. (So that it is attractive to developer teams.)&lt;/li&gt;
&lt;li&gt;Guiding. (So that it promotes best practices.)&lt;/li&gt;
&lt;li&gt;Fast. (So that it is suitable for high performance computing.)&lt;/li&gt;
&lt;li&gt;Lean. (So that it is suitable for resource-constrained computing.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is work-in-progress; It is bound to be heavily amended as time passes, especially if I try some new language, like Kotlin or Rust.&lt;/p&gt;
&lt;h3 id=&#34;summary-of-language-characteristics&#34;&gt;Summary of language characteristics
&lt;/h3&gt;&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The main goals of the language are achieved via the following characteristics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For simplicity and elegance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scoping by indentation instead of curly braces. (Similar to python.)&lt;/li&gt;
&lt;li&gt;Keyword-rich syntax which avoids cryptic abbreviations and symbols.&lt;/li&gt;
&lt;li&gt;Clear distinction between what is a statement and what is an expression.&lt;/li&gt;
&lt;li&gt;Automatic memory management.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For expressiveness:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lightweight properties, user-defined operators, generics, etc.&lt;/li&gt;
&lt;li&gt;Type inference whenever possible.&lt;/li&gt;
&lt;li&gt;Explicit nullability of reference types.&lt;/li&gt;
&lt;li&gt;Full support for functional programming.&lt;/li&gt;
&lt;li&gt;Full support for imperative programming without functional Nazism.&lt;/li&gt;
&lt;li&gt;Async-transparency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For consistency:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extensive, mandatory, and in many cases non-suppressible, code inspections.&lt;/li&gt;
&lt;li&gt;Whenever possible, only one way of expressing any given thing.&lt;/li&gt;
&lt;li&gt;Extensive and strict formatting rules ensure all code looks the same.&lt;/li&gt;
&lt;li&gt;Reformatability spares developers from having to type code in a particular way.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For performance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strongly typed.&lt;/li&gt;
&lt;li&gt;Primitive value types correspond to machine words.&lt;/li&gt;
&lt;li&gt;Intermediate-code-based, Just-In-Time compiled.&lt;/li&gt;
&lt;li&gt;Fibers. (By means of async-transparency.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For leanness:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reference counting instead of garbage collection.&lt;/li&gt;
&lt;li&gt;Minimalistic mandatory runtime library.&lt;/li&gt;
&lt;li&gt;Separate and optional standard library.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For a list of shortcomings of other languages, which this language intends to fix, see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a 
   href=&#34;//localhost:1313/p/what-is-wrong-with-c-/&#34;
   &gt;What is wrong with C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a 
   href=&#34;//localhost:1313/p/what-is-wrong-with-java/&#34;
   &gt;What is wrong with Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a 
   href=&#34;//localhost:1313/p/what-is-wrong-with-c/&#34;
   &gt;What is wrong with C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a 
   href=&#34;//localhost:1313/p/what-is-wrong-with-scala/&#34;
   &gt;What is wrong with Scala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;language-characteristics-in-detail&#34;&gt;Language characteristics in detail
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Supports reference types and value types, as C# does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;null&lt;/code&gt; value is valid only with explicitly nullable reference types.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As in C# 8.0 with &lt;code&gt;#nullable enable&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;A non-nullable reference can be used when a nullable reference is expected.&lt;/li&gt;
&lt;li&gt;A nullable reference cannot be used when a non-nullable reference is expected,  unless:
&lt;ul&gt;
&lt;li&gt;the compiler knows, via data-flow analysis, that the value is not null.
&lt;ul&gt;
&lt;li&gt;For example, by means of an if-statement which precludes null.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;the value is explicitly cast to non-null. (As with the &amp;ldquo;null-forgiving&amp;rdquo; or &amp;ldquo;damnit&amp;rdquo; operator in C#.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;However, unlike C#:
&lt;ul&gt;
&lt;li&gt;The non-null cast is also an assertion against null, so it does not just circumvent the nullability checks of the compiler, it acts as an if-statement which precludes null.&lt;/li&gt;
&lt;li&gt;Thus, a non-nullable reference can never accidentally hold null.&lt;/li&gt;
&lt;li&gt;It is illegal to apply the non-null cast on a reference that is already non-nullable.&lt;/li&gt;
&lt;li&gt;It is illegal to assign the result of the non-null-cast to a nullable reference.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compiles into an intermediate code format. There are two possibilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LLVM.&lt;/li&gt;
&lt;li&gt;A new intermediate code format called ObjectCode, which is either interpreted or further compiled into machine code by a Just-In-Time (JIT) compiler.
&lt;ul&gt;
&lt;li&gt;Functionally, ObjectCode is a stack machine language, just as JVM ByteCode is.&lt;/li&gt;
&lt;li&gt;ObjectCode is expressed as a hierarchical data structure.
&lt;ul&gt;
&lt;li&gt;A binary ObjectCode file is the result of the serializing that data structure into a binary stream. Serialization into a text stream should also be possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ObjectCode is not trying hard to look like machine language, the way JVM ByteCode does. For example:
&lt;ul&gt;
&lt;li&gt;Instructions have no alternative short-form versions that accomplish the same thing but with fewer bytes.&lt;/li&gt;
&lt;li&gt;There are no instructions for operations between &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Real&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, etc; instead, these operations are available as methods exposed by those value types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Very few instructions have knowledge of any particular data type:
&lt;ul&gt;
&lt;li&gt;Boolean operations have knowledge of the &lt;code&gt;boolean&lt;/code&gt; type. (So that the compiler can apply short-circuit evaluation and branching.)&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;throw&lt;/code&gt; instruction has knowledge of the &lt;code&gt;Exception&lt;/code&gt; type.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;switch&lt;/code&gt; instruction has knowledge of the &lt;code&gt;integer&lt;/code&gt; type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No unnecessary JVM gimmicks like bytecode verification, stack verification, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Executable code is packaged into modules which correspond to C# assemblies.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;So, no myriads of class files floating around.&lt;/li&gt;
&lt;li&gt;Each class in a module has its own timestamp.&lt;/li&gt;
&lt;li&gt;When a module is being made, unchanged classes are copied verbatim from the old module instead of being recompiled, thus retaining their timestamps.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the benefit of benchmarking, the runtime environment can be &lt;em&gt;&lt;strong&gt;programmatically&lt;/strong&gt;&lt;/em&gt; instructed to JIT everything at once so that nothing gets interpreted from that moment on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Async-transparency and fibers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Looks and feels synchronous, but works asynchronously under the hood.&lt;/li&gt;
&lt;li&gt;A function can be declared as &lt;code&gt;async&lt;/code&gt;; this signifies that the function works asynchronously, but nothing else changes:
&lt;ul&gt;
&lt;li&gt;When invoking: you call it and obtain its result just as with any other function.,&lt;/li&gt;
&lt;li&gt;When implementing: you just return a result, just like any other function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When an async function is invoked, the compiler does not emit a direct invocation to the function; instead, it invokes a special InvokeAsync function of the runtime, which accepts the function to be invoked as a parameter, and returns the result returned by the function. So, it looks as if the runtime will invoke the target function, block-waiting for it to complete, and return the result. However, the runtime does the following instead:
&lt;ul&gt;
&lt;li&gt;starts the asynchronous operation,&lt;/li&gt;
&lt;li&gt;obtains a promise under the hood,&lt;/li&gt;
&lt;li&gt;sets aside the promise and the current stack,&lt;/li&gt;
&lt;li&gt;proceeds to do other stuff.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When the promise is satisfied, the runtime:
&lt;ul&gt;
&lt;li&gt;gets the return value from the promise,&lt;/li&gt;
&lt;li&gt;switches back to that stack,&lt;/li&gt;
&lt;li&gt;continues execution from there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Note: something called &amp;ldquo;_hyperscript&amp;rdquo; already purports to support async-transparency; I do not know whether they switch stacks or pass promises/futures under the hood all over the place. See &lt;a class=&#34;external&#34; 
   href=&#34;https://hyperscript.org/docs/#async&#34; target=&#34;_blank&#34;
   &gt;https://hyperscript.org/docs/#async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Note: this is related to OpenJDK JEP 425: Virtual Threads. See &lt;a class=&#34;external&#34; 
   href=&#34;https://openjdk.org/jeps/425&#34; target=&#34;_blank&#34;
   &gt;https://openjdk.org/jeps/425&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An abstraction of an &lt;code&gt;EventDriver&lt;/code&gt; is provided, which encapsulates an event driven system. A &lt;code&gt;ConcreteEventDriver&lt;/code&gt; is provided, which is a default (&amp;ldquo;reference&amp;rdquo;) implementation of an event-driven system.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;EventDriver&lt;/code&gt; does not contain a &lt;code&gt;post&lt;/code&gt; method; instead, it exposes an &lt;code&gt;Injector&lt;/code&gt; interface, which does. So, code that only needs to &lt;code&gt;post&lt;/code&gt; only needs to have access to an &lt;code&gt;Injector&lt;/code&gt;, not to the whole &lt;code&gt;EventDriver&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Threads and thread-pools exist for interfacing with legacy systems; the preferred way of working is with fibers and fiber-pools.
&lt;ul&gt;
&lt;li&gt;Each fiber-pool has its own event-driver.&lt;/li&gt;
&lt;li&gt;TODO: describe exactly what a fiber is.&lt;/li&gt;
&lt;li&gt;TODO: describe how a fiber exposes a proxy for invocation from other fibers and how the proxy asserts that everything passed back and forth is either thread-safe or immutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Note that in multi-threaded execution models purity is of very limited usefulness because it does not prevent reading mutable state, so it does not avoid race conditions. However, this language makes use of fibers instead of threads, so there can be no race conditions, so purity becomes useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for functional programming.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example:
&lt;ul&gt;
&lt;li&gt;Lambdas.&lt;/li&gt;
&lt;li&gt;Tuples.&lt;/li&gt;
&lt;li&gt;Everything is read-only by default.
&lt;ul&gt;
&lt;li&gt;The keyword &lt;code&gt;mutable&lt;/code&gt; must be used to denote something which may vary. (Scala&amp;rsquo;s &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;val&lt;/code&gt; are too cryptic and too similar; mutability must stand out like a sore thumb.)&lt;/li&gt;
&lt;li&gt;So, the syntax for declaring a mutable local integer is:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mutable local x: integer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It is an error to declare something as &lt;code&gt;mutable&lt;/code&gt; and forget to ever mutate it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All interfaces are pure by default.
&lt;ul&gt;
&lt;li&gt;A special keyword &lt;code&gt;impure&lt;/code&gt; must be used to denote an interface which is allowed to contain impure methods.&lt;/li&gt;
&lt;li&gt;It is an error to declare an interface as &lt;code&gt;impure&lt;/code&gt; and forget to include any impure methods in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Methods can be either pure or impure, and this has severe implications on what they may and may not do.&lt;/li&gt;
&lt;li&gt;Most language constructs like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt; etc. have both functional and imperative forms.
&lt;ul&gt;
&lt;li&gt;The functional forms must be pure; the imperative forms can be impure.&lt;/li&gt;
&lt;li&gt;The functional forms may not use flow-control keywords that would affect enclosing scopes; in other words,
&lt;ul&gt;
&lt;li&gt;A functional construct may not use the &lt;code&gt;return&lt;/code&gt; keyword to exit the current function&lt;/li&gt;
&lt;li&gt;A functional construct may not use the &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; keywords to exit or repeat an enclosing loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The functional forms make use of the &lt;code&gt;yield&lt;/code&gt; keyword to produce values. So, the functional &lt;code&gt;if&lt;/code&gt; statement is &lt;code&gt;if( x ) yield 5; else yield 6;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Functional loops evaluate to &lt;code&gt;Enumerable&lt;/code&gt; and each execution of &lt;code&gt;yield&lt;/code&gt; produces a new element.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The standard library offers various monads like &lt;code&gt;Optional&lt;/code&gt;, &lt;code&gt;Try&lt;/code&gt;, and other common functional goodies.&lt;/li&gt;
&lt;li&gt;The standard collections support fluent constructs.
&lt;ul&gt;
&lt;li&gt;The functional constructs are like Scala&amp;rsquo;s collections, which means that they are somewhat like C#&amp;rsquo;s linq and not like Java&amp;rsquo;s collection streams.&lt;/li&gt;
&lt;li&gt;There is no support in the standard collections for parallelization.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No such thing as the &lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;out&lt;/code&gt; parameters of C#.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;However:
&lt;ul&gt;
&lt;li&gt;No functional Nazism.
&lt;ul&gt;
&lt;li&gt;No obstacles to having mutable state, other than having to use an extra keyword here and there.&lt;/li&gt;
&lt;li&gt;A proper &lt;code&gt;for&lt;/code&gt; loop.
&lt;ul&gt;
&lt;li&gt;Even the functional version of the &lt;code&gt;for&lt;/code&gt; loop is a first-class language construct, not yet another higher order function.&lt;/li&gt;
&lt;li&gt;Thus, when single-stepping through code, you do not have to remember to use step-into instead of step-over in order to skip the header of the loop and reach the body of the loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Proper &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; keywords.&lt;/li&gt;
&lt;li&gt;Freedom to re-assign parameters.
&lt;ul&gt;
&lt;li&gt;Thus making the original value inaccessible.&lt;/li&gt;
&lt;li&gt;To allow this, the &lt;code&gt;mutable&lt;/code&gt; keyword must be added to the parameter.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;mutable&lt;/code&gt; keyword on a parameter has no meaning for the caller of the method, and therefore does not become part of the method prototype.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Everything that can be accomplished functionally can also be accomplished imperatively.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No functional gimmicks.
&lt;ul&gt;
&lt;li&gt;The expression evaluated last within a function does not magically become the return value of the function without a &lt;code&gt;return&lt;/code&gt; statement; &lt;code&gt;return&lt;/code&gt; statements cannot simply be omitted.  Same for &lt;code&gt;yield&lt;/code&gt; statements.&lt;/li&gt;
&lt;li&gt;No copy-on-mutation collections.&lt;/li&gt;
&lt;li&gt;No such thing as Scala&amp;rsquo;s &lt;code&gt;Unit&lt;/code&gt;. Two approaches are possible:
&lt;ul&gt;
&lt;li&gt;We maintain a clear distinction between functions and procedures, in which case &lt;code&gt;Unit&lt;/code&gt; is unnecessary just as &lt;code&gt;void&lt;/code&gt; is unnecessary.&lt;/li&gt;
&lt;li&gt;Everything is a function, but instead of &lt;code&gt;Unit&lt;/code&gt; we stick to good old familiar &lt;code&gt;void&lt;/code&gt;, which now becomes an actual data type of which there exists only one instance.
&lt;ul&gt;
&lt;li&gt;Normally, the instance of void should never need to be accessed, (and therefore might not even be accessible,) because it is implied when necessary. For example, the statement &lt;code&gt;return&lt;/code&gt; is equivalent to &lt;code&gt;return void.instance&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The compiler makes a very clear distinction between statements and expressions.
&lt;ul&gt;
&lt;li&gt;A block scope consists of statements.&lt;/li&gt;
&lt;li&gt;Statements and expressions are not interchangeable:
&lt;ul&gt;
&lt;li&gt;A statement may contain expressions, but an expression may not contain statements.&lt;/li&gt;
&lt;li&gt;An expression cannot appear in place of a statement.&lt;/li&gt;
&lt;li&gt;A statement cannot appear in place of an expression. (With the possible exception of throwing an exception.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Most languages allow invoking a function and ignoring its return value; we put an end to that abhorrent malpractice.&lt;/li&gt;
&lt;li&gt;When a statement is expected, and we use something which yields a value, that value must be dealt with, in order to be left with a statement and not an expression.&lt;/li&gt;
&lt;li&gt;The language might provide a mechanism for ignoring a value, (perhaps a cast to void?) but this can also be accomplished by invoking a void-returning method which accepts one parameter and just ignores it.&lt;/li&gt;
&lt;li&gt;Assignment is a statement, and it requires the use of the &lt;code&gt;let&lt;/code&gt; keyword, as in &lt;code&gt;let a = 5;&lt;/code&gt; unless a field or local is being declared and initialized at once, in which case the &lt;code&gt;let&lt;/code&gt; keyword is omitted, as in &lt;code&gt;local a = 5;&lt;/code&gt; This has some drawbacks and some benefits:
&lt;ul&gt;
&lt;li&gt;Drawback: We cannot initialize multiple variables in one go, as in &lt;code&gt;let a = b = c = 5;&lt;/code&gt; because everything after the first &lt;code&gt;=&lt;/code&gt; must be an expression. That&amp;rsquo;s inconsequential, perhaps even arguably a benefit.&lt;/li&gt;
&lt;li&gt;Drawback: We cannot assign and compare in one go, as in &lt;code&gt;if( ( let a = f() ) &amp;gt; 5 )...&lt;/code&gt; because assignment is a statement, so it cannot be used inside an expression. That&amp;rsquo;s inconsequential, perhaps even arguably a benefit.&lt;/li&gt;
&lt;li&gt;Benefit: since the compiler can always tell whether it is compiling a statement or an expression, it can treat certain things differently depending on whether they appear in a statement or an expression. Namely, the equals sign can now be used either in a statement, as the assignment operator, or in an expression, as the equality check operator.&lt;/li&gt;
&lt;li&gt;Thus, after so many decades, we can finally say good-bye to the inelegant double-equals (&lt;code&gt;==&lt;/code&gt;) legacy of C, and start using the single equals sign for equality comparison, as it was always meant to be.&lt;/li&gt;
&lt;li&gt;The inequality operator can either stay as &lt;code&gt;!=&lt;/code&gt; or become &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The prefix and postfix increment operators are problematic because they are expressions with side-effects, (they both mutate an existing value and yield a new value,) so we might disallow them, and require the use of the long form instead: &lt;code&gt;let x = x + 1;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;If we keep them, then they will certainly only be allowed in expressions.&lt;/li&gt;
&lt;li&gt;(You could make it a statement with &lt;code&gt;(void) x++;&lt;/code&gt; but why would you?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We keep &lt;code&gt;static&lt;/code&gt; as in Java and avoid Scala&amp;rsquo;s inelegant companion objects.&lt;/li&gt;
&lt;li&gt;There is no support in the standard collections for parallelization.&lt;/li&gt;
&lt;li&gt;When declaring a lambda, the keyword &lt;code&gt;function&lt;/code&gt; must be used.&lt;/li&gt;
&lt;li&gt;When declaring a tuple, the keyword &lt;code&gt;tuple&lt;/code&gt; must be used.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything is private by default, unless explicitly given a higher visibility.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Therefore, the language does not have a keyword to indicate that something is private.&lt;/li&gt;
&lt;li&gt;Note that this also applies to interface methods: if you want an interface method to be public, you have to declare it as public, otherwise it stays private and may only be invoked from other methods of the same interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Everything is non-inheritable by default, unless explicitly declared as inheritable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(Except for interfaces, which are by definition inheritable.)&lt;/li&gt;
&lt;li&gt;Therefore, the language does not have a keyword to indicate that something
is non-inheritable (sealed in C#, final in Java.)&lt;/li&gt;
&lt;li&gt;Note that this also applies to interface methods: if you want an interface
method to be overridable, you have to declare it as overridable.&lt;/li&gt;
&lt;li&gt;This makes certain other rules unnecessary, for example we do not have to stipulate that it is an error to explicitly declare a method as non-overridable in a class which has already been declared as non-inheritable.&lt;/li&gt;
&lt;li&gt;It is an error to declare something as inheritable and fail to ever inherit from it.
&lt;ul&gt;
&lt;li&gt;This is enforceable because inheritance is confined within a module, so all members of an inheritance hierarchy are known during the compilation of the module.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Emphasis on purity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are two ways we can go about this, and which way we will go is yet to be decided.
&lt;ul&gt;
&lt;li&gt;Procedures and functions
&lt;ul&gt;
&lt;li&gt;A method can be either a procedure or a function.&lt;/li&gt;
&lt;li&gt;A procedure:
&lt;ul&gt;
&lt;li&gt;Does not return anything.&lt;/li&gt;
&lt;li&gt;Is impure. (Must have at least one side-effect.)&lt;/li&gt;
&lt;li&gt;Can indicate failure only by means of throwing an exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A function:
&lt;ul&gt;
&lt;li&gt;Returns something.&lt;/li&gt;
&lt;li&gt;Can indicate failure either by throwing an exception or by returning
a &lt;code&gt;Try&lt;/code&gt; monad.&lt;/li&gt;
&lt;li&gt;Is pure. (Must have no side-effects.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Experimental idea: the keyword &lt;code&gt;method&lt;/code&gt; can be used to denote a higher order method which is either a procedure or a function depending on whether its parameter is a procedure or a function.
&lt;ul&gt;
&lt;li&gt;It must have a parameter declared as &lt;code&gt;method&lt;/code&gt; instead of the more specific &lt;code&gt;procedure&lt;/code&gt; or &lt;code&gt;function&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It may have additional parameters that are explicitly &lt;code&gt;function&lt;/code&gt; or &lt;code&gt;procedure&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It must treat its parameter method as a function, meaning that when it invokes that method, it must obtain a return value from it.&lt;/li&gt;
&lt;li&gt;It can be coded as a function, meaning that it can return that value.&lt;/li&gt;
&lt;li&gt;From the point of view of the caller, it behaves either as a procedure or as a function depending on whether the caller passes a procedure or a function to its method parameter.&lt;/li&gt;
&lt;li&gt;The caller may actually pass yet another a method to it, in which case the caller is in turn a method instead of a procedure or function.&lt;/li&gt;
&lt;li&gt;Such a construct would eliminate the need to declare both a function and a procedure for each higher order operation, and at the same time avoid the inelegance of &lt;code&gt;Unit&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pure and impure methods
&lt;ul&gt;
&lt;li&gt;All methods are functions.&lt;/li&gt;
&lt;li&gt;Methods that have nothing to return must be declared to return &lt;code&gt;void&lt;/code&gt;, which is equivalent to Scala&amp;rsquo;s &lt;code&gt;Unit&lt;/code&gt; in the sense that it is an actual data type of which there exists only one instance.
&lt;ul&gt;
&lt;li&gt;Thus, void-returning and non-void-returning functions can be treated in exactly the same way in all situations. For example:
&lt;ul&gt;
&lt;li&gt;From within a &lt;code&gt;void&lt;/code&gt; function we can use the &lt;code&gt;return&lt;/code&gt; keyword to return the result of invoking another &lt;code&gt;void&lt;/code&gt; function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This in turn means that a single higher order function can operate both on void-returning and non-void-returning functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Impure methods must be explicitly marked with the &lt;code&gt;impure&lt;/code&gt; keyword.&lt;/li&gt;
&lt;li&gt;An impure method may return either void or non-void.&lt;/li&gt;
&lt;li&gt;A pure method must return non-void. (It would not make sense to return void, because it cannot perform any side-effects, so its sole reason of existence is to return something.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In all cases:
&lt;ul&gt;
&lt;li&gt;A pure method / function:
&lt;ul&gt;
&lt;li&gt;May not assign to any field of &lt;code&gt;this&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;May not invoke any impure methods / procedures on any of its parameters, including &lt;code&gt;this&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;May not escape an impure interface of any of its parameters, including &lt;code&gt;this&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;It is okay to escape pure interfaces, since there will be no side-effects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;May still declare and manipulate mutable locals, including the ability to escape mutable locals or impure interfaces thereof.&lt;/li&gt;
&lt;li&gt;It would be nice to be able to say that a pure method / function can never throw an exception; however, we cannot do that, because even a pure method / function can, for example, accidentally divide by zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mechanisms are provided whereby purity checks can be suppressed when necessary, in order to allow for functions which, although formally pure, may under the hood modify caches, update statistics, perform diagnostic I/O, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Emphasis on readability, at the expense of terseness when necessary.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Typing is &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; one of the major problems faced by our profession; unreadable code is.&lt;/li&gt;
&lt;li&gt;The language should be suitable for universities to teach, so unlike Scala, it needs to have a low entry barrier.&lt;/li&gt;
&lt;li&gt;All language keywords are fully spelled out and avoid unnecessary technicalities .
&lt;ul&gt;
&lt;li&gt;No inelegant abbreviations like &lt;code&gt;fun&lt;/code&gt;, &lt;code&gt;def&lt;/code&gt;, &lt;code&gt;mut&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;A function is denoted by &lt;code&gt;function&lt;/code&gt;. (Duh!)&lt;/li&gt;
&lt;li&gt;A field is denoted by &lt;code&gt;field&lt;/code&gt;. (Duh!)&lt;/li&gt;
&lt;li&gt;A mutable field is denoted by &lt;code&gt;mutable field&lt;/code&gt;. (Duh!)&lt;/li&gt;
&lt;li&gt;A local is denoted by &lt;code&gt;local&lt;/code&gt;. (Duh!)&lt;/li&gt;
&lt;li&gt;A mutable local is denoted by &lt;code&gt;mutable local&lt;/code&gt;. (Duh!)&lt;/li&gt;
&lt;li&gt;The Boolean type is &lt;code&gt;boolean&lt;/code&gt;, not &lt;code&gt;bool&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The Integer type is &lt;code&gt;integer&lt;/code&gt;, not &lt;code&gt;int&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;Nobody will ever have to type &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;,
because any halfway decent code editor will give you &lt;code&gt;integer&lt;/code&gt; if
you just type &lt;code&gt;i&lt;/code&gt;, hit &lt;code&gt;Ctrl+Space&lt;/code&gt; to open up auto-completion,
and then &lt;code&gt;Enter&lt;/code&gt; to pick the first suggestion.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Long Integer type is &lt;code&gt;long integer&lt;/code&gt;, not &lt;code&gt;long&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The 64-bit IEEE floating point type is &lt;code&gt;real&lt;/code&gt;, not &lt;code&gt;double&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The 32-bit IEEE floating point type is &lt;code&gt;short real&lt;/code&gt;, not &lt;code&gt;float&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In general, the language aims to reduce the amount of parentheses.
&lt;ul&gt;
&lt;li&gt;Expressions may not be parenthesized, only sub-expressions may.
&lt;ul&gt;
&lt;li&gt;So, the popular construct &lt;code&gt;return (result)&lt;/code&gt; is not just redundant; it is actually a compiler error.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In general, the language favors words over punctuation, so:
&lt;ul&gt;
&lt;li&gt;Inheritance by means of &lt;code&gt;extends&lt;/code&gt; and &lt;code&gt;implements&lt;/code&gt; keywords as in Java instead of the &lt;code&gt;:&lt;/code&gt; character of C#.&lt;/li&gt;
&lt;li&gt;Fully spelled out &lt;code&gt;for each a in b do&lt;/code&gt; like C# instead of the &lt;code&gt;for( a : b )&lt;/code&gt; of Java.&lt;/li&gt;
&lt;li&gt;Boolean operators are words, like Pascal and Python and unlike the
C family.
&lt;ul&gt;
&lt;li&gt;i.e. the operators are &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, and &lt;code&gt;not&lt;/code&gt; instead of &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, and &lt;code&gt;!&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The compiler handles boolean operators, applying operator precedence and short-circuit evaluation.&lt;/li&gt;
&lt;li&gt;The compiler maps all other operators to method calls, (observing operator precedence rules,) as follows:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a + b&lt;/code&gt; maps to &lt;code&gt;a.Plus( b )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a - b&lt;/code&gt; maps to &lt;code&gt;a.Minus( b )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a * b&lt;/code&gt; maps to &lt;code&gt;a.Times( b )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a / b&lt;/code&gt; maps to &lt;code&gt;a.Per( b )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a % b&lt;/code&gt; maps to &lt;code&gt;a.Modulo( b )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a ^ b&lt;/code&gt; maps to &lt;code&gt;a.Power( b )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a = b&lt;/code&gt; maps to &lt;code&gt;a.Equals( b )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a &amp;amp;lt; b&lt;/code&gt; maps to &lt;code&gt;a.Below( b )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a &amp;amp;gt; b&lt;/code&gt; maps to &lt;code&gt;a.Above( b )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a != b&lt;/code&gt; maps to &lt;code&gt;not a.Equals( b )&lt;/code&gt;. (*)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a &amp;amp;lt;= b&lt;/code&gt; maps to &lt;code&gt;not a.Above( b )&lt;/code&gt;. (*)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a =&amp;amp;gt; b&lt;/code&gt; maps to &lt;code&gt;not a.Below( b )&lt;/code&gt;. (*)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt; maps to &lt;code&gt;a.Negative&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~a&lt;/code&gt; maps to &lt;code&gt;a.TwosComplement&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;++a&lt;/code&gt; maps to &lt;code&gt;a.PreIncrement()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a++&lt;/code&gt; maps to &lt;code&gt;a.PostIncrement()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;So, when we code &lt;code&gt;a + b&lt;/code&gt;, this will only compile if the type of &lt;code&gt;a&lt;/code&gt; has a function called &lt;code&gt;Plus&lt;/code&gt; with a parameter of the type of &lt;code&gt;b&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;(*) These negations are meant to save us from having to have negative forms of the functions; I think they are okay; it remains to be seen if there are situations where this will not work. NaN comes to mind as a possible pitfall, but then again  a comparison against NaN should perhaps throw an exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preference towards having only one way for any given thing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When multiple ways of accomplishing the same thing are conceivable, the language design tries, when possible, and when it makes sense, to make a specific choice and prohibit all other ways. For example:
&lt;ul&gt;
&lt;li&gt;When it is unnecessary to qualify an instance member with &lt;code&gt;this&lt;/code&gt;, it is an error to qualify it.&lt;/li&gt;
&lt;li&gt;When it is unnecessary to qualify a static member with the class name, it is an error to qualify it.&lt;/li&gt;
&lt;li&gt;When the body of the &amp;ldquo;then&amp;rdquo; part of an &lt;code&gt;if&lt;/code&gt; statement never falls through (because it ends with either a &lt;code&gt;return&lt;/code&gt; or a &lt;code&gt;throw&lt;/code&gt; statement) it is an error to use the &lt;code&gt;else&lt;/code&gt; keyword.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Encapsulation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A nested scope has access to private members of the enclosing scope.&lt;/li&gt;
&lt;li&gt;The enclosing scope never has access to private members of nested scopes.
&lt;ul&gt;
&lt;li&gt;Note that this corrects the insanity of Java which allows an enclosing class to have access to private members of nested classes. (Duh!?)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When a source file declares a namespace as public, only the classes in that source file are exported.
&lt;ul&gt;
&lt;li&gt;This stipulation is necessary since multiple source files may declare a namespace, but only some of those source files might declare the namespace as public.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A module may expose interfaces, enums, records (value types), and classes. However, when a module exposes a class, what actually gets exposed is only the interface of that class, not a class itself. In other words, the language will never expose across modules the constructor of a class, nor its protected methods. This has some very interesting implications:
&lt;ul&gt;
&lt;li&gt;All classes participating in an inheritance hierarchy must be defined within a single module: One cannot extend a class defined in another module.&lt;/li&gt;
&lt;li&gt;All classes participating in an inheritance hierarchy are known during the compilation of the module that contains the hierarchy.
&lt;ul&gt;
&lt;li&gt;This allows for certain useful optimizations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The creation of a new instance of a class defined in another module cannot be accomplished by invoking a constructor; it can only be accomplished via a factory method.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Memory management: Reference counting instead of garbage-collection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The memory model looks a lot like the memory model of Java and C#:
&lt;ul&gt;
&lt;li&gt;The heap consists of big chunks of memory that are allocated from the operating system at once. The runtime does its own memory management within these chunks, for efficiency.&lt;/li&gt;
&lt;li&gt;Objects are actually pointers to objects that live on the heap.&lt;/li&gt;
&lt;li&gt;Pointers cannot be manipulated as they can in C++.&lt;/li&gt;
&lt;li&gt;Value types live either in local storage or as members of other types.&lt;/li&gt;
&lt;li&gt;When necessary, value types can be treated as reference types by means of boxing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pointers are implemented as smart (shared) pointers, so that:
&lt;ul&gt;
&lt;li&gt;There is no need for garbage collection.&lt;/li&gt;
&lt;li&gt;There is no need for each object to have its own lock.&lt;/li&gt;
&lt;li&gt;There is no need for finalization.&lt;/li&gt;
&lt;li&gt;There are no preposterous situations like object resurrection.&lt;/li&gt;
&lt;li&gt;There are fewer sources of randomness and non-determinism in the memory layout and in the responsiveness of the code.&lt;/li&gt;
&lt;li&gt;Destruction is assured and immediate the moment an object ceases to be referenced.&lt;/li&gt;
&lt;li&gt;Destruction involves real destructors as in C++.&lt;/li&gt;
&lt;li&gt;While a destructor executes, all objects referenced by the object being destructed are guaranteed to still be present and alive. (Unlike garbage-collected languages, where finalizers have to cope with the fact that some of the referenced objects may have already been collected.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The reference count is accommodated in the object itself, so smart pointers can be appreciably more lightweight than in C++.&lt;/li&gt;
&lt;li&gt;The runtime may choose to implement smart pointers using double indirection, so as to be able to perform memory defragmentation.&lt;/li&gt;
&lt;li&gt;Addressing the pitfalls of reference counting:
&lt;ul&gt;
&lt;li&gt;Reference counting suffers from two pitfalls:
&lt;ul&gt;
&lt;li&gt;Long reference chains:
&lt;ul&gt;
&lt;li&gt;May result in stack overflow when disposed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Circular references:
&lt;ul&gt;
&lt;li&gt;Result in memory leaks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We address these pitfalls as follows:
&lt;ul&gt;
&lt;li&gt;Long reference chains:
&lt;ul&gt;
&lt;li&gt;We solve this by making destructors deliberately fail if they are ever re-entered, so that we can detect the deallocation of even the smallest chain that consists of only two nodes. The programmer can then modify their code to do one of the following:
&lt;ul&gt;
&lt;li&gt;Manually perform the destruction of the chain in a way that avoids recursion.&lt;/li&gt;
&lt;li&gt;Refactor things so that the objects are kept in a collection instead of forming an ad-hoc chain.&lt;/li&gt;
&lt;li&gt;Explicitly unlink and destroy the chain using the &lt;code&gt;delete chain&lt;/code&gt; keyword, which works in a non-recursive way.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Circular references:
&lt;ul&gt;
&lt;li&gt;A debug-time-only mark-sweep checker that runs on its own thread detects leaked cyclic object graphs and warns the programmer about them. (It does not attempt to fix anything.) The programmer can then modify their code to do one of the following:
&lt;ul&gt;
&lt;li&gt;Break any cycles in the graph before unlinking it.&lt;/li&gt;
&lt;li&gt;Explicitly unlink and destroy the cyclic graph using the &lt;code&gt;delete cyclic&lt;/code&gt; keyword, which gracefully handles cyclic object graphs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;These means of addressing the pitfalls of reference counting are not perfect, so some extra maintenance will sometimes be required. For example, we might think that we are properly handling all cyclic object graphs, but as a result of a change somewhere, we may now discover that we have a new cyclic object graph, which we must deal with; Still, the extra trouble is expected to be rare, and it is expected to be very well worth all the trouble we save by not having to have a garbage collector.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Of interest: &lt;a class=&#34;external&#34; 
   href=&#34;https://verdagon.dev/blog/hybrid-generational-memory&#34; target=&#34;_blank&#34;
   &gt;https://verdagon.dev/blog/hybrid-generational-memory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Constructor syntax like Scala.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constructor parameters in the class header.&lt;/li&gt;
&lt;li&gt;Constructor code in the class body. (With the additional restriction that it must all appear up-front.)&lt;/li&gt;
&lt;li&gt;Additional constructors by means of static factory methods.&lt;/li&gt;
&lt;li&gt;Any constructor parameters that are referenced by methods automatically become fields so that we do not have to declare extra fields and initialize them from the parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strong distinction between release runs and debug runs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(But not necessarily different builds; Optimization is a JIT concern.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Externally supplied constant values.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A special type of constant can be defined, whose value is not specified in the source code, and must instead be supplied later:
&lt;ul&gt;
&lt;li&gt;During compilation, by means of a special parameter to the compiler, or&lt;/li&gt;
&lt;li&gt;At runtime, by means of a special parameter to the launcher.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;These constants are better than C-style &amp;ldquo;manifest constants&amp;rdquo; and C#-style &amp;ldquo;defined symbols&amp;rdquo; because they are well defined, strongly typed, mandatory, and obey normal static immutable field rules. This means that:
&lt;ul&gt;
&lt;li&gt;It is possible to know the set of all external constants that must be defined in order to compile and run something.&lt;/li&gt;
&lt;li&gt;An attempt to compile or run something without supplying all external constant values will always result in an error.&lt;/li&gt;
&lt;li&gt;An attempt to supply an external constant value for a non-existent external constant will always result in an error.&lt;/li&gt;
&lt;li&gt;Each externally supplied constant value must be of the correct type expected by the constant declared in the code.&lt;/li&gt;
&lt;li&gt;When using external constants for conditional compilation, the code paths that are not selected will result in no code being generated, but must still pass compilation, so there is no danger of code rot.&lt;/li&gt;
&lt;li&gt;With some help from the loader we can write tests that exercise code under different values for runtime-supplied external constants.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integer types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixed Integer types with explicitly defined sizes, as per C#.&lt;/li&gt;
&lt;li&gt;Flex integer types whose size is determined by the runtime according to what is most efficient for the underlying hardware architecture.
&lt;ul&gt;
&lt;li&gt;Each flex integer has a &amp;ldquo;Guaranteed Width&amp;rdquo;, which is the minimum width that this integer is guaranteed to have on any hardware architecture.
These widths are:
&lt;ul&gt;
&lt;li&gt;8 bits for &lt;code&gt;tiny integer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;16 bits for &lt;code&gt;short integer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;32 bits for &lt;code&gt;integer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;64 bits for &lt;code&gt;long integer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On debug runs, the runtime checks all operations on flex integers, and if there is an overflow past the guaranteed width, a runtime exception is thrown. Thus, we ensure consistent flex integer behavior on any architecture.&lt;/li&gt;
&lt;li&gt;This corrects the narrow-mindedness of C# where &lt;code&gt;int&lt;/code&gt; has been defined to be exactly 32 bits long, even on architectures with a larger machine word size. (Which is pretty much all major architectures today that 64-bit is the norm.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full set of signed and unsigned integers as per C#, both for the fixed and flex flavors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Exceptions&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lightweight exceptions that are inexpensive to throw and to catch.&lt;/li&gt;
&lt;li&gt;No such thing as the &amp;ldquo;checked&amp;rdquo; exceptions of Java.&lt;/li&gt;
&lt;li&gt;No extra baggage:
&lt;ul&gt;
&lt;li&gt;The base &lt;code&gt;Exception&lt;/code&gt; class does not even have a &amp;ldquo;message&amp;rdquo;, let alone a
&amp;ldquo;localized message&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;ToString()&lt;/code&gt; method of the base &lt;code&gt;Exception&lt;/code&gt; class:
&lt;ul&gt;
&lt;li&gt;Is not overridable.&lt;/li&gt;
&lt;li&gt;Yields a string consisting of the class name of the exception followed by the name and the string representation of the value of each one of its fields, obtained using reflection.&lt;/li&gt;
&lt;li&gt;If you want an exception to result in a human-readable error message that you can actually show to an end user, you have to accomplish this entirely by yourself. (Please make sure to do this in the end-user&amp;rsquo;s native language, which, statistically speaking, is unlikely to be English.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Standard Collections Model&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The standard language runtime provides the following:
&lt;ul&gt;
&lt;li&gt;An assortment of unmodifiable collection interfaces: &lt;code&gt;Enumerable&lt;/code&gt;, &lt;code&gt;Collection&lt;/code&gt;, &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enumerable&lt;/code&gt; exposes a property for accessing the current element, and separate methods for checking whether there exist more elements and for advancing to the next element, as in C#.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;Collection&lt;/code&gt; is an &lt;code&gt;Enumerable&lt;/code&gt; with a length and the ability to check whether it contains a certain element, as in Java.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt; is also a collection of &lt;code&gt;Map.Entry&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;This is as in C#, where a &lt;code&gt;Dictionary&lt;/code&gt; is a collection of &lt;code&gt;KeyValuePair&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This is unlike Java, where &lt;code&gt;Map&lt;/code&gt; is not a collection, and in order to obtain the collection of entries you must invoke &lt;code&gt;Map.entrySet()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Factory methods create immutable collection classes implementing the unmodifiable collection interfaces.&lt;/li&gt;
&lt;li&gt;An assortment of &amp;ldquo;rigid&amp;rdquo; (i.e. mutable, but structurally immutable) interfaces which extend the unmodifiable interfaces adding methods to replace existing items but no methods to add or remove items: &lt;code&gt;RigidEnumerable&lt;/code&gt;, &lt;code&gt;RigidCollection&lt;/code&gt;, &lt;code&gt;RigidList&lt;/code&gt;, &lt;code&gt;RigidMap&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;An assortment of mutable collection interfaces which extend the rigid interfaces adding add/remove/clear methods: &lt;code&gt;MutableEnumerable&lt;/code&gt;, &lt;code&gt;MutableCollection&lt;/code&gt;, &lt;code&gt;MutableList&lt;/code&gt;, &lt;code&gt;MutableMap&lt;/code&gt;, &lt;code&gt;Queue&lt;/code&gt;, &lt;code&gt;Stack&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;MutableCollections&lt;/code&gt; factory exposing methods that create mutable collection classes implementing the mutable collection interfaces.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Values&lt;/code&gt; collection of a mutable map returns a &lt;code&gt;RigidCollection&lt;/code&gt; of map values, so that:
&lt;ul&gt;
&lt;li&gt;You can replace an element in this collection, which will have the side-effect of associating an existing key with a new value.&lt;/li&gt;
&lt;li&gt;You cannot add an element to this collection, which makes sense because you have no means of specifying the key that should map to the newly inserted value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The method for adding an item to a collection is called &amp;lsquo;Add&amp;rsquo;, not &amp;lsquo;Push&amp;rsquo;.
&lt;ul&gt;
&lt;li&gt;For consistency, even the &lt;code&gt;Stack&lt;/code&gt; collection exposes an &lt;code&gt;Add&lt;/code&gt; method, not a &lt;code&gt;Push&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Collaboration between the language runtime and collections:
&lt;ul&gt;
&lt;li&gt;The for-each loop operates on &lt;code&gt;Enumerable&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;The loop variable can be reassigned, causing the current element of the Enumerable to be replaced with a new value.  In this case, the for-each loop requires a &lt;code&gt;RigidEnumerable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A special keyword allows removing the current item, in which case the for-each loop requires a &lt;code&gt;MutableEnumerable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since we have proper destructors, there is no need for special handling of disposable enumerators. (Something which C# provides, but Java lacks.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;An array literal evaluates to an instance of &lt;code&gt;RigidList&lt;/code&gt;, so the language is free from arrays, like Scala.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Heavy promotion of assertions and plenty of built-in extra error-checking on debug runs, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arithmetic checking
&lt;ul&gt;
&lt;li&gt;An exception is thrown when any of the following occurs:
&lt;ul&gt;
&lt;li&gt;Division by zero.&lt;/li&gt;
&lt;li&gt;Fixed integral type overflow. (This can be selectively suppressed on  an individual expression basis as with the &amp;ldquo;unchecked&amp;rdquo; keyword of C#.)&lt;/li&gt;
&lt;li&gt;Flex integer guaranteed width overflow.&lt;/li&gt;
&lt;li&gt;(Possibly) Operations on NaNs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Throwing Switches
&lt;ul&gt;
&lt;li&gt;If the switch data type is exhaustively switchable (e.g. boolean):
&lt;ul&gt;
&lt;li&gt;It is an error if not all cases are covered and no default case is provided.&lt;/li&gt;
&lt;li&gt;It is an error if all cases are covered and a default case is provided.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the switch data type is not exhaustively switchable (e.g. integer):
&lt;ul&gt;
&lt;li&gt;If no default case is provided, an implicit default case is supplied by the compiler which throws an exception.&lt;/li&gt;
&lt;li&gt;This plays nicely with code coverage: no more uncoverable assertions in unreachable default clauses.&lt;/li&gt;
&lt;li&gt;If you want a switch statement with default case fall-through on a non-exhaustively switchable type, add an empty &lt;code&gt;default&lt;/code&gt; case. (Duh!)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Big on warnings and errors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most things traditionally thought of as warnings are errors.&lt;/li&gt;
&lt;li&gt;Most checks of the kind that IntelliJ IDEA calls &amp;ldquo;inspections&amp;rdquo; are built-into the language as warnings, many of them even as errors.&lt;/li&gt;
&lt;li&gt;Selective warning suppression only; no bulk suppression.
&lt;ul&gt;
&lt;li&gt;Warning suppression is possible only on the individual statement where the problem occurs, never on a larger scope.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Warnings always cause compilation to fail.
&lt;ul&gt;
&lt;li&gt;It is as if a &amp;ldquo;treat warnings as errors&amp;rdquo; option is always on and cannot be turned off.&lt;/li&gt;
&lt;li&gt;The difference between warnings and errors is &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; that you can ignore warnings and proceed to run; the difference is that a warning can be suppressed, whereas an error cannot.&lt;/li&gt;
&lt;li&gt;Furthermore, the language designates a message as a warning or an error based &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; on its severity, but instead on whether the programmer can reasonably be required to fix it or not.
&lt;ul&gt;
&lt;li&gt;If it is reasonable to require the programmer to fix it, then the programmer better fix it, so there is no need to be able to suppress it, so it is an error.&lt;/li&gt;
&lt;li&gt;If it is unreasonable to require the programmer to fix it, then the programmer should be able to suppress it, so it is a warning.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For example:
&lt;ul&gt;
&lt;li&gt;If you have an unused import statement, you can very easily remove that import statement, so it is reasonable to require you to fix it. Therefore, the &amp;ldquo;unused import&amp;rdquo; message is an error.&lt;/li&gt;
&lt;li&gt;If you have marked something as deprecated, and yet you must still make use of it in a couple of places until the day that it gets completely removed, then you have no way of fixing this problem, therefore you must be allowed to suppress it, therefore the &amp;ldquo;use of deprecated symbol&amp;rdquo; message is a warning.  You will, however, have to explicitly suppress that warning on each and every usage of that symbol.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A warning suppression on a statement that does not actually produce a warning is an error.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Line-oriented, with scoping dictated by indentation (roughly as in Python) instead of curly braces.
&lt;ul&gt;
&lt;li&gt;Since it is very difficult (if not impossible) to express indentation rules in a formal grammar, this is handled by the tokenizer:
&lt;ul&gt;
&lt;li&gt;When the indentation increases, the tokenizer emits a hidden scope-start token.&lt;/li&gt;
&lt;li&gt;When the indentation decreases, the tokenizer emits a hidden scope-end token.&lt;/li&gt;
&lt;li&gt;The tokenizer also handles line breaking and line joining, so that the parser ends up parsing a C-style language.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There are two types of statements: simple and compound.
&lt;ul&gt;
&lt;li&gt;A simple statement occupies a single line; it may contain expressions, but it may not contain any nested scopes.&lt;/li&gt;
&lt;li&gt;A compound statement begins with a simple statement as a header, and is followed by a dependent  scope.&lt;/li&gt;
&lt;li&gt;A scope contains statements, which may in turn be either simple or compound.&lt;/li&gt;
&lt;li&gt;Some constructs that normally correspond to compound statements (e.g. the &lt;code&gt;if&lt;/code&gt; statement) also come in &amp;ldquo;expression form&amp;rdquo;.
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;for&lt;/code&gt; loop does not have an expression form, due to the extra complexity of the multiple statements that it contains; however, the &lt;code&gt;for-each&lt;/code&gt; loop does come in expression form.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Normally, each simple statement must be on a separate line.&lt;/li&gt;
&lt;li&gt;To allow joining multiple simple statements in one line, a special line-joining punctuation is used, which is the semicolon.&lt;/li&gt;
&lt;li&gt;Therefore, the semicolon is illegal at the end of a line.&lt;/li&gt;
&lt;li&gt;Normally, an entire simple statement must be contained within a single line; in other words, a simple statement may not span multiple lines.&lt;/li&gt;
&lt;li&gt;To allow splitting a simple statement into multiple lines, a special line-splitting construct is used. This construct is to be determined:
&lt;ul&gt;
&lt;li&gt;It may be a backslash at the end of the line that is being split into the next&lt;/li&gt;
&lt;li&gt;It may be double the amount of indentation on the next line, signifying that it belongs to the previous one.&lt;/li&gt;
&lt;li&gt;It may be both of the above.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Formatting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The code formatting style of the language is thoroughly and unambiguously defined by an extensive set of  rules.&lt;/li&gt;
&lt;li&gt;Some degree of freedom is allowed, but even that is unambiguously controlled by special punctuation that exists specifically for that purpose.&lt;/li&gt;
&lt;li&gt;This means that the formatting of a source file is thoroughly, accurately, and deterministically predictable from the language formatting rules and the punctuation present within the file.&lt;/li&gt;
&lt;li&gt;This in turn allows code editors that can:
&lt;ul&gt;
&lt;li&gt;at any moment reflow an entire source file to its proper format, or even:&lt;/li&gt;
&lt;li&gt;continuously reflow code, as it is being typed, to its proper format.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This in turn allows a compiler which imposes strict enforcement of the formatting rules, so that the slightest deviation, even by a single space, is a compiler error.&lt;/li&gt;
&lt;li&gt;This brings us to the following paradox:
&lt;ul&gt;
&lt;li&gt;Even though the formatting rules are extremely detailed,&lt;/li&gt;
&lt;li&gt;And even though the enforcement of the formatting rules is draconian,&lt;/li&gt;
&lt;li&gt;The programmer never has to worry about code formatting, because it is being taken care of automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The benefit of all this is that all code by all programmers will always have the exact same formatting, and yet no programmer will ever have to be  bothered with having to type code in a specific way.&lt;/li&gt;
&lt;li&gt;(It will also make the language parser slightly faster.)&lt;/li&gt;
&lt;li&gt;Some indicative highlights of the formatting rules:
&lt;ul&gt;
&lt;li&gt;Tabs for indentation
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;tab&lt;/code&gt; character denotes indentation, and may only appear at the beginning of a line; it is prohibited anywhere else.&lt;/li&gt;
&lt;li&gt;Only the &lt;code&gt;tab&lt;/code&gt; character may be used to denote indentation; the use of anything else to denote indentation, including the space character, is an error.&lt;/li&gt;
&lt;li&gt;It is an error to have indentation in a line which is otherwise blank.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The language defines where a space may and may not appear.
&lt;ul&gt;
&lt;li&gt;When a space is expected, exactly one space must be given. (For example, right after a comma.)&lt;/li&gt;
&lt;li&gt;When zero spaces are expected, exactly zero spaces must be given. (For example, right before a comma.)&lt;/li&gt;
&lt;li&gt;Note that this prevents tabular code formatting, which is the practice of inserting spaces to column-align similar parts of consecutive statements.
&lt;ul&gt;
&lt;li&gt;That is okay, because tabular code formatting is a bad idea anyway, since it is a source of needless git merge conflicts.&lt;/li&gt;
&lt;li&gt;In any case, if some folks really need tabular code formatting, they can achieve it via spacing comments ( /* */ ).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The language strictly defines when and how blank lines may be used. For example:
&lt;ul&gt;
&lt;li&gt;There must never be two consecutive blank lines anywhere, at all, under any circumstances, for any reason, ever.&lt;/li&gt;
&lt;li&gt;There must always be exactly one blank line before a block comment. (Even a single-line block comment.)
&lt;ul&gt;
&lt;li&gt;If you want a comment without a blank line, then use a line comment instead of a block comment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;There must never be a blank line anywhere else, including:
&lt;ul&gt;
&lt;li&gt;Between method definitions.
&lt;ul&gt;
&lt;li&gt;This allows us to define whole groups of single-line methods without wasting a lot of screen real estate.&lt;/li&gt;
&lt;li&gt;If you want blank lines between method definitions, add a block comment before each method definition; thus, a blank line will be mandatory before the block comment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Between lines of code.
&lt;ul&gt;
&lt;li&gt;Most programmers have the habit of using blank lines within method bodies, to separate logical groups of lines of code. This is bad practice, because only the programmer who wrote the code knows why those lines form a separate group and why that group should stand out from the rest.&lt;/li&gt;
&lt;li&gt;If you have multiple conceptually distinct groups of lines of code within a single method, then either:
&lt;ul&gt;
&lt;li&gt;Add block comments explaining what each group does, (in which case a blank line before the block comment is mandatory,)
or&lt;/li&gt;
&lt;li&gt;Move each group into a separate function, and give the function a descriptive name.
&lt;ul&gt;
&lt;li&gt;The language supports functions nested within functions, so you can do this without polluting the namespace of the class.&lt;/li&gt;
&lt;li&gt;The language uses no curly braces, so you will not be wasting a lot of screen real estate in doing so.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Between class definitions.
&lt;ul&gt;
&lt;li&gt;This allows us to define whole groups of single-line classes without wasting a lot of screen real estate. Admittedly, single-line classes are rare, so let&amp;rsquo;s just say that this rule exists just for consistency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Special formatting punctuation allows overriding language default formatting rules on a case per case basis. For example:
&lt;ul&gt;
&lt;li&gt;A &amp;ldquo;line splitter&amp;rdquo; is a special punctuation character which allows  splitting a construct into multiple lines when the language formatting rules would have normally required that construct to be all in one line.
&lt;ul&gt;
&lt;li&gt;For example: the language formatting rule for expressions is that an expression must fit in one line; so, if an expression needs to span multiple lines, a line splitter must be used to indicate precisely at which point the expression is to break into the next line.&lt;/li&gt;
&lt;li&gt;The use of a line splitter in a place where it is not required is an error.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;line joiner&amp;rdquo; is a special punctuation character which allows a construct to appear all in one line when the language formatting rules would have normally required that construct to be split into multiple lines.
&lt;ul&gt;
&lt;li&gt;For example: the language formatting rule for methods is that the body of the method must be on a separate line from the prototype. So, if a very short method needs to fit entirely in one line, a line joiner can be used to allow this.&lt;/li&gt;
&lt;li&gt;The use of a line joiner in a place where it is not required is an error.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Capitalization
&lt;ul&gt;
&lt;li&gt;The language is case sensitive, and capitalization matters a lot more than in other languages.&lt;/li&gt;
&lt;li&gt;Identifier casing must be one of the following:
&lt;ul&gt;
&lt;li&gt;lowercase&lt;/li&gt;
&lt;li&gt;SentenceCase&lt;/li&gt;
&lt;li&gt;kebab-case&lt;/li&gt;
&lt;li&gt;SentenceKebab-case&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Note that kebab-case is possible because the language mandates spacing around operators, so there is no possibility to confuse an identifier containing a dash with the dash operator between two identifiers.&lt;/li&gt;
&lt;li&gt;The following are expressly disallowed:
&lt;ul&gt;
&lt;li&gt;The dash as first or last character of an identifier.&lt;/li&gt;
&lt;li&gt;camelCase.&lt;/li&gt;
&lt;li&gt;UPPERCASE and SCREAMING-KEBAB-CASE.&lt;/li&gt;
&lt;li&gt;Two or more consecutive capital letters.
&lt;ul&gt;
&lt;li&gt;For an explanation why, see the following section about spell-checking.&lt;/li&gt;
&lt;li&gt;Separate capital letters with dashes; for example, &lt;code&gt;XSpacing&lt;/code&gt; is not allowed, but &lt;code&gt;X-Spacing&lt;/code&gt; is fine.&lt;/li&gt;
&lt;li&gt;Do not use acronyms; use either:
&lt;ul&gt;
&lt;li&gt;fully spelled out words, i.e.. &amp;ldquo;GraphicalUserInterfaceStyle&amp;rdquo;, or&lt;/li&gt;
&lt;li&gt;words that replace acronyms, i.e. &amp;ldquo;GuiStyle&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Underscores and all forms of snake_case. (Though an underscore alone might act as a special identifier, or special punctuation, to be determined.)
&lt;ul&gt;
&lt;li&gt;This is because we support kebab-case, and snake_case does not look sufficiently different from kebab-case.&lt;/li&gt;
&lt;li&gt;Kebab-case is preferable to snake_case because on most keyboards the dash is slightly easier to produce than the underscore, since it does not require Shift.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Some capitalization rules apply to language constructs and are enforced by the compiler:
&lt;ul&gt;
&lt;li&gt;All names of types and namespaces must start with an uppercase letter.&lt;/li&gt;
&lt;li&gt;All public and protected member names must start with an uppercase letter.&lt;/li&gt;
&lt;li&gt;All private members must start with a lowercase letter.&lt;/li&gt;
&lt;li&gt;All local and parameter names must start with a lowercase letter.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spell Checking
&lt;ul&gt;
&lt;li&gt;The language comes together with a spell-checking dictionary, the contents of which are part of the language specification.&lt;/li&gt;
&lt;li&gt;A module can have a supplemental user-defined spell-checking dictionary file which:
&lt;ul&gt;
&lt;li&gt;Is meant to be committed to source control&lt;/li&gt;
&lt;li&gt;Is meant to undergo code review just as any other source file.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The compiler spell-checks source code and issues a warning if it encounters any unrecognized words.
&lt;ul&gt;
&lt;li&gt;Specifically, the compiler will issue a warning when any of the following fails to pass spell-check:
&lt;ul&gt;
&lt;li&gt;Any part of an identifier.&lt;/li&gt;
&lt;li&gt;A word inside a string literal.&lt;/li&gt;
&lt;li&gt;A word in a comment, unless it is markup referring to an identifier.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For the purpose of spell-checking, identifiers are broken into parts based on SentenceCase and kebab-case boundaries, as well as boundaries between letters and digits. This means that:
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;CryptoGraphy&amp;rdquo; will not pass spell-check unless &amp;ldquo;graphy&amp;rdquo; has been added to the spell-checker. (It shouldn&amp;rsquo;t; it is not an English word; use &amp;ldquo;Cryptography&amp;rdquo; instead.)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Mousepointer&amp;rdquo; will not pass spell-check unless &lt;code&gt;mousepointer&lt;/code&gt; has been added to the spell-checker.  (It shouldn&amp;rsquo;t; it is not an English word; use &amp;ldquo;MousePointer&amp;rdquo; instead.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A warning for a misspelled identifier is issued only at the point of definition and not on each occurrence of the identifier, so that:
&lt;ul&gt;
&lt;li&gt;You only see the warning once, not five hundred times.&lt;/li&gt;
&lt;li&gt;There is no warning at all for identifiers that you have no control over, due to them being defined in external modules. In other words, a module does not have to duplicate the spelling dictionaries of external modules, nor does a module have to ship with its spelling dictionary.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Two or more consecutive capital letters are disallowed because:
&lt;ul&gt;
&lt;li&gt;Each individual capital letter acts as a word delimiter, so it constitutes a word by itself.&lt;/li&gt;
&lt;li&gt;To allow for single-letter variables, every individual letter passse spell-check.&lt;/li&gt;
&lt;li&gt;So, a word made of capital letters circumvents the spell-checker.&lt;/li&gt;
&lt;li&gt;The language does not allow circumventing the spell-checker.
&lt;ul&gt;
&lt;li&gt;(One day someone will inevitably submit a feature request for some means of disabling the spell checker; the answer they will receive is that if they do not have to use this language; there are so many other languages to choose from.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comments&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Special formatting within comments is achievable with the use of &lt;code&gt;Markdown&lt;/code&gt; as opposed to HTML or any ad-hoc syntax.&lt;/li&gt;
&lt;li&gt;This special formatting is available in all comments, not just doc-comments.&lt;/li&gt;
&lt;li&gt;Some extensions to markdown are necessary in order to specify relationships between code.
&lt;ul&gt;
&lt;li&gt;For example, when defining a link, one can omit the part within the parentheses, in which case the part within the square brackets is expected to be a resolvable symbol, and the resulting link points to that symbol.&lt;/li&gt;
&lt;li&gt;The syntax for specifying the symbol requires no gimmicks like the hash-sign which is needed in Java&amp;rsquo;s doc-comments to separate the type name from the member name.&lt;/li&gt;
&lt;li&gt;If the symbol is not fully qualified then there must be an import statement for that symbol somewhere within the source file.&lt;/li&gt;
&lt;li&gt;The use of a symbol in a comment is enough to prevent the corresponding import statement from being flagged by the compiler as unused.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Possibly: allow the comment that describes a parameter to be placed with the parameter itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inheritance&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A class may extend only one other class but implement any number of interfaces.&lt;/li&gt;
&lt;li&gt;The only difference between a class and an interface is that an interface cannot have fields, a constructor, or a destructor; in all other respects, classes and interfaces are equivalent, meaning that an interface can have
static, public, protected, and private methods.&lt;/li&gt;
&lt;li&gt;By default, a class cannot be extended unless it is marked as &lt;code&gt;extensible&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;By default, a method of a class cannot be overridden/extended unless it is marked as follows:
&lt;ul&gt;
&lt;li&gt;If it is abstract, it must be marked as &lt;code&gt;abstract&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If it is overridable, must be marked as &lt;code&gt;overridable&lt;/code&gt;. (Duh!)
&lt;ul&gt;
&lt;li&gt;This corrects Java&amp;rsquo;s exuberance of allowing any method to be overridden unless declared &amp;ldquo;final&amp;rdquo;, and  C#&amp;rsquo;s unwarranted technicalism of calling such methods &amp;ldquo;virtual&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If it is overridable with the provision that overriding methods must invoke the base method, it must be marked as &lt;code&gt;extensible&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Methods that override other methods must be marked as follows:
&lt;ul&gt;
&lt;li&gt;A class method which implements an abstract method must be marked with &lt;code&gt;implements base&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A class method which overrides an overridable method must be marked with &lt;code&gt;overrides base&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A class method which extends an extensible method must be marked with &lt;code&gt;extends base&lt;/code&gt;. Within the extending method:
&lt;ul&gt;
&lt;li&gt;The base method must be invoked exactly once.
&lt;ul&gt;
&lt;li&gt;(This can become a bit complicated with alternative execution paths, so we might want to mandate that there must be only one possible execution path at the point where the base method is invoked.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The invocation of the base method can be simplified:
&lt;ul&gt;
&lt;li&gt;The name of the method can be replaced with &lt;code&gt;base&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The parameters can be omitted.
&lt;ul&gt;
&lt;li&gt;In this case the base method is invoked with the values that the parameters have at the moment of the invocation, allowing the extending method to alter the values of the parameters before invoking base.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A class method which implements a method of an interface must be marked with &lt;code&gt;implements X&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;X is the interface-qualified-method-name of the method being implemented. The implementing method name may differ from the implemented method name (as long as the parameter list matches) and it will be accessible via both names.&lt;/li&gt;
&lt;li&gt;X can also be a comma-separated list of interface-qualified-function-names, if the method implements multiple interface methods of different interfaces. In this case, the method will be accessible via any of the names.&lt;/li&gt;
&lt;li&gt;Note that this corrects the stupidity of C# where no special marking is necessary for a class method that implements an interface method.&lt;/li&gt;
&lt;li&gt;Note that C# provides a syntax for optionally specifying that a class method implements a method of a particular interface, but makes the implementing methods inaccessible, which renders the feature unusable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Note that a class method may both override a superclass method and implement interface methods by adding both &lt;code&gt;overrides&lt;/code&gt; and &lt;code&gt;implements&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A class method does not automatically become overridable or extensible by virtue of implementing, overriding, or extending another method; it must in turn be marked as overridable or extensible if that is the intention.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Built-in Intertwine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Built-in Domain-Oriented Programming features.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alternatively, look into Scala&amp;rsquo;s implicit parameter lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Built-in support for testing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bundled Testana, see &lt;a 
   href=&#34;//localhost:1313/p/testana-a-better-way-of-running-tests/&#34;
   &gt;Testana: A better way of running tests&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Somewhat different testing semantics than JUnit:
&lt;ul&gt;
&lt;li&gt;The test class does not get re-instantiated prior to invoking each test method.&lt;/li&gt;
&lt;li&gt;No &amp;lsquo;before&amp;rsquo; method: use the test class constructor for this.&lt;/li&gt;
&lt;li&gt;No &amp;lsquo;after&amp;rsquo; method: use the test class destructor for this.&lt;/li&gt;
&lt;li&gt;Use of the exact same assertion facility for test code as for production code.&lt;/li&gt;
&lt;li&gt;No other test facility gimmicks like &amp;ldquo;expect&amp;rdquo;, &amp;ldquo;assume&amp;rdquo;, etc.: write the darn thing in code.&lt;/li&gt;
&lt;li&gt;Test methods are always executed in the order in which they appear in the source file.&lt;/li&gt;
&lt;li&gt;When a test class is derived from another test class, the test methods of the base class are always executed before the test methods of the derived class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;To enable separate testing of debug runs and release runs, assertions are always enabled for the testing code, but for the code-under-test they can be either enabled or disabled.&lt;/li&gt;
&lt;li&gt;Even though all source files that constitute a module are compiled into a single binary file,  (as per C# assemblies,) each class within that binary file comes with its own timestamp, to accommodate tools like
Testana.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Possibly) Explicit distinction between logic classes and data classes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(Possibly) Built-in versioned externalization of data classes.&lt;/li&gt;
&lt;li&gt;(Possibly) Built-in data-modelling framework for the data classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Built-in internationalization features (i.e. Unicode strings and culture-aware operations) but also full support for ANSI strings and culture-neutral operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lightweight properties, exactly like in C#, with additional compiler support for obtaining a property as a separate entity and manipulating it independently of the object that it belongs to. (Probably a value type containing a reference to the object that owns the property and a reference to the reflection object that represents the property.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NO compiler support for events.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time Coordinate Data Type&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internally represented as a 64-bit IEEE floating point number of days since some epoch, allowing for:
&lt;ul&gt;
&lt;li&gt;low-precision coordinates billions of years away from the epoch&lt;/li&gt;
&lt;li&gt;femtosecond precision coordinates near the epoch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A special static &amp;ldquo;this&amp;rdquo; keyword (&lt;code&gt;this class&lt;/code&gt;?) that you can use to refer to the current type in a static context without having to code the name of the type as you have to do in Java and in C#.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Proper method literals and field literals&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No compromise like the &lt;code&gt;nameof()&lt;/code&gt; of C#.&lt;/li&gt;
&lt;li&gt;For example:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Method m = method someMethod;&lt;/code&gt; assigns to &lt;code&gt;m&lt;/code&gt; the reflection method object of someMethod but causes a compiler error if someMethod has overloads.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Method m = method someMethod(int);&lt;/code&gt; assigns to &lt;code&gt;m&lt;/code&gt; the reflection method object of a specific overload of someMethod.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Method m = this method;&lt;/code&gt; assigns to &lt;code&gt;m&lt;/code&gt; the reflection method object of the method that is currently being compiled.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Field f = field someField;&lt;/code&gt; assigns to &lt;code&gt;f&lt;/code&gt; the reflection field object of someField.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source intrinsics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A source-line intrinsic similar to the &lt;code&gt;__LINE__&lt;/code&gt; macro of C and C++ or the &lt;code&gt;[CallerLineNumber]&lt;/code&gt; attribute of C#.&lt;/li&gt;
&lt;li&gt;A source-file intrinsic similar to the &lt;code&gt;__FILE__&lt;/code&gt; macro of C and C++ or the &lt;code&gt;[CallerFileName]&lt;/code&gt; attribute of C#. Note that the source filename yielded by this intrinsic is relative to the root of the source tree, &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; absolute.&lt;/li&gt;
&lt;li&gt;A source-root intrinsic which yields the absolute path to the root of the source tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Namespaces, mostly as seen in C#, but with some differences.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You cannot just import a namespace and make everything in it accessible; instead, you have to do one of the following:
&lt;ul&gt;
&lt;li&gt;Import a specific name from a namespace; (like a java import statement without a wildcard;) then, you can use that one name without qualification.&lt;/li&gt;
&lt;li&gt;Import an entire namespace, but with a namespace alias, like in XML; then, you can use any name from that namespace, but each name will have to be qualified with the chosen alias.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Compiler-enforced conformity between directory names and namespace names, as in java, and unlike C#. (Or, as in C# with ReSharper.)&lt;/li&gt;
&lt;li&gt;Compiler-enforced conformity between source file names and class names, as in Java and unlike C#, with a couple of differences:
&lt;ul&gt;
&lt;li&gt;The file name of a source file may match a namespace defined in that file.&lt;/li&gt;
&lt;li&gt;The file name of a source file may match the base-most class defined in the file, but the file may also contain additional classes derived from it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System functionality injection&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System functionality is available strictly via interfaces.&lt;/li&gt;
&lt;li&gt;The main entry point function of a program declares in its argument list each system interface that it intends to use. Yes, this can become unwieldly; and yet that&amp;rsquo;s how it is going to be.&lt;/li&gt;
&lt;li&gt;When about to run an application, the runtime uses reflection to discover which interfaces are needed by the entry point, and passes each one of them to it.&lt;/li&gt;
&lt;li&gt;From that moment on, user code makes sure to propagate system interfaces to all application code that needs them.&lt;/li&gt;
&lt;li&gt;This means that no system functionality is provided statically. For example:
&lt;ul&gt;
&lt;li&gt;The data type for expressing time coordinates does not include a static method for obtaining the current time, as in most other languages. Instead, there is a &lt;code&gt;SystemClock&lt;/code&gt; interface which provides this functionality, and this interface must be obtained via &lt;code&gt;main()&lt;/code&gt; and propagated to all places that need to use it.&lt;/li&gt;
&lt;li&gt;Similarly, if you want to open a file, you cannot just instantiate a file class; you have to obtain the &lt;code&gt;FileSystem&lt;/code&gt; interface, and ask it to open a &lt;code&gt;File&lt;/code&gt; for you.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Runtime environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DirectoryPath&lt;/code&gt; and &lt;code&gt;FilePath&lt;/code&gt; interfaces that encapsulate file-system pathnames and filenames, so that one rarely needs to engage in string manipulation with paths.&lt;/li&gt;
&lt;li&gt;No such thing as a &amp;ldquo;current directory&amp;rdquo;;  All paths are absolute. When a path is constructed from a string, the absolute path is immediately computed, and the computation may take into account whatever the host
system considers to be the &amp;ldquo;current directory&amp;rdquo; of the process. (So, by obtaining the &lt;code&gt;DirectoryPath&lt;/code&gt; of &amp;ldquo;.&amp;rdquo; one can discover the current directory, but one has no way of changing it, and the runtime environment
will never change it.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: &amp;ldquo;Coding Software Running On A Computer Monitor&amp;rdquo; by Scopio from NounProject.com&lt;/p&gt;</description>
        </item>
        <item>
        <title>Malicious Inaction</title>
        <link>//localhost:1313/p/malicious-inaction/</link>
        <pubDate>Tue, 27 Jul 2021 11:27:10 +0000</pubDate>
        
        <guid>//localhost:1313/p/malicious-inaction/</guid>
        <description>&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/malicious-inaction/media/dennis_nedry.jpg&#34;
	width=&#34;700&#34;
	height=&#34;668&#34;
	srcset=&#34;//localhost:1313/p/malicious-inaction/media/dennis_nedry_hu_7757347a874e24ab.jpg 480w, //localhost:1313/p/malicious-inaction/media/dennis_nedry_hu_d638becee4f3575f.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;104&#34;
		data-flex-basis=&#34;251px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Actor Wayne Knight in the original Jurassic Park movie&lt;br&gt;playing the role of the unscrupulous programmer Dennis Nedry, &lt;br&gt;(anagram of &amp;ldquo;Nerdy&amp;rdquo;,) the main villain.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code&gt;****    
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  **Malicious Inaction** (noun) any situation where a piece of software encounters an unexpected condition and responds by deliberately doing nothing, including *not* throwing an exception.  Synonyms: Silent Failure; Deliberate Malfunction; Unscrupulous Programming; Undermining; Sabotage; Treachery; Subversion; Vandalism.
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;I think that the term &amp;ldquo;Silent Failure&amp;rdquo; fails to express the amount of harm done.  Sure, the word &amp;ldquo;failure&amp;rdquo; indicates that something went wrong, but the word &amp;ldquo;silent&amp;rdquo; somewhat lessens the severity of the term, and it makes sound as if no feathers were ruffled, so it may have been alright.&lt;/p&gt;
&lt;p&gt;Well, no. It was not alright. It never is. We need a stronger term to better capture the harm caused by the sinister practice of hiding error. We need a term that clearly conveys wrongdoing, a term that assigns blame and shame.&lt;/p&gt;
&lt;p&gt;Hence, I present to the world my new and improved term: &lt;strong&gt;Malicious Inaction&lt;/strong&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SVG in WPF</title>
        <link>//localhost:1313/p/svg-in-wpf/</link>
        <pubDate>Fri, 12 Feb 2021 08:02:35 +0000</pubDate>
        
        <guid>//localhost:1313/p/svg-in-wpf/</guid>
        <description>&lt;p&gt;My notes on how to use SVG graphics in a WPF application&lt;/p&gt;
&lt;h3 id=&#34;the-goal&#34;&gt;The Goal
&lt;/h3&gt;&lt;p&gt;The goal is to be able do do things like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;Button Content=&amp;#34;{StaticResource mySvgImage}&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&amp;hellip; where mySvgImage somehow stands for a vector image that has somehow been obtained from an SVG file.&lt;/p&gt;
&lt;p&gt;The solution must not involve any proprietary, closed-source libraries.&lt;/p&gt;
&lt;p&gt;Naturally, we want one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either directly include SVG files into our application as resources, or, if that is not possible, then:&lt;/li&gt;
&lt;li&gt;Have an &amp;ldquo;asset pipeline&amp;rdquo; approach where our SVG files are automatically converted during build into some format which is suitable for inclusion as a resource.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The Problem
&lt;/h3&gt;&lt;p&gt;WPF likes to do everything in its own idiomatic way, so vector graphics in WPF are specified using the following construct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;Canvas&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;lt;Path Fill=&amp;#34;#FFE68619&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;lt;Path.Data&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &amp;lt;PathGeometry Figures=&amp;#34;M8.564 1.289.2 16.256A.5.5 0 0 0 .636 17H17.364a.5.5 0 0 0 .5-.5.494.494 0 0 0-.064-.244L9.436 1.289a.5.5 0 0 0-.872 0ZM10 14.75a.25.25 0 0 1-.25.25H8.25A.25.25 0 0 1 8 14.75v-1.5A.25.25 0 0 1 8.25 13h1.5a.25.25 0 0 1 .25.25Zm0-3a.25.25 0 0 1-.25.25H8.25A.25.25 0 0 1 8 11.75v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25Z&amp;#34; FillRule=&amp;#34;NonZero&amp;#34;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;lt;/Path.Data&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;lt;/Path&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;/Canvas&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Even though this notation is very similar to SVG path notation, WPF has no built-in support for SVG. They do not list SVG in their list of supported image file formats. (&lt;a class=&#34;external&#34; 
   href=&#34;https://docs.microsoft.com/en-us/previous-versions/windows/apps/hh868203%28v=win.10%29?#image-file-formats&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)  This is preposterous, but that&amp;rsquo;s what it is.&lt;/p&gt;
&lt;p&gt;Microsoft has added SVG support to UWP via the SvgImageSource class, (&lt;a class=&#34;external&#34; 
   href=&#34;https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.media.imaging.svgimagesource&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;) but they have not bothered doing the same for WPF, probably as part of their greater strategy to let WPF go gently into that good night, since UWP is their new big thing that everyone must now start using whether they like it or not.&lt;/p&gt;
&lt;p&gt;Allegedly, there exists something called &amp;ldquo;XAML Islands&amp;rdquo; which offers means of including UWP controls within WPF applications, (&lt;a class=&#34;external&#34; 
   href=&#34;https://blogs.windows.com/windowsdeveloper/2018/11/02/xaml-islands-a-deep-dive-part-1/&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;) (&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/44936073/773113&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;) but it looks very convoluted, and the result will probably be held together by shoestrings, so I am not going to research that approach.&lt;/p&gt;
&lt;h3 id=&#34;the-inkscape-approach&#34;&gt;The Inkscape approach
&lt;/h3&gt;&lt;p&gt;Inkscape offers the ability to export SVG to something they call &amp;ldquo;xaml format&amp;rdquo;, and it can even do that from the command line (&lt;a class=&#34;external&#34; 
   href=&#34;https://inkscape.org/doc/inkscape-man.html&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;), making it suitable for using in an asset pipeline, but this feature is extremely limited.  As far as I can tell, Inkscape offers absolutely no options for controlling how the exporting will be done; it just creates files that look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;!--This file is NOT compatible with Silverlight--&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;Viewbox xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34; Stretch=&amp;#34;Uniform&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;Canvas Name=&amp;#34;svg10&amp;#34; Width=&amp;#34;18&amp;#34; Height=&amp;#34;18&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;Canvas.RenderTransform&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;lt;TranslateTransform X=&amp;#34;0&amp;#34; Y=&amp;#34;0&amp;#34;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;/Canvas.RenderTransform&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;Canvas.Resources/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;!--Unknown tag: metadata--&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;!--Unknown tag: sodipodi:namedview--&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;Canvas Name=&amp;#34;AlertMedium&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;lt;Path xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34; Name=&amp;#34;Shape&amp;#34; Fill=&amp;#34;#FFE68619&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;lt;Path.Data&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &amp;lt;PathGeometry Figures=&amp;#34;M8.564 1.289.2 16.256A.5.5 0 0 0 .636 17H17.364a.5.5 0 0 0 .5-.5.494.494 0 0 0-.064-.244L9.436 1.289a.5.5 0 0 0-.872 0ZM10 14.75a.25.25 0 0 1-.25.25H8.25A.25.25 0 0 1 8 14.75v-1.5A.25.25 0 0 1 8.25 13h1.5a.25.25 0 0 1 .25.25Zm0-3a.25.25 0 0 1-.25.25H8.25A.25.25 0 0 1 8 11.75v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25Z&amp;#34; FillRule=&amp;#34;NonZero&amp;#34;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;lt;/Path.Data&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &amp;lt;/Path&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;/Canvas&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &amp;lt;/Canvas&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/Viewbox&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Besides the obvious problem of useless elements that should not be there, the main problem with these files is that they are just plain unusable, because XAML offers no means of including one XAML file from within another XAML file. The only file inclusion mechanism supported by XAML is resource dictionaries, but this file is not describing a resource dictionary, so it cannot be included.&lt;/p&gt;
&lt;p&gt;If you go looking for answers on Stackoverflow you will find that people copy-paste the PathGeometry elements from Inkscape-generated XAML files into their own XAML files, and they find nothing retarded in what they are doing. Others suggest to take the XAML files generated by Inkscape and copy them to Blend, and then convert them to Path, because the more clicks the better, I suppose.&lt;/p&gt;
&lt;p&gt;It may be possible to programmatically load Inkscape-generated XAML files using the following construct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;using (Stream stream = App.GetResourceStream(
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    new Uri(&amp;#34;pack://application:,,,/Resources/MySvgExportedAsXaml.xaml&amp;#34;)).Stream)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    object o = XamlReader.Load(stream);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&amp;hellip; but then it is unclear how to make objects created this way usable from within XAML.&lt;/p&gt;
&lt;p&gt;punker76 (the main person behind MahApps) offers a way of programmatically creating an icon pack in his blog post titled &amp;ldquo;How to create a new IconPack with custom SVG Paths&amp;rdquo;. (&lt;a class=&#34;external&#34; 
   href=&#34;https://jkarger.de/2019/04/02/how-to-create-a-new-iconpack-with-custom-svg-paths/&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;) Such an icon pack can then be conveniently used from within XAML. However, his solution is tied to MahApps, while I would prefer an independent solution, and it is still not clear how to make that work with an object obtained by invoking the XamlReader.Load method.&lt;/p&gt;
&lt;p&gt;In any case, the process already looks quite a bit convoluted, so that&amp;rsquo;s where I stop researching the Inkscape approach.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stackoverflow: &amp;ldquo;Import separate XAML as ResourceDictionary and assign x:Key&amp;rdquo; (&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/36092689/773113&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Stackoverflow: &amp;ldquo;Inkscape (vector graphic)&amp;rdquo; (&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/24016164/773113&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;libraries&#34;&gt;Libraries
&lt;/h3&gt;&lt;p&gt;If you go searching for library suggestions on Stackoverflow you will find the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DevExpress (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.devexpress.com/&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;It looks very promising, (if we are to judge by how cool their web site looks,) but it is proprietary, so it is off-topic in this discussion.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Svg2Xaml (&lt;a class=&#34;external&#34; 
   href=&#34;https://svg2xaml.codeplex.com/&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;This project is hosted in codeplex, which is closing down in July of 2021, and the author does not seem to have moved his project elsewhere.  Some guy called Stefan Mischke has forked it on github (&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/smischke/svg2xaml&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;) and has made a nuget package out of it, (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.nuget.org/packages/Svg2Xaml/&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;) but the lack of support and documentation makes this very unpromising.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BerndK/SvgToXaml (&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/BerndK/SvgToXaml&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;This just converts svg to xaml.  It might be possible to use it at runtime to load svg resources and convert them to xaml paths, and then use some other mechanism to make these paths usable from within xaml, but the process seems convoluted.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SVG rendering engine (&lt;a class=&#34;external&#34; 
   href=&#34;https://svg.codeplex.com/&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;This is described as a WinForms solution, so whatever it does, it will not be directly usable from within XAML. I am listing it here because it might turn out to be useful, but I will not research it any further.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ReaderSVG from AB4D (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.ab4d-graphics.com/ViewerSvg.aspx&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt; - link is defunct)
&lt;ul&gt;
&lt;li&gt;This may have been an open-source project at some point a long time ago, but it looks like it has now become a commercial product (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.ab4d.com/ReaderSvg.aspx&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;), and archive.org does not index the old home of the project anymore.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mntone/SvgForXaml (&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mntone/SvgForXaml&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;The README.md file shows a XAML snippet that looks promising, but it also says &amp;ldquo;Requirement: Win2D&amp;rdquo; and contains a warning about Windows 10 Aniversary Update, and I have no clue what are the implications of these statements. Overall, the project looks perhaps a bit too simplistic. Only try if other avenues fail.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CodeProject: &amp;ldquo;SVGImage Control&amp;rdquo; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.codeproject.com/Articles/92434/SVGImage-Control&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;The author says &amp;ldquo;The SVG parser and render is still not complete, but it is in a state where it can read most &amp;lsquo;simple&amp;rsquo; SVG files I have found online so far.&amp;rdquo;  So, no time should be invested on this. See next entry, &amp;ldquo;dotnetprojects/SVGImage&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dotnetprojects/SVGImage (&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/dotnetprojects/SVGImage&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;Initially forked from CodeProject: &amp;ldquo;SVGImage Control&amp;rdquo;; appears to be in active development, (last update 5 months ago.)  Its README.md looks tacky, but it may work, and it even has a nuget package (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.nuget.org/packages/DotNetProjects.SVGImage/&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SharpVectorGraphics (aka SVG#) (&lt;a class=&#34;external&#34; 
   href=&#34;https://sourceforge.net/projects/svgdomcsharp/&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;A very old, abandoned project. Has no documentation. Uses org.w3c.dom.svg to convert to GDI GraphicsPath. Contains some incomplete code. Not worth looking at. This is what SharpVectors (see below) started out from.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SharpVectors (&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/ElinamLLC/SharpVectors&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;Apparently, this is in active development, (last update 3 months ago,) and there is a nuget package (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.nuget.org/packages/SharpVectors/&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;), so this looks promising!&lt;/li&gt;
&lt;li&gt;Also see: Stackoverflow: &amp;ldquo;SvgViewbox doesn&amp;rsquo;t show tooltip on mouse over&amp;rdquo; (&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/52982771/773113&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stackoverflow: &amp;ldquo;Library for using SVG in Windows Forms / WPF?&amp;rdquo; (&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/468259/773113&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;what-if-i-already-have-some-xaml-graphics&#34;&gt;What if I already have some XAML graphics?
&lt;/h3&gt;&lt;p&gt;If you are already using some graphics that exist in XAML-only form, (for example, the MahApps icon packs,) and you would prefer to have all vector graphics expressed in a single format throughout your application, then you might want to perform a one-time conversion of your existing XAML graphics to SVG.  This will also allow you to get rid of the MahApps icon packs, which are many megabytes large, while your application is presumably using only a tiny fraction of them.&lt;/p&gt;
&lt;p&gt;For simple graphics, I have found that XAML notation is identical to SVG notation, so simply pasting the XAML string (&lt;code&gt;&amp;lt;PathGeometry Figures=&amp;quot;...&amp;quot;&lt;/code&gt;) into the corresponding SVG string (&lt;code&gt;&amp;lt;path d=&amp;quot;...&amp;quot;&lt;/code&gt;) yields a valid SVG file that you can work with.  Since this is a one-time-only operation, it is not too bad if it has to be done manually.&lt;/p&gt;
&lt;p&gt;If there is a need for more advanced conversions, it appears that there are no tools out there for converting XAML to SVG, but this might be useful: Stackoverflow: &amp;ldquo;Wpf InkCanvas save stokes as svg&amp;rdquo; (&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/39300338/773113&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;svg-validation&#34;&gt;SVG Validation
&lt;/h3&gt;&lt;p&gt;Of course, if you start generating SVG from other sources, you are bound to end up with invalid SVG files. Unfortunately, as far as I can tell, Inkscape does not give the slightest indication that there is something wrong with an SVG file. If you give Inkscape an invalid file to load, it will silently fail and render nothing.&lt;/p&gt;
&lt;p&gt;To troubleshoot SVG issues, a somewhat decent SVG validator is &lt;a class=&#34;external&#34; 
   href=&#34;https://validator.nu&#34; target=&#34;_blank&#34;
   &gt;validator.nu&lt;/a&gt;.  (At least it helped me find problems in one SVG file, and after I fixed it, Inkscape successfully loaded it.)&lt;/p&gt;
&lt;p&gt;Another validator, which though is a bit too verbose and a bit too strict, is the &lt;a class=&#34;external&#34; 
   href=&#34;https://validator.w3.org/check&#34; target=&#34;_blank&#34;
   &gt;W3C validator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There also exists something called &amp;ldquo;SVG Sanitizer&amp;rdquo; at svg.enshrined.co.uk, written by some guy called Daryll Doyle, it is completely useless, do not waste any time with it.  (You can take hint from the fact that it is written in PHP.)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://t.me/ldp2er5&#34; target=&#34;_blank&#34;
   &gt;LDP2Go&lt;/a&gt; 2024-12-05 10:04:26 UTC&lt;/p&gt;
&lt;p&gt;Спасибо!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Java with Maven: Giving CI/CD a try</title>
        <link>//localhost:1313/p/java-with-maven-giving-ci/cd-a-try/</link>
        <pubDate>Wed, 10 Feb 2021 10:34:45 +0000</pubDate>
        
        <guid>//localhost:1313/p/java-with-maven-giving-ci/cd-a-try/</guid>
        <description>&lt;p&gt;Please note that this is work in progress.  I am still working on it and refining it, as my understanding of it improves.&lt;/p&gt;
&lt;p&gt;I have a set of public repositories on GitHub showcasing my work, (&lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;) which is in java with maven. These projects are interdependent, so when you check out one of them, in order to compile and run it you need the binaries of some of the others. You could manually check out all of them and put them in an IDE project, but that&amp;rsquo;s too much work. Solving this problem requires having Continuous Integration &amp;amp; Continuous Deployment (CI/CD) in place, so I decided to try my luck in setting one up using free services only.&lt;/p&gt;
&lt;p&gt;The process involves three entities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A Source Repository.&lt;/strong&gt;  (Where our source code is hosted.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I use &lt;strong&gt;GitHub&lt;/strong&gt; for this.&lt;/li&gt;
&lt;li&gt;Possible alternatives:
&lt;ul&gt;
&lt;li&gt;GitLab&lt;/li&gt;
&lt;li&gt;BitBucket&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A CI/CD provider.&lt;/strong&gt; (Where the actual CI/CD takes place.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I decided to use &lt;strong&gt;CircleCI&lt;/strong&gt; for this, but in retrospect it was a bad idea, because it does not support GitLab.&lt;/li&gt;
&lt;li&gt;Possible alternatives:
&lt;ul&gt;
&lt;li&gt;GitLab - I want to use it as a source code repository, and I don&amp;rsquo;t want to put all my eggs in one basket, so I don&amp;rsquo;t want to use it for anything else.&lt;/li&gt;
&lt;li&gt;GitHub - I want to use it as a source code repository, and I don&amp;rsquo;t want to put all my eggs in one basket, so I don&amp;rsquo;t want to use it for anything else.&lt;/li&gt;
&lt;li&gt;BitBucket - it is by Atlassian. Need I say more.&lt;/li&gt;
&lt;li&gt;Appveyor - gives various errors like &amp;ldquo;There was an error while trying to complete the current operation. Please contact AppVeyor support.&amp;rdquo; &amp;ndash; Lots of open source projects are using it though, so it might be worth a second try.&lt;/li&gt;
&lt;li&gt;Travis CI - only works with github.&lt;/li&gt;
&lt;li&gt;JFrog - overwhelmingly fancy front page followed by a not particularly fancy user experience once you get past the front page. Once I have registered, there is no way for me to log back in.&lt;/li&gt;
&lt;li&gt;semaphoreci.com - only works with github.&lt;/li&gt;
&lt;li&gt;buddy.works - after you have given them your e-mail address, they tell you that it is free but they require a valid payment method.&lt;/li&gt;
&lt;li&gt;atlassian.com/software/bamboo - it is by Atlassian, need I say more.&lt;/li&gt;
&lt;li&gt;drone.io - not only it works with nothing other than github, they assume that I am using github, which is very annoying.&lt;/li&gt;
&lt;li&gt;octopus.com - registration fails with &amp;ldquo;Please use your work email address.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;buildkite.com - might work; not particularly user friendly.&lt;/li&gt;
&lt;li&gt;codefresh.io - might work; they unnecessarily complicate things with mandatory docker images.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;An Artifact Repository.&lt;/strong&gt; (Where the binaries are stored.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I found a place called Repsy for this; Repsy is minimalistic, unrefined,
and they even have bad English on their web site, but it will do for now.&lt;/li&gt;
&lt;li&gt;Possible alternatives:
&lt;ul&gt;
&lt;li&gt;GitHub Packages&lt;/li&gt;
&lt;li&gt;GitLab Package Registry&lt;/li&gt;
&lt;li&gt;JFrog Artifactory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We begin with a situation where we already have the Source Repository (GitHub) and we want to set-up the CI/CD Provider (CircleCI) and the Artifact Repository (Repsy).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;setting-up-the-artifact-repository&#34;&gt;Setting up the Artifact Repository
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Go to Repsy (&lt;a class=&#34;external&#34; 
   href=&#34;https://repsy.io&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;) and create a free account. The username in this case will be &lt;code&gt;mikenakis&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a public maven repository in Repsy. The repository name in this case is &lt;code&gt;mikenakis-public&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;testing-the-artifact-repository&#34;&gt;Testing the Artifact Repository
&lt;/h4&gt;&lt;p&gt;Next, we need to make certain changes to our local setup so as to be able to deploy artifacts from within our local Development Environment directly to Repsy, to make sure this works before we even try CI/CD.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the maven folder (which is under &lt;code&gt;~/.m2&lt;/code&gt; in Linux, &lt;code&gt;%USERPROFILE%\.m2&lt;/code&gt; in Windows) create a &lt;code&gt;settings.xml&lt;/code&gt; with the following content (or if one already exists, make sure it includes the following content)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;settings&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&amp;lt;servers&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&amp;lt;server&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&amp;lt;id&amp;gt;repsy-mikenakis-public&amp;lt;/id&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&amp;lt;username&amp;gt;mikenakis&amp;lt;/username&amp;gt; &amp;lt;!-- Repsy username --&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&amp;lt;password&amp;gt;\*\*\*\*\*\*\*\*&amp;lt;/password&amp;gt; &amp;lt;!-- Repsy password --?
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&amp;lt;/server&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;/servers&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;settings&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Note:
&lt;ul&gt;
&lt;li&gt;The username and password for deploying artifacts into Repsy repositories is the same as the username and password of the Repsy account.&lt;/li&gt;
&lt;li&gt;The password does not have to be included here as plaintext; it can be encrypted. For instructions on how to do that, see &lt;a class=&#34;external&#34; 
   href=&#34;https://maven.apache.org/guides/mini/guide-encryption.html&#34; target=&#34;_blank&#34;
   &gt;Apache/ Maven/ Password Encryption (⬀)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add the following to each and every &lt;code&gt;pom.xml&lt;/code&gt; file that is going to take part in CI/CD:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;repositories&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&amp;lt;repository&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&amp;lt;id&amp;gt;repsy-mikenakis-public&amp;lt;/id&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&amp;lt;url&amp;gt;https://repo.repsy.io/mvn/mikenakis/mikenakis-public&amp;lt;/url&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&amp;lt;/repository&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/repositories&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;distributionManagement&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&amp;lt;repository&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&amp;lt;id&amp;gt;repsy-mikenakis-public&amp;lt;/id&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&amp;lt;url&amp;gt;https://repo.repsy.io/mvn/mikenakis/mikenakis-public&amp;lt;/url&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&amp;lt;/repository&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/distributionManagement&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it, we should now be able to execute &lt;code&gt;mvn deploy&lt;/code&gt; in our local environment and deploy to Repsy.&lt;/p&gt;
&lt;p&gt;Note: in reality I had many problems getting &lt;code&gt;mvn deploy&lt;/code&gt; to work, because I have not really been using maven, I have only been using &lt;code&gt;pom.xml&lt;/code&gt; files to describe my projects and then letting IntelliJ IDEA handle everything else, and it turns out that IntelliJ IDEA is a lot smarter and a lot more forgiving than maven is.  My &lt;code&gt;pom.xml&lt;/code&gt; files needed a lot of re-working to get them to actually work with maven. But that&amp;rsquo;s a different story.&lt;/p&gt;
&lt;h4 id=&#34;setting-up-the-cicd-provider&#34;&gt;Setting up the CI/CD Provider
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Go to CircleCI (&lt;a class=&#34;external&#34; 
   href=&#34;https://circleci.com&#34; target=&#34;_blank&#34;
   &gt;⬀&lt;/a&gt;) and create a free account.&lt;/li&gt;
&lt;li&gt;Go to &amp;ldquo;Organization Settings&amp;rdquo; -&amp;gt; &amp;ldquo;Contexts&amp;rdquo; and create a new context; let&amp;rsquo;s call it &lt;code&gt;my-context&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add an environment variable to the context with name &lt;code&gt;REPSY_PASS&lt;/code&gt; and the value being the password of the Repsy repository.
&lt;ul&gt;
&lt;li&gt;This way, our scripts will later have access to our Repsy password without us having to include it in any publicly visible source code. CircleCI promises to take extra measures to make sure that environment variables specified via contexts are never exposed to prying eyes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a CircleCI project which will correspond to one of our source repositories.  The source repository in this case will be &lt;code&gt;bytecode-dump&lt;/code&gt;, so the CircleCI project will also be named &lt;code&gt;bytecode-dump&lt;/code&gt;.
&lt;ul&gt;
&lt;li&gt;As soon as we have created our project, CircleCI slaps us with their configuration editor, which they must think is very cool, and prevents us from going any further. We are not going to bother with it, because it is quite unhelpful, so:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click the &amp;ldquo;Use Existing Config&amp;rdquo; button.
&lt;ul&gt;
&lt;li&gt;A dialog will pop up saying &amp;ldquo;Have you added a config.yml file?&amp;rdquo; and offering a couple of vague options that both seem to be dead ends. You might think you are stuck, but fear not and proceed to the next step.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Select the &amp;ldquo;Start building&amp;rdquo; option.
&lt;ul&gt;
&lt;li&gt;CircleCI will complain that there is no configuration, but that&amp;rsquo;s okay, we will take care of it later. At least we can now access the project settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go to &amp;ldquo;Project Settings&amp;rdquo; -&amp;gt; &amp;ldquo;SSH Keys&amp;rdquo; -&amp;gt; &amp;ldquo;Checkout SSH Keys&amp;rdquo;.
&lt;ul&gt;
&lt;li&gt;This is not about checking out any SSH keys, this is about specifying keys for CircleCI to be able to checkout.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click &amp;ldquo;Add Key&amp;rdquo;.
&lt;ul&gt;
&lt;li&gt;You might think that you then need to do something with this key, but actually you don&amp;rsquo;t. If you allow a few seconds to pass for the systems to do their magic, and then go to your project on GitHub -&amp;gt; &amp;ldquo;Security&amp;rdquo; -&amp;gt; &amp;ldquo;Settings&amp;rdquo; -&amp;gt; &amp;ldquo;Deploy Keys&amp;rdquo;, you will see that a key will be there, (which though looks entirely different from what CircleCI shows,) and GitHub will say that this key has been added by CircleCI with authorization from you. Whatever. Magic.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;completing-the-configuration&#34;&gt;Completing the configuration
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Back in our local development environment, in the root directory of our source repository (same level as the &lt;code&gt;pom.xml&lt;/code&gt; or parent &lt;code&gt;pom.xml&lt;/code&gt;) create a folder called &lt;code&gt;.circleci&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;.circleci&lt;/code&gt; folder add a file called &lt;code&gt;mvn-settings.xml&lt;/code&gt; with the following content:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;settings&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&amp;lt;servers&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&amp;lt;server&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&amp;lt;id&amp;gt;repsy-mikenakis-public&amp;lt;/id&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&amp;lt;username&amp;gt;mikenakis&amp;lt;/username&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&amp;lt;password&amp;gt;${REPSY\_PASS}&amp;lt;/password&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&amp;lt;/server&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&amp;lt;/servers&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/settings&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;In the &lt;code&gt;.circleci&lt;/code&gt; folder also add a file called &lt;code&gt;config.yml&lt;/code&gt; with the following content:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;version: 2.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;workflows:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	my-workflow:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		jobs:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			- build:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				context: my-context
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jobs:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	build:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		docker:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			- image: cimg/openjdk:15.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		steps:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			- checkout
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			- run: mvn -s .circleci/mvn-settings.xml clean
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			- run: mvn -s .circleci/mvn-settings.xml install
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			- run: mvn -s .circleci/mvn-settings.xml deploy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Note that we are supposed to add some additional notation to achieve caching of our maven dependencies, so that they are not all fetched from scratch each time the CI/CD build pipeline runs, but:
&lt;ul&gt;
&lt;li&gt;I have not found a definitive description of how to do this;&lt;/li&gt;
&lt;li&gt;A magical incantation that I found somewhere initially seemed to work, but then later it caused problems, so I ditched it, and&lt;/li&gt;
&lt;li&gt;CircleCI should really be automating this in a way which is totally transparent to us.
So, for now caching will need to wait.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If OpenJDK 15 does not suit you, then you will need to find another docker image, CircleCI has many available. I later switched to JDK 16 with no problems.&lt;/li&gt;
&lt;li&gt;There are 3 separate maven goals so that the &lt;code&gt;clean&lt;/code&gt; goal can be easily commented out, and so that if the &lt;code&gt;install&lt;/code&gt; goal fails then the &lt;code&gt;deploy&lt;/code&gt; goal will not be executed at all. (Otherwise, rumor has it that you might get partial deployments.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;firing-it-up&#34;&gt;Firing it up
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Commit and push to GitHub.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once these files have been committed to GitHub, CircleCI will take notice, and it will run our CI/CD pipeline. Do not expect it to run successfully on the first try; there will be errors, and there will be trouble. But once you get it to work successfully, it will be worth the trouble.&lt;/p&gt;</description>
        </item>
        <item>
        <title>The MVVM architectural design pattern</title>
        <link>//localhost:1313/p/the-mvvm-architectural-design-pattern/</link>
        <pubDate>Sat, 16 Jan 2021 14:47:04 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-mvvm-architectural-design-pattern/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/the-mvvm-architectural-design-pattern/media/mvvm.png&#34;
	width=&#34;800&#34;
	height=&#34;242&#34;
	srcset=&#34;//localhost:1313/p/the-mvvm-architectural-design-pattern/media/mvvm_hu_8fa849595e07c30f.png 480w, //localhost:1313/p/the-mvvm-architectural-design-pattern/media/mvvm_hu_400ee7376db477fb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;330&#34;
		data-flex-basis=&#34;793px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;This is a brief technical explanation of MVVM, with enough detail (borrowed from its WPF implementation) and examples to allow the reader to grasp how it actually works.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;MVVM&lt;/em&gt; is an architectural design pattern for building interactive applications. Its aim is to achieve complete decoupling of application logic from presentation logic.&lt;/li&gt;
&lt;li&gt;MVVM is not something new, and it was not even new at the time that it became popular. It was named by &lt;a class=&#34;external&#34; 
   href=&#34;https://docs.microsoft.com/en-us/archive/blogs/johngossman/introduction-to-modelviewviewmodel-pattern-for-building-wpf-apps&#34; target=&#34;_blank&#34;
   &gt;John Gossman in 2005&lt;/a&gt;, who states that it is the same as the &lt;em&gt;Presentation Model&lt;/em&gt; pattern named by &lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/eaaDev/PresentationModel.html&#34; target=&#34;_blank&#34;
   &gt;Martin Fowler in 2004&lt;/a&gt;, who in turn states that it was previously known as the &lt;em&gt;Application Model&lt;/em&gt; pattern in &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/VisualWorks&#34; target=&#34;_blank&#34;
   &gt;certain Smalltalk circles&lt;/a&gt; as early as in the 1980s, and that&amp;rsquo;s where we lose track of it: for all we know, it may have originated in Ancient Egypt.&lt;/li&gt;
&lt;li&gt;The acronym stands for &lt;em&gt;Model&lt;/em&gt;, &lt;em&gt;View&lt;/em&gt;, &lt;em&gt;Viewmodel&lt;/em&gt;.
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Model&lt;/strong&gt;&lt;/em&gt; refers to the main &lt;em&gt;estate&lt;/em&gt; data model of our application; it is optional and largely irrelevant, so it will only be mentioned a couple of times here.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;View&lt;/strong&gt;&lt;/em&gt; refers to the user interface.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Viewmodel&lt;/strong&gt;&lt;/em&gt; is the secret sauce, but in essence it refers to the application logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Application logic is placed in objects known as viewmodels. A viewmodel does the following:
&lt;ul&gt;
&lt;li&gt;Publicly exposes state, part of which is publicly mutable.&lt;/li&gt;
&lt;li&gt;Issues notifications about any mutation of its state.&lt;/li&gt;
&lt;li&gt;Responds to state mutations with behavior, such as querying and updating data stores, issuing events in some messaging backbone, etc.&lt;/li&gt;
&lt;li&gt;Manifests its behavior by means of further modifying its own state, which in turn generates more state mutation notifications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This allows the following very simple workflow:
&lt;ul&gt;
&lt;li&gt;When the presentation layer modifies a property of a viewmodel, the viewmodel takes notice and exhibits its behavior.&lt;/li&gt;
&lt;li&gt;When a viewmodel modifies one of its own properties, the presentation layer takes notice and updates the screen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Thus, a viewmodel essentially implements a fully interactive and yet completely abstract (i.e. not graphical) user interface, with mutable properties instead of editable controls. The viewmodel is free from presentation concerns such as where on the screen the properties may be shown, what user interface controls may be used to show them, etc.
&lt;ul&gt;
&lt;li&gt;Note: GUI pushbuttons, which have no state, are implemented as special &amp;ldquo;Command&amp;rdquo; objects that are exposed by a viewmodel besides its properties, but they could also be implemented as Boolean properties, where a transition from say, true to false triggers behavior. Command objects make viewmodels more self-documenting and more usable, but they are nothing but a nice-to-have feature: in principle, everything could work with just properties.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If we wanted to allow the user to edit a &lt;code&gt;Customer&lt;/code&gt; entity in a modal dialog box:
&lt;ul&gt;
&lt;li&gt;There will be a viewmodel for this dialog box, which exposes:
&lt;ul&gt;
&lt;li&gt;One property for each editable field of &lt;code&gt;Customer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;One command for the &amp;lsquo;OK&amp;rsquo; button&lt;/li&gt;
&lt;li&gt;One boolean property which stands for the &amp;rsquo;enabled&amp;rsquo; state of the &amp;lsquo;OK&amp;rsquo; button.&lt;/li&gt;
&lt;li&gt;One command for the &amp;lsquo;Cancel&amp;rsquo; button, presumed to be always enabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The viewmodel may set the enabled state of the &amp;lsquo;OK&amp;rsquo; command to true only once the user has made changes to the fields.&lt;/li&gt;
&lt;li&gt;When the &amp;lsquo;OK&amp;rsquo; command is triggered, the viewmodel performs validation.&lt;/li&gt;
&lt;li&gt;If validation fails, the viewmodel instantiates another viewmodel which stands for an error message, and the view chooses how to show it, e.g. with a modal dialog box or with a temporary &amp;ldquo;toast&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;If validation succeeds, the viewmodel persists the entered information in the data store.&lt;/li&gt;
&lt;li&gt;If the user opts to cancel, then the viewmodel discards the edited information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Viewmodels are so agnostic of presentation concerns that they can in fact be instantiated without any user interface at all. This allows us to test the entirety of the behavior of our application logic without a user interface and without having to examine any of its private implementation details such as its data store. Our application logic tests simply modify the public state of viewmodels and examine how the viewmodels further modify their public state in response.&lt;/li&gt;
&lt;li&gt;The presentation layer consists of views.
&lt;ul&gt;
&lt;li&gt;In a desktop application, views are user-defined controls, panels, windows, dialogs, etc.&lt;/li&gt;
&lt;li&gt;In a web application, views would be HTML fragments.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Each view type is specific to a particular viewmodel type, and contains bindings, which describe how each property of the viewmodel is bound to each property of a control within the view.
&lt;ul&gt;
&lt;li&gt;So, a &lt;code&gt;CustomerForm&lt;/code&gt; view which is meant to display a &lt;code&gt;Customer&lt;/code&gt; viewmodel has a binding which specifies that the &lt;code&gt;Name&lt;/code&gt; property of the customer should be bound to the &lt;code&gt;Text&lt;/code&gt; property of a certain &lt;code&gt;TextBox&lt;/code&gt; control within the view.&lt;/li&gt;
&lt;li&gt;Note that these associations are purely declarative, and they reference nothing but statically available information, (data types and their members,) which means that they can be described using a markup language, i.e. without the need to write any application-specific code to build up the user interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A viewmodel may contain a property which is in turn another viewmodel. Let us call that a child viewmodel. In this case, the view can do one of two things:
&lt;ul&gt;
&lt;li&gt;Specify a particular child view type to display that particular child viewmodel.&lt;/li&gt;
&lt;li&gt;Specify a mapping table which defines what type of child view to use for displaying any different possible type of child viewmodel.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Views are resolved at runtime, based on the actual type of the child viewmodel, which can be more derived than the advertised type of the child viewmodel property; so, if a viewmodel exposes a &lt;code&gt;Customer&lt;/code&gt; child viewmodel property which can be either of type &lt;code&gt;Customer&lt;/code&gt; or of a more derived type &lt;code&gt;WholesaleCustomer&lt;/code&gt;, the mapping table can specify a different child view type for each of these child viewmodel types, and the right child view will be instantiated at runtime depending on the actual type of the child viewmodel.&lt;/li&gt;
&lt;li&gt;Any child view can in turn contain its own mapping table which defines more associations, or redefines existing associations, so that for example:
&lt;ul&gt;
&lt;li&gt;In the scope of an &lt;code&gt;AllCustomers&lt;/code&gt; view, the &lt;code&gt;Customer&lt;/code&gt; viewmodel can be associated with a &lt;code&gt;CustomerRow&lt;/code&gt; view, so as to present the customer as a row in a tabular control.&lt;/li&gt;
&lt;li&gt;In the scope of a &lt;code&gt;CustomerDetails&lt;/code&gt; view, the same &lt;code&gt;Customer&lt;/code&gt; viewmodel can be associated with a &lt;code&gt;CustomerForm&lt;/code&gt; view, to present the customer using individual fields laid out on a surface.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Note that again, this mapping table consists of nothing but statically available information, (view types and viewmodel types,) so everything is still achievable in markup.&lt;/li&gt;
&lt;li&gt;A child viewmodel property can be optional or nullable, thus allowing the application logic to control whether an entire section of the user interface is available or not at any given moment.&lt;/li&gt;
&lt;li&gt;A child viewmodel property can be a collection of viewmodels, allowing for a corresponding child view which is a list control or a tab control. Viewmodel type mapping still applies, so if the collection contains viewmodels of different types at runtime, the resulting list control will consist of different kinds of rows, or the resulting tab control will consist of different kinds of tabs.&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Object Lifetime Awareness</title>
        <link>//localhost:1313/p/object-lifetime-awareness/</link>
        <pubDate>Sun, 27 Dec 2020 10:46:17 +0000</pubDate>
        
        <guid>//localhost:1313/p/object-lifetime-awareness/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/object-lifetime-awareness/images/le-penseur.jpg&#34;
	width=&#34;3648&#34;
	height=&#34;5472&#34;
	srcset=&#34;//localhost:1313/p/object-lifetime-awareness/images/le-penseur_hu_9d5b056aaaccb843.jpg 480w, //localhost:1313/p/object-lifetime-awareness/images/le-penseur_hu_c19a599b08f288b2.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;160px&#34;
	
&gt;
&lt;/p&gt;
&lt;h4 id=&#34;abstract&#34;&gt;Abstract
&lt;/h4&gt;&lt;p&gt;Garbage collectors have given us a false sense of security with respect to what happens to an object once we stop thinking about it. The assumption is that it will be magically taken care of, but this does not always go as hoped, resulting in memory leaks and bugs due to failure to perform necessary cleanup. Tools for troubleshooting such problems are scarce, and not particularly helpful, so finding and fixing such problems is notoriously difficult.&lt;/p&gt;
&lt;p&gt;A methodology is presented, which differs from current widespread practices, for maintaining awareness of, and exercising full deterministic control over, the lifetime of certain objects in a garbage-collected environment. We issue hard errors in the event of misuse, and accurate diagnostic messages in the event of omissions, thus improving the robustness of software and lessening the troubleshooting burden.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&#34;definition&#34;&gt;Definition
&lt;/h4&gt;&lt;p&gt;An object can be said to have a concept of lifetime if at some point it must perform some cleanup actions, after which it must never be accessed again.&lt;/p&gt;
&lt;h4 id=&#34;a-first-look-at-the-problem&#34;&gt;A first look at the Problem
&lt;/h4&gt;&lt;p&gt;One of the original promises of garbage collectors was that we should not have to worry about the lifetime of objects; however, there exist various known situations where objects do, by their very nature, have an inherent notion of lifetime, so we do have to worry about it; for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objects that model real-world processes with an inherent concept of lifetime, such as:
&lt;ul&gt;
&lt;li&gt;A user&amp;rsquo;s visit to a web site, represented by a web session which at some moment expires.&lt;/li&gt;
&lt;li&gt;The printing of a document, represented by a print job which at some moment completes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Objects implementing application behaviors with a clearly defined end, such as:
&lt;ul&gt;
&lt;li&gt;A dialog window which at some moment gets dismissed and ceases to exist.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, there exist certain programmatic constructs which require a notion of lifetime; for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An event observer which must at some point unregister from the event source that it had previously registered with.&lt;/li&gt;
&lt;li&gt;A database transaction which must at some point end, either by committing it or rolling it back.&lt;/li&gt;
&lt;li&gt;Generally, any situation where:
&lt;ul&gt;
&lt;li&gt;We must remember to undo something which was previously done.&lt;/li&gt;
&lt;li&gt;Some initialization must be balanced by some corresponding cleanup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Furthermore, any object which contains an object that has a notion of lifetime needs to have a notion of its own lifetime, so as to be in a position of controlling the lifetime of the contained object. Thus, there tends to be a need for objects with a notion of lifetime to form a containment hierarchy whose root is the main application object.&lt;/p&gt;
&lt;p&gt;Unfortunately, in garbage collected environments, object lifetime is not given as much attention as it deserves. Software architectures tend to underestimate its importance, give it only a partial treatment, and invariably do it in ad-hoc ways, without any clearly defined methodology or aiding infrastructure. All to often, an object with an inherent notion of lifetime is built without explicit knowledge of it; instead, its lifetime is treated only implicitly. Thus, the software design has no knowledge of, and no control over, the lifetime of that object, and relies on the garbage collector to magically take care of it.&lt;/p&gt;
&lt;p&gt;Once we leave an object up to the garbage collector to take care of, we completely relinquish control over what happens next: there are no guarantees as to when the object will be collected, or even as to whether it will in fact be collected; there will be nothing to inform us of the outcome, and we have no way of influencing the outcome. Thus, when object-lifetime related trouble happens, it is by its nature very difficult to troubleshoot, diagnose, and fix; nonetheless, most programmers try to avoid dealing with object lifetime if they can, and each time problems pop up, they try to fix them on an as needed basis.&lt;/p&gt;
&lt;p&gt;The following kinds of trouble are common:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Direct failure to perform necessary cleanup:&lt;/strong&gt; the false sense of security offered by the garbage collector sometimes makes programmers forget that it only reclaims unused memory, it does not do any other cleanup for us, such as unregistering observers from event sources. This usually needs to be done manually, and it requires that the observer must have a notion of lifetime. An event source could in theory be asserting that every single observer did eventually remember to deregister; however, such a technique would require not only observers to have a notion of lifetime, but also the event source itself. Thus, there is no widespread use of such a technique, because there is no widespread use of object lifetime awareness in the first place.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory leaks:&lt;/strong&gt; in an ideal world, the magic of the garbage collector would always be strong and true, but in practice it is not, due to subtle human error such as inadvertently keeping around a reference to an object, thus preventing it from being garbage collected. Lack of object lifetime awareness only exacerbates this problem.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Troubleshooting in the dark:&lt;/strong&gt; an object with a notion of lifetime can either be alive or dead. If the lifetime of the object is explicit, we can always inspect that state with the debugger. If not, then we never know whether the object that we are looking at is meant to be alive or not.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inability to detect misuse:&lt;/strong&gt; a very common mistake is continuing to access an object even after its lifetime is over. When the object has no explicit knowledge of its own lifetime, it cannot assert against such mistakes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;existing-mechanisms&#34;&gt;Existing mechanisms
&lt;/h4&gt;&lt;p&gt;Garbage collectors and their associated execution environments do provide some machinery which is related to the topic of object lifetime management, namely &lt;em&gt;&lt;strong&gt;finalization&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;disposal&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;&amp;ldquo;automatic&amp;rdquo; disposal&lt;/strong&gt;&lt;/em&gt;, and &lt;em&gt;&lt;strong&gt;weak references&lt;/strong&gt;&lt;/em&gt;, but as we shall see this machinery alone is woefully inadequate.&lt;/p&gt;
&lt;h3 id=&#34;finalization&#34;&gt;Finalization
&lt;/h3&gt;&lt;p&gt;In Java we have the &lt;code&gt;Object.finalize()&lt;/code&gt; method, and in C# we have &amp;ldquo;destructors&amp;rdquo;, which are actually not destructors at all, they are finalizers, too. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;  The garbage collector will invoke the finalizer of an object right before reclaiming the memory occupied by it, so that the object can in theory perform some cleanup at that moment. Unfortunately, this mechanism is notoriously unreliable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An object will not be finalized unless it first becomes eligible for collection, and in order for that to happen, it must first become unreachable. However, the object may remain reachable due to subtle mistakes such as unknowingly keeping a reference to it in some list, thus resulting in objects which never get finalized.&lt;/li&gt;
&lt;li&gt;When an object does become eligible for collection, the moment that it will actually be collected largely depends upon the whim of the garbage-collector, which is non-deterministic, both according to the documentation and as observed by experimentation. There are no guarantees as to when an object will be collected, or even as to whether it will ever be collected, despite being eligible.
&lt;ul&gt;
&lt;li&gt;If the garbage collector works in aggressive mode, (common in servers,) the object will be collected sooner rather than later, but how soon depends on variables that we practically have no control over, such as at what rate existing objects are becoming eligible for collection, how many objects are pending to be finalized, etc. So:
&lt;ul&gt;
&lt;li&gt;Even though the object may be finalized within milliseconds, there are no guarantees as to how many milliseconds, and also please note that &amp;ldquo;milliseconds&amp;rdquo; is still a far cry from &amp;ldquo;now&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Even if the object gets finalized as quickly as possible, this is still going to happen in a separate thread, so finalization will always be desynchronized from the set of instructions which rendered the object eligible for finalization. If these instructions are followed by another set of instructions that in any way rely on finalization having already taken place, the second set of instructions will almost always fail.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the garbage collector works in non-aggressive mode, (common in desktop and console applications,) then:
&lt;ul&gt;
&lt;li&gt;The object might not be collected unless the virtual machine starts running out of memory, which is at an entirely unknown and usually distant time in the future.&lt;/li&gt;
&lt;li&gt;The object may still not be collected at all if our software completes before exhausting its available memory. If we are only dealing with unmanaged resources that belong to the current process, they will be automatically reclaimed upon process termination, so all will be good, but if we are dealing with resources that are external to our process, (e.g. controlling a peripheral,) these resources will not be released.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The garbage collector orchestrates collection and finalization according to memory availability concerns, but not according to other concerns which it has no knowledge of; consequently, if we are acquiring instances of a certain scarce resource at a high rate, the garbage collector will not hasten collection and finalization in response to the scarcity of that resource, because it has no knowledge of that scarcity. However, if that resource only gets recycled when collection and finalization occurs, and if we do not happen to be allocating and freeing memory fast enough to trigger frequent enough collection and finalization, then we will be consuming the resource faster than it is being recycled, so we will run out of it, despite everything seemingly being done right.&lt;/li&gt;
&lt;li&gt;Finalization is unordered and does not respect containment hierarchy, which means that when the finalizer is invoked on an object, a random subset of the objects contained in this object may have already been finalized. This is a completely chaotic situation which makes it impossible to get anything non-trivial done within a finalizer.&lt;/li&gt;
&lt;li&gt;The chaotic and non-deterministic conditions under which the finalizer executes make it virtually impossible to test any code that you put in a finalizer, so virtually all finalizers are written on a best-effort basis: if it seems to work as written, it will hopefully keep working, fingers crossed.&lt;/li&gt;
&lt;li&gt;Finalization is documented as having a high performance cost, so the standing advice is that it is best to minimize its use, or avoid it altogether if possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, relying on finalization does not give us control over anything, on the contrary it takes control away from us. The official literature of both Microsoft DotNet and the Java Virtual Machine recommends using finalization for the purpose of releasing unmanaged resources, which is not just unhelpful but actually wrongful advice to give. The entire software industry has been blindly following this advice without first questioning its correctness, which has resulted in lots of buggy software out there.&lt;/p&gt;
&lt;h3 id=&#34;disposal&#34;&gt;Disposal
&lt;/h3&gt;&lt;p&gt;In Java we have the &lt;code&gt;Closeable&lt;/code&gt; interface, and in C# we have the &lt;code&gt;IDisposable&lt;/code&gt; interface. The benefit of using these interfaces is that they allow explicit (i.e. deterministic and synchronous) triggering of cleanup, instead of relying on finalization to trigger it.&lt;/p&gt;
&lt;p&gt;A C#-only note: In the C# world there is an understanding that &lt;code&gt;IDisposable&lt;/code&gt; may also be used for performing regular cleanup at the end of an object&amp;rsquo;s lifetime; however, its primary reason of existence is still regarded as being the release of unmanaged resources, so people are trying to use it for both purposes. At the same time, the releasing of unmanaged resources is still regarded as something that must always be attempted during finalization, so people are trying to write disposal methods which must work both when explicitly invoked during normal program flow, and when invoked by the finalizer. Needless to say, the complexity of this task is daunting, and the result is incredible amounts of confusion. The &lt;a class=&#34;external&#34; 
   href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose&#34; target=&#34;_blank&#34;
   &gt;&lt;code&gt;Dispose(bool)&lt;/code&gt; pattern&lt;/a&gt; has been invented to help manage the chaos, but the result is still preposterously complicated, it suffers from boilerplate code on every single object that implements the pattern, it is largely untestable, and what is most disappointing is that absolutely no thinking seems to have gone in the direction of avoiding all this chaos in the first place.&lt;/p&gt;
&lt;p&gt;Overall, the problem with disposal is that it is very easy to accidentally omit, and when it is omitted there is usually nothing to tell us that we did something wrong, other than performance degradation and inexplicable malfunction. As a matter of fact, the designers of both Java and C# anticipated the inevitability of such omissions, so they invented finalization as a fallback mechanism which is hoped to save the day despite the omissions. However, since finalization is notoriously unreliable, it is not a solution either; it is more like implementing an insurance policy by purchasing lottery tickets.&lt;/p&gt;
&lt;p&gt;Unfortunately, the availability of finalization, and its deceitful promise of making everything right by magic, has steered programmers to regard disposal as largely optional, while in reality it is essential. All that disposal needs in order to be actually useful is a mechanism that will warn us when we forget to perform it, instead of a mechanism that will try to magically fix our omissions.&lt;/p&gt;
&lt;h3 id=&#34;automatic-disposal&#34;&gt;&amp;ldquo;Automatic&amp;rdquo; disposal
&lt;/h3&gt;&lt;p&gt;Both Java and C# provide special &amp;ldquo;automatic&amp;rdquo; disposal constructs, namely the &lt;code&gt;try-with-resources&lt;/code&gt; statement of java, and the &lt;code&gt;using&lt;/code&gt; keyword of C#, both of which implicitly invoke the disposal method even if an exception is thrown.  However:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The only thing that is automatic about these constructs is that if you remember to use them, then they will save you from having to write some code that disposes an object; unfortunately,
&lt;ul&gt;
&lt;li&gt;You may very easily forget to use them.&lt;/li&gt;
&lt;li&gt;You may very easily forget that your object requires disposal and therefore be unaware of the fact that you should have used them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;These constructs can only be used in the simplistic scenario where the lifetime of an object is fully contained within the scope of a single method; unfortunately, in all but the most trivial situations what we actually have is objects which are contained within other objects and live for a prolonged time, so the method that creates them is different from the method that destroys them. In all these cases, the automatic disposal constructs are of no use whatsoever, and the programmer must remember to do everything right.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;weak-references&#34;&gt;Weak References
&lt;/h3&gt;&lt;p&gt;A weak reference is an object which receives special treatment by the execution environment, to achieve something which is not normally possible. It contains a reference to a target object, which is disregarded by the garbage collector when determining whether the target object is accessible. Therefore, if there are no other references to the target object, then the target object is allowed to be garbage-collected, at which point the reference inside the weak reference object is replaced with null.&lt;/p&gt;
&lt;p&gt;Weak references do not actually help us manage the lifetime of objects, but they have been suggested as a mechanism that can help us design things so that there is no need to manage the lifetime of objects. The idea is that we can implement the observer pattern using weak references, so that observers do not need to remember to unregister themselves from the event source; instead, they can simply be allowed to become garbage-collected, and the event source will subsequently forget them.&lt;/p&gt;
&lt;p&gt;This approach suffers from a number of drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Weak references might save us from having to worry about the lifetime of event observers, but they do nothing for a wide range of other situations that require cleanup at the end of an object&amp;rsquo;s lifetime.&lt;/li&gt;
&lt;li&gt;Weak observers run the danger of being prematurely garbage-collected. When this happens, it is very difficult to troubleshoot, and the fix tends to require tricks and hacks.&lt;/li&gt;
&lt;li&gt;Weak references are a bit too low level, a bit too esoteric, and a bit like magic, so suggesting their widespread use by the average programmer is a bit of a tough proposition.&lt;/li&gt;
&lt;li&gt;The use of weak references represents a step backwards from the stated goal of gaining more control over the inner workings of our software.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-deeper-look-at-the-problem&#34;&gt;A deeper look at the problem
&lt;/h4&gt;&lt;p&gt;In a language like C++, which has proper destructors, the lifetime of an object is well defined, and the compiler does all the work necessary to guarantee that this lifetime will end at the exact right moment, as long as we are using either local storage or smart pointers. However, in garbage-collected languages we have none of that; the lifetime of objects is not well defined by the language, so there is virtually nothing that the compiler can do for us. (As we have already shown, the &lt;code&gt;try-with-resources&lt;/code&gt; statement of Java and the &lt;code&gt;using&lt;/code&gt; keyword of C# are of very limited usefulness.)&lt;/p&gt;
&lt;p&gt;In order to implement necessary cleanup at the end of an object&amp;rsquo;s lifetime in garbage-collected languages, programmers either rely on finalization, or explicitly invoke objects to let them know that their lifetime is over. As we have already shown, finalization is asynchronous and non-deterministic, so it is unsuitable for basing any essential function of our software upon it, which means that explicit object lifetime termination is the only viable option.&lt;/p&gt;
&lt;p&gt;Unfortunately, explicit object lifetime termination suffers from its own range of problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is usually nothing in the code to give us a hint that we should place a call to end the lifetime of an object.&lt;/li&gt;
&lt;li&gt;When we forget to end the lifetime of an object, there is never any immediate error to tell us that we forgot.&lt;/li&gt;
&lt;li&gt;The problems that subsequently occur tend to be subtle, so we often do not notice them until a considerable time after the fact. For example, forgetting to unregister an observer from an event source turns the observing object into a memory leak, and causes the observing method to keep being needlessly invoked by the event source, to perform actions that in the best case only waste clock cycles without any value or effect, and in the non-best case cause malfunction.&lt;/li&gt;
&lt;li&gt;When the malfunction does get noticed, it often seems inexplicable and does not tend to point to the source of the problem.&lt;/li&gt;
&lt;li&gt;Even when we discover that a certain malfunction is due to the lifetime of an object not having been ended, it is usually difficult to tell at which point in the code it should have been ended. Often, in order to know this, we first need to know where in the code the object was allocated, but this information is not normally available.&lt;/li&gt;
&lt;li&gt;Writing tests to catch omissions in object lifetime control is not only hard and tedious, but it also requires testing against the implementation rather than testing against the interface, which violates recommended best practices. (To test whether object A properly ends the lifetime of object B, we have to mock B and ensure that its lifetime termination method is invoked by A, but if we do this then we are by definition testing against the implementation of A.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-solution&#34;&gt;The Solution
&lt;/h4&gt;&lt;p&gt;Whereas it is generally true that &amp;ldquo;if you do everything right there will be no problems&amp;rdquo;, this is a very bad rule to live by, because it completely disregards another very important rule which says &amp;ldquo;there will be mistakes&amp;rdquo;. Reliance on everything being done right tends to result in brittle software designs, because some things will inevitably go wrong. We are definitely not advocating designs that are tolerant of mistakes; however, a software design must at the very least offer means of detecting mistakes and responding to them with hard error, diagnostic messages, or both; a design which relies on mistakes not being made, and at the same time is incapable of detecting the mistakes that will nonetheless be made, is doomed to run into trouble.&lt;/p&gt;
&lt;p&gt;Object lifetime awareness is a design pattern for writing robust software. It begins by acknowledging that in garbage collected languages there tends to be widespread uncertainty with respect to the lifetime of objects, which results in bugs that are very difficult to troubleshoot and fix. While the garbage collector would ideally be taking care of a lot of things, by its nature it cannot take care of everything, and in practice it often does not even take care of things that it is expected to, due to subtle human error.&lt;/p&gt;
&lt;p&gt;The impetus behind object lifetime awareness is that we have had enough of this uncertainty, so we are taking matters into our own hands by establishing definitive knowledge of the lifetime of our objects and taking full control over it. When an object has an inherent notion of lifetime, this notion must always be made explicit, and handled in a certain structured and recognizable manner, so that when mistakes occur, we receive hard errors and diagnostic messages, allowing us to fix problems without troubleshooting in the dark.&lt;/p&gt;
&lt;p&gt;Specifically, every lifetime-aware object must do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encapsulate an &amp;ldquo;alive&amp;rdquo; state which:
&lt;ul&gt;
&lt;li&gt;Starts as &amp;ldquo;true&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;At some moment transitions to &amp;ldquo;false&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Is not exposed.&lt;/li&gt;
&lt;li&gt;It can be asserted.&lt;/li&gt;
&lt;li&gt;Can be inspected with a debugger.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On debug runs, the lifetime-aware object must respond with hard error to any attempt to invoke any of its public instance methods once its lifetime is over.&lt;/li&gt;
&lt;li&gt;On debug runs, the lifetime-aware object must discover any omission to end its lifetime, and generate a diagnostic message if so.  (More on how to achieve this later.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that the definition of a &amp;ldquo;debug run&amp;rdquo; varies depending on which language you are using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In C# it is a run of the debug build.&lt;/li&gt;
&lt;li&gt;In Java it is a run with assertions enabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please also note that automated test runs are usually debug runs.&lt;/p&gt;
&lt;p&gt;Luckily we do not have to add lifetime awareness to all objects, we only need to add it to objects that belong to one or more of the following categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objects that by their nature have a concept of lifetime, such as timers, windows, files, network connections, notification suppressors, etc.&lt;/li&gt;
&lt;li&gt;Objects that once initialized, are known to have some cleanup to do eventually.&lt;/li&gt;
&lt;li&gt;Objects with which other objects may register in some way. (To ensure that each object that registers does not forget to unregister.)&lt;/li&gt;
&lt;li&gt;Objects that contain (own) other lifetime-aware objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In each system the objects that can benefit from lifetime awareness tend to be relatively few, while the majority of objects can continue being blissfully unaware of their lifetime, letting the garbage collector handle it.&lt;/p&gt;
&lt;p&gt;In certain rare cases, a lifetime-aware object may control its own lifetime; however, far more often, the lifetime of an object is meant to be controlled by other objects. In these cases, the lifetime-aware object should implement the disposal interface of the language, primarily in order to document the fact that it is lifetime-aware, and secondarily so that the &amp;ldquo;automatic&amp;rdquo; disposal mechanism of the language can be used when the opportunity arises.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In Java, that would be an object implementing the &lt;code&gt;Closeable&lt;/code&gt; interface, thus allowing us to sometimes make use of the &lt;code&gt;try-with-resources&lt;/code&gt; statement.&lt;/li&gt;
&lt;li&gt;In C#, that would be the an object implementing the &lt;code&gt;IDisposable&lt;/code&gt; interface, thus allowing us to sometimes make use of the &lt;code&gt;using&lt;/code&gt; keyword.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that the use of these interfaces here has nothing to do with releasing unmanaged resources;  The goal is object lifetime awareness, while the releasing of unmanaged resources is at best a side note and largely a red herring in this discussion. It is true that the original intention of these interfaces was to allow releasing unmanaged resources, but there is absolutely nothing, either in the interfaces themselves, or in the language specifications, or in the respective compilers, or in the respective runtime environments, which says that this has to be the only purpose of these interfaces, or the only way they should be used, or the only way they can be used. So, here we are using them for something else. Please completely disregard the issue of unmanaged resources for now, we will address them later.&lt;/p&gt;
&lt;p&gt;By making objects aware of their own lifetime, we achieve the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any discrepancy between an object&amp;rsquo;s expected alive state and its actual alive state (i.e. whether we think it should be alive vs. whether it actually is alive) can be asserted against and therefore be swiftly and infallibly detected without any need for white-box testing.&lt;/li&gt;
&lt;li&gt;The alive state of an object can be explicitly and deterministically controlled without ever having to rely on finalization to do it for us.&lt;/li&gt;
&lt;li&gt;All necessary cleanup can be done when the alive state transitions to false, thus ensuring that each initialization action is always balanced by its corresponding cleanup action. This includes ending the lifetime of any contained (owned) objects, unregistering the object from whatever it had previously registered with, etc.&lt;/li&gt;
&lt;li&gt;At the end of the object&amp;rsquo;s lifetime we can take whatever extra measures are within our power to take in order to ensure that the lifetime of other objects is being correctly managed. For example, we can assert that any objects which had previously registered with this object have by now unregistered themselves.&lt;/li&gt;
&lt;li&gt;More broadly, we construct our software to be in complete control over its inner workings, instead of leaving things to chance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;&#34;&gt;
&lt;/h4&gt;&lt;h4 id=&#34;detecting-omissions&#34;&gt;Detecting omissions
&lt;/h4&gt;&lt;p&gt;The main thing which makes object lifetime awareness a viable proposition is the promise of useful diagnostic messages in response to omissions to explicitly end the lifetime of objects. Without such diagnostic messages, object lifetime awareness would not be much different from existing practices.&lt;/p&gt;
&lt;p&gt;Interestingly enough, (or perversely enough, depending on how you would like to see it,) the mechanism that we leverage in order to detect such omissions is the garbage collector itself. The idea is that an object can check during finalization whether it is still alive or not: if it discovers that it is being finalized while still alive, then this means that the programmer forgot to explicitly end the lifetime of the object at an earlier moment.&lt;/p&gt;
&lt;p&gt;It is very important to note that once we detect that an object is still alive during finalization, we specifically refrain from repeating the widespread mistake of trying to correct the problem: we most certainly do not attempt to end the lifetime of the object at that moment; instead, we only generate a diagnostic message, alerting the programmer that they forgot to end the lifetime of the object at an earlier time. This is important because the checks performed during finalization are meant to be of a strictly diagnostic nature, (a quality assurance mechanism if you wish,) so they are only meant to be performed on debug runs, so our software better be working correctly without them on release runs.&lt;/p&gt;
&lt;p&gt;One might protest that an object which has accidentally become a memory leak will never be finalized, so it will never discover that its lifetime was not ended. Luckily, this can be taken care of with a bit of infrastructural support and a bit of discipline: During application shutdown we ensure that our system undergoes an orderly and thorough cleanup phase, where all remaining lifetime-aware objects are terminated. Typically, this simply means ending the lifetime of the main application object, and this should cascade throughout the entire containment hierarchy, ending the lifetime of all objects. Once this cleanup phase is complete, and if this is a debug run, we force a full garbage collection, and we wait for it to complete before exiting the application. In doing so, we ensure that all finalizers are invoked, and this includes the finalizers of any objects that were inadvertently memory-leaked. Thus, any omission to end the lifetime of an object is detectable in the worst case during application shutdown. For this to work optimally, some extra discipline is necessary, for example avoiding to directly or indirectly anchor lifetime-aware objects in static storage.&lt;/p&gt;
&lt;p&gt;In actual practice most omissions to control the lifetime of objects happen without the objects necessarily also becoming memory-leaked, so the objects do get garbage-collected, so the omissions are detected at various moments during runtime when garbage collection occurs. For this reason, it is beneficial on debug runs to introduce regular forced garbage collection, thus detecting omissions as soon as possible after they happen. The right moment to force garbage collection tends to be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On web servers, immediately after servicing each client request.&lt;/li&gt;
&lt;li&gt;On desktop applications, immediately after each application logic idle event.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(An application logic idle event is similar to the graphical user interface idle event, except that it happens less frequently, i.e. not after every single event from the input system such as a mouse move, but only after the application logic has actually had some work to do.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On data processing systems with a main loop, at the end of each iteration of the main loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is worth stressing that forced garbage collection only needs to be employed as a diagnostic tool, and only on debug runs. On release runs there is never a need to force garbage collection because all object lifetime control issues are presumed to have already been addressed.&lt;/p&gt;
&lt;p&gt;Forced garbage collection can also be used as a diagnostic tool during automated software testing; however, if our tests are fine-grained, (as the case usually is with unit tests,) it is advisable to refrain from forcing garbage collection after each test, because a full run of the garbage collector tends to be expensive, so its frequent use may multiply the total run time of a test suite by a very large factor. The ideal is to perform just one forced garbage collection at the end of all tests, and if any object lifetime control failures are detected, then and only then do another run of all tests with forced garbage collection enabled after each test, to detect precisely in which tests the failures occur.&lt;/p&gt;
&lt;p&gt;In order to force garbage collection at will during testing, one needs a testing framework which supports this, and I am not aware of any, but if you do not make use of any exotic features of your existing testing framework, it is easy to write your own and take control yourself.&lt;/p&gt;
&lt;h4 id=&#34;addendum-lifeguards&#34;&gt;Addendum: Lifeguards
&lt;/h4&gt;&lt;p&gt;For an object to be aware of its own lifetime and to issue diagnostic messages when its lifetime is not properly controlled, a certain amount of functionality is needed, and we do not want to be coding this functionality by hand in each class that we write, so we will be delegating as much of the work as possible to a separate class. An appropriate name for such a class would be &lt;code&gt;ObjectLifetimeGuard&lt;/code&gt;, but this is a mouthful, so we will simply abbreviate it to &lt;code&gt;LifeGuard&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The lifeguard exposes only 2 methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A lifetime-assertion method which is invoked to assert that the lifeguard is still alive.&lt;/li&gt;
&lt;li&gt;An end-of-lifetime method which is invoked to let the lifeguard know that its lifetime is over.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the introduction of the lifeguard, each lifetime-aware class only needs to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Obtain during construction, and fully encapsulate, an instance of &lt;code&gt;LifeGuard&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Perform an assertion at the beginning of each public instance method, (by definition only on debug runs, since it is an assertion,) which simply delegates to the lifetime-assertion method of the lifeguard.&lt;/li&gt;
&lt;li&gt;Implement the object disposal interface of the language at hand, performing whatever cleanup actions are necessary, and then delegating to the end-of-lifetime method of the lifeguard.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The lifeguard does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On debug runs, it encapsulates an &lt;code&gt;alive&lt;/code&gt; state which starts as &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It implements the is-alive-assertion method as follows:
&lt;ul&gt;
&lt;li&gt;On debug runs, it returns &lt;code&gt;true&lt;/code&gt; if the object is alive, and throws an exception if not.&lt;/li&gt;
&lt;li&gt;On release runs, it always throws an exception, because it is only meant to be invoked from within assertions, and assertions are not meant to execute on release runs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;It implements the end-of-lifetime method as follows:
&lt;ul&gt;
&lt;li&gt;On debug runs, it first asserts that the object is currently alive, and then transitions the alive state to false.&lt;/li&gt;
&lt;li&gt;On release runs, it does nothing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On debug runs it defines a finalizer which checks whether the object is still alive during finalization, and generates a diagnostic message if so.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A lifeguard is obtained by invoking a factory method instead of using the &lt;code&gt;new&lt;/code&gt; keyword, because this method will return something different depending on whether this is a debug run or a release run. The factory can come in the form of a &lt;code&gt;static&lt;/code&gt; method for simplicity, or it can come in some other form if necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The interface of the lifeguard has been designed in such a way that its alive state can be asserted without being exposed. This has the effect of:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Preventing misuse&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allowing for a high performance implementation for release runs which does not even contain that state.&lt;/li&gt;
&lt;li&gt;Still allowing the alive state to be inspected with a debugger on debug runs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lifetime-aware objects that have a need for some similar state which is queryable must implement it separately. The fact that on debug runs this state will be mirroring the &lt;code&gt;alive&lt;/code&gt; state of the lifeguard is irrelevant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In certain environments which support asynchronous method invocations it might be impossible to guarantee that no method is ever invoked past end of lifetime; these are exceptions to the rule, which need special handling by means of &lt;code&gt;if&lt;/code&gt; statements instead of assertions. Since the lifeguard only allows asserting the alive state without exposing it, such objects will need to implement their own &lt;code&gt;alive&lt;/code&gt; state in parallel to the lifeguard.&lt;/li&gt;
&lt;li&gt;As a rule, triggering hard error is preferable over generating diagnostic messages; however, an omission to end the lifetime of an object can only be detected during finalization, and by that time it is already too late for any fail-fast measures, so what we have here is an exception to the rule: in this particular case, it is okay if we just generate a diagnostic message. If needed, extra measures can be taken to alert the programmer to not forget to look at the diagnostic messages.&lt;/li&gt;
&lt;li&gt;The diagnostic message generated in the event of an omission to end the lifetime of an object is meant to include a stack trace, complete with source filenames and line numbers, showing precisely where in the source code the object was allocated, to help us easily locate and fix the problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, this stack trace needs to be collected by the lifeguard during construction, just in case it will need to be displayed during finalization, but in many environments collecting a stack trace is unreasonably expensive, so if each lifeguard instantiation was to involve collecting a stack trace, this would run the danger of slowing down our debugs runs to the point of making them unusable. (Obtaining a stack trace with source filenames and line numbers a few dozen times per second incurs a noticeable penalty on the JVM, while under DotNet the penalty is catastrophically more severe.)&lt;/p&gt;
&lt;p&gt;For this reason, a special procedure is necessary: by default, stack traces are not collected, so a lifeguard which detects an omission to end the lifetime of an object reports only enough information to help us identify the class of the containing object. Once we know the class, we can go to the source code and flip a flag which enables stack trace collection for lifeguards of that specific class only, so that we can then re-run and obtain a message which includes a stack trace. Once we have solved the problem, we put the flag back to its default value to avoid the performance hit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Both in C# and in Java there is an established tradition which says that methods involved in the closing or disposing of things should be forgiving, in the sense that multiple invocations should be permitted with no penalty. In my opinion this practice is ill-conceived, so instead I prescribe an end-of-lifetime method which asserts that it is never invoked twice. This is in line with the overall theme of object lifetime awareness, which is to gain greater control over the inner workings of our software. I am perfectly aware of the fact that this is parting ways with a tradition cherished by the entire industry; it is perfectly fine to part ways with traditions when you know better, especially since another term for tradition is &amp;ldquo;capricious progress-stopper&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;The lifeguard is designed in such a way that on release runs it contains no state and performs no action; therefore, it need not be instantiated once per lifetime-aware object; instead, it can be a singleton, and all lifetime-aware objects can receive the same reference to its one and only dummy instance. Thus, the performance cost of using the lifeguard on release runs is near zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An implementation of lifeguard in C# is as follows:&lt;/p&gt;
&lt;p&gt;#nullable enable&lt;/p&gt;
&lt;p&gt;using Sys = System;&lt;/p&gt;
&lt;p&gt;using Collections = System.Collections.Generic;&lt;/p&gt;
&lt;p&gt;using System.Linq;&lt;/p&gt;
&lt;p&gt;using SysDiag = System.Diagnostics;&lt;/p&gt;
&lt;p&gt;using SysComp = System.Runtime.CompilerServices;&lt;/p&gt;
&lt;p&gt;public abstract class LifeGuard : Sys.IDisposable&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;public static LifeGuard Create( bool collectStackTrace = false, //&lt;/p&gt;
&lt;p&gt;[SysComp.CallerFilePath] string? callerFilePath = null, //&lt;/p&gt;
&lt;p&gt;[SysComp.CallerLineNumber] int callerLineNumber = 0 )&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;if( !DebugMode )&lt;/p&gt;
&lt;p&gt;return ProductionLifeGuard.Instance;&lt;/p&gt;
&lt;p&gt;Assert( callerFilePath != null );&lt;/p&gt;
&lt;p&gt;if( collectStackTrace )&lt;/p&gt;
&lt;p&gt;return new VerboseDebugLifeGuard( 1 );&lt;/p&gt;
&lt;p&gt;return new TerseDebugLifeGuard( callerFilePath!, callerLineNumber );&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public abstract void Dispose();&lt;/p&gt;
&lt;p&gt;public abstract bool IsAliveAssertion();&lt;/p&gt;
&lt;p&gt;private sealed class ProductionLifeGuard : LifeGuard&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;public static readonly ProductionLifeGuard Instance = new ProductionLifeGuard();&lt;/p&gt;
&lt;p&gt;private ProductionLifeGuard() { } //nothing to do&lt;/p&gt;
&lt;p&gt;public override void Dispose() { } //nothing to do&lt;/p&gt;
&lt;p&gt;public override bool IsAliveAssertion()&lt;/p&gt;
&lt;p&gt;=&amp;gt; throw new Sys.Exception(); //never invoke on a release build&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;private class DebugLifeGuard : LifeGuard&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;private bool alive = true;&lt;/p&gt;
&lt;p&gt;private readonly string message;&lt;/p&gt;
&lt;p&gt;protected DebugLifeGuard( string message )&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;this.message = message;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public sealed override void Dispose()&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;Assert( alive );&lt;/p&gt;
&lt;p&gt;alive = false;&lt;/p&gt;
&lt;p&gt;System.GC.SuppressFinalize( this );&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public sealed override bool IsAliveAssertion()&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;Assert( alive );&lt;/p&gt;
&lt;p&gt;return true;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;protected static string GetSourceInfo( string? filename, int lineNumber )&lt;/p&gt;
&lt;p&gt;=&amp;gt; $&amp;quot;{filename}({lineNumber})&amp;quot;;&lt;/p&gt;
&lt;p&gt;~DebugLifeGuard()&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;SysDiag.Debug.WriteLine( &amp;ldquo;Object still alive!&amp;rdquo; );&lt;/p&gt;
&lt;p&gt;SysDiag.Debug.WriteLine( message );&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;public override string ToString() =&amp;gt; alive ? &amp;quot;&amp;quot; : &amp;ldquo;END-OF-LIFE&amp;rdquo;;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;private sealed class TerseDebugLifeGuard : DebugLifeGuard&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;public TerseDebugLifeGuard( string callerFilePath, int callerLineNumber )&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;base( $&amp;quot;    {GetSourceInfo( callerFilePath, callerLineNumber )}&amp;quot; )&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;{ }&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;private sealed class VerboseDebugLifeGuard : DebugLifeGuard&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;public VerboseDebugLifeGuard( int framesToSkip )&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;base( buildMessage( framesToSkip + 1 ) )&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;{ }&lt;/p&gt;
&lt;p&gt;private static string buildMessage( int framesToSkip )&lt;/p&gt;
&lt;p&gt;=&amp;gt; string.Join( &amp;ldquo;\r\n&amp;rdquo;, getStackFrames( framesToSkip + 1 ) //&lt;/p&gt;
&lt;p&gt;.Select( getSourceInfoFromStackFrame ) );&lt;/p&gt;
&lt;p&gt;private static SysDiag.StackFrame[] getStackFrames( int framesToSkip )&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;var                  stackTrace = new SysDiag.StackTrace( framesToSkip + 1, true );&lt;/p&gt;
&lt;p&gt;SysDiag.StackFrame[] frames     = stackTrace.GetFrames()!;&lt;/p&gt;
&lt;p&gt;Sys.Type             type       = frames[0].GetMethod().DeclaringType;&lt;/p&gt;
&lt;p&gt;Assert( typeof(Sys.IDisposable).IsAssignableFrom( type ) );&lt;/p&gt;
&lt;p&gt;return frames.
Where( f =&amp;gt; f.GetFileName() != null ) //&lt;/p&gt;
&lt;p&gt;.ToArray();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;private static string getSourceInfoFromStackFrame( SysDiag.StackFrame frame )&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;string sourceInfo = GetSourceInfo( frame.GetFileName(), frame.GetFileLineNumber() );&lt;/p&gt;
&lt;p&gt;return $&amp;quot;    {sourceInfo}: {frame.GetMethod().DeclaringType}.{frame.GetMethod().Name}()&amp;quot;;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;Note that in theory, &lt;code&gt;private readonly string message&lt;/code&gt; may have already been finalized by the time the destructor attempts to use it. In reality, I have never encountered this happening. If it becomes a problem, a simple &lt;code&gt;string.Intern()&lt;/code&gt; could be used to permanently anchor these strings in memory, and that is okay despite the fact that it essentially introduces a memory leak, because it is only applicable to debug runs.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DebugMode&lt;/code&gt; is defined as follows:&lt;/p&gt;
&lt;p&gt;public static bool DebugMode&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;get&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;#if DEBUG&lt;/p&gt;
&lt;p&gt;return true;&lt;/p&gt;
&lt;p&gt;#else&lt;/p&gt;
&lt;p&gt;return false;&lt;/p&gt;
&lt;p&gt;#endif&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;This allows us to minimize the use of &lt;code&gt;#if DEBUG&lt;/code&gt;, which is ugly and cumbersome, and often results in code rot in the &lt;code&gt;#endif&lt;/code&gt; part, which is only discoverable when trying to compile the release build.&lt;/p&gt;
&lt;h4 id=&#34;addendum-ad-hoc-alive-states&#34;&gt;Addendum: Ad-hoc alive states
&lt;/h4&gt;&lt;p&gt;Object lifetime awareness comes with a piece of advice:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Avoid ad-hoc alive states, implement them as separate lifetime-aware objects instead.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;What this means is that a class should refrain from exposing a pair of methods for entering and exiting some special state of that class, and instead it should expose only one method which creates a new lifetime-aware object to represent that special state, and to exit the state when its lifetime is ended. Then, if the class has any methods which may only be invoked while in that special state, these methods must be moved into the special state object, so that they are not even available unless the special state has been entered.&lt;/p&gt;
&lt;p&gt;By following this advice we split the interface of our object into smaller interfaces that are more simple and intuitive, we clearly document what is going on by making use of the lifetime-awareness pattern, and we take advantage of the error-checking and diagnostic facilities of the lifetime-awareness mechanism.&lt;/p&gt;
&lt;p&gt;An example of an interface which could have benefited from this advice is the JDBC API. This interface exposes a multitude of methods for dealing with a relational database, and among them it exposes a pair of methods for beginning and ending a transaction. A better way of structuring that interface would have been to expose a single method for creating a new transaction object, which in turn ends the transaction when disposed. Then, all the data manipulation methods would be moved into that object, so that it is impossible to manipulate data unless a transaction is active.&lt;/p&gt;
&lt;h4 id=&#34;addendum-unmanaged-resources&#34;&gt;Addendum: Unmanaged Resources
&lt;/h4&gt;&lt;p&gt;As we have shown, by leveraging hard error and diagnostic messages on debug runs and test runs, the object lifetime awareness pattern guarantees cleanup at the end of an object&amp;rsquo;s lifetime.&lt;/p&gt;
&lt;p&gt;Conveniently enough, this cleanup can, and should, include the releasing of unmanaged resources.&lt;/p&gt;
&lt;p&gt;This in turn means that we never need to involve finalization for this task, not even as a fallback mechanism: unmanaged resources can be released infallibly, deterministically, and synchronously, i.e. &lt;em&gt;always right now,&lt;/em&gt; as opposed to at some unknown moment later in time, if at all.  This also means that on release runs we do not need finalization at all.&lt;/p&gt;
&lt;p&gt;In essence, the releasing of unmanaged resources loses the special status that it has enjoyed so far, and becomes regular cleanup just as any other kind of cleanup. Our software sees to it that all necessary cleanup is always performed, without leaving anything to chance, and without any distinctions between really important cleanup and not-so-important cleanup.&lt;/p&gt;
&lt;p&gt;C#-only note: This also means that there is no more need for that &lt;code&gt;Dispose(bool)&lt;/code&gt; nonsense, either.&lt;/p&gt;
&lt;h4 id=&#34;further-research-and-recommendations&#34;&gt;Further research and recommendations
&lt;/h4&gt;&lt;p&gt;Lifetime aware objects may benefit from a lifetime control service being propagated throughout the containment hierarchy so that they can register and unregister from it, thus:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eliminating the need for a static factory of lifeguard;&lt;/li&gt;
&lt;li&gt;Allowing us to at any given moment traverse the entire graph of lifetime-aware objects to see who is still alive;&lt;/li&gt;
&lt;li&gt;Making it impossible to inadvertently construct a lifetime-aware object without having explicit knowledge of the fact that it is lifetime-aware, since the lifetime control service must be passed to its constructor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Object lifetime awareness has the theoretic potential of completely eliminating all finalization overhead. Unfortunately, as things stand today, this potential cannot be realized, because existing runtime environments still offer essential classes that make unconditional use of finalization; e.g. classes that represent files, sockets, etc. These environments could benefit from new implementations of such essential classes that make use of the object lifetime awareness pattern so as to also avoid finalization. (While at it, please also note that these same classes could really benefit from not being needlessly multithreading-aware; when we have a use for multithreading awareness, we can add it ourselves, thank you.)&lt;/p&gt;
&lt;p&gt;Additionally, if it could be definitively established that finalization is to be used only for the purpose of generating diagnostic messages, then the entire machinery implementing finalization in runtime environments could be greatly simplified from the monster of complexity that it is today. Consider, for example, that garbage collectors are currently built to handle such preposterous situations as &amp;ldquo;object resurrection&amp;rdquo;, which is what may happen if a finalizer decides to anchor an object in memory, thus taking an object which had previously become eligible for collection and making it not eligible anymore. If finalization could be made trivial, then object resurrection could become impossible, or it could result in hard error rather than having to be handled.&lt;/p&gt;
&lt;p&gt;Also see my previous post &lt;a 
   href=&#34;//localhost:1313/p/mandatory-disposal-vs-the-dispose-disposing-abomination/&#34;
   &gt;Mandatory disposal vs. the &amp;ldquo;Dispose-disposing&amp;rdquo; abomination&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: &lt;em&gt;The Thinker&lt;/em&gt; (French: &lt;em&gt;Le Penseur&lt;/em&gt;) by Auguste Rodin (From &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/The_Thinker&#34; target=&#34;_blank&#34;
   &gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The language feature that C# calls &amp;ldquo;destructor&amp;rdquo; is a misnomer; it is not a destructor, it is a finalizer, and the choice of the tilde syntax to denote finalizers in C# as if they were C++ destructors has caused nothing but confusion. Microsoft has been reluctantly &lt;a class=&#34;external&#34; 
   href=&#34;https://docs.microsoft.com/en-us/archive/blogs/ericlippert/whats-the-difference-between-a-destructor-and-a-finalizer&#34; target=&#34;_blank&#34;
   &gt;acknowledging this&lt;/a&gt; and quietly &lt;a class=&#34;external&#34; 
   href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/destructors&#34; target=&#34;_blank&#34;
   &gt;correcting their terminology&lt;/a&gt; in their documentation.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>The famous &#34;Could not load file or assembly or one of its dependencies&#34; error message</title>
        <link>//localhost:1313/p/the-famous-could-not-load-file-or-assembly-or-one-of-its-dependencies-error-message/</link>
        <pubDate>Wed, 16 Dec 2020 12:15:11 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-famous-could-not-load-file-or-assembly-or-one-of-its-dependencies-error-message/</guid>
        <description>&lt;p&gt;If you have ever done any software development under Microsoft Windows you have probably come across this famous error message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;System.IO.FileNotFoundException : Could not load file or assembly &amp;lsquo;Acme.dll&amp;rsquo; or one of its dependencies. The specified module could not be found.&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Modern software makes heavy use of dynamic link libraries, and the problem with this kind of libraries is that for various reasons they might not be there when you need them, resulting in runtime errors. This is the runtime error you get under Windows when this happens.&lt;/p&gt;
&lt;p&gt;Naturally, when you see this message, the first thing to do is to check whether Acme.dll is there, and what you usually discover is that the file is indeed there. When dealing with computers, most error messages that you come across tend to leave some room for troubleshooting, but when the system is reporting that a certain file does not exist on your very own filesystem, while the file is most certainly there, the situation seems really hopeless. You are stymied.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading:  &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;At this point you are likely to start shot-gunning the problem by trying various random tricks in the hope that one of them will magically make the problem go away: you try running the application again just in case it was a glitch, you try obtaining a fresh copy of the library in case this one somehow got corrupted, you restart Windows because we always try that, right? &amp;ndash; and none of these attempts yields any results.&lt;/p&gt;
&lt;p&gt;Finally, when you have exhausted all other possibilities, you decide to take a closer look at the error message again. You notice that it says that it could not load Acme.dll &amp;ldquo;or one of its dependencies&amp;rdquo;, so you start with a new hypothesis: what cannot be found is not Acme.dll itself, it is one of the libraries that Acme.dll in turn tries to load. But which one? The next sentence says &amp;ldquo;the specified module could not be found&amp;rdquo;, but which module is the specified module? There is only one module being named in the error message, and that is Acme.dll, so this must be the specified module, right?&lt;/p&gt;
&lt;p&gt;What is happening here is that this error message is a notorious instance of trolling with which Microsoft has been torturing software professionals for decades now by telling them lies instead of reporting the actual problem. The problem is indeed that one of the dependencies of the library in question could not be found, but Windows will not tell you which one. Instead, it will give you this insidiously worded message which will send you looking for the problem in wrong directions.&lt;/p&gt;
&lt;p&gt;There is probably some programmer who worked at Microsoft some 30 years ago and is probably a pensioner by now, who has a permanent evil grin on his face knowing that he has personally caused millions of work hours wasted all over the planet over the course of several decades simply by creating this particular error message in this particular way. (Or, perhaps, he told his manager that the task he was working on would need to take a little longer because he had to collect all necessary information to produce a useful error message, and his manager told him to not do that because deadlines.)&lt;/p&gt;
&lt;p&gt;To fix this problem you have to use some special software called a &amp;ldquo;Dependency Analyzer&amp;rdquo; to trace all the dependencies of your application and locate the one that fails to load.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/the-famous-could-not-load-file-or-assembly-or-one-of-its-dependencies-error-message/images/grumpy-cat-lame-error-messages.jpg&#34;
	width=&#34;324&#34;
	height=&#34;400&#34;
	srcset=&#34;//localhost:1313/p/the-famous-could-not-load-file-or-assembly-or-one-of-its-dependencies-error-message/images/grumpy-cat-lame-error-messages_hu_ec275663cd84d572.jpg 480w, //localhost:1313/p/the-famous-could-not-load-file-or-assembly-or-one-of-its-dependencies-error-message/images/grumpy-cat-lame-error-messages_hu_a00e6a61b605d2db.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;81&#34;
		data-flex-basis=&#34;194px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;the-msvcr100dll-sub-problem&#34;&gt;The msvcr100.dll sub-problem
&lt;/h3&gt;&lt;p&gt;Quite often the dependency analyzer finds that the culprit is msvcr100.dll or something similar, which you might be completely unaware of. This msvcr100.dll is the dynamically linkable runtime library for software written using some old version of Microsoft Visual C++, which is a very popular language for writing all sorts of software under Windows, so if your application is using any third-party libraries, then one or more of them have almost certainly been written in MSVC. For some reason, many developers of libraries choose to make their product depend on an external instance of the MSVC runtime library instead of statically linking the MSVC runtime library into their product, and this creates an extra moving part which must be dealt with by others, like you.&lt;/p&gt;
&lt;p&gt;What is especially treacherous about msvcr100.dll in particular is that most large commercial applications contain it and install it in your Windows/System32 folder, so once you have installed a few commonly used apps on your machine you almost certainly have msvcr100.dll. This causes two major problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are completely oblivious to the fact that the application that you are developing indirectly depends on msvcr100.dll without including it in its own installer. You only discover this problem when you try to run your application on a relatively fresh installation of Windows.&lt;/li&gt;
&lt;li&gt;Not only you are oblivious about the msvcr100.dll problem, but also, the developers of libraries that you use might also be oblivious to it. For example, HDF5DotNet.dll is a popular library used by DotNet applications for reading and writing HDF5 files. This library depends on msvcr100.dll but does not include it in its installable package, nor is there any mention in their documentation about the fact that msvcr100.dll must be present in order for their library to successfully load.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that an msvcr100.dll with a size of 773968 bytes may exist under C:\Windows\SysWOW64, but it may not necessarily be the one you need. Your application might instead depend on another msvcr100.dll with a size of 829264 bytes under C:\Windows\System32.&lt;/p&gt;
&lt;p&gt;The approach recommended by Microsoft for solving this kind of problem is to include the &amp;ldquo;Microsoft Visual C++ Redistributable&amp;rdquo; installable package, and install it as part of the application&amp;rsquo;s installation process.  An easier way is to simply include a copy of msvcr100.dll in the directory from which your application launches.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Coherence: The Assertable Lock</title>
        <link>//localhost:1313/p/coherence-the-assertable-lock/</link>
        <pubDate>Sat, 12 Dec 2020 13:51:31 +0000</pubDate>
        
        <guid>//localhost:1313/p/coherence-the-assertable-lock/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/coherence-the-assertable-lock/media/coherence.jpg&#34;
	width=&#34;1280&#34;
	height=&#34;853&#34;
	srcset=&#34;//localhost:1313/p/coherence-the-assertable-lock/media/coherence_hu_774fdb15a774b77.jpg 480w, //localhost:1313/p/coherence-the-assertable-lock/media/coherence_hu_d8603833f9d0eb32.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;abstract&#34;&gt;Abstract
&lt;/h3&gt;&lt;p&gt;A Software Design Pattern for concurrent systems is presented, which makes race conditions something that can be asserted against and thus &lt;strong&gt;deterministically eliminated&lt;/strong&gt; rather than stochastically reduced or minimized.&lt;/p&gt;
&lt;h3 id=&#34;a-description-of-the-problem&#34;&gt;A description of the problem
&lt;/h3&gt;&lt;p&gt;Every Software Engineer who has dealt with concurrency knows that it is hard. The bane of concurrency is race conditions: when a thread accesses data without taking into account the fact that the data is shared with other concurrently running threads which may alter that data at any unforeseeable moment in time.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading:  &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;There exist two kinds of race conditions that I can think of, let&amp;rsquo;s call them &lt;em&gt;&lt;strong&gt;physical&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;logical&lt;/strong&gt;&lt;/em&gt;. (I just made up these terms, perhaps they have already been studied and given other names, but I am unaware of that.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Physical Race Conditions&lt;/strong&gt; happen due to the way the underlying hardware works. One example is trying to read a variable consisting of who machine words, thus requiring two successive read operations which are not atomic, while another thread is simultaneously writing to that variable, resulting in garbage being read. Another example is two threads simultaneously performing increment operations on the same memory location, where a memory increment is implemented by the CPU as a non-atomic sequence of read-increment-write operations, resulting in some of the increments being lost.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logical Race Conditions&lt;/strong&gt; happen when application logic fails to account for concurrency. For example, checking whether a collection contains a value, and if not, adding the value to the collection: when two threads try to do this, it will sometimes happen that they will both find that the collection does not contain the value in question, and will both add it, resulting in a duplicate. Depending on whether the implementation of the collection allows duplicates or not, this will result either in soft malfunction, (a duplicate where it was not intended,) or in hard failure due to the collection throwing a &amp;ldquo;duplicate element&amp;rdquo; exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that logical race conditions can occur even if we have taken all necessary precautions (i.e. locking) to avoid physical race conditions. Incidentally, this is the reason why many of the so-called &amp;ldquo;concurrent&amp;rdquo; collections like the &amp;ldquo;concurrent map&amp;rdquo; are of very limited use: sure, they guarantee that they will not crash and burn, but they do not guarantee correct results.&lt;/p&gt;
&lt;p&gt;Race conditions exhibit a disastrous combination of unfortunate qualities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Non-deterministic:&lt;/strong&gt; you cannot reproduce them at will, they just appear to happen at random, so you can almost never use the debugger to troubleshoot them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sensitive to troubleshooting instrumentation:&lt;/strong&gt; not only they never manifest while single-stepping through code, but if you introduce extra code to detect them, they may seemingly disappear, because they are highly dependent on timing. The moment you remove the instrumentation however, they may start manifesting again.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Elusive:&lt;/strong&gt; their effects are usually observed not at the moment that they occur but after the fact, so it is difficult to tell what happened and why it happened.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Confusing:&lt;/strong&gt; sometimes, the malfunction that they cause seems at first impossible to happen, requiring extensive troubleshooting before the realization sinks in that it must be due to a race condition.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-faced:&lt;/strong&gt; in many cases the effects of a race condition differ on each manifestation, so you are never sure whether you are chasing one issue or several issues at the same time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Untestable:&lt;/strong&gt; there is no unit test that can catch race conditions or give any assurances for their absence.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Treacherous:&lt;/strong&gt; a race condition which happens on average once every million seconds of usage may take months before it manifests in your development environment, and yet once there are a million customers using your software, there will be one customer encountering it roughly every second.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Catastrophic:&lt;/strong&gt; program state corruption tends to result in complete failure of the software.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;solutions-that-try-to-avoid-the-problem&#34;&gt;Solutions that try to avoid the problem
&lt;/h3&gt;&lt;p&gt;Since concurrency with locks is so hard, a number of mechanisms have been invented that try to implement concurrency without locking.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Immutability (functional programming):&lt;/strong&gt; if all program state is immutable, then there is no possibility of one thread modifying some state while another thread is trying to read it, because there is no state that can be modified. Therefore, no locking is necessary.&lt;/p&gt;
&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functional programming and immutability are not ubiquitous, and it is yet to be seen whether they will ever become ubiquitous.&lt;/li&gt;
&lt;li&gt;Many implementations of Functional Programming are not purely functional, they mix mutability with immutability, so the problem remains.&lt;/li&gt;
&lt;li&gt;Functional programming is only common in high-level systems running on garbage-collecting virtual machines. It is rare in mid-level systems and virtually absent in low-level systems.&lt;/li&gt;
&lt;li&gt;Many of the data structures that give the illusion of mutability while their inner workings are immutable tend to be computationally more expensive than their straightforward mutable counterparts.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Message-passing:&lt;/strong&gt; threads never share any data, instead they only work on data that they exclusively own, and they exchange data by means of immutable messages passed through message queues. Essentially, in the entire system there is only one little piece of code which employs locking, and that is the concurrent message queue implementation. The idea is that we should be able to get at least that small part right.&lt;/p&gt;
&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance suffers as the amount of data exchanged among threads increases.&lt;/li&gt;
&lt;li&gt;Performance also suffers since data can never be manipulated in-place, it must be placed in a message, the message must be posted into a queue, a thread context switch must usually occur for the receiving thread to process the message, and then the reverse path must be followed for the original thread to receive the result. (When manipulating data in-place, a thread context switch will only occur when attempting to obtain a lock while another thread already holds that lock, which may be a rare occurrence.)&lt;/li&gt;
&lt;li&gt;Nowadays in order to avoid the tedious creation of countless message classes you are more likely to just post a lambda into the message queue, but then you have a lambda which is declared in one thread but executed in another thread, so you still have to be extremely careful with what that lambda is allowed to touch.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Other:&lt;/strong&gt; exotic mechanisms such as the single-writer principle of the Rust programming language.&lt;/p&gt;
&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They tend to require compiler support. (So, a mechanism that can be implemented in any language would still be of value.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, avoiding race conditions when practicing concurrency by means of locking is an existing problem in need of a solution.&lt;/p&gt;
&lt;h3 id=&#34;a-deeper-look-at-the-problem&#34;&gt;A deeper look at the problem
&lt;/h3&gt;&lt;p&gt;At the heart of the race condition problem lies the &amp;ldquo;to lock or not to lock&amp;rdquo; conundrum. The choice of what to do lies in a continuum between two absurd extremes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ultra-fine grain locking:&lt;/strong&gt; Always lock every single little piece of mutable state when accessing it, and only while accessing it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ultra-coarse grain locking:&lt;/strong&gt; Place a global lock on the entirety of your mutable state on program start and release it on program exit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, neither of these extreme approaches would work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ultra-fine grain locking would result in an unreasonable amount of bloat in
all code that we write, it would suffer performance-wise, and although it
would eliminate physical race conditions, it would do nothing for
logical race conditions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ultra-coarse grain locking would not work either because increasing the
lifetime of a lock also increases the chances that other threads will be
blocked, with the absurd extreme of the lock lifetime being equal to program
runtime resulting in all threads becoming permanently blocked and no actual
sharing of any mutable state ever taking place.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the answer to the &amp;ldquo;to lock or not to lock&amp;rdquo; conundrum always lies somewhere in-between:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Always lock for as long as necessary, but try not to lock any longer than necessary.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This leads to the number one cause of race conditions:&lt;/p&gt;
&lt;p&gt;Trying to lock for as long as necessary but to avoid locking longer than necessary means that there will always be code which is accessing mutable state without first acquiring a fine grain lock, and instead is &lt;em&gt;&lt;strong&gt;assuming&lt;/strong&gt;&lt;/em&gt; that a coarser grain lock has already been acquired by some other code higher up the call-tree. (Remember, computer science trees are upside-down.) This assumption leaves open the possibility of human error, as the programmer who wrote the code higher up the call-tree may have forgotten to lock, thus putting all code below it at risk of race conditions.&lt;/p&gt;
&lt;p&gt;This situation is so widespread that it may be hard to realize its full extent: every single time we invoke a standard runtime library mutable collection class (which is one of the most frequent things we do) we are engaging in this assumption: the collection is not concurrency aware, so it is not placing any locks, but it is manipulating mutable state, so under conditions of concurrency it will fail unless a lock is in place. Essentially, the collection class is doing its job while &lt;em&gt;praying&lt;/em&gt; that someone up the call tree has remembered to acquire the necessary lock.&lt;/p&gt;
&lt;p&gt;The grain of locks affects two things: performance and correctness.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Choosing the grain of the locks in the most performant way is more of an art than a science, requiring a master of the craft to do it right, and that is okay: experts will always be useful. If no expert is available, performance might end up being suboptimal, but the software will still run, so strictly speaking the expert is not necessary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choosing the grain of the locks in such a way that the program remains correct is also more of an art than a science as things stand today, so it also requires a master of the craft to do it right; however, if we want to be thinking of our profession as a science rather than an art, we cannot have software that tends to crash and burn unless a master of the craft has written it. Therefore, we need a mechanism for detecting and protecting ourselves against the human error which is practically inevitable when an apprentice rather than a master touches the code, or even when the master touches the code while having a bad day.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;restating-the-problem&#34;&gt;Restating the problem
&lt;/h3&gt;&lt;p&gt;A very important first step in solving a problem often is to restate it
using terminology that is more conducive to solving it. The term &amp;ldquo;Race
Condition&amp;rdquo; is somewhat cumbersome because it refers to an unfortunate event
which may or may not happen, depending on non-deterministic
circumstances. The original 1954 paper by David Huffman, titled &amp;ldquo;The synthesis of sequential switching circuits&amp;rdquo;, which contains the
first known mention of the term, regards race conditions as something which
may exist when a certain instability is detected, so even the original sense referred to events that may potentially occur.&lt;/p&gt;
&lt;p&gt;However, if we care about software correctness, then we do not want to be leaving anything to chance, so the fact that the unfortunate event &lt;em&gt;&lt;strong&gt;may&lt;/strong&gt;&lt;/em&gt; happen is irrelevant: if circumstances can arise at all which would potentially allow a race condition to occur, then for all practical purposes it must be assumed that the race condition &lt;em&gt;&lt;strong&gt;will&lt;/strong&gt;&lt;/em&gt; occur. Therefore, the race conditions themselves should be of no interest to us; what should be of interest is modes of operation that allow race conditions to occur. We will call them Race Modes.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A &lt;strong&gt;Race Mode&lt;/strong&gt; is an erroneous mode of operation in which a race condition can potentially occur.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A piece of software either enters race modes, or it does not. If it does enter race modes, then race conditions may occur, and as already established, it should be presumed that they will occur. If the software never enters any race modes, then no race conditions can occur.&lt;/p&gt;
&lt;p&gt;So, the problem has been restated from &amp;ldquo;avoiding race conditions&amp;rdquo; to &amp;ldquo;avoiding race modes&amp;rdquo;.  The difference may be subtle, but it is important enough to make.&lt;/p&gt;
&lt;h3 id=&#34;the-solution&#34;&gt;The solution
&lt;/h3&gt;&lt;p&gt;In restating the problem as described above we have set ourselves a new goal: how to assert against race modes. If race modes can be asserted against, then the concurrency problem stops being subject to chance and becomes quite deterministic instead: if our software runs and no assertion failures occur, then it never enters a race mode, and therefore no race conditions are possible. (Note that the assertions are not meant to catch race conditions; the assertions are meant to catch race modes.)&lt;/p&gt;
&lt;p&gt;The mechanism that I have come up with for asserting against race modes is called &lt;em&gt;&lt;strong&gt;Coherence&lt;/strong&gt;&lt;/em&gt; and in its simplest form it can be thought of as an abstraction of an &lt;em&gt;Assertable Lock&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are two things you can do with coherence: enter it, and assert it. (By entering coherence we mean executing a piece of code while in coherence, so once that piece of code is done executing, coherence will be exited.) So, coherence gives us the ability to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take measures at certain places in our code to prevent entering a race mode.&lt;/li&gt;
&lt;li&gt;Ensure in all other places in our code that the necessary measures have been taken to guarantee we are not in a race mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus, coherence saves us from doing ultra-fine grain locking and from making assumptions about locking: by turning locks into something assertable, we do not have to acquire a lock every single time we touch mutable state, but we can assert that a lock has been acquired by code higher up the call tree. Since assertions can compile to nothing on the release build, this is a zero-runtime-cost solution.&lt;/p&gt;
&lt;p&gt;The name Coherence was chosen as opposed to Assertable Lock because Coherence is meant to be a high level abstraction. The use of an abstraction is necessary for two reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Coherence is meant to be asserted ubiquitously by any code that accesses mutable state, even by general purpose code such as the standard collection classes. However, general purpose code tends to be (and should remain) agnostic of concurrency, so it should not be burdened with such a low-level and concurrency-specific concept as locking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Depending on the concurrency characteristics of the execution environment, there can be different implementations of coherence, some of which do not even involve actual locking, so using the term &amp;lsquo;Lock&amp;rsquo; would be inaccurate and misleading.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples of possible coherence implementations depending on the concurrency characteristics of the execution environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In a strictly single-threaded environment, a dummy implementation is needed which never places any locks and never fails a coherence check.&lt;/li&gt;
&lt;li&gt;In a share-nothing environment, a simple implementation will suffice which never places any locks and only fails a coherence check if the currently executing thread is not the thread that owns the mutable state, i.e. the thread in which the mutable state was created.&lt;/li&gt;
&lt;li&gt;In a thread-pooled, share-nothing environment, a somewhat more elaborate implementation is needed which takes into account the fact that the thread which owns the mutable state may not necessarily be the thread that created the mutable state, since threads are picked from a pool.&lt;/li&gt;
&lt;li&gt;In a multi-threaded environment with a small amount of shared state, a singular locking implementation will suffice which enters coherence by obtaining a lock on the totality of the shared state and fails the coherence check when that lock has not been obtained. This represents a coarse grain lock, so it might result in sub-optimal performance, but it has the advantage of being simple and avoiding deadlocks.&lt;/li&gt;
&lt;li&gt;In a multi-threaded environment with a large amount of shared state and high thread contention over it, necessitating finer grain locking for good enough performance, a plural coherence implementation can be used which allows placing independent locks on independent subsets of the shared state, and fails a coherence check when the lock corresponding to a particular subset of state has not been obtained. Care must be exercised to always enter and assert the correct instance of coherence for each subset of state, and to avoid deadlocks in doing so.&lt;/li&gt;
&lt;li&gt;Regardless of the concurrency characteristics of the execution environment, when the lifetime of a certain piece of mutable state is confined within a single call tree, a simple coherence implementation will again suffice which does not place a lock and simply asserts that the current thread is the thread in which the state was created. (To guard against the mutable state somehow escaping the scope of the call tree in which it was meant to be confined.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that Coherence only allows asserting its state and purposefully disallows testing its state. In other words, you cannot have an &amp;ldquo;if coherence is entered then&amp;hellip;&amp;rdquo; construct. This is done so as to prevent misuse and to allow for high performance coherence implementations that, on the release build, may not have explicit knowledge of whether coherence has been entered or not.&lt;/p&gt;
&lt;p&gt;Note that unlike most existing locking mechanisms, which explicitly allow a thread to obtain a lock multiple times, coherence explicitly disallows re-entrance. I have chosen to do it this way because my approach to Software Engineering is &amp;ldquo;leave nothing to chance&amp;rdquo;, so if you are unsure whether you have already obtained a lock on something, and you would like the locking mechanism to be forgiving in case you try to lock twice, then you must be doing something wrong. It is my firm belief that when a piece of framework is in a position of alerting you that you are doing something wrong, it should be alerting you that you are doing something wrong.  Of course it may be that I am wrong here, and unbeknownst to me there exist legitimate reasons for having to allow coherence reentrancy; this remains to be seen.&lt;/p&gt;
&lt;h3 id=&#34;further-research&#34;&gt;Further Research
&lt;/h3&gt;&lt;p&gt;As mentioned earlier, in multi-threaded environments with a large amount of shared state and high thread contention over it, performance concerns often necessitate dividing the state into subsets and having an individual lock for each subset, so that different subsets can be locked independently of each other.&lt;/p&gt;
&lt;p&gt;Unfortunately, when we do this, we run the danger of entering deadlocks, and as it stands, the plural coherence implementation, which is suitable for these scenarios, does not address the issue of deadlocks.&lt;/p&gt;
&lt;p&gt;Some research is necessary to determine whether the plural coherence implementation could do any of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Detect a deadlock once it happens and provide diagnostic information.&lt;/li&gt;
&lt;li&gt;Detect a deadlock once it happens and somehow take corrective measure.&lt;/li&gt;
&lt;li&gt;Detect the possibility of deadlocks and alert the programmer by means of hard error.&lt;/li&gt;
&lt;li&gt;Be structured in such a way as to make deadlocks impossible.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Cover image by reginasphotos from pixabay.com&lt;/p&gt;</description>
        </item>
        <item>
        <title>Domain Oriented Programming</title>
        <link>//localhost:1313/p/domain-oriented-programming/</link>
        <pubDate>Fri, 26 Jun 2020 18:46:47 +0000</pubDate>
        
        <guid>//localhost:1313/p/domain-oriented-programming/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/domain-oriented-programming/media/DomainOrientedProgramming.png&#34;
	width=&#34;1253&#34;
	height=&#34;783&#34;
	srcset=&#34;//localhost:1313/p/domain-oriented-programming/media/DomainOrientedProgramming_hu_46f0896593c4ea4d.png 480w, //localhost:1313/p/domain-oriented-programming/media/DomainOrientedProgramming_hu_80495cb7faae492e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;A Software Design Pattern which brings the principles of Inheritance, Encapsulation and Polymorphism one level up from the Class level to the Subsystem level, and offers a way of realizing relationships between classes so as to achieve dependency inversion by means of propagation instead of injection.&lt;/p&gt;
&lt;h3 id=&#34;part-1-dependency-inversion&#34;&gt;Part 1: Dependency Inversion
&lt;/h3&gt;&lt;p&gt;The software that we write often invokes other software to get parts of the job done. These are known as &lt;em&gt;&lt;strong&gt;Services&lt;/strong&gt;&lt;/em&gt; or &lt;em&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;&lt;/em&gt;. If Class A is making use of some Class B, then Class A depends on Class B, so Class B is a dependency of Class A.&lt;/p&gt;
&lt;p&gt;The principle of &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Dependency_inversion_principle&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;&lt;strong&gt;Dependency Inversion&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; says that a class should not contain any direct calls to specific instances of any of its dependencies. Instead, it should receive these instances as parameters during initialization.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all very nice, but passing dependencies around can become quite a complicated business, and in large systems it can become a nightmare.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Various mechanisms have been devised for solving this problem. Two that I know of are &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Service_locator_pattern&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;&lt;strong&gt;Service Locators&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;, and &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Dependency_injection&#34; target=&#34;_blank&#34;
   &gt;&lt;strong&gt;Dependency Injection Frameworks&lt;/strong&gt;&lt;/a&gt;. Unfortunately, each of them has some serious disadvantages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Service Locators&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A service locator is a mandatory global dependency. That&amp;rsquo;s a bad thing to have. At some point you will want to reuse a module in a different system, and that service locator will not be available there, and you will have to start rewriting stuff. Trust me, you will sooner or later regret having it.&lt;/li&gt;
&lt;li&gt;A service locator may defer compile-time errors to run-time errors. These errors occur when a system is being wired together, but tests are usually wired up differently, so these errors cannot be detected with unit testing or integration testing, you have to do end-to-end testing in order to discover them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Dependency Injection Frameworks&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They work by magic, and I don&amp;rsquo;t like magic.&lt;/li&gt;
&lt;li&gt;They tend to embrace silent failure, while I mandate hard failure.&lt;/li&gt;
&lt;li&gt;They don&amp;rsquo;t have an API that you can call, so you cannot use code completion, you have to know stuff by heart.&lt;/li&gt;
&lt;li&gt;They tend to make application startup time slow as molasses, while I like application startup to be snappy.&lt;/li&gt;
&lt;li&gt;They are also a mandatory global dependency.&lt;/li&gt;
&lt;li&gt;The individual class is a much too fine-grained unit to be applying dependency injection onto.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my 35 years of programming I have encountered the problem of dependency injection a lot, and in the last decade or so I have started solving it with a paradigm that I call &lt;em&gt;&lt;strong&gt;Domain Oriented Programming&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Note that Domain Oriented Programming does not have any direct relation to &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Domain-driven_design&#34; target=&#34;_blank&#34;
   &gt;&lt;strong&gt;Domain Driven Design&lt;/strong&gt;&lt;/a&gt;, although it may be a suitable pattern to use when implementing systems designed using the Domain Driven Design paradigm.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introducing Domain Oriented Programming (DOP)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Domain Oriented Programming Design Pattern can be roughly described as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Classes do not exist in a vacuum; instead, every class has a special relationship with another class by which it is instantiated and from which it obtains its dependencies. The class doing the instantiation and providing dependencies is called &lt;em&gt;&lt;strong&gt;Domain&lt;/strong&gt;&lt;/em&gt;, the instantiated class is called &lt;em&gt;&lt;strong&gt;Subject.&lt;/strong&gt;&lt;/em&gt; Sometimes a class can be Subject to multiple Domains, more on that later.&lt;/li&gt;
&lt;li&gt;Every Subject has specific knowledge of its Domain.&lt;/li&gt;
&lt;li&gt;In some cases Domains also have specific knowledge of their Subjects, and in some cases they do not, more on that later.&lt;/li&gt;
&lt;li&gt;A Domain contains references to all services that are used by itself and by all of its Subjects; so, when a Subject needs to use some service, it obtains the service from its Domain. Therefore, dependencies do not need to be injected into Subjects.&lt;/li&gt;
&lt;li&gt;The Domain-Subject relation is hierarchical, so a Subject of one Domain may in turn be Domain to other Subjects. This way, dependencies are propagated from the root of a system all the way down to the leaf nodes without the need to use any special framework to achieve this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The domain-subject relation can exist in two forms: &lt;em&gt;&lt;strong&gt;Closed (a.k.a. Realm)&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;Open (a.k.a. Free)&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Closed (a.k.a. Realm) Domains
&lt;ul&gt;
&lt;li&gt;The Domain is the one and only Domain for its Subjects. It is passed to each Subject as its first constructor parameter.&lt;/li&gt;
&lt;li&gt;The Domain has complete control over the lifetime of its Subjects. This means that the Domain is the exclusive factory of its Subjects, and can also decide when and if a Subject is destroyed.&lt;/li&gt;
&lt;li&gt;The Domain and its Subjects are &lt;em&gt;&lt;strong&gt;Closely Coupled.&lt;/strong&gt;&lt;/em&gt; This means that not only the Subjects have specific knowledge of their Domain, but also the Domain has specific knowledge of its Subjects. (Close coupling is perfectly okay as long as the Domain limits itself to acting as a factory and the Realm is kept small.)&lt;/li&gt;
&lt;li&gt;Subjects are usually exposed to the outside world as interfaces rather than as objects.&lt;/li&gt;
&lt;li&gt;The Realm forms a coherent, closed group which cannot be extended without modifying the Domain class.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open (a.k.a. Free) Domains
&lt;ul&gt;
&lt;li&gt;The Domain does not have specific knowledge of any Subjects, it only exists for the purpose of making dependencies available to other Domains.&lt;/li&gt;
&lt;li&gt;Open Domains are usually provided as interfaces rather than as actual objects.&lt;/li&gt;
&lt;li&gt;A Subject of Open Domains can be freely instantiated as long as all the domains necessary for its instantiation are available. It can also be freely disposed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a few interesting things to notice here:&lt;/p&gt;
&lt;p&gt;The Domain is to a Subject what the Object is to a Method. Hopefully a DOP oriented language will be introduced one day which realizes the DOP construct in its grammar, making the Domain reference implicit, just as in Object Oriented Programming the Object reference is always the implicit first parameter to every Method.&lt;/p&gt;
&lt;p&gt;(Incidentally, Java and other languages are already doing something along these lines with non-static &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Inner_class&#34; target=&#34;_blank&#34;
   &gt;inner classes&lt;/a&gt;, but we do not want to have to nest the source code of each Subject within the source code of its Domain, especially since a Domain may in turn be Subject of another Domain.)&lt;/p&gt;
&lt;p&gt;Domain Oriented Programming does not require any platform or library: it is just a way of structuring code. So, with DOP, no omnipresent framework is needed for injecting dependencies, and no magic is involved in their propagation; nobody needs to query any service locators for services, (the availability of services is practically guaranteed by the compiler,) and no huge lists of dependencies are passed to constructors, either. Still, at various places where domains are constructed and wired together, all necessary services are supplied, so any one of them can be replaced with a &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Test_double&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;&lt;strong&gt;Test Double&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Furthermore, Domain Oriented Programming is interoperable with non-DOP systems: A group of classes making use of DOP among themselves can be introduced into a system which is already using some other mechanism of Dependency Inversion.&lt;/p&gt;
&lt;p&gt;At first glance, Domain Oriented Programming can be thought of as employing something like &lt;em&gt;Half-Way Dependency Injection,&lt;/em&gt; or &lt;em&gt;&lt;strong&gt;Subsystem-level Dependency Injection&lt;/strong&gt;&lt;/em&gt; as opposed to &lt;em&gt;&lt;strong&gt;Class-level Dependency Injection&lt;/strong&gt;&lt;/em&gt;. Dependencies are injected into the Domain, and from that moment on Subjects of the Domain can go ahead and fetch their dependencies from the Domain as needed, instead of having their dependencies injected into them.&lt;/p&gt;
&lt;p&gt;Things become even more interesting when we consider Domains that are in turn Subjects of other Domains, forming a hierarchy of Domains, where at each level we have &lt;em&gt;&lt;strong&gt;SuperDomains&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;SubDomains&lt;/strong&gt;&lt;/em&gt;. In this scenario, we do not exactly have Dependency Injection going on anymore, because at each level dependencies are obtained from the level above; however, we still have Dependency Inversion, because dependencies are still not hard-coded in any way, and each Domain has control over each service that it makes available to its subjects, and may, if needed, decide which particular implementation will offer it.&lt;/p&gt;
&lt;p&gt;The lesson to learn from this is that Dependency Injection was never a goal in and of itself; the goal has been Dependency Inversion, (avoiding hard-coded dependencies, &lt;em&gt;Dependency Independence&lt;/em&gt; if you will permit the pun,) and Dependency Injection has been a mechanism for achieving it, but the same goal can be achieved by other means, such as &lt;em&gt;&lt;strong&gt;Dependency Propagation&lt;/strong&gt;&lt;/em&gt;, which is what Domain Oriented Programming offers.&lt;/p&gt;
&lt;h3 id=&#34;part-2-object-orientation-at-the-subsystem-level&#34;&gt;Part 2: Object Orientation at the Subsystem Level
&lt;/h3&gt;&lt;p&gt;Domain Oriented Programming is not only about Dependency Propagation. It reflects the realization that Software being created today is immensely more complex than what it used to be back when Object Oriented Programming was invented and the first Object Oriented languages were laid down, about half a century ago.&lt;/p&gt;
&lt;p&gt;It used to be that all we needed was a means of coupling groups of functions with the data that they operate on, and that Inheritance, Encapsulation and Polymorphism were only necessary at the class-and-method level; however, as we build more elaborate software, we find ourselves more and more thinking not so much in terms of classes and methods, but in terms of subsystems and classes, or systems and subsystems. Therefore, there appears to be a need for terminology which brings Inheritance, Encapsulation and Polymorphism one level up, to the subsystem level, and by recursive application, to the entire system.&lt;/p&gt;
&lt;p&gt;Domain Oriented Programming offers the Domain as the unit upon which to apply the principles of Object Oriented Programming.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In DOP the Domain is the principal polymorphic unit, providing an implementation for a complex interface, and instantiating subjects to polymorphically implement smaller scope interfaces.&lt;/li&gt;
&lt;li&gt;In DOP the Domain encapsulates its subjects, hiding their nature and lifetime from the outside world.&lt;/li&gt;
&lt;li&gt;In DOP inheritance is only utilized among Subjects, while the Domain hides from the outside world the fact that it is being utilized.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My first public mention of this concept was in &lt;a class=&#34;external&#34; 
   href=&#34;https://softwareengineering.stackexchange.com/a/304041/41811&#34; target=&#34;_blank&#34;
   &gt;this answer of mine on Software Engineering Stack Exchange.&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>On Validation vs- Error Checking</title>
        <link>//localhost:1313/p/on-validation-vs-error-checking/</link>
        <pubDate>Sat, 30 May 2020 17:33:41 +0000</pubDate>
        
        <guid>//localhost:1313/p/on-validation-vs-error-checking/</guid>
        <description>&lt;p&gt;Let me start with a couple of pedantic definitions; stay with me, the beef follows right afterwards.&lt;/p&gt;
&lt;p&gt;Conventional wisdom says that validation is different from error checking.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Validation&lt;/strong&gt; is performed at the boundaries of a system, to check the validity of incoming data, which is at all times presumed to be potentially invalid. When invalid data is detected, validation is supposed to reject it. Validation is supposed to be always on, you cannot switch it off on release builds and only have it enabled on debug builds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error checking&lt;/strong&gt;, on the other hand, is performed inside a system, checking against conditions that should never occur, to keep making sure that everything is working as intended. In the event that an error is encountered, the intent is to signal a catastrophic failure. Essentially, the term &lt;em&gt;Error Checking&lt;/em&gt; is shorthand for &lt;em&gt;&lt;strong&gt;Internal&lt;/strong&gt; Error Checking.&lt;/em&gt; It can be implemented using assertions, thus being active on the debug build only, and having a net cost of &lt;em&gt;&lt;strong&gt;zero&lt;/strong&gt;&lt;/em&gt; on the release build.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far so good, right?&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Well, the problem with this conventional view of validation vs error checking is that it heavily relies on the notion of &amp;ldquo;system boundaries&amp;rdquo;, which is not a well-defined notion.  Unless you are an application programmer, whatever you are building will in all likelihood be a subsystem of a larger system, and that system will in turn be a subsystem of an even larger system, and so on. Therefore, what you think of as the boundaries of your system will never be the actual boundaries of the actual system. You cannot have any claim to knowledge of the boundaries of any system that might incorporate your little creation as a component of it.&lt;/p&gt;
&lt;p&gt;As a reaction to this uncertainty, most programmers maintain a self-centered view of the component they are developing as &lt;em&gt;&lt;strong&gt;the&lt;/strong&gt;&lt;/em&gt; system, and a short-sighted view of the boundaries of their component as &lt;em&gt;&lt;strong&gt;the&lt;/strong&gt;&lt;/em&gt; system boundaries. So, on those boundaries they keep doing validation.&lt;/p&gt;
&lt;p&gt;Here is what&amp;rsquo;s wrong with that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your subsystem will be embedded in a larger system, which will be doing its best to always supply your subsystem with valid data. This larger system will be tested by its creators, and will be known to work correctly. This means that it will always supply your system with valid data, so your validation will be useless, and it will just be wasting time on the release build.&lt;/li&gt;
&lt;li&gt;The validation results returned by your boundary methods will have to somehow be dealt with by the containing system, since ignoring results is considered a terrible practice, even when nothing is expected to go wrong. So, you are forcing the caller to litter their code with checks for your validation results.&lt;/li&gt;
&lt;li&gt;However, since the caller does not expect anything to go wrong, they will not be able to do anything other than throw an exception in the event that you return a validation failure result. So, not only you are forcing the caller to litter their code with checks for validation results, but these checks in turn will never be triggered. Think about it: this is code that will never be covered by any coverage run.&lt;/li&gt;
&lt;li&gt;Even in the extremely unlikely event that the containing system will in fact supply your component with invalid input, triggering the scenario where your component returns a validation failure result, and the containing system throws, this is virtually indistinguishable from the scenario where you simply just throw in the first place, as part of your error checking, not validation. So, there is no need for you to return some validation result, no need for the caller to check it, no need for the caller to throw.&lt;/li&gt;
&lt;li&gt;To put it in simple words, &lt;em&gt;&lt;strong&gt;a subsystem&amp;rsquo;s validation failure is a supersystem&amp;rsquo;s internal error&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, what the above means is that the entire industry is doing it wrong. Nothing but the outermost layer of a system should be performing validation, and that&amp;rsquo;s usually some application-specific integration layer. Subsystems should, at most, and as a convenience, offer free-standing validation facilities which may be utilized by enclosing layers as part of their own validation.&lt;/p&gt;
&lt;p&gt;So, for example, the enclosing system might, in the context of its own validation strategy, ensure that every field in a form has been filled-in, and then it might invoke the date-time subsystem&amp;rsquo;s validation mechanism to verify that the value entered in some date-time field is valid, before feeding that value to that same subsystem, or storing it for feeding it to that subsystem later.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s because only the component which is dealing with the form knows that the information that it receives is coming from the user and therefore needs validation.  Once this information has passed validation and accepted into the system, it should never be re-validated.  Any inconsistency after that point is an internal error of the system, and therefore a hard error.&lt;/p&gt;</description>
        </item>
        <item>
        <title>The case for software testing</title>
        <link>//localhost:1313/p/the-case-for-software-testing/</link>
        <pubDate>Sun, 01 Dec 2019 20:48:53 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-case-for-software-testing/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/the-case-for-software-testing/media/test-pattern.webp&#34;
	width=&#34;960&#34;
	height=&#34;600&#34;
	srcset=&#34;//localhost:1313/p/the-case-for-software-testing/media/test-pattern_hu_381d45a688135199.webp 480w, //localhost:1313/p/the-case-for-software-testing/media/test-pattern_hu_d0ce67d078ac478f.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;384px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;what-to-reply-to-a-non-programmer-who-thinks-that-testing-is-unnecessary-or-secondary&#34;&gt;What to reply to a non-programmer who thinks that testing is unnecessary or secondary
&lt;/h3&gt;&lt;p&gt;At some point during his or her career, a programmer might come across the following argument, presented by some colleague, partner, or decision maker:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Since we can always test our software by hand, we do not need to implement Automated Software Testing.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Apparently, I reached that point in my career, so now I need to debate this argument. I decided to be a good internet citizen and publish my thoughts. So, in this post I am going to be deconstructing that argument, and demolishing it from every angle that it can be examined. I will be doing so using language that is easy to process by people from outside of our discipline.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In the particular company where that argument was brought forth, there exist mitigating factors which are specific to the product, the customers, and the type of relationship we have with them, all of which make the argument not as unreasonable as it may sound when taken out of context. Even in light of these factors, the argument still deserves to be blown out of the water, but I will not be bothering the reader with the specific situation of this company, so as to ensure that the discussion is applicable to software development in general.&lt;/p&gt;
&lt;p&gt;In its more complete form, the argument may go like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Automated Software Testing represents a big investment for the company, where all the programmers in the house are spending copious amounts of time doing nothing but writing software tests, but these tests do not yield any visible benefit to the customers. Instead, the programmers should ensure that the software works by spending only a fraction of that time doing manual testing, and then we can take all the time that we save this way and invest it in developing new functionality and fixing existing issues.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;To put it more concisely, someone might say something along these lines:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I do not see the business value in Automated Software Testing.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This statement is a bunch of myths rolled up into an admirably terse statement. It is so disarmingly simple, that for a moment you might be at loss of how to respond. Where to begin, really. We need to look at the myths one by one. Here it goes:&lt;/p&gt;
&lt;h3 id=&#34;myth-1-software-testing-represents-a-big-investment&#34;&gt;Myth #1: Software testing represents a &lt;em&gt;big&lt;/em&gt; investment.
&lt;/h3&gt;&lt;p&gt;No it doesn&amp;rsquo;t. Or maybe it does, but its ROI is so high that you absolutely don&amp;rsquo;t want to miss it.&lt;/p&gt;
&lt;p&gt;If you do not have software testing in place, then it is an established fact in our industry that you will end up spending an inordinate amount of time researching unexpected application behavior, troubleshooting code to explain the observed behavior, discovering bugs, fixing them, and often repeating this process a few times on each incident because the fix for one bug often creates another bug, or causes pre-existing bugs to manifest, often with the embarrassment of an intervening round-trip to the customer, because the &amp;ldquo;fixed&amp;rdquo; software was released before the newly introduced bugs were discovered.&lt;/p&gt;
&lt;p&gt;Really, it works the same way as education. To quote a famous bumper sticker:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You think education is expensive? Try ignorance!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Furthermore, your choice of Manual Software Testing vs. Automated Software Testing has a significant impact on the development effort required after the testing, to fix the issues that the testing discovers.  It is a well established fact in the industry that the sooner a bug is discovered, the less it costs to fix it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The earliest time possible for fixing a mistake is when making it. That&amp;rsquo;s why we use strongly typed programming languages, together with Integrated Development Environments that continuously compile our code as we are typing it: this way, any syntax error or type violation is immediately flagged by the IDE with a red underline, so we can see it and fix it before proceeding to type the next line of code. The cost of fixing that bug is near zero. (And one of the main reasons why virtually all scripting languages are absolutely horrible is that in those languages, even a typo can go undetected and become a bug.)&lt;/li&gt;
&lt;li&gt;If you can&amp;rsquo;t catch a bug at the moment you are introducing it, the next best time to catch it is when running automated tests, which is what you are supposed to do before committing your changes to the source code repository. If that doesn&amp;rsquo;t happen, then the bug will be committed, and this already represents a considerable cost that you will have to pay later for fixing it.&lt;/li&gt;
&lt;li&gt;The next best time to catch the bug is by running automated tests as part of the Continuous Build System. This will at least tell you that the most recent commit contained a bug.  If there is no Continuous Build with Automated Software Testing in place, then you suffer another steep increase in the price that you will have to pay for eventually fixing the bug.&lt;/li&gt;
&lt;li&gt;By the time a human being gets around to manually testing the software and discovering the bug, many more commits may have been made to the source code repository. This means that by the time the bug is discovered, we will not necessarily know which commits contributed to it, nor which programmers made the relevant commits, and even if we do, they will at that moment be working on something else, which they will have to temporarily drop, and make an often painful mental context switch back to the task that they were working on earlier. Naturally, the more days pass between committing a bug and starting to fix it, the worse it gets.&lt;/li&gt;
&lt;li&gt;At the extreme, consider trying to fix a bug months after it was introduced, when nobody knows anything about the changes that caused it, and the programmer who made those changes is not even with the company anymore. Someone has to become intimately familiar with that module in order to troubleshoot the problem, consider dozens of different commits that may have contributed to the bug, find it, and fix it. The cost of fixing that bug may amount to more than a programmer&amp;rsquo;s monthly salary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is why the entire software industry today literally swears in the name of testing: it helps to catch bugs as early as possible, and to keep the development workflow uninterrupted, so it ends up saving huge amounts of money.&lt;/p&gt;
&lt;h3 id=&#34;myth-2-software-testing-represents-an-investment&#34;&gt;Myth #2: Software testing represents an investment.
&lt;/h3&gt;&lt;p&gt;No, it does not even. Software testing is regarded by our industry as an integral part of software development, so it is meaningless to examine it as an investment separate from the already-recognized-as-necessary investment of developing the software in the first place.&lt;/p&gt;
&lt;p&gt;Beware of the invalid line of reasoning which says that in order to implement a certain piece of functionality all we need is 10 lines of production code which cost 100 bucks, whereas an additional 10 lines, that would only be testing the first 10 lines, and would cost an extra 100 bucks, are optional.&lt;/p&gt;
&lt;p&gt;Instead, the valid reasoning is that in order to implement said functionality we will need 20 lines of code, which will cost 200 bucks. It just so happens that 10 of these lines will reside in a subfolder of the source code tree called &amp;ldquo;production&amp;rdquo;, while the other 10 lines will reside in a subfolder of the same tree called &amp;ldquo;testing&amp;rdquo;; however, the precise location of each group of lines is a trivial technicality, bearing no relation whatsoever to any notion of &amp;ldquo;usefulness&amp;rdquo; of one group of lines versus the other. The fact is that all 20 of those lines of code are essential in order to accomplish the desired result.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s because production code without corresponding testing code cannot be said with any certainty to be implementing any functionality at all. The only thing that can be said about testless code is that it has so far been successful at creating the impression to human observers that its behavior sufficiently resembles some desired functionality. Furthermore, it can only be said to be successful to the extent that it has been observed thus far, meaning that a new observation tomorrow might very well find that it is doing something different.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s a far cry from saying that &amp;ldquo;this software does in fact implement that functionality&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;myth-3-software-testing-is-just-sloppiness-management&#34;&gt;Myth #3: Software testing is just sloppiness management.
&lt;/h3&gt;&lt;p&gt;This is usually not voiced, but implied.  So, why can&amp;rsquo;t programmers write correct software the first time around?  And why on earth can&amp;rsquo;t software just stay correct once written?&lt;/p&gt;
&lt;p&gt;There is a number of reasons for this, the most important ones have to do with the level of maturity of the software engineering discipline, and the complexity of the software that we are being asked to develop.&lt;/p&gt;
&lt;h4 id=&#34;maturity&#34;&gt;Maturity
&lt;/h4&gt;&lt;p&gt;Software development is not a hard science like physics and math.  There exist some purely scientific concepts that you learn in the university, but they are rarely applicable to the every day reality of our work. When it comes to developing software, there is not as much help available to us as there is to other disciplines by means of universal laws, fundamental axioms, established common practices and rules, ubiquitous notations, books of formulas and procedures, ready made commercially available standardized components to build with, etc. It is difficult to even find parallels to draw for basic concepts of science and technology such as experimentation, measurement, and reproducibility. That&amp;rsquo;s why software engineering is sometimes characterized as being more of an art than a science, and the fact that anyone can potentially become a programmer without necessarily having studied software engineering does not help to dispel this characterization.&lt;/p&gt;
&lt;p&gt;Automated Software Testing is one of those developments in software engineering that make it more like a science than like an art. With testing we have finally managed to introduce the concepts of experimentation, measurement, and reproducibility in software engineering. Whether testability alone is enough to turn our discipline into a science is debatable, but without testing we can be certain that we are doing nothing but art.&lt;/p&gt;
&lt;h4 id=&#34;complexity&#34;&gt;Complexity
&lt;/h4&gt;&lt;p&gt;The software systems that we develop today are immensely complex. A simple application which presents a user with just 4 successive yes/no choices has 16 different execution paths that must be tested. Increase the number of choices to 7, and the number of paths skyrockets to 128. Take a slightly longer but entirely realistic use case sequence of a real world application consisting of 20 steps, and the total number of paths exceeds one million. That&amp;rsquo;s an awful lot of complexity, and so far we have only been considering yes/no choices. Now imagine each step consisting of not just a yes/no choice, but an entire screen full of clickable buttons and editable fields which are interacting with each other. This is not an extreme scenario, it is a rather commonplace situation, and its complexity is of truly astronomical proportions.&lt;/p&gt;
&lt;p&gt;Interestingly enough, hardware engineers like to off-load complexity management to the software. Long gone are the times when machines consisted entirely of hardware, with levers and gears and belts and cams all carefully aligned to work in unison, so that turning a crank at one end would cause printed and folded newspapers to come out the other end. Nowadays, the components of the hardware tend to not interact with each other, because that would be too complex and too difficult to change; instead, every single sensor and every single actuator is connected to a central panel, from which software takes charge and orchestrates the whole thing.&lt;/p&gt;
&lt;p&gt;However, software is not a magical place where complexity just vanishes; you cannot expect to provide software with complex inputs, expect complex outputs, and at the same time expect the insides of it to be nothing but purity and simplicity: a system cannot have less complexity than the complexity inherent in the function that it performs.&lt;/p&gt;
&lt;p&gt;The value of moving the complexity from the hardware to the software is that the system is then easier to change, but when we say &amp;ldquo;easier&amp;rdquo; we do not mean &amp;ldquo;simpler&amp;rdquo;; all of the complexity is still there and must be dealt with. What we mean when we say &amp;ldquo;easier to change&amp;rdquo; is that in order to make a change &lt;em&gt;&lt;strong&gt;we do not have to begin by sending new blueprints to the steel foundry&lt;/strong&gt;&lt;/em&gt;. That&amp;rsquo;s what that you gain by moving complexity from the hardware to the software: being able to change the system without messy, time-consuming, and costly interactions with the physical world.&lt;/p&gt;
&lt;p&gt;So, even though we have eliminated those precisely crafted and carefully arranged levers and gears and belts and cams, their counterparts now exist in the software, you just do not see them, you have no way of seeing them unless you are a programmer, and just as the slightest modification to a physical machine of such complexity would be a strenuous ordeal, so is the slightest modification to a software system of similar complexity a strenuous ordeal.&lt;/p&gt;
&lt;p&gt;Software can only handle complexity if done right. You cannot develop complex software without sophisticated automated software testing in place, and even if you develop it, you cannot make any assumptions whatsoever about its correctness. Furthermore, even if it appears to be working correctly, you cannot make the slightest change to it unless automated software testing is in place to determine that it is still working correctly after the change. That is because you simply cannot test thousands or millions of possible execution paths in any way other than in an automated way.&lt;/p&gt;
&lt;h3 id=&#34;myth-4-testing-has-no-visible-benefit-to-the-customers&#34;&gt;Myth #4: Testing has no visible benefit to the customers
&lt;/h3&gt;&lt;p&gt;Yes it does. It is called reliable, consistent, correctly working software. It is also called software which is continuously improving instead of remaining stagnant due to fear of it breaking if sneezed at. It is also called receiving newly introduced features without losing old features that used to work but are now broken. And it is even called receiving an update as soon as it has been introduced instead of having to wait until some poor souls have clicked through the entire application over the course of several days to make sure everything still works as it used to.&lt;/p&gt;
&lt;h3 id=&#34;myth-5-manual-testing-can-ensure-that-the-software-works&#34;&gt;Myth #5: Manual testing can ensure that the software works.
&lt;/h3&gt;&lt;p&gt;No it cannot. That&amp;rsquo;s because the complexity of the software is usually far greater than what you could ever possibly hope to test by hand. An interactive application is not like a piece of fabric, which you can visually inspect and have a fair amount of certainty that it has no defects. You are going to need to interact with the software, in a mind-boggling number of different ways, to test for a mind-boggling number of possible failure modes.&lt;/p&gt;
&lt;p&gt;When we do manual testing, in order to save time (and our sanity) we focus only on the subset of the functionality of the software which may have been affected by recent changes that have been made to the source code.  However, the choice of which subsets to test is necessarily based on our estimations and assumptions about what parts of the program may have been affected by our modifications, and also on guesses about the ways in which these parts could behave if adversely affected. Alas, these estimations, assumptions, and guesses are notoriously unreliable: it is usually the parts of the software that nobody expected to break that in fact break, and even the suspected parts sometimes break in ways quite different from what anyone had expected and planned to test for.&lt;/p&gt;
&lt;p&gt;And this is by definition so, because all the failure modes that we can easily foresee, based on the modifications that we make, we usually examine ourselves before even calling the modifications complete and committing our code.&lt;/p&gt;
&lt;p&gt;Furthermore, it is widely understood in our industry that persons involved in the development of software are generally unsuitable for testing it.  No developer ever uses the software with as much recklessness and capriciousness as a user will. It is as if the programmer&amp;rsquo;s hand has a mind of its own, and avoids sending the mouse pointer in bad areas of the screen, whereas that is precisely where the user&amp;rsquo;s hand is guaranteed to send it. It is as if the programmer&amp;rsquo;s finger will never press that mouse button down as heavily as the user&amp;rsquo;s finger will. Even dedicated testers start behaving like the programmers after a while on the job, because it is only human to employ acquired knowledge about the environment in navigating about the environment, and to re-use established known good paths. It is in our nature. You can ask people to do something which is against their nature, and they may earnestly agree, and they may even try their best, but the results are still guaranteed to suffer.&lt;/p&gt;
&lt;p&gt;Then there is repetitive motion fatigue, both of the physical and the mental kind, that severely limit the scope that any kind of manual testing will ever have.&lt;/p&gt;
&lt;p&gt;Finally, there is the issue of efficiency. When we do manual software testing, we are necessarily doing it in human time, which is excruciatingly slow compared to the speed at which a computer would carry out the same task. A human being testing permutations at the rate of one click per second could theoretically test one million permutations in no less than 2 working months, the computer may do it in a matter of minutes. And the computer will do this perfectly, while the most capable human being will do this quite sloppily in comparison. That&amp;rsquo;s how inefficient manual software testing is.&lt;/p&gt;
&lt;h3 id=&#34;myth-6-manual-testing-takes-less-time-than-writing-tests&#34;&gt;Myth #6: Manual testing takes less time than writing tests.
&lt;/h3&gt;&lt;p&gt;No it doesn&amp;rsquo;t. If you want to say that you are actually doing some manual testing worth speaking of, and not a joke of it, then you will have to spend copious amounts of time doing nothing but that, and you will have to keep repeating it all over again every single time the software is modified.&lt;/p&gt;
&lt;p&gt;In contrast, with software testing you are spending some time up-front building some test suites, which you will then be able to re-execute every time you need them, with comparatively small additional effort.  So, manual testing for a certain piece of software is an effort that you have to keep repeating, while writing automated test suites for that same piece of software is something that you do once and from that moment on it keeps paying dividends.&lt;/p&gt;
&lt;p&gt;This is why it is a fallacy to say that we will just test the software manually and with the time that we will save we will implement more functionality: as soon as you add a tiny bit of new functionality, you have to repeat the testing all over again.  Testing the software manually is a never ending story.&lt;/p&gt;
&lt;p&gt;The situation is a lot like renting vs. buying: with renting, at the end of each month you are at exactly the same situation as you were in the beginning of the month: the home still belongs in its entirety &lt;strong&gt;not&lt;/strong&gt; to you, but to the landlord, and you must now pay a new rent in full, in order to stay for one more month. With buying, you pay a lot of money up front, and some maintenance costs and taxes will always be applicable, but the money that you pay goes into something tangible, it is turned into value in your hands in the form of a home that you now own.&lt;/p&gt;
&lt;p&gt;Furthermore, the relative efficiency of manual testing is usually severely underestimated. In order to do proper manual testing, you have to come up with a meticulous test plan, explaining what the tester is supposed to do, and what the result of each action should be, so that the tester can tell whether the software is behaving according to the requirements or not.  However, no test plan will ever be as unambiguous as a piece of code that is actually performing the same test, and the more meticulous you try to be with the test plan, the less you gain, because there comes a point where the effort of writing the test plan starts being comparable to the effort of writing the corresponding automated test instead. So, you might as well write the test plan down in code to begin with.&lt;/p&gt;
&lt;p&gt;Of course one round of writing automated software testing suites will always represent more effort than a few rounds of manually performing the same tests, so the desirability of one approach vs. the other may depend on where you imagine the break-even point to be. If you reckon that the break-even point is fairly soon, then you already see the benefit of implementing automated software testing as soon as possible. If you imagine it will be after the IPO, then you might think it is better to defer it, but actually, even in this case you might not want to go this way, more about that later.&lt;/p&gt;
&lt;p&gt;Well, let me tell you: in the software industry the established understanding is that the break-even point is &lt;strong&gt;extremely&lt;/strong&gt; soon.  Like &lt;strong&gt;write-the-tests-before-the-app&lt;/strong&gt; soon.  (A practice known as Test-Driven Development.)&lt;/p&gt;
&lt;h3 id=&#34;myth-7-you-can-keep-developing-new-functionality-and-fixing-existing-issues-without-software-testing-in-place&#34;&gt;Myth #7: You can keep developing new functionality and fixing existing issues without software testing in place.
&lt;/h3&gt;&lt;p&gt;In theory you could, but in practice you can&amp;rsquo;t. That&amp;rsquo;s because every time you touch the slightest part of the software, everything about the software is now potentially broken. Without automated software testing in place, you just don&amp;rsquo;t know. This is especially true of software which has been written messily, which is in turn especially common in software which has been written without any Automated Software Testing in place from the beginning.  Paradoxically enough, automated software testing forces software designs to have some structure, this structure reduces failures, so then the software has lesser testing needs.&lt;/p&gt;
&lt;p&gt;To help lessen change-induced software fragility, we even have a special procedure governing how we fix bugs: when a bug is discovered, we do not always just go ahead and fix it. Instead, what we often do is that we first write a test which checks for the bug according to the requirements, without making any assumptions as to what might be causing it. Of course, since the bug is in the software, the test will initially be observed to fail. Then, we fix the bug according to your theory as to what is causing it, and we should see that test succeeding. If it doesn?t, then we fixed the wrong bug, or more likely, we just broke something which used to be fine. Furthermore, all other tests better also keep succeeding, otherwise in fixing this bug we broke something else. As a bonus, the new test now becomes a permanent part of the suite of tests, so if this particular behavior is broken again in the future, this test will catch it.&lt;/p&gt;
&lt;p&gt;If you go around &amp;ldquo;fixing bugs&amp;rdquo; without testing mechanisms such as this in place, you are not really fixing bugs, you are just shuffling bugs around. The same applies to features: if you go around &amp;ldquo;adding features&amp;rdquo; without the necessary testing mechanisms in place, then by definition you are not adding features, you are adding bugs.&lt;/p&gt;
&lt;h3 id=&#34;myth-8-software-testing-has-no-business-value&#34;&gt;Myth #8: Software testing has no business value
&lt;/h3&gt;&lt;p&gt;Yes it does. The arguments that I have already listed should be making it clear that it does, but let me provide one more argument, which shows how Automated Software Testing directly equates to business value.&lt;/p&gt;
&lt;p&gt;A potentially important factor for virtually any kind of business is investment. When an investor is interested in a software business, and if they have the slightest clue as to what it is that they are doing, they are likely to want to evaluate the source code before committing to the investment. Evaluation is done by sending a copy of the software project to an independent professional software evaluator. The evaluator examines the software and responds with investment advice.&lt;/p&gt;
&lt;p&gt;The evaluator may begin by using the software as a regular user to ensure that it appears to do what it is purported to do, then they may examine the design to make sure it makes sense, then they may examine the source code to make sure things look normal, etc. After spending not too much time on these tasks, the evaluator is likely to proceed to the tests. Software testing is so prevalent in the software industry, that it is unanimously considered to be the single most important factor determining the quality of the software.&lt;/p&gt;
&lt;p&gt;If there are no tests, this is very bad news for the investment advice.&lt;/p&gt;
&lt;p&gt;If the tests do not pass, this is also very bad news.&lt;/p&gt;
&lt;p&gt;If the tests succeed, then the next question is how thorough they are.&lt;/p&gt;
&lt;p&gt;For that, the evaluator is likely to use a tool called &amp;ldquo;Code Coverage Analyzer&amp;rdquo;. This tool keeps track of the lines of code that are being executed as the program is running, or, more likely, as the program is being exercised by the tests. By running the tests while the code coverage analysis tool is active, the evaluator will thus obtain the code coverage metric of the software. This is just a single number, from 0 to 100, and it is the percentage of the total number of source code lines that have been exercised by the tests. The more thorough the tests are, the higher this number will be.&lt;/p&gt;
&lt;p&gt;This is a very useful metric, because in a single number it captures an objective, highly important quality metric for the entirety of the software system. It also tends to highly correlate to the actual investment advice that the evaluator will end up giving. The exact numbers may vary depending on the product, the evaluator, the investor, the investment, and other circumstances, but a rough breakdown is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;below 50% means &amp;ldquo;run in the opposite direction, this is as good as Ebola.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;50-60% means &amp;ldquo;poor&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;60-70% means &amp;ldquo;decent&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;70-80% means &amp;ldquo;good&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;80-90% means &amp;ldquo;excellent&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;90-100% means &amp;ldquo;exceptional&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, the graph of programming effort required vs. code coverage achieved is highly non-linear. It is relatively easy to pass the 45% mark; it becomes more and more difficult as you go past the 65% mark; it becomes exceedingly difficult once you cross the 85% mark.&lt;/p&gt;
&lt;p&gt;In my experience and understanding, conscientious software houses in the general commercial software business are striving for the 75% mark. In places where they only achieve about 65% code coverage they consider it acceptable but at the same time they either know that they could be doing better, or they have low self-respect. High criticality software (that human life depends on, or a nation&amp;rsquo;s reputation,) may have 100% coverage, but a tremendous effort is required to achieve this.  In any case, what matters is not so much what the developers think, but what the evaluator thinks; and evaluators tend to use the established practices of the industry as the standard by which they judge.  The established practices call for extensive software testing, so if you do not do that, then your evaluation is not going to look good.&lt;/p&gt;
&lt;p&gt;So, is there business value in software testing? investment prospects alone say yes, regardless of the technical merits of it. Furthermore, software evaluation may likely be part of the necessary preparations for an IPO to take place, so even if you imagined the break-even point of automated testing vs. manual testing to be after the IPO, there is still ample reason to have them all in perfect working order well before the IPO.&lt;/p&gt;
&lt;p&gt;The above is applicable for businesses that are exclusively into software development. I do not know to what degree parallelisms can be drawn with companies for which software is somewhat secondary, but I suspect it is to no small extent.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;metamaker 2020-11-14 23:03:33 UTC&lt;/p&gt;
&lt;p&gt;| &amp;hellip; in a single number it captures an objective, highly important quality metric for the entirety of the software system.&lt;/p&gt;
&lt;p&gt;I wished to find in an article more about spec tests (BDD, Gherkin). Code lines coverage is not always applicable, and even in the case of unit tests where it is applicable, branch+predicate coverage is as relevant as ever.&lt;/p&gt;
&lt;p&gt;So, devs end up with a need to convert use cases to autotests. I had a great Product Owner (C++ dev in past), who was writing Gherkin scripts inside Jira tickets xD, and team needed to just connect actions to words - then voila! we have autotests for use cases that a user encounters.&lt;/p&gt;
&lt;p&gt;The excuse - it is difficult to setup runner for specs. The solution - fire knaves, hire pros! :D&lt;/p&gt;
&lt;p&gt;| Software testing has no business value&lt;/p&gt;
&lt;p&gt;This is THE PLAGUE of modern software engineering - business decides how programmers should do their work. Moreover there is the BELIEF that writing bug-free code is easy. In the end of the day, software rot trumps all business decisions and team ends up with polluted unsupportable code. This is the one single reason why now I don&amp;rsquo;t even consider job offers to random teams that have already 2-3 years old software - just too high risk to end up with already non-fixable $hitcode (was there, seen undocumented SQL scripts with 5000 LOC and zero documentation - never again).&lt;/p&gt;
&lt;p&gt;I wish everyone to end up sooner or later in a team with good practices and low stress! Stay good!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;metamaker 2020-11-14 23:03:27 UTC&lt;/p&gt;
&lt;p&gt;Yo Mike! Big kudos for the great article!&lt;/p&gt;
&lt;p&gt;(I am sure you know all that I want to mention in the next paragraphs, I just need to vent my thoughts and feelings after reading; hope it is thought-provoking, because thinking === GREATER GOOD)&lt;/p&gt;
&lt;p&gt;| &amp;hellip; so it ends up saving huge amounts of money.&lt;/p&gt;
&lt;p&gt;This is the good reason, but not the BEST (which I will mention below). Be like my old team when one day PM told that single calling code equals single country (+1 CC?), and someone wrote a component relying on this &amp;ldquo;well-known fact&amp;rdquo;. After half year we randomly found why some phone numbers were messed up. Ironically, the harm that was done to our company - zero bucks, we haven&amp;rsquo;t lost anything due to this bug. We were b2b company that signed up other companies on board and thus really cared about having more sales and signed contracts rather than a good product.&lt;/p&gt;
&lt;p&gt;Tests are useless waste of time for company that is sales driven. Am I right? Or not so?&lt;/p&gt;
&lt;p&gt;The BEST thing for writing tests is that it documents expectations on code level (not biz, but for us, devs). If you ever need to fix something done by some random dude who now moved to Arctica, test is a good guidance (ofc, if that person wrote a good test and not some mocked up from top to bottom monster).&lt;/p&gt;
&lt;p&gt;A quick thought about code reviews. There is the BELIEF that reviews prevent bad code (poorly written tests including). In fact, I have never seen in my career teams where code reviews were helpful (but I was in a great team without no code reviews and permit to fix random places during the development - we trusted each other and cared about well being). If you have a good tech lead, but unsure about the rest of the team, for the God&amp;rsquo;s sake, let tech lead be the only person who reviews code. By not doing so, if there is less than 51% of team are competent developers, you end up with political circus (been there, seen it, friends get LGTM for $hitcode, foes get comments like &amp;ldquo;change space, change quote, move comment to next line&amp;rdquo;; so&amp;hellip; you end up making situational friends ;) - needless to say, what happens to code base).&lt;/p&gt;
&lt;p&gt;| &amp;hellip; every time you touch the slightest part of the software, everything about the software is now potentially broken.&lt;/p&gt;
&lt;p&gt;Not mentioning that since you are not a solo developer, you end up with merge conflicts due to other people work (even logical, e.g. Country class starts using 2-letter codes instead of 3-letter and uses same old good String for input of constructor - well, hope that your buddy added invariant to the class constructor). Tests synchronize decision making process, they autofix logical bugs between you and buddy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Medium-com: Psychology of Code Readability by Egon Elbre</title>
        <link>//localhost:1313/p/medium-com-psychology-of-code-readability-by-egon-elbre/</link>
        <pubDate>Tue, 29 Jan 2019 08:30:36 +0000</pubDate>
        
        <guid>//localhost:1313/p/medium-com-psychology-of-code-readability-by-egon-elbre/</guid>
        <description>&lt;p&gt;This is an article I enjoyed reading.  I am in full agreement with every claim made therein. It was very nice to see certain conclusions that I have arrived at in the past being spelled out and illustrated with nice explanations.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://medium.com/@egonelbre/psychology-of-code-readability-d23b1ff1258a&#34; target=&#34;_blank&#34;
   &gt;https://medium.com/@egonelbre/psychology-of-code-readability-d23b1ff1258a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://wordpress.metro.cx/&#34; target=&#34;_blank&#34;
   &gt;gmc&lt;/a&gt; 2019-09-16 19:05:24 UTC&lt;/p&gt;
&lt;p&gt;About naming, this is a brilliant podcast on the subject that i think should be required listening for any sw engineer: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.se-radio.net/2016/12/se-radio-episode-278-peter-hilton-on-naming/&#34; target=&#34;_blank&#34;
   &gt;https://www.se-radio.net/2016/12/se-radio-episode-278-peter-hilton-on-naming/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Confucius on naming</title>
        <link>//localhost:1313/p/confucius-on-naming/</link>
        <pubDate>Mon, 21 May 2018 23:50:55 +0000</pubDate>
        
        <guid>//localhost:1313/p/confucius-on-naming/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/confucius-on-naming/media/confucius.jpg&#34;
	width=&#34;1125&#34;
	height=&#34;1076&#34;
	srcset=&#34;//localhost:1313/p/confucius-on-naming/media/confucius_hu_b8fa3a1fdb011bb1.jpg 480w, //localhost:1313/p/confucius-on-naming/media/confucius_hu_36a7b39601e40826.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;104&#34;
		data-flex-basis=&#34;250px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;There is a Chinese proverb which states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The beginning of wisdom is to call things by their proper name.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This proverb is generally understood to be a summarization and paraphrase of an actual quote from the  &amp;ldquo;Rectification of Names&amp;rdquo; section of the &lt;em&gt;Analects of Confucius&lt;/em&gt;.  (See &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Rectification_of_names&#34; target=&#34;_blank&#34;
   &gt;Wikipedia - Rectification of names&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The original quote is as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;If names be not correct, language is not in accordance with the truth of    things. If language be not in accordance with the truth of things, affairs    cannot be carried on to success.&lt;/strong&gt;
&amp;ndash; Confucius&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Of course, the value of the quote lies not in that it carries the weight of the name of Confucius, but rather, in that by simply seeing it spelled out in words, one can immediately realize its self-evident truthfulness, and thus, perhaps, appreciate &lt;strong&gt;the magnitude of its importance.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;P.S.&lt;/p&gt;
&lt;p&gt;In the modern western world fashion of &amp;ldquo;here is some entertainment to go along with your philosophy&amp;rdquo;, I would point out that for us programmers, this quote should be understood as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you don&amp;rsquo;t name your variables properly, your programs ain&amp;rsquo;t gonna work.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Another thing we can all take home is that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Confucius was not fond of confusion.&lt;/p&gt;&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>GitHub project: mikenakis-rumination</title>
        <link>//localhost:1313/p/github-project-mikenakis-rumination/</link>
        <pubDate>Wed, 11 Apr 2018 05:17:08 +0000</pubDate>
        
        <guid>//localhost:1313/p/github-project-mikenakis-rumination/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/media/mikenakis-rumination-512.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;p&gt;GitHub project: Rumination&lt;/p&gt;
&lt;p&gt;Making plain old java objects aware of their own mutations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This project has been retired. The github link does not even work anymore.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This page only serves historical documentation purposes.&lt;/strong&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;what-is-mikenakis-rumination&#34;&gt;What is mikenakis-rumination?
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;mikenakis-rumination&lt;/code&gt; is a java agent and associated class library for making plain old java objects aware of their own mutations.&lt;/p&gt;
&lt;p&gt;Rumination is a term that I have coined to refer to the ability of an object to be aware of mutations on itself.&lt;/p&gt;
&lt;p&gt;Rumination is important because it is the first step in making objects observable: Once an object is aware of changes to its own state, it can then offer means by which external observers can register to receive notifications about these changes. Rumination is not concerned with observability, it is only concerned with the narrow concept of self-mutation-awareness.&lt;/p&gt;
&lt;p&gt;The goal of rumination is to have some overridable method of an object invoked each time one of the setters of the object alters some piece of the state of the object. One can achieve this manually, by hand-coding an invocation to the overridable from within each setter, but that is tedious and error-prone. The idea behind rumination is to systematize this process, so that the overridable gets invoked automatically, without us having to write any additional code.&lt;/p&gt;
&lt;p&gt;The dictionary offers two meanings for the word &lt;em&gt;ruminate&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One is &amp;ldquo;to chew the cud, as a ruminant&amp;rdquo;, and it relates to the overridable being invoked to re-process a value which has already been received by a setter, so it is like eating one&amp;rsquo;s own food once again. (And hence the goat in the logo.)&lt;/li&gt;
&lt;li&gt;The other meaning is &amp;ldquo;to meditate or muse; ponder&amp;rdquo; which is also applicable, because the process is introspective in nature.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rumination works by means of a java agent which gets invoked by the JVM to transform classes as they are being loaded. (Actually, it works as an &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/mikenakis-agentclaire&#34; target=&#34;_blank&#34;
   &gt;AgentClaire Interceptor&lt;/a&gt;, which is essentially the same thing.)&lt;/p&gt;
&lt;p&gt;A class is a ruminant if it is marked with the &lt;code&gt;@Ruminant&lt;/code&gt; annotation, or if it is a descendant of a ruminant. This means that you only have to mark a certain base class as a ruminant, and then all of its descendants will automatically be ruminants without the need to add the &lt;code&gt;@Ruminant&lt;/code&gt; annotation to each one of them.&lt;/p&gt;
&lt;p&gt;The rumination processor examines ruminant classes for setters. A setter is a method which is of &lt;code&gt;void&lt;/code&gt; return type, has a name starting with &lt;code&gt;set&lt;/code&gt; and followed by the name of an existing instance field, accepts only one parameter which is of the same type as the instance field, and ends with a sequence of bytecode instructions that store the value of the parameter into the field before returning.  (I am only looking for these instructions at the end of the setter in order to allow for validation prologue.)&lt;/p&gt;
&lt;p&gt;The rumination processor will replace those last bytecode instructions of the setter with bytecode instructions that do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check whether the new value is same as the current value of the field; if so, return without doing anything.&lt;/li&gt;
&lt;li&gt;Store the new value into the field;&lt;/li&gt;
&lt;li&gt;Invoke the ruminator method, passing it the name of the field.&lt;/li&gt;
&lt;li&gt;return.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The ruminator method is of the following form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;protected void onMemberChanged( String fieldName )
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The &lt;code&gt;@Ruminant&lt;/code&gt; annotation accepts an optional &lt;code&gt;String ruminatorMethodName()&lt;/code&gt; parameter, whose default is &lt;code&gt;&amp;quot;onMemberChanged&amp;quot;&lt;/code&gt;, so the name of the ruminator method can be changed.&lt;/p&gt;
&lt;p&gt;The field is identified by name, because java does not (yet?) support field literals.&lt;/p&gt;
&lt;p&gt;To see how rumination is used, check out the tests.&lt;/p&gt;
&lt;p&gt;Hosted on GitHub: &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/mikenakis-rumination&#34; target=&#34;_blank&#34;
   &gt;https://github.com/mikenakis/mikenakis-rumination&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;license&#34;&gt;License
&lt;/h3&gt;&lt;p&gt;This creative work is explicitly published under &lt;em&gt;&lt;strong&gt;No License&lt;/strong&gt;&lt;/em&gt;. This means that I remain the exclusive copyright holder of this creative work, and you may not do anything with it other than view its source code and admire it. More information here: &lt;a 
   href=&#34;//localhost:1313/p/open-source-but-no-license/&#34;
   &gt;Open Source but No License&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you would like to do anything more with this creative work, please contact me.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: The mikenakis-rumination logo. Based on original from free-illustrations.gatag.net Used under &lt;a class=&#34;external&#34; 
   href=&#34;https://creativecommons.org/licenses/by/3.0/us/&#34; target=&#34;_blank&#34;
   &gt;CC BY License.&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>On JUnit&#39;s random order of test method execution</title>
        <link>//localhost:1313/p/on-junits-random-order-of-test-method-execution/</link>
        <pubDate>Sun, 08 Apr 2018 20:15:05 +0000</pubDate>
        
        <guid>//localhost:1313/p/on-junits-random-order-of-test-method-execution/</guid>
        <description>&lt;p&gt;This is a rant about JUnit, or more precisely, a rant about JUnit&amp;rsquo;s inability to execute test methods in natural method order.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Definition: Natural method order is the order in which methods appear in the source file.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;what-is-the-problem&#34;&gt;What is the problem?
&lt;/h3&gt;&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Up until and including Java 6, when enumerating the methods of a java class, the JVM would yield them in natural order. However, when Java 7 came out, Oracle changed something in the internals of the JVM, and this operation started yielding methods in random order.&lt;/p&gt;
&lt;p&gt;Apparently, JUnit was executing methods in the order in which the JVM was yielding them, so as a result of upgrading to Java 7, everybody&amp;rsquo;s tests started running in random order. This caused considerable ruffling of feathers all over the world.&lt;/p&gt;
&lt;p&gt;Now, the creators of the Java language are presumably running unit tests just like everyone else, so they probably noticed that their own tests started running in random order before releasing Java 7 to the world, but apparently they did not care.&lt;/p&gt;
&lt;p&gt;Luckily, the methods are still being stored in natural order in the class file, they only get garbled as they are being loaded by the class loader, so you can still discover the natural method order if you are willing to get just a little bit messy with bytecode.&lt;/p&gt;
&lt;p&gt;However, that&amp;rsquo;s too much work, and it is especially frustrating since the class loader is in a much better position to correct this problem, but it doesn&amp;rsquo;t.  (The class loader messes up the method order probably because it stores them in a HashMap, which yields its contents in Hash order, which is essentially random. So, fixing the problem would probably have been as simple as using a LinkedHashMap instead of a HashMap.)&lt;/p&gt;
&lt;p&gt;People asked the creators of JUnit to provide a solution, but nothing was being done for a long time, allegedly because &lt;em&gt;if You Do Unit Testing Properly?, you should not need to run your tests in any particular order, since there should be no dependencies among them&lt;/em&gt;. So, the creators of JUnit are under the incredibly short-sighted impression that if you want your tests to run in a particular order, it must be because you have tests that depend on other tests.&lt;/p&gt;
&lt;p&gt;When the creators of JUnit finally &lt;em&gt;did&lt;/em&gt; something to address the issue, (it did not take them long, only, oh, until Java 8 came out,) their solution was completely half-baked: the default mode of operation was &lt;em&gt;still&lt;/em&gt; random method order, but with the introduction of a special annotation one could coerce JUnit to run test methods either in alphabetic order, (which is nearly useless,) or in some other weird, ill-defined, so-called &amp;ldquo;fixed&amp;rdquo; order, which is not alphabetic, nor is it the natural order, but according to them it guarantees that the methods will be executed in the same order from test run to test run. (And is &lt;em&gt;completely&lt;/em&gt; useless.)&lt;/p&gt;
&lt;p&gt;So, apparently, the creators of JUnit were willing to do anything except the right thing, and even though JUnit 5 is said to have been re-written from scratch, the exact same problem persists.&lt;/p&gt;
&lt;h3 id=&#34;why-is-this-a-problem&#34;&gt;Why is this a problem?
&lt;/h3&gt;&lt;p&gt;Well, let me tell you why running tests in natural method order is important:&lt;/p&gt;
&lt;p&gt;We tend to test fundamental features of our software before we test features that depend upon them, so if a fundamental feature fails, we want that to be the very first error that will be reported. (Note: it is the features under test that depend upon each other, not the tests themselves!)&lt;/p&gt;
&lt;p&gt;The test of a feature that relies upon a more fundamental feature whose test has already failed might as well be skipped, because it can be expected to fail, but if it does run, reporting that failure before the failure of the more fundamental feature is an act of sabotage against the developer: it is sending us looking for problems in places where there are no problems to be found, and it is making it more difficult to locate the real problem, which usually lies in the test that failed first &lt;strong&gt;in the source file&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To give an example, if I am writing a test for my awesome collection class, I will presumably first write a test for the insertion function, and further down I will write a test for the removal function. If the insertion test fails, the removal test does not even need to run, but if it does run, it is completely counter-productive to be shown the results of the removal test before I am shown the results of the insertion test. If the insertion test fails, it is game over. As they say in the far west, there is no point beating a dead horse. How hard is this to understand?&lt;/p&gt;
&lt;p&gt;Another very simple, very straightforward, and very important reason for wanting the test methods to be executed in natural order is because seeing the test method names listed in any other order is &lt;strong&gt;brainfuck&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-junits-random-order-of-test-method-execution/media/grumpy-cat-random-order.jpg&#34;
	width=&#34;512&#34;
	height=&#34;512&#34;
	srcset=&#34;//localhost:1313/p/on-junits-random-order-of-test-method-execution/media/grumpy-cat-random-order_hu_1cbcf661f6886545.jpg 480w, //localhost:1313/p/on-junits-random-order-of-test-method-execution/media/grumpy-cat-random-order_hu_37da57f9abdefd51.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;
&lt;/p&gt;</description>
        </item>
        <item>
        <title>GitHub project: mikenakis-classdump</title>
        <link>//localhost:1313/p/github-project-mikenakis-classdump/</link>
        <pubDate>Sat, 07 Apr 2018 21:28:50 +0000</pubDate>
        
        <guid>//localhost:1313/p/github-project-mikenakis-classdump/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/github-project-mikenakis-classdump/media/mikenakis-classdump-512.png&#34;
	width=&#34;512&#34;
	height=&#34;512&#34;
	srcset=&#34;//localhost:1313/p/github-project-mikenakis-classdump/media/mikenakis-classdump-512_hu_27662c5971d41324.png 480w, //localhost:1313/p/github-project-mikenakis-classdump/media/mikenakis-classdump-512_hu_2a44735ad5001a27.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;A command-line utility for dumping the contents of class files.&lt;/p&gt;
&lt;p&gt;Read the README.md file at &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/Public/tree/master/classdump&#34; target=&#34;_blank&#34;
   &gt;https://github.com/mikenakis/Public/tree/master/classdump&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cover image: The &lt;code&gt;mikenakis-classdump&lt;/code&gt; logo. Based on an image found on the interwebz.&lt;/p&gt;</description>
        </item>
        <item>
        <title>GitHub project: mikenakis-bytecode</title>
        <link>//localhost:1313/p/github-project-mikenakis-bytecode/</link>
        <pubDate>Sat, 07 Apr 2018 19:24:50 +0000</pubDate>
        
        <guid>//localhost:1313/p/github-project-mikenakis-bytecode/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/github-project-mikenakis-bytecode/media/mikenakis-bytecode.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;p&gt;A lightweight framework for manipulating JVM bytecode.&lt;/p&gt;
&lt;p&gt;Read the README.md file at &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/Public/tree/master/bytecode&#34; target=&#34;_blank&#34;
   &gt;https://github.com/mikenakis/Public/tree/master/bytecode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cover image: The mikenakis-bytecode Logo, &lt;em&gt;an old-fashioned coffee grinder&lt;/em&gt;, by michael.gr, based on &lt;a class=&#34;external&#34; 
   href=&#34;https://thenounproject.com/browse/?i=19046&#34; target=&#34;_blank&#34;
   &gt;original work by Gregory Sujkowski from the Noun Project&lt;/a&gt;. Used under &lt;a class=&#34;external&#34; 
   href=&#34;https://creativecommons.org/licenses/by/3.0/us/&#34; target=&#34;_blank&#34;
   &gt;CC BY License.&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>My Very Own™ Coding Style</title>
        <link>//localhost:1313/p/my-very-own-coding-style/</link>
        <pubDate>Thu, 05 Apr 2018 17:29:00 +0000</pubDate>
        
        <guid>//localhost:1313/p/my-very-own-coding-style/</guid>
        <description>&lt;h3 id=&#34;foreword&#34;&gt;Foreword
&lt;/h3&gt;&lt;p&gt;In my career I have experimented a lot with coding styles, mostly on pet projects at home, but also in workplaces where each developer was free to code in whatever way they pleased, or in workplaces where I was the only developer.&lt;/p&gt;
&lt;p&gt;My experimentation has been in the direction of achieving maximum objective clarity and readability, disregarding convention, custom, precedent, and the shock factor: the fact that a particular style element might be alien to others plays very little role in my evaluation of the objective merits of the element.&lt;/p&gt;
&lt;p&gt;The counter-argument (the argument in favor of following convention) says that whatever benefits might be offered by a coding style cannot possibly outweigh the benefit of presenting others with a familiar coding style. This is of course true, and that&amp;rsquo;s why it makes sense for an organization to choose a traditional coding style. However, I am not a company; I am an individual, and my own projects are mine. Furthermore, my counter-counter-argument is that I firmly believe that tradition is a synonym for &lt;em&gt;&lt;strong&gt;progress stopper&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, over the years I have tried many things, once even radically changing my coding style in the middle of a project. (Modern IDEs make it very easy to do so.)  Some of the things I tried I later abandoned, others I permanently adopted.&lt;/p&gt;
&lt;p&gt;So, my coding style today is the result of all this experimentation. If it looks strange to you, keep in mind that every single aspect of it has been deliberately chosen to be this way by someone who was not always coding like that, and who one day decided to start coding like that in the firm belief that this way is objectively better.&lt;/p&gt;
&lt;p&gt;In moving on with each of these changes over the years, I had to overcome my own subjective distaste of the unfamiliar, for the benefit of what I considered to be objectively better. So, if you decide to judge my coding style, please first ask yourself to what extent you are willing to overcome the same.&lt;/p&gt;
&lt;h3 id=&#34;my-very-own-coding-style&#34;&gt;My Very Own™ Coding Style
&lt;/h3&gt;&lt;p&gt;I use this coding style for languages that belong to the C syntax family, for example C, C++, Java, and C#. These are languages with curly braces, a reduced set of keywords, and a moderate amount of parentheses. I hardly ever program in any other language, but when I do, I apply whatever parts of this coding style are applicable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tabs vs. Spaces: &lt;strong&gt;Tabs&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;I use tabs for indentation, because this allows different developers to view the code with the amount of indentation that they are accustomed to, without having to reformat the code.
&lt;ul&gt;
&lt;li&gt;Spaces should never be used for indentation.&lt;/li&gt;
&lt;li&gt;Tabs should never be used for anything other than indentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tabular formatting: &lt;strong&gt;No&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Tabular formatting refers to inserting spaces within statements in consecutive lines of code to align parts of the statements into columns across those lines of code.  So, for example, in statements that are of the form &lt;code&gt;variable-type variable-name = initializer-expression;&lt;/code&gt; spaces would be inserted after the variable-types to align all the variable-names in a column, and more spaces would be inserted after the variable-names to align all the equals-signs in a column.&lt;/li&gt;
&lt;li&gt;I used to be a big fan of this; however:
&lt;ul&gt;
&lt;li&gt;Generics make this less appealing, because most type definitions might be short, but one generic type definition might be very long, resulting in lots of seemingly unnecessary whitespace.&lt;/li&gt;
&lt;li&gt;A change in one line of code may result in re-alignment of many lines around it, and diff tools are not smart enough to account for this, so the possibility of merge conflicts skyrockets.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Thus, at some point my verdict became to drop tabular formatting.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spaces:
&lt;ul&gt;
&lt;li&gt;Before or after unary operators: &lt;strong&gt;Never&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Around binary operators: &lt;strong&gt;Always&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Around ternary operators: &lt;strong&gt;Always&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Before a comma: &lt;strong&gt;Never&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;After a comma: &lt;strong&gt;Always&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Before opening parenthesis of function argument list: &lt;strong&gt;Never&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Before opening parenthesis of flow-control keyword: &lt;strong&gt;Never&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Inside parenthesized expressions: &lt;strong&gt;Never&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Around parameter lists: &lt;strong&gt;Always&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;This means that a function call must look like this: &lt;code&gt;foo( a, b );&lt;/code&gt; Note that there is a space after &lt;code&gt;(&lt;/code&gt; and a space before &lt;code&gt;)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;This applies not only to function calls, but also to function declarations and to keywords that accept parameters.&lt;/li&gt;
&lt;li&gt;Parameterless functions can still be coded like this: &lt;code&gt;foo();&lt;/code&gt; because the rule is carefully worded to call for spaces around parameter lists, not spaces inside parentheses. When you are invoking a parameterless function there is no parameter list, therefore no spaces.&lt;/li&gt;
&lt;li&gt;Note that although parameter lists require spaces, parenthesized expressions require no spaces, and therein lies the advantage of this pair of rules: it suddenly becomes clear which parenthesis belongs to a function call, and which parenthesis belongs to an expression. For example, passing an expression as a parameter to a function looks like this: &lt;code&gt;foo( a, (b + c) );&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Note that certain C# constructs like &lt;code&gt;typeof()&lt;/code&gt; and &lt;code&gt;nameof()&lt;/code&gt; are expressions, not functions, therefore their arguments must not be padded with spaces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Right Margin Column: &lt;strong&gt;120&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;In May of 2020 Linus Torvalds declared that the number of characters per line in the Code Style of the Linux Kernel was to be increased from 80 characters to 100 characters. That&amp;rsquo;s laughable. We have had widescreen monitors since the beginning of the century. We can easily do 120 characters. I sometimes do 160 characters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hard right margin: &lt;strong&gt;No&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;The right margin is not meant to be a hard limit: if a line needs to be longer, make it longer. It is fine to push uninteresting stuff off the screen horizontally in order to fit more interesting stuff inside the screen vertically.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;New line after attributes (C#) / annotations (Java): &lt;strong&gt;Never&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;This may push the function definition quite a bit far to the right, and that&amp;rsquo;s fine.&lt;/li&gt;
&lt;li&gt;If a function has lots and lots of attributes/annotations, it might look very ugly, but that&amp;rsquo;s okay, because it happens very rarely, and when it does happen, maybe that is exactly how it should be: beautiful things should look beautiful, and ugly things should look ugly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Empty lines before a block-style comment: &lt;strong&gt;One&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;If a block-style comment appears in code, there must always be a blank line before it.&lt;/li&gt;
&lt;li&gt;This way, we are clearly indicating that the comment refers to the following line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Empty lines within functions: &lt;strong&gt;Zero&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Quite often programmers like to use blank lines to visually separate pieces of code that are conceptually different. The problem is, the blank line gives no hint about the concepts involved, so it is entirely useless to anyone but the person who inserted it. If it is worth leaving a blank line, then it is worth adding a block-style comment explaining why, in which case a blank line before the comment is also necessary due to a previous rule. Better yet, move the conceptually different code into a different function, and give that function a descriptive name, so that you need neither comment nor blank line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Empty lines before a function: &lt;strong&gt;One&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;The rule which requires a blank line before a block comment covers all the cases where a function is preceded by a block comment that describes the function. However, quite often functions have descriptive names, rendering explanatory comments unnecessary. For these cases, we mandate separating functions with a blank line.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Empty lines between fields: &lt;strong&gt;Zero&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;If you really need a blank line between two fields, you must insert a block comment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Empty lines anywhere else: &lt;strong&gt;Zero&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Some people have the habit of leaving one or more blank lines in various odd places according to some ad-hoc rules that exist only in their head. The problem is, it is impossible to teach such rules to an automatic reformatting tool. Therefore, there shall be no such rules. There should never be any spurious blank lines anywhere.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Curly braces: &lt;strong&gt;Allman&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;See &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Indent_style#Allman_style&#34; target=&#34;_blank&#34;
   &gt;http://en.wikipedia.org/wiki/Indent_style#Allman_style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Each opening brace and each closing brace is on a separate line, the braces are at the same indentation level as the controlling statement, and the code in the block is one indentation level deeper.
&lt;ul&gt;
&lt;li&gt;Luckily, this is the curly brace style of C#.&lt;/li&gt;
&lt;li&gt;Unluckily, this is &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; the curly brace style of Java.
&lt;ul&gt;
&lt;li&gt;I do not care; this is my coding style even when I code in Java. The Egyptian curly brace style which is so popular in the Java world is &lt;em&gt;&lt;strong&gt;absolutely retarded&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Braces on single statement blocks: &lt;strong&gt;Never&lt;/strong&gt; (unless the language requires them)
&lt;ul&gt;
&lt;li&gt;The &amp;ldquo;always&amp;rdquo; choice seems to be very popular; that&amp;rsquo;s retarded.&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;sometimes&amp;rdquo; choice also seems to be popular, but I strive for consistency.&lt;/li&gt;
&lt;li&gt;Note that in some languages some keywords have been introduced that require curly braces even if the controlled block consists of a single statement, for example the try-catch-finally clause in C++, Java, and C#. I greatly resent this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Nesting: &lt;strong&gt;Always consistent*&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Some people like writing quick one liners, for example &lt;code&gt;if( x ) return 0;&lt;/code&gt; all in one line. That&amp;rsquo;s unacceptable.&lt;/li&gt;
&lt;li&gt;Some people refrain from nesting the &lt;code&gt;case&lt;/code&gt; labels in a &lt;code&gt;switch&lt;/code&gt; statement, or if they do, then they refrain from nesting the code under the &lt;code&gt;case&lt;/code&gt; labels. That&amp;rsquo;s unacceptable.&lt;/li&gt;
&lt;li&gt;In C#, people quite often refrain from nesting the classes within their namespaces. That&amp;rsquo;s unacceptable.&lt;/li&gt;
&lt;li&gt;In C#, people quite often do not nest cascaded &lt;code&gt;using&lt;/code&gt; statements. That&amp;rsquo;s unacceptable.&lt;/li&gt;
&lt;li&gt;The only case where I sometimes violate this rule, and I am not yet completely decided on how to go about it, is with single statement functions in Java, which I sometimes code in one line, not because I believe this is correct, but because I am expressing a wish that Java would offer a functional style of declaring functions the way C# does.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type identifier casing: &lt;strong&gt;SentenceCase&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Even if the type is private.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Constant identifier casing: &lt;strong&gt;SentenceCase&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Even if the constant is private.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Private member identifier casing: &lt;strong&gt;camelCase&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;A very popular choice is prefixing the identifier with &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;m_&lt;/code&gt;; that&amp;rsquo;s unacceptable.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Public member identifier casing:
&lt;ul&gt;
&lt;li&gt;C#: &lt;strong&gt;SentenceCase&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Java: &lt;strong&gt;camelCase&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;The camelCase choice of Java is &lt;em&gt;&lt;strong&gt;retarded&lt;/strong&gt;&lt;/em&gt;, but it would be too heretic even for me to go against it, mainly because there exist tools that use reflection to guess what methods are getters and setters, and everything goes haywire if the capitalization is not what these tools expect.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Static fields: &lt;strong&gt;Same as other fields&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Note: this explicitly means that static fields must not be named differently from other fields. Some people like doing weird things like prefixing static fields with &lt;code&gt;s_&lt;/code&gt;. That&amp;rsquo;s not only mighty ugly, but also entirely unnecessary, because any half-decent IDE will color-code static fields for you.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Acronyms: &lt;strong&gt;SentenceCase&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;In other words, never use &amp;ldquo;GUID&amp;rdquo;; always use &amp;ldquo;Guid&amp;rdquo;. The acronym becomes a word, so that it can be added to the spell-checker.&lt;/li&gt;
&lt;li&gt;Speaking of spell checkers:
&lt;ul&gt;
&lt;li&gt;The spell-checker must always be on&lt;/li&gt;
&lt;li&gt;Every commit must pass inspection by the spell-checker&lt;/li&gt;
&lt;li&gt;The spell-checker wordlist must be committed like any other file&lt;/li&gt;
&lt;li&gt;The spell-checker wordlist must pass code review like anything else.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;That&amp;rsquo;s how the quality of the codebase can be protected despite contributions from people with poor command of the English language.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explicit &lt;code&gt;this&lt;/code&gt;: &lt;strong&gt;Never&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Unless a field is receiving its value from a method or constructor parameter, in which case the parameter &lt;em&gt;&lt;strong&gt;must&lt;/strong&gt;&lt;/em&gt; have the exact same name as the field, and subsequently &lt;code&gt;this&lt;/code&gt; is necessary in order to refer to the field.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use of &lt;code&gt;var&lt;/code&gt;: &lt;strong&gt;Rarely&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Only for non-trivial types, and only when the type is obvious.&lt;/li&gt;
&lt;li&gt;Of course, you might ask, when is the type obvious? The answer is simple: the type is obvious only when the name of the type is present on the right side of the assignment.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Naming of files and classes: &lt;strong&gt;One class per file, exact same name&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;In Java this is standard, but there is one exception:
&lt;ul&gt;
&lt;li&gt;Java makes it impossible to access constructor parameters from field initializers. The solution to this is to pass the constructor parameter to the superclass, so that it can be stored in a protected member, so that it can be accessed by the field initializers of descendants. Quite often, we invent superclasses for no reason other than to be able to do just that. In these cases, it is okay (preferable even) if the superclass is package-private, and declared in the same file as the descendant.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In C# one class per file with exact same name is not standard, so it is worth stating. Again, there are a few exceptions:
&lt;ul&gt;
&lt;li&gt;It is okay to declare all the classes that make up a small class hierarchy in a single file, as long as the file is named after the base class of the hierarchy.&lt;/li&gt;
&lt;li&gt;It is also okay to declare trivial types like enums and delegates in the same file as the class that they conceptually belong to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Namespace imports (C# only): &lt;strong&gt;Inside namespace declarations&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Most people import their namespaces outside of their namespace declarations. This style guide mandates the opposite: namespaces &lt;em&gt;&lt;strong&gt;must&lt;/strong&gt;&lt;/em&gt; be imported &lt;em&gt;&lt;strong&gt;inside&lt;/strong&gt;&lt;/em&gt; namespace declarations. In other words, first we open our namespace, then we declare our imports, then we declare our class.&lt;/li&gt;
&lt;li&gt;This is in accordance with the &lt;em&gt;Principle of Smallest Scope&lt;/em&gt;, i.e. any given thing must have the smallest scope that it can possibly have.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Namespace Aliases (C# only)
&lt;ul&gt;
&lt;li&gt;For namespaces defined in the solution: &lt;strong&gt;Never&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;If you have defined a namespace in your solution, then you should never need to alias it. If it conflicts with a namespace defined outside your solution, then you should alias the external namespace.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For namespaces defined outside of the solution: &lt;strong&gt;Almost always&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;I have the habit of aliasing all external namespaces so as to make it evident exactly where each type is coming from. So for example, I never do &lt;code&gt;using System.Text&lt;/code&gt; and reference &lt;code&gt;Encoding.UTF8&lt;/code&gt;; I always do &lt;code&gt;using SysText = System.Text&lt;/code&gt; and then I reference &lt;code&gt;SysText.Encoding.UTF8&lt;/code&gt;. I make an exception for namespaces &lt;code&gt;System&lt;/code&gt; and &lt;code&gt;System.Collections.Generic&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Non-ANSI characters: &lt;strong&gt;Via Unicode Escape Sequences&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;That&amp;rsquo;s because every once in a while some tool will garble non-ANSI characters by accident, and a) that&amp;rsquo;s the kind of error that you will usually have no tests for, while b) even if there is a test, the non-ANSI character in the test might be also garbled, causing the test to pass, while it should fail.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Miscellaneous
&lt;ul&gt;
&lt;li&gt;If something &lt;em&gt;&lt;strong&gt;can&lt;/strong&gt;&lt;/em&gt; be private, it &lt;em&gt;&lt;strong&gt;must&lt;/strong&gt;&lt;/em&gt; be private.&lt;/li&gt;
&lt;li&gt;If something &lt;em&gt;&lt;strong&gt;can&lt;/strong&gt;&lt;/em&gt; be final/readonly, it &lt;em&gt;&lt;strong&gt;must&lt;/strong&gt;&lt;/em&gt; be final/readonly.&lt;/li&gt;
&lt;li&gt;If something &lt;em&gt;&lt;strong&gt;can&lt;/strong&gt;&lt;/em&gt; be final/sealed, it &lt;em&gt;&lt;strong&gt;must&lt;/strong&gt;&lt;/em&gt; be final/sealed.&lt;/li&gt;
&lt;li&gt;If something &lt;em&gt;&lt;strong&gt;can&lt;/strong&gt;&lt;/em&gt; be of a less-derived type, it &lt;em&gt;&lt;strong&gt;must&lt;/strong&gt;&lt;/em&gt; be of a less-derived type
&lt;ul&gt;
&lt;li&gt;Unless you want to document something important; for example, you may want to use a &lt;code&gt;List&lt;/code&gt; instead of a &lt;code&gt;Collection&lt;/code&gt; to indicate that order matters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If a string literal &lt;em&gt;&lt;strong&gt;can&lt;/strong&gt;&lt;/em&gt; be replaced with &lt;code&gt;nameof&lt;/code&gt;, it &lt;em&gt;&lt;strong&gt;must&lt;/strong&gt;&lt;/em&gt; be replaced with &lt;code&gt;nameof&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If a pair of parentheses &lt;em&gt;&lt;strong&gt;can&lt;/strong&gt;&lt;/em&gt; be omitted, it &lt;em&gt;&lt;strong&gt;must&lt;/strong&gt;&lt;/em&gt; be omitted.
&lt;ul&gt;
&lt;li&gt;Unless operator precedence is unclear and requires clarification.&lt;/li&gt;
&lt;li&gt;Note that this means that the expression after the &lt;code&gt;return&lt;/code&gt; keyword must never be parenthesized.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Overriding methods must not have documentation comments. The documentation comment of an override is the documentation comment of the method it overrides.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>GitHub project: mikenakis-agentclaire</title>
        <link>//localhost:1313/p/github-project-mikenakis-agentclaire/</link>
        <pubDate>Wed, 04 Apr 2018 20:14:46 +0000</pubDate>
        
        <guid>//localhost:1313/p/github-project-mikenakis-agentclaire/</guid>
        <description>&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/github-project-mikenakis-agentclaire/media/mikenakis-agentclaire.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;The mikenakis-agentclaire logo&lt;br&gt;&lt;br&gt;based on a piece of clip art found on the interwebz.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;GitHub project: AgentClaire&lt;/p&gt;
&lt;p&gt;A Java Agent to end all Java Agents.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This project has been retired. The github link does not even work anymore.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This page only serves historical documentation purposes.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The Problem
&lt;/h3&gt;&lt;p&gt;Java Agents are a feature of the Java Virtual Machine which is used for transforming the bytecode of classes as they are loaded and before they are used. We register a Java Agent with the JVM at startup, and each time a class is loaded, the JVM will invoke our java agent to give it a chance to transform the class. The JVM supplies the Java Agent with each class to be transformed in the form of an array of bytes, and expects the Java Agent to return the transformed class also as an array of bytes.&lt;/p&gt;
&lt;p&gt;This means that the Java Agent has to parse the array of bytes in order to build some kind of object graph representing the class, manipulate the object graph to apply the intended transformation, and then re-pack the object graph into another array of bytes before returning it to the JVM.&lt;/p&gt;
&lt;p&gt;Furthermore, the class being transformed may reference other classes, which the Java Agent may need to examine in order to perform the intended transformation, so for each class being transformed the java agent may need to load multiple arrays of bytes from the filesystem, and do more parsing of bytes and building of object graphs in order to make sense out of them.&lt;/p&gt;
&lt;p&gt;Now, a program may be started with multiple Java Agents attached to it, so all this parsing and repacking will be repeated by each Java Agent.&lt;/p&gt;
&lt;p&gt;This represents an insane amount of overhead.&lt;/p&gt;
&lt;p&gt;Most people do not mind this overhead, because it is only incurred during application startup, and for some reason it has come to be that the entire computing industry today is resigned to slow-as-molasses startup times that are simply to be endured as a fact of life.&lt;/p&gt;
&lt;p&gt;I beg to differ. I like things to be snappy, especially at startup, because as a programmer, waiting for the application that I am developing to start up tends to represent a considerable portion of my working day.&lt;/p&gt;
&lt;p&gt;Also, the same bytecode transformations are usually performed when running tests, and I want my tests to be running as quickly as possible, without unnecessary overhead.&lt;/p&gt;
&lt;h3 id=&#34;the-solution&#34;&gt;The Solution
&lt;/h3&gt;&lt;p&gt;AgentClaire is a Java Agent that can be used to simplify and optimize the process of examining and transforming bytecode during application startup.&lt;/p&gt;
&lt;p&gt;With AgentClaire, instead of writing Java Agents, you write &lt;em&gt;AgentClaire Interceptors&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The difference between a Java Agent and an AgentClaire Interceptor is that instead of receiving an array of bytes and returning an array of bytes, the interceptor is given an instance of &lt;code&gt;ByteCodeType&lt;/code&gt; (see the &lt;code&gt;mikenakis-bytecode&lt;/code&gt; project) which has been constructed by parsing the original array of bytes just once.&lt;/p&gt;
&lt;p&gt;Then, once each AgentClaire Interceptor has had a chance to modify the &lt;code&gt;ByteCodeType&lt;/code&gt;, AgentClaire will take care of repacking it just once into an array of bytes before returning it to the JVM&lt;/p&gt;
&lt;p&gt;This way, a considerable amount of time is saved during startup by parsing and repacking bytes only once per class, instead of once per class per java agent.&lt;/p&gt;
&lt;p&gt;Furthermore, the &lt;code&gt;Umbilical&lt;/code&gt; interface that is provided by AgentClaire contains a &lt;code&gt;ByteCodeService&lt;/code&gt; service which can be used to obtain an instance of &lt;code&gt;ByteCodeType&lt;/code&gt; given a class name and a &lt;code&gt;ClassLoader&lt;/code&gt;. The &lt;code&gt;ByteCodeService&lt;/code&gt; achieves this either by looking up the &lt;code&gt;ByteCodeType&lt;/code&gt; from a cache of all those that have already been loaded, or by loading the class bytes and parsing them to construct a new instance of &lt;code&gt;ByteCodeType&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This way, an interceptor can very easily and very efficiently obtain classes that are referenced by the class being transformed. Furthermore, the &lt;code&gt;ByteCodeService&lt;/code&gt; is also available to the main program, so it can have read-only access to bytecode information about its own classes.  This way, not a single class ever needs to be parsed from bytes more than once throughout the lifetime of the JVM.&lt;/p&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage
&lt;/h3&gt;&lt;p&gt;AgentClaire is started via the &lt;code&gt;-javaagent&lt;/code&gt; option of the JVM.  The option looks like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-javaagent:&amp;lt;AgentClaire-jar&amp;gt;=&amp;lt;interceptor-jar&amp;gt;[&amp;lt;another-interceptor-jar&amp;gt;...]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will cause the JVM to load AgentClaire before the main program runs, and AgentClaire will then load each of the specified interceptor jars. Each interceptor jar must contain a &lt;code&gt;MANIFEST.MF&lt;/code&gt; with an &lt;code&gt;AgentClaire-Interceptor-Class&lt;/code&gt; entry that gives the fully qualified name of a class to be instantiated by AgentClaire.  (No stinkin&amp;rsquo; static entry points.)&lt;/p&gt;
&lt;p&gt;This class must have a constructor which accepts two parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a &lt;code&gt;Umbilical&lt;/code&gt; interface (See the &lt;code&gt;mikenakis-umbilical&lt;/code&gt; project)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an &lt;code&gt;AgentClaire&lt;/code&gt; interface (See the &lt;code&gt;mikenakis.agentclaire-main&lt;/code&gt; project.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The constructed class can use the &lt;code&gt;AgentClaire&lt;/code&gt; interface to register itself as an &lt;code&gt;Interceptor&lt;/code&gt;. Once this is done, then the interceptor&amp;rsquo;s entrypoint will be invoked for each class that is loaded by the JVM, giving the interceptor a chance to modify it.&lt;/p&gt;
&lt;p&gt;Hosted on GitHub: &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/mikenakis/mikenakis-agentclaire&#34; target=&#34;_blank&#34;
   &gt;https://github.com/mikenakis/mikenakis-agentclaire&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;license&#34;&gt;License
&lt;/h3&gt;&lt;p&gt;This creative work is explicitly published under &lt;em&gt;&lt;strong&gt;No License&lt;/strong&gt;&lt;/em&gt;. This means that I remain the exclusive copyright holder of this creative work, and you may not do anything with it other than view its source code and admire it. More information here: &lt;a 
   href=&#34;//localhost:1313/p/open-source-but-no-license/&#34;
   &gt;Open Source but No License&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you would like to do anything more with this creative work, please contact me.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Open Source but No License</title>
        <link>//localhost:1313/p/open-source-but-no-license/</link>
        <pubDate>Wed, 04 Apr 2018 05:16:09 +0000</pubDate>
        
        <guid>//localhost:1313/p/open-source-but-no-license/</guid>
        <description>&lt;p&gt;I have posted some small projects of mine on GitHub, mainly so that prospective employers can appreciate my skills. I am not quite ready to truly open source them, so I published them under &amp;ldquo;No License&amp;rdquo;.  This means that I remain the exclusive copyright holder of these creative works, and nobody else can use, copy, distribute, or modify them in any way, shape or form. More information here: &lt;a class=&#34;external&#34; 
   href=&#34;https://choosealicense.com/no-permission/&#34; target=&#34;_blank&#34;
   &gt;choosealicense.com - &amp;ldquo;No License&amp;rdquo;&lt;/a&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://choosealicense.com/no-permission/&#34; target=&#34;_blank&#34;
   &gt;https://choosealicense.com/no-permission/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Pretty much the only thing one can legally do with these creative works is view their source code and admire it.&lt;/p&gt;
&lt;p&gt;GitHub says that one can also make a copy of my projects, (called &lt;em&gt;fork&lt;/em&gt; in GitHub parlance,) but I am not sure what one would gain from doing that, because you cannot legally do anything with the forked code other than view it and admire it.  Even more information here: &lt;a class=&#34;external&#34; 
   href=&#34;https://opensource.stackexchange.com/q/1154/10201&#34; target=&#34;_blank&#34;
   &gt;Open Source SE - GitHub&amp;rsquo;s “forking right” and “All rights reserved” projects&lt;/a&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://opensource.stackexchange.com/q/1154/10201&#34; target=&#34;_blank&#34;
   &gt;https://opensource.stackexchange.com/q/1154/10201&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(Okay, if you compile any of my projects and run it once or twice in order to check it out, I promise I will turn a blind eye.)&lt;/p&gt;
&lt;p&gt;If you want to do anything more with any of these projects, contact me.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>What is wrong with Full Stack Development</title>
        <link>//localhost:1313/p/what-is-wrong-with-full-stack-development/</link>
        <pubDate>Sun, 01 Apr 2018 14:37:37 +0000</pubDate>
        
        <guid>//localhost:1313/p/what-is-wrong-with-full-stack-development/</guid>
        <description>&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/what-is-wrong-with-full-stack-development/media/tag-blogger.com,1999-blog-3494795920779884230.post-79094073589883987961.jpg&#34;
	width=&#34;408&#34;
	height=&#34;639&#34;
	srcset=&#34;//localhost:1313/p/what-is-wrong-with-full-stack-development/media/tag-blogger.com,1999-blog-3494795920779884230.post-79094073589883987961_hu_755c7da92bba20ac.jpg 480w, //localhost:1313/p/what-is-wrong-with-full-stack-development/media/tag-blogger.com,1999-blog-3494795920779884230.post-79094073589883987961_hu_ac4b783d13bec49.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;63&#34;
		data-flex-basis=&#34;153px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Inntel Hotel at Amsterdam, Zaandam&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What is full-stack development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Why is full-stack development necessary today&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is wrong with full-stack development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Conclusion&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Useful pre-reading:
&lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&#34;what-is-full-stack-development&#34;&gt;What is full-stack development
&lt;/h4&gt;&lt;p&gt;The predominant web application development model today requires splitting
application logic in two parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The front-end, running on the browser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The back-end, running on the server.&lt;/p&gt;
&lt;p&gt;The front-end is typically written in JavaScript, while the back-end is
typically written in Java, Scala, C#, or some other programming language. The
two ends invariably communicate with each other via REST. The choice of
JavaScript and REST is not due to any technical merit inherent in these
technologies, (there is none,) but purely due to historical accident; see
&lt;a 
   href=&#34;//localhost:1313/p/the-wild-wild-web/&#34;
   &gt;The Wild, Wild Web&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A web application developer can either focus on one part of the stack, or work
on both parts. Due to reasons that will be explained further down, more often
than not, web developers are asked to work on both parts simultaneously. When
this happens, it is known as full-stack development.&lt;/p&gt;
&lt;p&gt;For the purposes of this paper, we will call full-stack development not just
this mode of work, but also this architectural style as a whole: full-stack
development is when application logic must be written both on the server and
on the client.&lt;/p&gt;
&lt;p&gt;Full-Stack Development is a paradox, since it suggests a way of work which is
contrary to what common sense dictates. Common sense calls for specialists
each working on their own area of specialization, so one would expect to see
different developers focusing on different layers of the stack, and nobody
ever attempting something as preposterous as working on all layers
simultaneously. However, there is a technological hurdle which renders this
necessary today.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;why-is-full-stack-development-necessary-today&#34;&gt;Why is full-stack development necessary today
&lt;/h4&gt;&lt;p&gt;Normally, (outside of web application development,) in a system that consists
of multiple layers, only one of the layers tends to be application-specific,
while all other layers tend to be general purpose infrastructure layers that
are agnostic of any application that might put them to use. Under such an
arrangement, the functionality offered by each layer is dictated by what makes
sense for that layer to be doing, so the work to be done at each layer tends
to be rather self-contained and straightforward. In this scenario, each
specialist can indeed work on the layer that they specialize in.&lt;/p&gt;
&lt;p&gt;However, in web development we have a server, and we have a client, and so far
we have been unable to find a solution that would allow us to confine all of
our application logic to only one of them. (There have been some attempts in
that direction, but they were only moderately successful, and virtually none
of them survived the transition from monolithic architectures to microservices
architectures.) As a result, in modern web applications, both layers are
application-specific.&lt;/p&gt;
&lt;p&gt;In the early days people did try to apply specialization and division of labor
to web application development, and they found that when all the layers are
application-specific, collaboration between teams working on different layers
suffers, resulting in low productivity. There are too many details that have
to be agreed upon by people working on different layers; too much waiting for
the guys working on the layer below to finish their part before the guys
working on layer above can do their job; too much disagreement as to whose
fault it is when the system is not working as expected; in general, too much
back and forth, too much friction.&lt;/p&gt;
&lt;p&gt;For this reason, full-stack development was invented: instead of dividing the
workforce horizontally, it ends up being less inefficient to divide them
vertically: when each developer works on a different feature of the product
from top to bottom, they do not have to interact too intensively with other
developers, and this represents a gain which seems to offset the loss of not
having specialists working on their respective areas of specialization.&lt;/p&gt;
&lt;h4 id=&#34;what-is-wrong-with-full-stack-development&#34;&gt;What is wrong with full-stack development
&lt;/h4&gt;&lt;p&gt;In brief, full-stack development has the following disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The front-end:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Has limited capabilities.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Is confined within the sand-boxed execution environment of the browser.&lt;/li&gt;
&lt;li&gt;Admittedly, browsers today are pretty feature-rich, (actually,
monstrously so,) but still, you are writing code which is running out
there, on browsers, and is therefore out of your control, instead of
here, on the server, where you do have control.&lt;/li&gt;
&lt;li&gt;So, there are always things that you would like to accomplish, but you
cannot on the client, so you have to suffer the additional bureaucracy
of having the client communicate what you are trying to accomplish to
the server, having the server do it for you, and receiving the results
back on the client. That?s an awful lot of work for something as simple
as, say, obtaining the current date and time regardless of client
configuration or misconfiguration.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Suffers from incidental complexity.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Peculiarities of the browser environment such as URLs, HTML, the DOM,
HTTP, REST, Ajax, etc.&lt;/li&gt;
&lt;li&gt;Cross-browser incompatibilities and cross-browser-version
incompatibilities.&lt;/li&gt;
&lt;li&gt;Security hazards.
&lt;ul&gt;
&lt;li&gt;Code on the client must not only accomplish application goals, but it
must do so while avoiding various commonly known and not-so-commonly
known security pitfalls.&lt;/li&gt;
&lt;li&gt;Each time a new security hazard is discovered by the security
community, vast amounts of application code must be meticulously
audited and painstakingly fixed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Must be re-written on each targeted format (web, mobile, desktop.)&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;When targeting a new format besides the web (e.g. desktop, mobile) we
have to re-engineer not only the presentation markup, but also all of
the application logic which is inextricably mangled with it.&lt;/li&gt;
&lt;li&gt;This necessitates the creation and maintenance of multiple separate code
bases that largely duplicate the functionality of each other.&lt;/li&gt;
&lt;li&gt;These code bases are liable to diverge, thus causing user workflows and
overall user experience to unwantedly differ across formats.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Is usually written in a scripting language.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;The code is error-prone due to scripting languages being untyped.&lt;/li&gt;
&lt;li&gt;The code is hard to maintain due to untyped languages being impervious
to refactoring.&lt;/li&gt;
&lt;li&gt;The code is messy due to scripting languages invariably being inferior
to real programming languages.&lt;/li&gt;
&lt;li&gt;The code is transmitted in source code form to the browser, thus
exposing potentially sensitive intellectual property.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Is usually written in JavaScript in particular.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript was originally intended for no more than a few, tiny, and
isolated snippets of code per HTML page. The haphazardness of the
language design reflects this intention. However, modern web
applications tend to contain tens of thousands of lines of
application-specific JavaScript. That is an awful lot of code in a
language which is defective by design.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Excludes artists.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Artists are prevented from actively participating in the creation and
maintenance of web pages, because HTML is inextricably mangled with
JavaScript, so they cannot touch it.&lt;/li&gt;
&lt;li&gt;Thus, artists are resigned to creating mock-ups showing how they want
web pages to look like, and programmers are then tasked with making the
web pages look like the mockups. (As if the programmers did not already
have enough in their hands.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The back-end:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Is inextricably tied to REST&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;This is because REST is impervious to abstraction.&lt;/li&gt;
&lt;li&gt;REST forces reliance on binding-by-name, which undermines the coherence
of the entire system and prevents static code analysis, invariably
resulting in a big unknown chaos.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Duplicates part of the client-side application logic.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;This is necessary in order to perform validation on the server-side too,
because from a security standpoint the client must always be considered
compromised.&lt;/li&gt;
&lt;li&gt;This translates to additional development and maintenance cost.&lt;/li&gt;
&lt;li&gt;Inevitable discrepancies between the validation done on the client and
the validation done on the server are a continuous source of bugs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The application as a whole:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Is split in two parts.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Usually having each part written in a different programming language.&lt;/li&gt;
&lt;li&gt;Having &lt;em&gt;The Internet&lt;/em&gt; interjected between the two parts.&lt;/li&gt;
&lt;li&gt;Having the point of split dictated not by business considerations, but
by technological limitations instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mixes application with presentation.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;A fundamental principle of graphical user interface application
development is that application logic should be kept completely separate
from presentation logic. This principle warns against inadvertently
allowing application logic to bleed into the presentation layer;
however, with full-stack development we have application logic not just
&lt;em&gt;bleeding&lt;/em&gt; to the presentation layer, but actually
&lt;em&gt;embarking on a massive deliberate large-scale exodus&lt;/em&gt; to the
presentation layer.&lt;/li&gt;
&lt;li&gt;One might naively think that full-stack development accomplishes
separation by keeping application logic on the server and presentation
logic on the client, but this is demonstrably not so:
&lt;ul&gt;
&lt;li&gt;The server is largely reduced to a bunch of dumb REST endpoints that
perform not much more than Create, Read, Update, Delete, List (CRUDL)
operations with validation. That is not application logic; that&amp;rsquo;s
mostly just querying and updating the data store.&lt;/li&gt;
&lt;li&gt;The client not only decides how things should look, but it also
decides what options should be available to the user at any moment,
and what new options will become available to the user as a result of
user actions. Essentially, all application workflows are implemented
on the client. That&amp;rsquo;s application logic
&lt;em&gt;par excellence&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Is hard to test.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;The front-end is not functional without the back-end, so the two ends
usually have to be tested in integration, necessitating such
monstrosities as Selenium.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prevents specialization and division of labor.&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Full-stack development necessitates &lt;em&gt;The Full-stack Developer&lt;/em&gt;, who
is:
&lt;ul&gt;
&lt;li&gt;a front-end programmer,&lt;/li&gt;
&lt;li&gt;a back-end programmer,&lt;/li&gt;
&lt;li&gt;a network programmer,&lt;/li&gt;
&lt;li&gt;a security expert,&lt;/li&gt;
&lt;li&gt;a user experience expert,&lt;/li&gt;
&lt;li&gt;an accessibility expert, and&lt;/li&gt;
&lt;li&gt;a graphic artist&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  ? all rolled into one, thus running the risk of being a
  *jack of all trades, master of none*.
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;By its nature, web application development requires systems that consist of
multiple layers; the current state of affairs is such that
application-specific code must be running on each of these layers, and this is
called full-stack development. However, as I have shown, full-stack
development has a list of disadvantages which is rather extensive, and each of
these disadvantages is rather severe.&lt;/p&gt;
&lt;p&gt;Essentially, we are suffering the consequences of a technological limitation:
we currently have no means of confining all application logic to the server,
so we have to be placing application logic on the client too, so we have no
option but to be engaging in full-stack development.&lt;/p&gt;
&lt;p&gt;Technological limitations require technological solutions, but companies with
commercial goals do not usually take it upon themselves to solve the world&amp;rsquo;s
technological problems. Instead, they tend to make do with the existing
problems, providing non-technological workarounds to them, such as throwing
more manpower into the development effort. This might make sense for each
individual company, but from a global perspective, we have collectively been
&lt;em&gt;too busy mopping the floor to turn off the faucet.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A solution that would confine all application logic to the server and thus
eliminate full-stack development has the potential of being very beneficial to
the industry as a whole.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/images/images/blog.michael.gr/content/post/generated/2021/2021-12-full-stack-development/images/grumpy-cat-full-stack-development-i-hate-it.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;</description>
        </item>
        <item>
        <title>Douglas Crockford talking nonsense</title>
        <link>//localhost:1313/p/douglas-crockford-talking-nonsense/</link>
        <pubDate>Sat, 24 Mar 2018 14:30:34 +0000</pubDate>
        
        <guid>//localhost:1313/p/douglas-crockford-talking-nonsense/</guid>
        <description>&lt;iframe allowfullscreen=&#34;&#34; class=&#34;YOUTUBE-iframe-video&#34; data-thumbnail-src=&#34;https://i.ytimg.com/vi/NPB34lDZj3E/0.jpg&#34; frameborder=&#34;0&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/NPB34lDZj3E?t=1663&amp;amp;feature=player_embedded&#34; width=&#34;640&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Here is Douglas Crockford,&lt;/p&gt;
&lt;p&gt;talking patent nonsense about Java and about exceptions,&lt;/p&gt;
&lt;p&gt;neither of which he understands, obviously.&lt;/p&gt;
&lt;p&gt;Start playing at &lt;strong&gt;27&amp;rsquo;:42&amp;rsquo;&amp;rsquo;&lt;/strong&gt;. The insanity lasts until &lt;strong&gt;32&amp;rsquo;:00&amp;rsquo;&amp;rsquo;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy responsibly.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>On Code Craftsmanship</title>
        <link>//localhost:1313/p/on-code-craftsmanship/</link>
        <pubDate>Mon, 05 Feb 2018 15:55:42 +0000</pubDate>
        
        <guid>//localhost:1313/p/on-code-craftsmanship/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-code-craftsmanship/media/craftsmanship-guitar.jpg&#34;
	width=&#34;2048&#34;
	height=&#34;1365&#34;
	srcset=&#34;//localhost:1313/p/on-code-craftsmanship/media/craftsmanship-guitar_hu_8f8fb8bbba0d0d17.jpg 480w, //localhost:1313/p/on-code-craftsmanship/media/craftsmanship-guitar_hu_14d10496d9352bee.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;I will try to make a list of items here, but I could probably write a book on this.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;assert-everything&#34;&gt;Assert everything
&lt;/h3&gt;&lt;p&gt;Assertions take care of white-box testing your code, so that automated software testing can be confined to the realm of strictly black-box testing, as it should. Assertions do not execute on release builds / production runs, so they essentially cost nothing. This means that you can go wild with them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go ahead and assert that your array is sorted before performing binary search on it.&lt;/li&gt;
&lt;li&gt;Verify that your binary search worked correctly by comparing its result against the result of a linear search for the same item.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, the time complexity of these assertions is far greater than the time complexity of the operation that they guard, and this is perfectly fine, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remember, assertions do not execute on release runs, so they cost nothing.&lt;/li&gt;
&lt;li&gt;On test runs, you are not supposed to be using large amounts of data anyway. When N is small, then O(N) and even O(N&lt;sup&gt;2&lt;/sup&gt;) are not very different from O(log&lt;sub&gt;2&lt;/sub&gt;(N)), which means that even when assertions do execute, they do not matter.&lt;/li&gt;
&lt;li&gt;To the small extent that assertions might nonetheless slow you down during development, you can see it as one more reason why you, as a developer, should have a computer which is much more powerful than the computers of mere mortals &amp;ndash;er, I mean, users.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I look at code, I don&amp;rsquo;t ask myself &amp;ldquo;should I assert that?&amp;rdquo; Instead, I ask myself &amp;ldquo;is there anything that I forgot to assert?&amp;rdquo; The idea is to assert everything that could possibly be asserted, leave nothing assertable unasserted. I call this &lt;em&gt;The Maximalistic Approach to Error Checking&lt;/em&gt;, in contrast to the predominant minimalistic approach, where programmers decide on a case by case basis whether to assert something or not, based on completely-oblivious-of-Murphy&amp;rsquo;s-law assumptions about how likely it is to go wrong, inappropriately mixed with misguided performance considerations.&lt;/p&gt;
&lt;p&gt;For more information, see &lt;a 
   href=&#34;//localhost:1313/p/assertions-and-testing/&#34;
   &gt;Assertions and Testing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also note that the attention horizon of code is the function, so if function &lt;code&gt;f1()&lt;/code&gt; asserts some condition and then invokes function &lt;code&gt;f2()&lt;/code&gt;, it is perfectly fine for &lt;code&gt;f2()&lt;/code&gt; to also assert the same condition. In other words, whether something has already been asserted or not by some other function is irrelevant: each function must assert every condition that pertains to it.&lt;/p&gt;
&lt;h3 id=&#34;do-black-box-testing-avoid-white-box-testing&#34;&gt;Do black-box testing, avoid white-box testing
&lt;/h3&gt;&lt;p&gt;Heed the advice that says &lt;em&gt;test against the interface, not the implementation&lt;/em&gt;. Unit Testing is testing against the implementation, so despite the entire software industry&amp;rsquo;s addiction to it, it should be avoided. Incidentally, this means that mocking, despite being an admirably nifty trick, should never be used: if you are using mocks then you are doing white-box testing, so you are doing it wrong.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more on why Unit Testing is white-box testing, and why white-box testing is bad, read this: &lt;a 
   href=&#34;//localhost:1313/p/white-box-vs-black-box-testing/&#34;
   &gt;White Box vs. Black-Box Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For more on why mocks in particular are especially bad, read this: &lt;a 
   href=&#34;//localhost:1313/p/if-you-are-using-mock-objects-you-are-doing-it-wrong/&#34;
   &gt;If you are using mock objects you are doing it wrong&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For what to use instead of mocks, read this: &lt;a 
   href=&#34;//localhost:1313/p/testing-with-fakes-instead-of-mocks/&#34;
   &gt;Testing with Fakes instead of Mocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For what to do instead of unit testing, read this: &lt;a 
   href=&#34;//localhost:1313/p/incremental-integration-testing/&#34;
   &gt;Incremental Integration Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If for some reason you &lt;em&gt;must&lt;/em&gt; do white-box testing, then you can at least avoid having to do it in code; read this: &lt;a 
   href=&#34;//localhost:1313/p/audit-testing/&#34;
   &gt;Audit Testing&lt;/a&gt; and this: &lt;a 
   href=&#34;//localhost:1313/p/collaboration-monitoring/&#34;
   &gt;Collaboration Monitoring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;avoid-non-determinism-in-tests&#34;&gt;Avoid non-determinism in tests
&lt;/h3&gt;&lt;p&gt;Testing must be completely free from non-determinism under all circumstances. Since testing code exercises production code, this means that production code must also be free from non-determinism, or at the very least any source of non-determinism in production code must be replaceable during testing with a fake which is completely deterministic. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Never rely on the garbage-collector doing anything other than reclaiming memory; specifically, never rely on any cleanup operations being initiated by the garbage-collector. Perform all cleanup explicitly. For more information, see &lt;a 
   href=&#34;//localhost:1313/p/object-lifetime-awareness/&#34;
   &gt;Object Lifetime Awareness&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Never allow any external factors such as file creation times, IP addresses resolved from DNS, etc. to enter into the tests. Fake your file-system; fake The Internet if necessary.&lt;/li&gt;
&lt;li&gt;Never use wall-clock time; always fake the clock, making it start from some arbitrary fixed origin and incrementing by a fixed amount each time it is queried.&lt;/li&gt;
&lt;li&gt;Never use random numbers; if randomness is necessary in some scenario, then fake it using a pseudo-random number generator seeded with a known fixed value. This includes all constructs that utilize randomness, for example GUIDs/UUIDs.&lt;/li&gt;
&lt;li&gt;Never allow any concurrency during testing; all components must be tested while running strictly single-threaded, or at the very least multi-threaded but in lock-step fashion.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;minimize-state-maximize-immutability&#34;&gt;Minimize state, maximize immutability
&lt;/h3&gt;&lt;p&gt;Design so that as much code as possible is dealing with data that is immutable. Re-examine every single class which contains mutable members, and many chances are you will find that it could be replaced with an immutable class. Even if not, you might discover that many of its members could be immutable.&lt;/p&gt;
&lt;p&gt;Eschew frameworks, technologies, and techniques that prevent or hinder immutability. For example, if you are using some dependency-injection (DI) facility that provides you with auto-wiring, use constructor injection &lt;strong&gt;only,&lt;/strong&gt; so that you can always store in final/readonly members. If your DI facility does not support constructor injection, throw away everything and start from scratch with one that does.&lt;/p&gt;
&lt;p&gt;Note, however, that immutability is not important in function-local variables. There is absolutely nothing wrong with function-local mutation if it serves the slightest purpose. Which brings us to the next point:&lt;/p&gt;
&lt;h3 id=&#34;do-overwrite-function-parameters&#34;&gt;Do overwrite function parameters
&lt;/h3&gt;&lt;p&gt;There exists a widespread cargo cult habit among programmers, of never overwriting the value of a parameter to a function within the function. This habit is so unquestioned that it enjoys &amp;ldquo;best practice&amp;rdquo; status, despite being completely misguided. Some languages (e.g. Scala) even prohibit it, which is deplorable. Go ahead and overwrite function parameters (if your language allows it) when the original parameter value should not be used in the remainder of the function. In doing so you are minimizing the number of variables that are in scope, and preventing accidental use of the original value.&lt;/p&gt;
&lt;p&gt;The historical origins of the practice of never overwriting function parameters are actually quite funny: some early versions of Fortran (the first programming language) used to pass everything by reference, including constants. So, if you had function F(X) which was invoked with 3 for X, and within F(X) you assigned 5 to x, then from that moment on the constant 3 would actually have the value 5 in your entire program. As a result, early computer scientists decreed that function parameters should never be reassigned. Fortran was soon fixed to correct this problem, but the advise kept being passed from generation to generation of programmers, who have been accepting it without rethinking it. This is cargo cult programming at its finest.&lt;/p&gt;
&lt;h3 id=&#34;avoid-hail-mary-local-variable-initialization&#34;&gt;Avoid &lt;em&gt;Hail-Mary Local Variable Initialization&lt;/em&gt;
&lt;/h3&gt;&lt;p&gt;Contrary to what many people falsely think of as &amp;ldquo;best practice&amp;rdquo; and &amp;ldquo;common knowledge&amp;rdquo;, you should never initialize any variable before you have a meaningful value to assign to it.  For more information, see &lt;a 
   href=&#34;//localhost:1313/p/hail-mary-local-variable-initialization/&#34;
   &gt;Hail-Mary Local Variable Initialization&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;avoid-b-to-a-style-conversions-use-a-from-b-style-instead&#34;&gt;Avoid b-to-a style conversions, use a-from-b style instead
&lt;/h3&gt;&lt;p&gt;When I see &lt;code&gt;A = AfromB( B )&lt;/code&gt; I can immediately tell that it looks correct, since A is on the side of A and B is on the side of B. However, when I see &lt;code&gt;B = AtoB( A )&lt;/code&gt; I have to stare at it for a little while longer before I can tell whether it is correct or not. Of course, this is a trivial example: in real-world situations, the identifiers, as well as the call chain, could be much longer and much more complicated. This is related to Joel Spolsky&amp;rsquo;s notion that &lt;a class=&#34;external&#34; 
   href=&#34;https://www.joelonsoftware.com/2005/05/11/making-wrong-code-look-wrong/&#34; target=&#34;_blank&#34;
   &gt;wrong code should look wrong&lt;/a&gt;, and it is especially important since the entire industry has traditionally been doing it in precisely the wrong way with B-to-A style conversions.&lt;/p&gt;
&lt;h3 id=&#34;avoid-yoda-conditionals&#34;&gt;Avoid &lt;em&gt;Yoda conditionals&lt;/em&gt;
&lt;/h3&gt;&lt;p&gt;This is the practice of reversing the terms around the equality operator when one of the terms is a constant. You might have seen it the following forms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if( 5 == a )&lt;/code&gt; instead of the normal &lt;code&gt;if ( a == 5 )&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if( &amp;quot;x&amp;quot;.equals( b ) )&lt;/code&gt; instead of the normal &lt;code&gt;if( b.equals( &amp;quot;x&amp;quot; ) )&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Don&amp;rsquo;t do this. The Principle of Least Surprise is not just violated by this construct, it is gang-raped. Plus, in doing this you are most probably engaging in the cardinal sin of &lt;em&gt;&lt;strong&gt;silent failure&lt;/strong&gt;&lt;/em&gt;. Here are the reasons often cited for using Yoda conditionals, and their rebuttals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Alleged reason #1&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Statement: It will catch accidental use of the assignment operator where the equality operator was intended.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rebuttal: Such accidental use should be impossible because your compiler or your IDE should be issuing a warning if you try to do this. If you are not receiving a warning, then you have other, much bigger problems in need of solving, i.e. using the wrong programming language, using the wrong IDE, or trying to write code without first having figured out how to enable all warnings.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alleged reason #2&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Statement: It works even if the variable accidentally happens to be null.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rebuttal: No, it does not work; it silently fails. If you follow &lt;em&gt;offensive programming&lt;/em&gt;, the definition of &amp;ldquo;it works&amp;rdquo; is that &lt;em&gt;&lt;strong&gt;it produces correct results when given valid input, and it decisively fails when given invalid input.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So, there are two possibilities: either the variable may legitimately be  null, or it may not.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if the variable may legitimately be null, then make it evident by explicitly checking against null.&lt;/li&gt;
&lt;li&gt;if the variable may not legitimately be null, then write the code so that it will &lt;em&gt;&lt;strong&gt;not fail to fail&lt;/strong&gt;&lt;/em&gt; if the variable ever turns out to be null.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;avoid-unnecessary-braces&#34;&gt;Avoid unnecessary braces
&lt;/h3&gt;&lt;p&gt;Doing so keeps the code more compact, making more statements fit within the screen. The cargo-cult programming convention of enclosing even single-statement blocks within curly braces allegedly avoids bugs caused by trying to add a second statement to the block while forgetting to introduce curly braces.&lt;/p&gt;
&lt;p&gt;This has actually happened to me once, and the programmer who introduced the bug in my code did not even apologize, because he considered it my fault for not having provided the curly braces for him to insert his second statement in.&lt;/p&gt;
&lt;p&gt;The fact of the matter is that a decent IDE will point out such a mistake as a formatting violation, so this is not a problem today. Of course, in order to enable the IDE to point out formatting violations you must be keeping a consistent indentation style everywhere, right?   &lt;em&gt;&lt;strong&gt;Right?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;avoid-egyptian-style-curly-braces&#34;&gt;Avoid Egyptian-style curly braces
&lt;/h3&gt;&lt;p&gt;People who use Egyptian-style curly braces essentially treat them as noise. I would very much favor a programming language where nesting is based on indentation alone, thus requiring no curly braces; unfortunately, the only such language that I know of is Python, which is a scripting language, and therefore out of the question; so, for as long as we are using programming languages that require curly braces, we have to pay attention to them and we cannot just treat them as noise; therefore, absolutely all curly braces must absolutely always be perfectly aligned; period, end of story, discussion is locked and comments are closed.&lt;/p&gt;
&lt;h3 id=&#34;minimize-flow-control-statements&#34;&gt;Minimize flow control statements
&lt;/h3&gt;&lt;p&gt;Especially the &lt;code&gt;if&lt;/code&gt; statement. If there is any opportunity to structure a piece of code so as to eliminate an &lt;code&gt;if&lt;/code&gt; statement, the opportunity should be pursued &lt;em&gt;tenaciously&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Of course, by this I do not mean replacing &lt;code&gt;if&lt;/code&gt; statements with the conditional operator ( &lt;code&gt;a ? x : y&lt;/code&gt; ); the conditional operator is nice, because it makes code more expressive and compact, but it is equivalent to an &lt;code&gt;if&lt;/code&gt; statement, so it too should be eliminated when possible.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement can be avoided in many cases with the use of calculations, with lookup tables, with the judicious application of inheritance and polymorphism, etc.&lt;/p&gt;
&lt;h3 id=&#34;favor-one-and-only-one-way-of-doing-any-given-thing&#34;&gt;Favor one and only one way of doing any given thing
&lt;/h3&gt;&lt;p&gt;If you ask a hundred programmers to write some code that accomplishes a certain simple task, you will get a hundred different solutions. These solutions will reflect different ways of thinking, which is inevitable, but they will also reflect different coding conventions, which is entirely unnecessary. Establish conventions that minimize unnecessary differences. One easy way to achieve this is to stipulate that any construct which is optional must be omitted. For example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Disallow extra parentheses in expressions.&lt;/p&gt;
&lt;p&gt;Unfortunately, compilers by default allow superfluous parentheses without complaining. This has fostered the development of some truly bizarre habits among programmers, such as the construct &lt;code&gt;return (x);&lt;/code&gt; which is so common that some folks are under the impression that this is the correct syntax, and that &lt;code&gt;return x;&lt;/code&gt; would constitute a syntax error. Well, guess what: &lt;code&gt;return x;&lt;/code&gt; is the correct syntax, whereas &lt;code&gt;return (x);&lt;/code&gt; contains a pair of superfluous parentheses. Configure your compiler or your code analysis tool-set to disallow unnecessary parentheses, so that all code that accomplishes the same thing looks the same.&lt;/p&gt;
&lt;p&gt;If you do this, then the tooling will also complain about parentheses that you might be using elsewhere to clarify the order in which calculations are to be performed when you are unsure about the operator precedence rules of the language. Here is what I have to say about that:&lt;/p&gt;
&lt;p&gt;Your programming language has a very specific, very well documented, and rather small set of rules that govern operator precedence; these rules are fundamental, and this programming language is your bread and butter; so, learn them. Learn them all by heart, so that you are never unsure about operator precedence, so that you never need extra parentheses for clarification.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disallow optional keywords.&lt;/p&gt;
&lt;p&gt;In many languages, certain keywords are implied by default and can be omitted. Unfortunately, in virtually all example code out there, such keywords tend to always be included, which leads people to form the impression that they must be mandatory.&lt;/p&gt;
&lt;p&gt;For example, did you know that in C# every class is &lt;code&gt;internal&lt;/code&gt; by default? This means that you never have to say &lt;code&gt;internal class Foo { ... }&lt;/code&gt;, you can simply say &lt;code&gt;class Foo { ... }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Furthermore, did you know that in C# every class member is &lt;code&gt;private&lt;/code&gt; by default? This means that you never have to say &lt;code&gt;private int foo() { ... }&lt;/code&gt;, you can simply say &lt;code&gt;int foo() { ... }&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Again, it is fundamental rules of the language that govern these things, which means that every programmer should know them by heart, which in turn means that nobody should be surprised to see &lt;code&gt;int foo() { ... }&lt;/code&gt;, and nobody should be wondering what the visibility of  &lt;code&gt;foo()&lt;/code&gt; is.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Disallow the &lt;code&gt;var&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;If we were to mandate that two lines of code should look identical if they accomplish the same thing, we have two options: either always require the &lt;code&gt;var&lt;/code&gt; keyword, or completely disallow it.&lt;/p&gt;
&lt;p&gt;Always requiring the &lt;code&gt;var&lt;/code&gt; keyword is not an option, because in many cases the type cannot be inferred from the right hand side, so it must be specified. Thus, we are only left with the option of completely disallowing it, and that is the way to go.&lt;/p&gt;
&lt;p&gt;Furthermore, as I explain elsewhere, &amp;ldquo;absolutely any choice that makes code easier to read is absolutely always preferable over absolutely any choice that makes code easier to write&amp;rdquo;, and the &lt;code&gt;var&lt;/code&gt; keyword is a prime example of a choice which is easy to write but makes code harder to read, so we should not even be debating this.&lt;/p&gt;
&lt;p&gt;If you are not sure about the exact type of the right-hand side of an assignment, or if you do not want to be bothered with having to type it, is perfectly okay to begin with &lt;code&gt;var x = ...&lt;/code&gt;, and once you have written your entire statement you go back to the &lt;code&gt;var&lt;/code&gt; keyword, and ask your IDE to refactor it and replace it with the actual type.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword is only useful in type casts; I would rather say &lt;code&gt;var x = (int)y;&lt;/code&gt; than &lt;code&gt;int x = (int)y;&lt;/code&gt; however, the benefits of being able to disallow &lt;code&gt;var&lt;/code&gt; with a rule outweigh the convenience of being able to use it in type casts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;put-the-complexity-in-the-design-not-in-the-code&#34;&gt;Put the complexity in the design, not in the code
&lt;/h3&gt;&lt;p&gt;If the code does not look so simple that even an idiot can understand it, then the code is too complex. When this happens, it usually means that shortcuts were taken in the design, which had to be compensated for with overly complex code. Make the design as elaborate as necessary so that the code can be as simple as possible. Overly complex code is usually the result of violations of the &lt;em&gt;Single Responsibility Principle.&lt;/em&gt; Which brings us to the next point:&lt;/p&gt;
&lt;h3 id=&#34;adhere-to-the-single-responsibility-principle-like-your-life-depends-on-it&#34;&gt;Adhere to the Single Responsibility Principle like your life depends on it
&lt;/h3&gt;&lt;p&gt;Often, what you &lt;em&gt;think&lt;/em&gt; of as a single responsibility can in fact be further sub-divided into a number of more fundamental responsibilities. Almost all of the code that we write performs, or can be thought of as performing, some kind of transformation, involving a certain number of participants. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At the lowest level, an assignment operation transforms each bit of the destination variable into the corresponding bit of the source variable. Obviously it involves two participants: the source and the destination.&lt;/li&gt;
&lt;li&gt;At the highest level, a shopping web site transforms relational data and  user input into pixels on the user&amp;rsquo;s browser window and purchase orders in the logistics department. In this simplified view we have four participants, realistically we have many more.
&lt;ul&gt;
&lt;li&gt;Most transformations are of the simplest kind, involving only two participants, transforming one into the other. That&amp;rsquo;s great, that&amp;rsquo;s a single responsibility: convert A to B.&lt;/li&gt;
&lt;li&gt;Many transformations involve three participants, A, B and C, and they tend to be appreciably complex.
&lt;ul&gt;
&lt;li&gt;In some cases they can be simplified into successive operations, one to go from A to B and another to go from B to C, meaning that there were in fact two different responsibilities which were identified and realized as separate steps.&lt;/li&gt;
&lt;li&gt;However, quite often they cannot be simplified, as for example when we are converting A to C by consulting B. That&amp;rsquo;s a single responsibility which cannot be further broken down.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All to often, people manage to involve four or more participants in a single transformation. These tend to be grotesquely complex, and they invariably constitute violations of the single responsibility principle. It goes without saying that they must be avoided at all costs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Luckily, operations that involve more than 3 participants can always be refactored into multiple successive transformations of no more than 3 participants each, by introducing intermediate participant types if necessary. (I have never heard of this being suggested by anyone before, so this could perhaps be &lt;em&gt;The Mike Nakis Postulate for Simplification&lt;/em&gt;.)&lt;/p&gt;
&lt;h3 id=&#34;refactor-at-the-slightest-indication-that-refactoring-is-due&#34;&gt;Refactor at the slightest indication that refactoring is due
&lt;/h3&gt;&lt;p&gt;Do not allow technical debt to accumulate. Avoid the situation of being &lt;em&gt;too busy mopping the floor to turn off the faucet.&lt;/em&gt; Allow a percentage of sprints to explicitly handle nothing but technical debt elimination. Do not try to spread the task of refactoring over feature development sprints, because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The refactoring effort will not magically disappear.&lt;/li&gt;
&lt;li&gt;Focus will be diluted.&lt;/li&gt;
&lt;li&gt;Time estimations will suffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Managers who feel that every sprint must involve some feature development or else it does not look good on their report should be removed from their positions and be given jobs milking goats.&lt;/p&gt;
&lt;h3 id=&#34;strive-for-abstraction-and-generalization&#34;&gt;Strive for abstraction and generalization
&lt;/h3&gt;&lt;p&gt;The urge to abstract and generalize is often mistaken as having reusability as its sole aim, so it is often met with the YAGNI objection: &amp;ldquo;You Ain&amp;rsquo;t Gonna Need It&amp;rdquo;. The objection is useful to keep in mind so as to avoid over-engineering, but it should not be followed blindly, because abstraction and generalization have important inherent benefits, regardless of the promise of reusability.&lt;/p&gt;
&lt;p&gt;Every problem of a certain complexity and above, no matter how application-specific it might seem to be, can benefit from being divided into a specialized, application-specific part, and an abstract, general-purpose part. Strive to look for such divisions and realize them in the design.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The application-specific part will be simpler to write and to understand, because it will be free from the &lt;em&gt;incidental complexity&lt;/em&gt; represented by the general-purpose part.&lt;/li&gt;
&lt;li&gt;The general-purpose part will be simpler to write and to understand, because it will be implementing a self-contained abstraction that can be independently reasoned about.&lt;/li&gt;
&lt;li&gt;Also, the general-purpose part will be fully testable on its own, so you will have assurances that it works, regardless of how the application-specific part uses it, and regardless of how the application-specific part evolves over time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the above benefits come in addition to the potential benefit of reusability.&lt;/p&gt;
&lt;p&gt;In other words, if you can choose between the following two:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;adding 5 lines of application code, vs.&lt;/li&gt;
&lt;li&gt;adding only 2 lines of application code but a whole 10 lines of infrastructure code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;then opt for the latter, even if these 10 lines of infrastructure code are unlikely to ever be reused. Saving 3 lines of application code is worth writing an extra 10 lines of infrastructure code.&lt;/p&gt;
&lt;h3 id=&#34;use-abstraction-even-in-the-spoken-language&#34;&gt;Use abstraction even in the spoken language
&lt;/h3&gt;&lt;p&gt;People have the unfortunate tendency of using the most specific term for any given thing, rather than the most abstract term. I am not sure why people do this, perhaps it is addiction to technicality, perhaps it is trying to sound smart, but it often ends up causing miscommunication. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if your application has a settings file, and this file happens to be a json file, people are likely to form a habit of calling it &amp;ldquo;the json file&amp;rdquo; instead of &amp;ldquo;the settings file&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;if your application stores session state information in a key-value store, and that store happens to be a Redis instance, people are likely to say &amp;ldquo;send it to Redis&amp;rdquo; instead of &amp;ldquo;send it to the session state store&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Identify such unwarranted technicalisms and encourage people to switch to using the abstract terms instead. Tell them that the json file was replaced with a yaml file today, and when they all start calling it the yaml file, tell them that it is now an xml file. When they start complaining, tell them that the particular file format of the settings file is none of their business, and they should be calling it by its proper name, which is &amp;ldquo;the settings file&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;avoid-false-abstractions&#34;&gt;Avoid false abstractions
&lt;/h3&gt;&lt;p&gt;Sometimes programmers give abstract names to things that are not really abstract.  For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;so-called serialization frameworks which expose details of the underlying file format, meaning that they are only capable of serializing to and from that specific file format. A serialization framework which exposes XML-specific details should not be called a &amp;ldquo;Serialization Framework&amp;rdquo;; it should be called an &amp;ldquo;XML Serialization Framework&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;in NuGet (the predominant package manager in DotNet) a version is said to consist of a version prefix and a version suffix, however the toolset interprets the two in a very specific way: the version prefix is not really a prefix, it is the actual version, and the version suffix is not really a suffix, it is a pre-release version identifier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are examples of pretending that things are more abstract than they really are, which causes misinformation and suffering.&lt;/p&gt;
&lt;h3 id=&#34;use-domain-specific-interfaces&#34;&gt;Use domain-specific interfaces
&lt;/h3&gt;&lt;p&gt;Encapsulate third party libraries behind interfaces of your own devise, tailored to your specific application domain. Strive to make it so that any third-party library can be swapped with another product without you having to rewrite application logic.&lt;/p&gt;
&lt;p&gt;Conventional wisdom says the opposite: we have all heard arguments like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;The best code is the code you don&amp;rsquo;t write&amp;rdquo; (makes me want to invest in the business of &lt;em&gt;not writing software&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;A third-party library will be better documented than your stuff&amp;rdquo; (presumably because documentation is a skill your developers have not mastered)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;If you run into trouble with a library, you can ask for help on Stack Overflow, whereas with something you have developed in-house, you are stuck&amp;rdquo; (presumably because your developers know nothing of it, despite working with it every day.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The truth with application development is that the more you isolate the application logic from peripheral technologies, the more resilient your application logic becomes to the ever changing technological landscape, a considerable part of which is nothing but ephemeral fashions, the use of which is dictated not by actual technological merit, but by &lt;em&gt;C.V. Driven Development&lt;/em&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; instead.&lt;/p&gt;
&lt;p&gt;Incidentally, this also means one more thing:&lt;/p&gt;
&lt;h3 id=&#34;favor-libraries-over-frameworks&#34;&gt;Favor libraries over frameworks
&lt;/h3&gt;&lt;p&gt;The difference between a framework and a library is, simply speaking, that a library is something that your code invokes, whereas a framework is something that invokes your code. The problem with frameworks is that it is impossible to abstract them away behind custom interfaces; therefore, any code you write using a particular framework will forever be a prisoner of that framework: it will be extremely difficult to replace that framework with a different one without rewriting all your code.&lt;/p&gt;
&lt;h3 id=&#34;strive-for-what-is-simple-not-for-what-looks-easy&#34;&gt;Strive for what is simple, not for what looks easy
&lt;/h3&gt;&lt;p&gt;The simple often coincides with the easy, but sometimes the two are at odds with each other. Eschew languages and frameworks that provide the illusion of easiness at the expense of simplicity. The fact that a particular toolset makes &amp;ldquo;hello, world!&amp;rdquo; an easy one-liner probably means that the hundred-thousand liner that you are actually aiming for will be unnecessarily complicated and hard to write.&lt;/p&gt;
&lt;p&gt;Watch this: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.infoq.com/presentations/Simple-Made-Easy&#34; target=&#34;_blank&#34;
   &gt;https://www.infoq.com/presentations/Simple-Made-Easy&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;avoid-binding-by-name-like-the-plague&#34;&gt;Avoid binding by name like the plague
&lt;/h3&gt;&lt;p&gt;Avoid as much as possible mechanisms whose modus operandi is binding by name: use them only for interfacing with external entities, never for communication between your own modules. REST enthusiasts can cry me a river.&lt;/p&gt;
&lt;p&gt;Note that binding by name must be avoided even in comments. If you need to refer to  an identifier from within a comment, use whatever special notation is offered by the language at hand (&lt;code&gt;{@link ...}&lt;/code&gt; in java, &lt;code&gt;&amp;lt;see cref=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt; in C#) so that when you later refactor the name of that identifier, the IDE will also update any comments that mention that identifier.&lt;/p&gt;
&lt;h3 id=&#34;always-use-strong-typing&#34;&gt;Always use strong typing
&lt;/h3&gt;&lt;p&gt;Avoid any kind of weak typing (euphemistically called &lt;em&gt;dynamic&lt;/em&gt; typing) and avoid languages and frameworks that require it or even just sympathize with it. Yes, this includes all scripting languages. Scripting language enthusiasts can cry me a river. (And yes, this includes Typescript too, because it &lt;em&gt;sympathizes&lt;/em&gt; with JavaScript.)&lt;/p&gt;
&lt;p&gt;Read this: &lt;a 
   href=&#34;//localhost:1313/p/on-scripting-languages/&#34;
   &gt;On Scripting Languages&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;strive-for-debuggability&#34;&gt;Strive for debuggability
&lt;/h3&gt;&lt;p&gt;For example, do not overdo it with the so-called &amp;ldquo;fluent&amp;rdquo; style of invocations, because they are not particularly debuggable. Do not hurry to adopt this or that cool new programming language before you have made sure that debugger support for it is complete and working properly.&lt;/p&gt;
&lt;h3 id=&#34;resist-the-idiomatic-craze&#34;&gt;Resist the idiomatic craze
&lt;/h3&gt;&lt;p&gt;Contrary to popular belief, doing things in whatever way is considered idiomatic for the programming language at hand is never an end in and of itself; Avoid the use of idiomatic ways of doing things unless you are convinced they are superior. Many of them are, but some of them are not.&lt;/p&gt;
&lt;h3 id=&#34;strive-for-testability&#34;&gt;Strive for testability
&lt;/h3&gt;&lt;p&gt;Design interfaces that expose all functionality that makes sense to expose, not only functionality that is known to be needed by the code that will invoke them. For example, the application may only need an interface to expose a &lt;code&gt;register()&lt;/code&gt; and &lt;code&gt;unregister()&lt;/code&gt; pair of methods, but &lt;code&gt;isRegistered()&lt;/code&gt; also makes sense to expose, and it will incidentally facilitate black-box testing.&lt;/p&gt;
&lt;h3 id=&#34;enable-all-warnings-that-can-be-enabled&#34;&gt;Enable all warnings that can be enabled
&lt;/h3&gt;&lt;p&gt;The fact that a certain warning may on occasion be issued on legitimate code is no reason to disable the warning: the warning must be enabled, and each occurrence of the warning must be dealt with on a case-by-case basis.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The best way to deal with a warning is to resolve it. For example:
&lt;ul&gt;
&lt;li&gt;If your compiler is warning you that a certain cast is redundant, remove that redundant cast. (Duh!)&lt;/li&gt;
&lt;li&gt;If the compiler is warning you that you are dereferencing a pointer which might be null at that point, then add a null check before dereferencing it. (Duh!)&lt;/li&gt;
&lt;li&gt;If your compiler is warning you that you are invoking an overridable method from within the constructor of a base class, then do whatever restructuring is needed, throw it all away and rewrite it from scratch if necessary, so that no such thing is happening.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Another way of dealing with warnings is by suppressing them. Of course, this approach should only be used on perfectly legitimate code that would become less perfect if it was to be restructured so as to resolve the warning. Suppression should always be as localized as possible, meaning that it should be done on the individual statement where the warning is issued, instead of the entire function or the entire class. Note, however, that there are certain warnings that should always be properly resolved and never suppressed; take the invocation of an overridable method from within the constructor of a base class for example.
&lt;ul&gt;
&lt;li&gt;Some warnings, like &amp;ldquo;unused identifier&amp;rdquo;, occur on legitimate code too often for selective suppression to be practical. For those warnings, consider using an IDE that supports a &amp;ldquo;weak warning&amp;rdquo; or &amp;ldquo;suggestion&amp;rdquo; level, which is highlighted inconspicuously, so it can be easily filtered out by your eyes, but the visual clue is still there in case it points to something unexpected. Also consider using a better programming language, which supports a construct known as a &amp;ldquo;discard variable&amp;rdquo;, allowing the programmer to explicitly state their intention to let a variable go unused, so that the warning can remain a warning.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course some silly warnings occur on legitimate code all the time, so it goes without saying that they need to be disabled, but in my experience they are far fewer than the average programmer thinks they are.&lt;/p&gt;
&lt;h3 id=&#34;thou-shalt-not-suffer-a-warning-to-live&#34;&gt;Thou shalt not suffer a warning to live
&lt;/h3&gt;&lt;p&gt;Every single warning must always be resolved immediately upon being introduced. Nobody should ever commit code that contains warnings, and therefore nobody should ever check out code that already contains warnings.&lt;/p&gt;
&lt;p&gt;This is because a warning always is (or ought to always be) a cause of alarm; however, long-standing warnings constitute long-standing false alarms, so their continued existence causes two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All programmers in the house start becoming insensitive to the alarms, so the alarms start going unnoticed. (The &amp;ldquo;cry wolf&amp;rdquo; effect.)&lt;/li&gt;
&lt;li&gt;Those programmers who are perfectionists (and those are the best kind of programmers) start becoming mighty annoyed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Which brings us to the next point:&lt;/p&gt;
&lt;h3 id=&#34;treat-warnings-as-errors&#34;&gt;Treat Warnings as Errors
&lt;/h3&gt;&lt;p&gt;Always use the &amp;ldquo;treat warnings as errors&amp;rdquo; option of your compiler. If your compiler does not have such an option, throw away everything and start from scratch with a compiler that has it.&lt;/p&gt;
&lt;p&gt;The conventional understanding of what the difference is between warnings and errors is that with an error, you have to fix it before you can proceed, whereas with a warning, you can just ignore it and proceed.&lt;/p&gt;
&lt;p&gt;This understanding is technically correct, in the sense that this is in fact how compilers tend to behave by default, and this is in turn what most programmers expect, since dumb defaults seem to always suit mindless majorities. However, this conventional understanding, and therefore this default behavior of compilers, is wrong. It has been wrong since the dawn of our discipline, and it continues to be wrong today. The magnitude of the wrongness, multiplied by the pervasiveness of the wrongness, is truly staggering.&lt;/p&gt;
&lt;p&gt;The difference between warnings and errors &lt;em&gt;&lt;strong&gt;should be&lt;/strong&gt;&lt;/em&gt; that you can suppress a warning if you must, whereas you cannot suppress an error; however, you should absolutely have to address and eliminate both, meaning that you should have to either explicitly suppress or otherwise resolve every single warning before being allowed to proceed.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;treat warnings as errors&amp;rdquo; option corrects the wrong behavior of compilers, and exists precisely for the benefit of those (apparently very few) people in our discipline who happen to have their reasoning right on this issue.&lt;/p&gt;
&lt;p&gt;Be one of those people. Use that option.&lt;/p&gt;
&lt;h3 id=&#34;strive-for-readability&#34;&gt;Strive for readability
&lt;/h3&gt;&lt;p&gt;Readability is one of the most important qualities of code, second only to correctness. Code is generally read far more often that it is written. We tend to read code several times as we write it, at least once more as we review it, and then many more times throughout its lifetime as we extend it, refactor it, or tweak it; as we write nearby code; as we browse through code to understand how things work; as we perform troubleshooting; etc. In other words, over time, the reads-to-writes ratio of any piece of code approaches infinity. Therefore:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Absolutely any&lt;/strong&gt;&lt;/em&gt; choice that makes code easier to read is &lt;em&gt;&lt;strong&gt;absolutely always&lt;/strong&gt;&lt;/em&gt; preferable over &lt;em&gt;&lt;strong&gt;absolutely any&lt;/strong&gt;&lt;/em&gt; choice that makes code easier to write.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This means that languages that achieve great terseness of code are not really delivering anything of value by this alone, (I am looking at you, Scala,) because verbosity of code is not one of the major problems that our profession is faced with; unreadable code is. This also means that certain languages whose grotesquely arcane syntax has earned them the &amp;ldquo;write-only language&amp;rdquo; designation are not to be touched with a 10 ft. pole. Perl enthusiasts can cry me a river.&lt;/p&gt;
&lt;h3 id=&#34;avoid-using-elements-of-prose-in-code&#34;&gt;Avoid using elements of prose in code
&lt;/h3&gt;&lt;p&gt;Identifiers should be pedantic, not creative, and unless they pertain to the problem domain, they should come from the realm of engineering, not from the realm of literature. Think twice before using a term like &amp;ldquo;drop&amp;rdquo; instead of &amp;ldquo;delete&amp;rdquo;, &amp;ldquo;payload&amp;rdquo; instead of &amp;ldquo;content&amp;rdquo;, etc. because &amp;ldquo;drop&amp;rdquo; and &amp;ldquo;payload&amp;rdquo; are metaphors. Metaphor should be avoided unless it helps to express something that would otherwise require an entire sentence to express, for example &amp;ldquo;Factory&amp;rdquo; instead of &amp;ldquo;ObjectThatCreatesOtherObjects&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;use-an-ide-with-a-spell-checker&#34;&gt;Use an IDE with a spell checker
&lt;/h3&gt;&lt;p&gt;Avoid anything that fails to pass the spell check.&lt;/p&gt;
&lt;p&gt;Add the spell-checking dictionary of the IDE to source control and review any commits to it just as you review any other code.&lt;/p&gt;
&lt;p&gt;This specifically means abandoning certain old habits; all of the following are wrong:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nrPoints; pointsNr; nPoints; pointsN; noPoints; pointsNo; lenPoints; pointsLen&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Only the following are right:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;numberOfPoints; pointCount; pointsLength&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;avoid-acronyms-and-abbreviations&#34;&gt;Avoid acronyms and abbreviations
&lt;/h3&gt;&lt;p&gt;Use fully spelled-out words of the English language instead.&lt;/p&gt;
&lt;p&gt;Acronyms and abbreviations are cryptic for the uninitiated, and even if they are not, they make the code look unnecessarily technical. Modern IDEs have formidable auto-completion features, so fully spelling out every word does not necessarily mean that you will have to type more, but even if it did, typing is not one of the major problems that our profession is faced with; unreadable code is.&lt;/p&gt;
&lt;p&gt;This means that a huge number of abbreviations which have traditionally been staple terms in programming, should never be used, or their use should be seriously reconsidered. This includes all of the following: abs, addr, alloc, alt, app, arg, async, attr, auth, avg, bg, bat, bin, bool, buf, buff, btn, calc, cert, char, cls, clr, col, coll, cmd, com, cmp, comp, cfg, conf, config, const, ctx, ctrl, conv, coord, cos, cnt, cur, curr, db, dbg, dec, decl, def, deg, del, desc, dest, dev, diff, dim, dir, disp, div, doc, drv, dyn, env, eq, err, exe, exp, expr, ext, fac, fig, fg, fmt, frac, freq, fn, fun, func, gen, geom, hdr, hex, img, imp, impl, inc, idx, info, init, ins, inst, int, iter, lang, len, lib, lnk, max, mem, msg, mid, min, misc, mod, mul, mut, nav, net, num, obj, org, pkg, param, perf, pic, ptr, pos, pow, pwr, pred, pref, prev, priv, proc, prof, pub, rand, rnd, recv, rec, rect, ref, regex, rel, rem, rm, repo, req, res, ret, rev, sel, seq, svc, sess, sin, sln, src, spec, sqrt, std, stmt, stat, str, sub, sync, tan, tmp, temp, txt, usr, util, var, val, vec, ver, win, wiz.&lt;/p&gt;
&lt;p&gt;If a particular acronym is understood by every programmer, then it might be okay to use it in code, but if it is only understood by domain experts, then it is &lt;em&gt;not okay&lt;/em&gt;. This is because programmers often work on software for domains on which they are not experts, and even if they do eventually become domain experts, in the beginning they are not, but the beginning is when everything is difficult, so that is precisely the time that you do not want to be adding any extra difficulty to them. This means that very few acronyms are actually okay.&lt;/p&gt;
&lt;p&gt;Let me stress this to make sure it is understood: Domain Experts may protest that it is awkward to see a particular term fully spelled out in the code, because the term is so well known, that it appears as an acronym in the entirety of the literature in their field; let them find it awkward, and let them protest. Your code is not part of the literature in their field.&lt;/p&gt;
&lt;p&gt;If the choice is made to keep a certain acronym in the code, then the acronym must be turned into a word, meaning that only the first letter may be written in upper-case, while all subsequent letters must always be written in lower-case. For example, if you have decided that you are not going to replace &lt;code&gt;GUID&lt;/code&gt; with &lt;code&gt;GloballyUniqueIdentifier&lt;/code&gt;, I am totally with you, but then you must replace it with &lt;code&gt;Guid&lt;/code&gt;, so that the spell-checker can recognize it as a word and spell-check it. Otherwise, the spell-checker will consider each capital letter individually, and each individual letter passes spell-checking, so anything written in all-capitals essentially circumvents the spell-checker. If &amp;ldquo;Guid&amp;rdquo; as a word violates your English-language sensitivities, then please remember that you are writing code, not prose. There is a reason it is called code: it is specifically &lt;em&gt;not&lt;/em&gt; prose.&lt;/p&gt;
&lt;p&gt;Also beware of abbreviations that do not look like abbreviations. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The word &amp;ldquo;out&amp;rdquo; can be a word on its own, but more often than not, it is used as an abbreviation of &amp;ldquo;output&amp;rdquo;. Spell out the full word.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the methods &lt;code&gt;ToUpper()&lt;/code&gt; and &lt;code&gt;ToLower()&lt;/code&gt;, the terms &amp;ldquo;Upper&amp;rdquo; and &amp;ldquo;Lower&amp;rdquo; have no inherent meaning of their own; the proper terms that these abbreviations stand for are &amp;ldquo;UpperCase&amp;rdquo; and &amp;ldquo;LowerCase&amp;rdquo;. Use the proper terms.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pay-attention-to-naming&#34;&gt;Pay attention to naming
&lt;/h3&gt;&lt;p&gt;Every single concept must have the best name that it could possibly have. Not just a good name, but an excellent name. Unfortunately, finding the right name for things is hard. It is not a coincidence that naming things is &lt;em&gt;One of the Two Hard Problems in Computer Science.&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://martinfowler.com/bliki/TwoHardThings.html&#34; target=&#34;_blank&#34;
   &gt;https://martinfowler.com/bliki/TwoHardThings.html&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Strive for a variety of names that uniquely and accurately reflect each concept that you are dealing with. A Thesaurus is an indispensable programming tool.&lt;/p&gt;
&lt;p&gt;(I once worked in a metrology environment where both the main entity of interest was called a &amp;ldquo;Measurement&amp;rdquo;, and the main thing that you could do with it was to perform a &amp;ldquo;Measurement&amp;rdquo;; that&amp;rsquo;s deplorable.)&lt;/p&gt;
&lt;p&gt;If a certain domain-specific term is problematic in code, then do not use that term in code. Completely ignore the domain experts who will protest that the original term is the established term in the field and it is awkward to see it replaced with something else.&lt;/p&gt;
&lt;p&gt;(In that same metrology environment, the goal of the software was to measure and report how something differs from its ideal form; the term used in that field for this kind of difference was &amp;ldquo;error&amp;rdquo;, so the software was full of identifiers called &amp;ldquo;error&amp;rdquo; that did not stand for error as we know it in software; that&amp;rsquo;s deplorable.)&lt;/p&gt;
&lt;p&gt;Avoid zero-information names; invest the necessary amount of thinking so that each name gives at least some hint as to what it is about to someone who sees it for the first time. A good rule of thumb for deciding whether a name is good is to ask yourself the following question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Could the same name conceivably also stand for some unrelated entity in my code base?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(A co-worker of mine once created a namespace called &amp;ldquo;DataInfo&amp;rdquo;; that&amp;rsquo;s deplorable.)&lt;/p&gt;
&lt;p&gt;In special cases, dare to use names that you may have never heard anyone using before. For example, if you need a Factory of Factories, why not call it &lt;em&gt;Industry&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Read Chapter 2: &lt;em&gt;Meaningful Names&lt;/em&gt; of the book &lt;em&gt;Clean Code&lt;/em&gt; by Robert C. Martin.&lt;/p&gt;
&lt;p&gt;Also read this: &lt;a 
   href=&#34;//localhost:1313/p/confucius-on-naming/&#34;
   &gt;Confucius on Naming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Any code written by a programmer whose English language skills are poor should be reviewed by a programmer whose English language skills are good.&lt;/p&gt;
&lt;p&gt;When words need to be combined to form an identifier, the combination must follow general English grammar rules, except for English grammar special cases.&lt;/p&gt;
&lt;p&gt;Read this: &lt;a class=&#34;external&#34; 
   href=&#34;https://softwareengineering.stackexchange.com/q/409455/41811&#34; target=&#34;_blank&#34;
   &gt;Software Engineering Stack Exchange: Clean Code: long names instead of comments&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the following discussion when we speak of a noun or an adjective or a verb we actually mean a sequence of various parts of speech that effectively constitute a noun or an adjective or a verb. For example, &lt;code&gt;reticulated_spline&lt;/code&gt; is a noun (spline), &lt;code&gt;reticulated_before_dive&lt;/code&gt; is an adjective (reticulated), and &lt;code&gt;dive_for_moog&lt;/code&gt; is a verb (dive).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Types:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Classes:&lt;/strong&gt; The name of a class must always be a noun; it must never be an adjective or a verb; no exceptions. Also, the name of a class must always be in singular form; no exceptions. If you need to signify plurality, do not use plural! Instead, append a plurality-signifying term which is in turn a singular noun. For example, if you have a class that stands for a group of entities, do not call it &amp;lsquo;Entities&amp;rsquo;, call it &amp;lsquo;EntityGroup&amp;rsquo; instead. (Duh!)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interfaces:&lt;/strong&gt; The name of an interface must be either an adjective, (e.g. Comparable,) or a noun, (e.g. Serializer,) no exceptions. Singular form goes without saying.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enums:&lt;/strong&gt; The name of an enum type must always be a noun in singular form, no exceptions. (E.g. WeekDay.Monday instead of WeekDays.Monday.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variables:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Single-value:&lt;/strong&gt; The name of a single-value variable must always be a noun in singular form, unless it is of boolean type, in which case it may signify a condition, such as isEmpty.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collection:&lt;/strong&gt; The name of a collection variable must always be a noun in plural form, no exceptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pure:&lt;/strong&gt; The name of a function that returns a result without mutating anything must always be a noun unless it returns boolean, in which case it may signify a condition, such as hasChildren(). The name must be in singular form, unless a collection is returned, in which case the name must be in plural form.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Impure:&lt;/strong&gt; The name of a function that performs an operation (has side effects) must be a verb, no exceptions. If the impure function returns a result indicating success or failure, the name must begin with &amp;rsquo;try&amp;rsquo; followed by the actual verb, for example &amp;rsquo;tryAdd()&amp;rsquo;. If the name does not begin with &lt;code&gt;try&lt;/code&gt; then the rule is that the function will signal failure by throwing an exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When multiple words are combined to form an identifier, they must still make sense. As an example of what to avoid, take the &lt;code&gt;INotifyPropertyChanged&lt;/code&gt; interface of WPF. This name is deplorable because notify is a verb, not a noun or an adjective, and because an object implementing this interface is not a property-changed notification, it is an object which may issue property-changed notifications. Admittedly, it is difficult to come up with a good name to describe such objects; a decent choice might be &lt;code&gt;PropertyChangedNotificationIssuer&lt;/code&gt;, but this might be a bit too long for some people&amp;rsquo;s taste. An alternative is to use a familiar term of broader scope if there is no possibility of confusion. So, another decent choice here might simply be &lt;code&gt;Mutable&lt;/code&gt;. It is true that all kinds of different classes are mutable without issuing property-changed notifications, but then again the only thing that different mutable classes could have in common simply by virtue of being mutable, so as to warrant a common interface for all of them, is issuing notifications about their mutations. The point to take home from all this is that although it is difficult to come up with good names, the application of some actual thinking should produce a name which is at least a bit better than nonsense.&lt;/p&gt;
&lt;p&gt;As mentioned earlier, special cases of the English grammar can, and should, be ignored. An example of this is the simplification of plurals: choose &amp;ldquo;indexes&amp;rdquo; instead of &amp;ldquo;indices&amp;rdquo;, &amp;ldquo;schemas&amp;rdquo; instead of &amp;ldquo;schemata&amp;rdquo;, and, even though I know this is a tough proposition for some, &amp;ldquo;companys&amp;rdquo; instead of &amp;ldquo;companies&amp;rdquo;. See &lt;a class=&#34;external&#34; 
   href=&#34;https://softwareengineering.stackexchange.com/q/290951/41811&#34; target=&#34;_blank&#34;
   &gt;Software Engineering Stack Exchange: Does it make sense to use &amp;ldquo;ys&amp;rdquo; instead of &amp;ldquo;ies&amp;rdquo; in identifiers to ease find-and-replace functionality?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Never begin a function name with the prefix &amp;lsquo;check&amp;rsquo;. Doing so is a typical example of a developer choosing names according to fleeting notions in their head, without the slightest concern as to how these names will be understood by others. The word &lt;code&gt;check&lt;/code&gt; means nothing; a function that only checks something and then does nothing about it would serve absolutely no purpose; presumably, whatever checking the function does culminates in taking some kind of action, or returning some kind of result; this is an extremely important piece of information that the name of the function should not fail to convey; therefore, the name of the function should indicate what kind of action is performed, or what kind of result is returned.&lt;/p&gt;
&lt;h3 id=&#34;avoid-conventions-that-make-code-look-unnecessarily-technical&#34;&gt;Avoid conventions that make code look unnecessarily technical
&lt;/h3&gt;&lt;p&gt;Code is, by definition, already quite technical; we do not need to be making it look even more technical than it already is. Abandon the abhorrent practice of prefixing static variables with &amp;ldquo;s_&amp;rdquo;, prefixing member variables with &amp;ldquo;m_&amp;rdquo;, and prefixing private member variables with &amp;ldquo;_&amp;rdquo;. Modern IDEs can be configured to provide sufficient visual clues about these things via syntax highlighting. If your IDE does not support this, throw it away and find one that does. If you are not using an IDE, then please switch to the arts and humanities.&lt;/p&gt;
&lt;h3 id=&#34;avoid-hungarian-notation&#34;&gt;Avoid *Hungarian Notation.
&lt;/h3&gt;&lt;p&gt;(&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Hungarian_notation&#34; target=&#34;_blank&#34;
   &gt;https://en.wikipedia.org/wiki/Hungarian_notation&lt;/a&gt;.) For example, no matter how popular it is in the DotNet world, the practice of prefixing interface names with &lt;code&gt;I&lt;/code&gt; is ill-conceived. What also helps in order to avoid Hungarian Notation is &lt;em&gt;The Maximalistic Approach to Typing&lt;/em&gt;, where the nature of a variable is fully determined from its data type without the need for name adornments.&lt;/p&gt;
&lt;p&gt;Which brings us to the next item:&lt;/p&gt;
&lt;h3 id=&#34;use-the-type-system-to-the-fullest&#34;&gt;Use the type system to the fullest
&lt;/h3&gt;&lt;p&gt;Avoid using general purpose data types; try as much as possible to use data types that are specific for the job. A classic example of this is the use of a &lt;code&gt;Duration&lt;/code&gt; data type instead of an &lt;code&gt;int&lt;/code&gt; number of milliseconds, but it goes a lot further than that.&lt;/p&gt;
&lt;p&gt;So, no, your height is not of type &lt;code&gt;double&lt;/code&gt;, it is of type &lt;code&gt;Length&lt;/code&gt;; your married status is not a boolean, it is an instance of &lt;code&gt;MarriedStatus&lt;/code&gt;; a customer id and a product id are not both of type &lt;code&gt;int&lt;/code&gt;; one is of type &lt;code&gt;CustomerId&lt;/code&gt;, while the other is of type &lt;code&gt;ProductId&lt;/code&gt;; and so on. I call this &lt;em&gt;&lt;strong&gt;The Maximalistic Approach To Typing&lt;/strong&gt;&lt;/em&gt;. Untyped programming language aficionados can cry me a river.&lt;/p&gt;
&lt;h3 id=&#34;avoid-defensive-programming-engage-in-offensive-programming-instead&#34;&gt;Avoid defensive programming; engage in &lt;em&gt;offensive&lt;/em&gt; programming instead
&lt;/h3&gt;&lt;p&gt;Defensive programming is summarized by &lt;em&gt;Postel&amp;rsquo;s law&lt;/em&gt;, otherwise known as the &lt;em&gt;Robustness Principle&lt;/em&gt;, which says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Be conservative in what you do, be liberal in what you accept from others.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(See &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Robustness_principle&#34; target=&#34;_blank&#34;
   &gt;https://en.wikipedia.org/wiki/Robustness_principle&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;This principle suggests that besides producing output which adheres to the spec, our software should, as much as possible, be capable of coping with input that is off-spec. In other words, it should be tolerant to error. People imagine that when software behaves like that, it is more robust.&lt;/p&gt;
&lt;p&gt;If there is one thing that I have learned in several decades of programming, both from my own code and from code written by others, it is that tolerance towards error leads to anything but bug-free software; it invariably results in chaos; and guess what chaotic software tends to be: &lt;em&gt;&lt;strong&gt;buggy.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Read this: &lt;a class=&#34;external&#34; 
   href=&#34;https://trevorjim.com/postels-law-is-not-for-you&#34; target=&#34;_blank&#34;
   &gt;http://trevorjim.com/postels-law-is-not-for-you&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, instead of defensive programming, I advocate &lt;em&gt;offensive&lt;/em&gt; programming, which means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Never allow any slack or leeway, require everything to be exactly as expected.&lt;/li&gt;
&lt;li&gt;Require strict adherence to the spec even if you have no use for the full precision mandated by the spec.&lt;/li&gt;
&lt;li&gt;Keep tolerances not just down to a minimum, but at &lt;em&gt;absolute zero&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Never fail silently; fail &lt;em&gt;loudly&lt;/em&gt; instead. Fail fast; fail hard; fail eagerly, and enthusiastically.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples of offensive programming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoid conversion functions that return &lt;code&gt;null&lt;/code&gt; if given &lt;code&gt;null&lt;/code&gt;; always assert that the parameter is non-null. Better yet, avoid nullability altogether, or use a type system with explicit nullability, so as to restrict it via strong typing to only those places where it is meaningful. The same applies to empty strings: if an empty string is not meaningful somewhere, do not simply cope with it; explicitly and categorically disallow it.&lt;/li&gt;
&lt;li&gt;Avoid things like a &lt;code&gt;Map.put()&lt;/code&gt; method which either adds or replaces, and instead design for an &lt;code&gt;add()&lt;/code&gt; method which asserts that the item being added does not already exist, and a &lt;code&gt;replace()&lt;/code&gt; method which asserts that the item being replaced does in fact already exist.&lt;/li&gt;
&lt;li&gt;In scenarios where an add-or-replace operation seems useful to have, (and in my experience, such scenarios are exceedingly rare,) add such a function but give it a name that clearly indicates the weirdness in what it does: call it &lt;code&gt;addOrReplace()&lt;/code&gt;. (Duh!)&lt;/li&gt;
&lt;li&gt;Avoid things like a &lt;code&gt;close()&lt;/code&gt; method which is allowed to be invoked more than once with no penalty: assert that your &lt;code&gt;close()&lt;/code&gt; methods are invoked exactly once.&lt;/li&gt;
&lt;li&gt;Never use the garbage collector for cleanup; always perform explicit and deterministic clean-up at the exact moment when it is supposed to happen; the cleanup function invoked by the garbage collector should only be used for producing diagnostic messages in case we forgot to do explicit cleanup. Read this: &lt;a 
   href=&#34;//localhost:1313/p/object-lifetime-awareness/&#34;
   &gt;Object Lifetime Awareness&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;use-inheritance-when-it-is-clearly-the-right-choice&#34;&gt;Use inheritance when it is clearly the right choice
&lt;/h3&gt;&lt;p&gt;The advice that &lt;em&gt;composition should be favored over inheritance&lt;/em&gt; was very good advice back in the mid-1990s, because back then people were overdoing it with inheritance: the general practice was to not even consider composition unless all attempts to get things to work with inheritance failed. That practice was bad, and the fact that the predominant language at that time (C++) supported not just inheritance but actually &lt;em&gt;multiple inheritance&lt;/em&gt; made things even worse. So the advice against that practice was very much needed back then.&lt;/p&gt;
&lt;p&gt;However, the advice is still being religiously followed to this day, as if inheritance had always been a bad thing. This is leading to unnecessarily convoluted designs and much weeping, and wailing, and gnashing of teeth. Even the original advice suggested favoring one over the other, it did not prescribe the complete abolition of the other. So, today it is about time we reword the advice as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Know when to use inheritance and when to use composition.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For a variety of opinions and a lengthy discussion about this, see &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/49002/773113&#34; target=&#34;_blank&#34;
   &gt;https://stackoverflow.com/q/49002/773113&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Also heed the advice by Josh Bloch to &lt;em&gt;design and document for inheritance or else prohibit it&lt;/em&gt;. (See &lt;a class=&#34;external&#34; 
   href=&#34;https://blogs.oracle.com/javamagazine/post/java-inheritance-design-document&#34; target=&#34;_blank&#34;
   &gt;https://blogs.oracle.com/javamagazine/post/java-inheritance-design-document&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;favor-early-exits-over-deep-nesting&#34;&gt;Favor early exits over deep nesting
&lt;/h3&gt;&lt;p&gt;This means liberal use of the &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; keywords, as well as &lt;code&gt;return&lt;/code&gt; statements in the middle of a method whenever possible. The code ends up being a lot simpler this way. Yes, this directly contradicts the ancient &amp;ldquo;one return statement per function&amp;rdquo; dogma. I love contradicting ancient dogma.&lt;/p&gt;
&lt;h3 id=&#34;avoid-static-mutable-state-like-anthrax&#34;&gt;Avoid static mutable state like anthrax
&lt;/h3&gt;&lt;p&gt;Yes, this also includes stateful singletons. The fact that it only makes logical sense to have a single instance of a certain object in your world is no reason to design that object, and your world, so that only one instance of them can ever be.&lt;/p&gt;
&lt;p&gt;You see, I guarantee to you that the need will arise in the future, unbeknownst to you today, &lt;em&gt;to multiply instantiate your world&lt;/em&gt;, along with that object in it, which you thought was one-of-a-kind.&lt;/p&gt;
&lt;p&gt;As a matter of fact, it is quite likely that you will have to do that anyway, for the purpose of testing.&lt;/p&gt;
&lt;h3 id=&#34;optimize-performance-bottlenecks-not-performance-penalties&#34;&gt;Optimize performance bottlenecks, not performance penalties
&lt;/h3&gt;&lt;p&gt;The ages-old advice to &lt;em&gt;avoid premature optimization&lt;/em&gt; is considered common knowledge, but it is a bit vague, so it does not actually register with many folks, who will not hesitate to optimize any code construct that they consider as representing a performance penalty, under the reasoning that if it represents a performance penalty then its optimization is not premature.&lt;/p&gt;
&lt;p&gt;For this reason, I like to rephrase the advice as &amp;ldquo;&lt;strong&gt;Optimize performance bottlenecks, not performance penalties&lt;/strong&gt;&amp;rdquo; to stress the point that just because something represents a performance penalty, it does not mean that it should be optimized.&lt;/p&gt;
&lt;p&gt;You see, all code takes clock cycles to run, so every little piece of code that we write represents a performance penalty; if that was sufficient reason to optimize it, then premature optimization would be the order of the day, every day. For something to be considered worthy of optimization, it should not merely represent a performance penalty; it should be proven to represent a performance bottleneck.&lt;/p&gt;
&lt;p&gt;You do not know whether something is a bottleneck unless you run the completed software system, discover that its performance is unacceptable, and use the profiler to determine exactly where the bottlenecks are. Also, what usually happens in these cases is that you tend to find some nice and formal algorithmic optimizations to apply in just a few places, and make your software meet its performance requirements, without having to go all over the entire source code base and tweak and hack things to squeeze clock cycles here and there.&lt;/p&gt;
&lt;h3 id=&#34;put-the-tools-of-the-trade-into-use&#34;&gt;Put the tools of the trade into use
&lt;/h3&gt;&lt;p&gt;Armies of very good developers have worked hard to build these tools, don&amp;rsquo;t you dare make their efforts go in vain.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use an IDE.&lt;/p&gt;
&lt;p&gt;Programmers who think that they are better off with their favorite text editor should be admitted to rehabilitation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the &lt;em&gt;build&lt;/em&gt; feature of your IDE, which only compiles modified  files.&lt;/p&gt;
&lt;p&gt;Programmers who habitually perform a full &lt;em&gt;rebuild&lt;/em&gt; instead of a plain build should be fired.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use your IDE for running tests.&lt;/p&gt;
&lt;p&gt;Programmers who habitually run tests via separate tools outside of the IDE should be shot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The continuous build pipeline is your second line of defense, not your  primary means of building and testing. Your IDE will always be a lot faster, and it has a built-in debugger.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use the debugger of your IDE as your first choice for troubleshooting anything, not as the last resort after all other options have been exhausted. This means that you should be using the debugger not only when there is trouble, but always, by default, so that it is ready when trouble occurs. This in turn means that when you want to fire up your creation, or to run the tests, you should never hit the &amp;ldquo;Run&amp;rdquo; key on your IDE; you should hit the &amp;ldquo;Debug&amp;rdquo; key instead. Always the &amp;ldquo;Debug&amp;rdquo; key. Only the &amp;ldquo;Debug&amp;rdquo; key. You are a programmer; act like it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Having said all that, I should also add that people who are so attached to their IDE that they program by dragging and dropping code snippets around should perhaps consider that some desktop publishing job might suit them better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not even think that you are done with testing unless the code coverage tool gives you sufficient reason to believe so.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have your IDE perform code analysis, and incorporate even more code analysis in the continuous build.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;design-with-reliability-as-a-foundation-not-as-an-afterthought&#34;&gt;Design with reliability as a foundation, not as an afterthought
&lt;/h3&gt;&lt;p&gt;For example, sharing data in a multi-threaded environment by means of traditional locking techniques (&amp;ldquo;synchronization&amp;rdquo;) is both error-prone and untestable, because you cannot test for race conditions. Note that &amp;ldquo;error prone&amp;rdquo; and &amp;ldquo;untestable&amp;rdquo; is a deadly combination; therefore, this way of sharing data should be abandoned. Instead, design for a lock-free, share-nothing approach that works by passing immutable messages, thus eliminating the very possibility of race conditions.&lt;/p&gt;
&lt;h3 id=&#34;design-with-security-as-a-foundation-not-as-an-afterthought&#34;&gt;Design with security as a foundation, not as an afterthought
&lt;/h3&gt;&lt;p&gt;Security is not something that you can add on top of an insecure foundation, because there exist no automated tests that can detect security hazards and no amount of carefulness on behalf of programmers that is careful enough. So, what is necessary is architectural choices that eliminate entire classes of security hazards. (Do not worry, there will always be other classes of security hazards to have to worry about.)&lt;/p&gt;
&lt;p&gt;So, if a certain architectural choice is prone to security vulnerabilities, do not make that choice. An example of a vulnerability-prone architectural choice is putting application code on the web browser, otherwise known as full-stack development. Full-stack developers can cry me a river.&lt;/p&gt;
&lt;p&gt;For more on this, read: &lt;a 
   href=&#34;//localhost:1313/p/what-is-wrong-with-full-stack-development/&#34;
   &gt;What is wrong with Full Stack Development&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;keep-the-log-clean&#34;&gt;Keep the log clean
&lt;/h3&gt;&lt;p&gt;Do not vex your colleagues, and do not make your own life harder, with torrential info-level or debug-level spam in the log. Keep the info-level messages down to an absolute minimum, and once debugging is done, completely remove all the debug-level log statements. Utilize commit hooks that deliberately fail a commit if it contains debug-level logging statements. Regularly use the &amp;ldquo;blame&amp;rdquo; feature of the version control system to remind developers of info-level logging statements that they should remove. Never use the log for capturing metrics or any other kind of structured information; use some separate, specialized instrumentation facility for that.&lt;/p&gt;
&lt;h3 id=&#34;make-the-best-out-of-the-log&#34;&gt;Make the best out of the log
&lt;/h3&gt;&lt;p&gt;You should at all times be able to click on a log line in the output window of the IDE and be taken to the source line that generated that log entry, and you should also at all times be able to click on any line of a logged exception stack trace and be taken to the corresponding line of source code. I am appalled by how many programming environments do not offer this as the default mode of operation under all circumstances.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the Microsoft Visual Studio world, for a line to be clickable in the output window it must start with a source pathname, followed by an opening parenthesis, a line number, a closing parenthesis, and a colon. It can optionally be prefixed with whitespace.
&lt;ul&gt;
&lt;li&gt;Fortunately, both C++ and C# support efficient means of obtaining source file name and line number information: In C++ it is the &lt;code&gt;__FILE__&lt;/code&gt; and &lt;code&gt;__LINE__&lt;/code&gt; built-in pre-processor macros, while in C# it is the &lt;code&gt;CallerFilePath&lt;/code&gt; and &lt;code&gt;CallerLineNumber&lt;/code&gt; attributes.&lt;/li&gt;
&lt;li&gt;Unfortunately, the pathnames generated by these mechanisms are absolute, meaning that they start from the drive letter and include the kitchen sink, so you might want to programmatically convert them to pathnames relative to the solution folder before logging them. Visual studio also recognizes those, though this is undocumented.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In the Jetbrains IntellijIdea world, for a line to be clickable in the output window it needs to contain an identifier, followed by an opening parenthesis, a source filename-plus-extension, (but no path,) a colon, a line number, and a closing parenthesis.
&lt;ul&gt;
&lt;li&gt;The identifier is meant to be a package name, but Idea does not interpret it in any way, so it can be anything.&lt;/li&gt;
&lt;li&gt;Due to a long-standing bug (which JetBrains refuses to acknowledge or fix) if the word &amp;ldquo;at&amp;rdquo; appears in the log line, and if it is in any place other than immediately before the package name, then this mechanism breaks. (Note that this is all entirely undocumented.)&lt;/li&gt;
&lt;li&gt;Note that this mechanism suffers from ambiguity in the case of multiple source files with the same filename. An alternative mechanism is to include a &amp;ldquo;file://&amp;rdquo; URI in the log entry, but in order to produce such a URL you would have to figure out the path from the package name, which is doable, but not easy.&lt;/li&gt;
&lt;li&gt;Unfortunately, Java does not provide any efficient means of obtaining source file name and line number information, so one has to generate a stack trace in order to extract this information from it.&lt;/li&gt;
&lt;li&gt;Fortunately, generating a stack trace in the java world is not anywhere near as expensive as in the Microsoft world.&lt;/li&gt;
&lt;li&gt;Unfortunately, it is still unreasonably expensive. You can see this performance penalty as one more reason to keep logging to a minimum.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;take-maxims-with-a-grain-of-salt&#34;&gt;Take maxims with a grain of salt
&lt;/h3&gt;&lt;p&gt;(Especially quantitative maxims, which offer specific numerical limits for things.)&lt;/p&gt;
&lt;p&gt;When someone says &amp;ldquo;no function should accept more than 4 parameters&amp;rdquo; or &amp;ldquo;no class should be longer than 250 lines&amp;rdquo; they are usually talking nonsense.&lt;/p&gt;
&lt;p&gt;A class should be as long as necessary to do its job, and if that is 2000 lines, so be it. I would much rather keep some ugly code confined in a single class than split it into multiple classes and thus propagate the ugliness in the design.&lt;/p&gt;
&lt;p&gt;A function should accept as many parameters as necessary to do its job, and if that is 15 parameters, so be it. I would much rather have a long constructor than a mutable object.&lt;/p&gt;
&lt;p&gt;Breaking things down to smaller units should be done because there is some actual tangible merit in doing so, not because some prophecy said so.&lt;/p&gt;
&lt;h3 id=&#34;private-static-methods-are-fine-really&#34;&gt;Private static methods are fine. Really
&lt;/h3&gt;&lt;p&gt;An instance method has the entire object state at its disposal to read and manipulate, and this state may be altered by any other instance method, including instance methods that this method may invoke. The complexity of this is mind-boggling. A static method on the other hand is obviously not in a position to read nor alter any of the object&amp;rsquo;s state, and it is unable to invoke any instance methods that would do that. By its nature, a static method has to rely exclusively on parameters, which are all clearly visible at each call site. Thus, a static method is an &lt;em&gt;&lt;strong&gt;immensely less complex&lt;/strong&gt;&lt;/em&gt; beast than an instance method. What this means is that private static methods are not the slightest bit evil as some folks believe they are, and we should have more of them.&lt;/p&gt;
&lt;p&gt;Personally, when I have a class that has both complex logic and mutable state, I tend to move the complex logic into private static methods, reducing the instance methods to doing nothing but invoking private static methods, passing instance fields to them and storing results into instance fields as necessary.&lt;/p&gt;
&lt;h3 id=&#34;do-not-fix-it-unless-there-is-a-test-for-it&#34;&gt;Do not fix it unless there is a test for it
&lt;/h3&gt;&lt;p&gt;I do not yet have an opinion about test-driven development, but what I have found to be immensely useful, is &lt;em&gt;test-driven maintenance&lt;/em&gt;. So, when a bug is discovered, which obviously passed whatever automated tests you already had in place, do not hurry to figure out what causes it and fix it. First, write a test that tests for the bug, being completely agnostic of any theory that you might already have as to what is causing the bug. This test should initially fail; if it does not fail, then the bug is not what you think it is, so you have more research to do. If the test fails as it should, then fix the bug according to your theory as to what is causing it. If the test now passes, then your theory was correct. If not, then not only you have not fixed the bug, but you have probably broken something else which used to be fine.&lt;/p&gt;
&lt;h3 id=&#34;avoid-death-by-ten-thousand-little-methods&#34;&gt;Avoid death by ten thousand little methods
&lt;/h3&gt;&lt;p&gt;Again and again I see code bases with multitudes of tiny methods having cryptic names, each containing just one or two lines of trivial code, aiming to ensure that not a single line of code is duplicated anywhere. The downside of this is that it increases the complexity of the call tree and therefore the amount of mental effort required to make sense out of it. A new function is worth introducing if it has a well-defined, meaningful role to play. Difficulty in coming up with a name for a function, or having many functions with names that differ only slightly and fail to readily convey the difference between them, are both good indicators that these functions have no role to play other than to avoid code duplication. Of course there is merit in reducing code duplication, but not when the code in question is trivial. And when you see the possibility to de-duplicate non-trivial code, then the well-defined, meaningful role of the function tends to be immediately obvious, as well as the appropriate name for it.&lt;/p&gt;
&lt;h3 id=&#34;make-the-best-out-of-break-on-exception&#34;&gt;Make the best out of break-on-exception
&lt;/h3&gt;&lt;p&gt;Set up your development tooling, and use whatever runtime mechanisms are necessary, so that the debugger always stops at any statement that throws an unexpected exception.&lt;/p&gt;
&lt;p&gt;Many programmers have the bad habit of doing all their troubleshooting by examining logs and postmortem stack traces and theorizing as to what went wrong, instead of having the debugger break on exception and actually seeing what went wrong. This is extremely counter-productive.&lt;/p&gt;
&lt;p&gt;Unfortunately, exceptions are a somewhat complex topic, programming languages and their run-times behave in complex ways when exceptions are thrown, and debuggers have complex mechanisms for dealing with them, none of which helps. As if that was not enough, it is not always easy to tell when a certain exception should be expected and when it should not be expected.&lt;/p&gt;
&lt;p&gt;Thus, there exist several obstacles to accomplishing proper, usable, break-on-exception:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our code throws and catches expected exceptions all the time, or uses external libraries that do so, internally, all the time; clearly, we do not want the debugger to stop on any of those.&lt;/li&gt;
&lt;li&gt;One might think that the solution to this problem would be to configure the debugger to ignore caught exceptions and only stop on uncaught exceptions; unfortunately, that will not work either, because quite often we have exceptions that we consider as uncaught, but technically they are caught; for example:
&lt;ul&gt;
&lt;li&gt;An external library invokes our code, and our code throws an exception, which is uncaught as far as our code is concerned, but it is caught by the external library. A typical example of this is event-driven frameworks, i.e. virtually all GUI frameworks, which invoke our code to handle events, and almost always do so from within a try-catch block. Thus, any exception thrown by our event handlers is actually a caught exception, and the debugger will not stop on it.&lt;/li&gt;
&lt;li&gt;In many languages, the &lt;code&gt;try-finally&lt;/code&gt; clause internally catches exceptions and re-throws them at the end of &lt;code&gt;finally&lt;/code&gt;, meaning that any exception thrown within the &lt;code&gt;try&lt;/code&gt; block is technically a caught exception. Thus, a debugger configured to stop on uncaught exceptions will break at the end of the &lt;code&gt;finally&lt;/code&gt; block, which is completely useless and counter-productive. The same problem is encountered with other constructs which are internally implemented using &lt;code&gt;try-finally&lt;/code&gt;, such as the synchronization clause, the automatic disposal clause, etc.&lt;/li&gt;
&lt;li&gt;To complicate matters even further, an exception which is unexpected and unhandled under normal circumstances may temporarily become expected and handled during testing. This happens when a test deliberately causes malfunction to ensure that the component-under-test detects it and responds by throwing an exception, which is then caught by the test and examined to ensure that it is the correct exception and it has been correctly filled-in; when this happens, we do not want the debugger to stop, because we do not want our tests to be interrupted by the debugger while everything is proceeding according to plan.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a StackOverflow question and answer which simplifies things a lot: &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/71115356/773113&#34; target=&#34;_blank&#34;
   &gt;https://stackoverflow.com/q/71115356/773113&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;write-code-as-if-it-will-be-reviewed-by-someone-even-if-it-never-will&#34;&gt;Write code as if it will be reviewed by someone, even if it never will
&lt;/h3&gt;&lt;p&gt;Always try to take one more look at the code from a completely agnostic point of view, supposing that you know nothing about what it does, why it does it, how it does it. Does the code still make sense? Is everything obvious? If not, refactor it until it is as plain as daylight. If comments are necessary to explain what is going on, can the code be refactored so that the comments become unnecessary?&lt;/p&gt;
&lt;p&gt;Which brings us to the next point.&lt;/p&gt;
&lt;h3 id=&#34;avoid-writing-code-comments&#34;&gt;Avoid writing code comments
&lt;/h3&gt;&lt;p&gt;Never add a comment in the code unless absolutely necessary. (Note that this applies to code comments, not to
public interface comments, which can be nice to have.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The purpose of a code comment should be to alert the reader that something special is happening here, which is not obvious, and cannot be explained by any means other than written prose. This should only be necessary in exceptional situations, while the norm should be that the code is always so simple, and so self-explanatory, that no comments are necessary.&lt;/li&gt;
&lt;li&gt;An example of an exceptional situation is provenance comments, see related section.&lt;/li&gt;
&lt;li&gt;Code comments that simply state what the code does are unwarranted causes of alert, and if you repeat them enough they will force the reader to start treating your comments as noise, and may thus cause the reader to miss that rare comment which was actually important to note.
- Comments tend to be necessary when a piece of code does something unexpected, which is usually code that takes special measures to circumvent some anomalous behavior of some other code. In these cases, explaining what the code does is not even the goal; the goal is to explain &lt;em&gt;why&lt;/em&gt; it does it, and in order to explain that you have to describe the anomalous behavior, which may even necessitate listing various usage scenarios that have been tried and results that have been observed. This in turn means that comments worth writing tend to be entire multi-paragraph-long essays explaining strange and complicated situations. In my experience, one-liners are usually of no value.
- Note that when documenting code that circumvents anomalous behavior it is a good idea to assert, if possible, that the anomalous behavior is in fact still present, so that if it gets fixed in the future, you will take notice so you can remove the code that circumvents it.
- If you find yourself adding a code comment, first ask yourself whether there is anything you can do to avoid that.
&lt;ul&gt;
&lt;li&gt;Instead of adding a comment to some piece of code explaining what it does, extract that code into a separate function that has a self-explanatory name.
&lt;ul&gt;
&lt;li&gt;However, it is even better to restructure the code, if possible, so that even the explanatory name becomes unnecessary. For example, in old C code you might come across a pointer-returning function whose documentation says that the caller is responsible for freeing the pointer. This is deplorable. Do whatever it takes to avoid this; use a callback, use an allocator parameter, have the caller supply the memory, throw it all away and rewrite it in Java, anything but requiring people to read comments or else they get punished with memory leaks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Instead of adding a comment to a hard-coded value, extract that value into a constant that has a self-explanatory name.
&lt;ul&gt;
&lt;li&gt;When performing a calculation which involves a certain fixed value, it goes without saying that you will &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; hard-code some magic number in the calculation; instead, you will declare a constant with a nice descriptive name for that value, and use the constant in the calculation. Note that this must be done even
in fairly trivial cases, for example &lt;code&gt;const int BitsPerByte = 8;&lt;/code&gt; and can only be skipped in an exceedingly small number of special cases, for example when directly multiplying something by 2 in order to double it, or by -1 in order to negate it.
- If a comment can be coded as an assertion statement, that&amp;rsquo;s all the better. Comments saying &amp;ldquo;x must be greater than y here&amp;rdquo; are retarded. Assert the darn thing, and spare us from the comment, or perhaps use a comment to explain the &lt;em&gt;why&lt;/em&gt;, but not the &lt;em&gt;what&lt;/em&gt;. The assertion takes care of the &lt;em&gt;what&lt;/em&gt;, and it does so unambiguously and definitively, because it compiles and passes the tests, which is something that no comment will ever do.
- If you modify some code, and there is a comment attached to that code, do not forget to do something about the comment: Ideally, your modifications should make the comment redundant, so you should remove it. If not, then at least make sure that the comment is still valid after the modifications. Unfortunately, programmers often leave comments unchanged while changing the code around them, thus making every single comment in the entire code base liable to devolving into being inaccurate, or even misleading, and thus constituting an instance of sabotage. This is happening because:&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Programmers treat comments as noise, and therefore do not even notice their presence. (This is why comments should be used very rarely, in exceptional situations only.)&lt;/li&gt;
&lt;li&gt;Comments are poorly written, so programmers do not understand them. When a programmer does not understand  a comment, they obviously cannot modify it, but it gets even worse: they do not dare to remove it either, because they assume that it must have some special meaning to some other programmer. Thus, poorly written comments are very similar to &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Persistent_organic_pollutant&#34; target=&#34;_blank&#34;
   &gt;Persistent Organic Pollutants (POPs) a.k.a. &lt;em&gt;&lt;strong&gt;forever chemicals&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;: once created, they stay in the environment, causing harm for all eternity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a comment does not make sense to you, then find the author, ask them what it means, and update it accordingly. If the author is not around anymore, then ask any other experienced programmer in the shop. If they cannot tell what it means either, then trust me, this comment will never make sense to anyone, so go ahead and remove it.&lt;/p&gt;
&lt;h3 id=&#34;if-you-must-write-doc-comments-make-them-good&#34;&gt;If you must write doc-comments, make them good
&lt;/h3&gt;&lt;p&gt;Ideally, an entity (class or method) should have a well-chosen name and a very simple and straightforward interface or prototype, so that everything is clear at a glance, and therefore no doc-comment is needed. If things are not so simple, then it may be necessary to clarify them with a doc-comment.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A doc-comment must be as simple and as brief as possible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do not try to follow templates, or if you do, then treat all template fields as optional: skip any information that is not strictly speaking necessary.&lt;/li&gt;
&lt;li&gt;Some bureaucratic documentation guidelines require the doc-comment of a function to follow a specific template which begins with a summary line, is followed by one line for each parameter, and includes one line for the return value. If your function really needs all this information to be explained in a doc comment, then your function must be doing something extremely bizarre. If your function is not doing anything bizarre, then a single summary line might suffice to explain what it does; if so, then skip the extra lines explaining each parameter, as well as the extra line explaining the return value.&lt;/li&gt;
&lt;li&gt;As an example of what to avoid, see the &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;.GetEnumerator()&lt;/code&gt; method of C#/dotnet. The doc comment says:
Description: Returns an enumerator that iterates through the collection.
Returns: An enumerator that can be used to iterate through the collection.
As you can see, the documentation is repeating itself. This is wasting the time of anyone attempting to read this documentation. This is annoying. Do not do this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A doc-comment is a public interface comment, not an implementation comment. As such, a doc-comment on an entity should explain, in the most brief and abstract terms possible, the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What task it accomplishes.&lt;/li&gt;
&lt;li&gt;What input it accepts.&lt;/li&gt;
&lt;li&gt;What output it produces.
Note that it does not need to address each one of those items separately; a doc-comment on a method which simply says that it &amp;ldquo;sorts a file in-place&amp;rdquo; explains all three items in one go.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A documentation comment should not make the slightest attempt to explain any of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;How&lt;/em&gt; the task is accomplished.&lt;/li&gt;
&lt;li&gt;Which entities are expected to invoke the entity.&lt;/li&gt;
&lt;li&gt;Which entities are invoked by the entity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above points are important to state because many misguided practices from the infancy of our discipline have it all wrong by stipulating that documentation comments should include preposterous things such as who invokes whom, completely missing the whole point behind the notion of &lt;em&gt;general-purpose, reusable software&lt;/em&gt; and even the fundamental notion of &lt;em&gt;abstraction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you are asking &amp;ldquo;but shouldn&amp;rsquo;t documentation describe the how?&amp;rdquo; the answer is no, that&amp;rsquo;s what we write code for. By definition, the only authoritative source of information as to how something is done is the code that does it. As I have already explained, the code must be so simple and so easy to read that English-language prose on top of it should be bringing no added value. As a matter of fact, the presence of prose is dangerous, because quite often people modify the code without bothering to also modify the documentation, which leads to situations where the documentation is misleading.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If, after looking at the code, something is still unclear, then place a breakpoint and launch the tests; the debugger will make things pretty clear to you.&lt;/li&gt;
&lt;li&gt;If you are wondering how the code works under a case which is not covered by the tests, then fix this by adding a test for that case! (Duh!) Also note that even if there was a &amp;ldquo;how&amp;rdquo; section in the doc-comment, it probably would not have covered that special case anyway.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;always-maintain-provenance&#34;&gt;Always maintain provenance
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;When you copy some code from the interwebz, always add a comment containing a link to the original source. Of course this is not necessary if the code that you copied is something fairly standard, like reversing a string; but if the code is anything but standard, (do you have any idea what it takes in Microsoft Windows to have a progress dialog shown while copying files?) then citing your sources is an absolute must.
&lt;ul&gt;
&lt;li&gt;Sources can include:
&lt;ul&gt;
&lt;li&gt;Examples from the official documentation (provide a link to the example page)&lt;/li&gt;
&lt;li&gt;Stack Overflow (provide a link to the answer)&lt;/li&gt;
&lt;li&gt;GitHub (provide a link to the source file(s))&lt;/li&gt;
&lt;li&gt;ChatGPT (give the exact prompt which yielded the code)
etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This applies not only to code, but also to any piece of information, including individual values. Why did you choose this particular value and not some other value? Unless the value in question is a &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Fundamental_constant&#34; target=&#34;_blank&#34;
   &gt;Fundamental Constant&lt;/a&gt; (e.g. &lt;code&gt;static readonly Velocity SpeedOfLight = 299792458.0&lt;/code&gt;) you also have to add a comment to the constant explaining exactly why this particular value was chosen, or where it came from. For example, if you need to use the population of Mexico City in a calculation, &lt;code&gt;const int MexicoCityPopulation = 9209944;&lt;/code&gt; is not enough; it must be followed by a comment saying &lt;code&gt;//2020 data from https://en.wikipedia.org/wiki/Mexico_City&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stick-with-utc-everywhere&#34;&gt;Stick with UTC everywhere
&lt;/h3&gt;&lt;p&gt;Use UTC and only UTC for any purpose that involves storing, retrieving, communicating, converting, calculating, and doing really anything whatsoever with time, except for the following two  cases, and only the following two cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parsing a string that was entered by the user into a UTC time variable.&lt;/li&gt;
&lt;li&gt;Converting a UTC time variable to a string to be shown to the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;However:&lt;/strong&gt; When dealing with events that happen in the future, make sure to also store the targeted time-zone along with the UTC coordinate, because every few years various countries around the world decide to change their daylight savings policy, which means that the mapping from UTC to local time may change, and you have no way of knowing that in advance.&lt;/p&gt;
&lt;h3 id=&#34;keep-technical-implementation-concerns-separate-from-application-concerns&#34;&gt;Keep technical implementation concerns separate from application concerns
&lt;/h3&gt;&lt;p&gt;Application code should not be making assumptions about the technical details of the system, so that the technical details are free to change with minimal changes to application code, and vice versa. For example, the multi-threading regime under which a system operates (whether the system utilizes a single thread, or multiple discrete threads, or a thread-pool,) is a technical implementation concern. As such, all knowledge of how multi-threading is done should be isolated in the relatively small body of code which wires up (realizes) the system, and all application code should be capable of operating regardless of the multi-threading regime. Incidentally, this facilitates running tests under a strictly single-threaded regime, to ease debugging. Async/await aficionados can cry me a river.&lt;/p&gt;
&lt;h3 id=&#34;maximize-the-consistency-of-code-formatting&#34;&gt;Maximize the consistency of code formatting
&lt;/h3&gt;&lt;p&gt;I would be tempted to say &amp;ldquo;format code with absolute consistency&amp;rdquo;, but I cannot, because we usually lack the tools to achieve this, so the goal is to strive to get as close as possible to achieving absolute formatting consistency.&lt;/p&gt;
&lt;p&gt;In the preface of the highly acclaimed book &amp;ldquo;Clean Code&amp;rdquo; by Robert C. Martin, the author mentions some experimental findings indicating that &amp;ldquo;consistent indentation style was one of the most statistically significant indicators of low bug density.&amp;rdquo; The author also states that &amp;ldquo;style distinguishes excellence from mere competence&amp;rdquo;, which I think is a very good  observation; however, the conclusion at which the author arrives is unwarranted, because correlation does not imply causation: it is probably not the consistent indentation style that causes fewer bugs, it is the kind of mindset of programmers who strive for a consistent indentation style which also happens to be the kind of mindset that produces fewer bugs. Be the programmer who has that mindset.&lt;/p&gt;
&lt;p&gt;If you are one of those programmers who do not particularly care for consistent formatting, I know what you are thinking right now: you are thinking that you are the rare exception to the rule, and that your code is of course awesome and bug-free despite looking sloppy; well, you have every right to think in any way you like about yourself, but I hope you understand that nobody else will be particularly willing to give you the benefit of the doubt.&lt;/p&gt;
&lt;p&gt;Note that this does not mean that every programmer must be forced to follow a specific set of formatting guidelines; on the contrary, by using tools to do the formatting for us, we do not have to worry about formatting. The corollary to this is that as an employer, the only kind of code formatting that you have the right to require from programmers is that which can be achieved by means of automatic code reformatting tools that you already have in place.&lt;/p&gt;
&lt;p&gt;The point to take home from all this is that the formatting style must be specified in the highest detail possible, the tools must be painstakingly configured to reformat code according to that style, and the guidelines of how to work around limitations of the tools must be laid down and agreed upon before any work is done on a software project, no matter how much effort all of this represents.&lt;/p&gt;
&lt;h3 id=&#34;use-tight-abstractions&#34;&gt;Use tight abstractions
&lt;/h3&gt;&lt;p&gt;In other words, avoid leaky abstractions.&lt;/p&gt;
&lt;p&gt;Joel Spolsky&amp;rsquo;s &lt;a class=&#34;external&#34; 
   href=&#34;https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/&#34; target=&#34;_blank&#34;
   &gt;original 2002 article formulating the &lt;em&gt;Law of Leaky Abstractions&lt;/em&gt;&lt;/a&gt; stated that &amp;ldquo;All non-trivial abstractions, to some degree, are leaky&amp;rdquo;. The article focused on examples where implementation details of the underlying layer are exposed not by the interface itself, but by observing the performance  characteristics of the underlying layer. For example, the interface of two-dimensional arrays is generic enough to allow us to iterate over them either row-first or column-first without having to know their internal memory layout; however, which way we choose can have drastic performance implications, due to memory cache utilization. This means that we do of course have to keep in mind the technicalities of the layer which implements the abstraction; it does not, however, mean that the interface should be compromised in any way.&lt;/p&gt;
&lt;p&gt;More often than not, in our daily jobs we have the misfortune of dealing with abstractions that are leaky at the interface level. A glaring example of this, in languages like C# and Java, is &lt;code&gt;class Object&lt;/code&gt;, whose public interface contains a hash-code function, which is entirely out-of-place and unwarranted, because it has to do with an implementation detail of hash-maps.&lt;/p&gt;
&lt;p&gt;This mishap could have been avoided in a number of different ways, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Require the programmer to supply, upon hash-map construction, the hashing function to use.&lt;/li&gt;
&lt;li&gt;Require objects intended to be used as keys in a hash-map to implement a &lt;code&gt;Hashable&lt;/code&gt; interface which defines a hash-function.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, neither of these approaches was chosen, either by Java or by C#, due to some misguided notion of convenience. Instead, the implementation detail of hash-maps that they need a hash function to work with has leaked into &lt;code&gt;Object&lt;/code&gt;, requiring every single class to have a hash-code method, even if the class will never be used as a key in a hash-map, and even if the class &lt;strong&gt;could never conceivably&lt;/strong&gt; be used as a key in a hash-map, due, to for example, it being mutable.&lt;/p&gt;
&lt;p&gt;Another example is serialization frameworks that leak details about the underlying file format that they work with: every single XML or JSON serialization framework that I have come across does that, so it is specifically a JSON serialization framework, or an XML serialization framework, but not a general-purpose serialization framework.&lt;/p&gt;
&lt;p&gt;A proper general-purpose serialization framework would expose no file format details in its interface, thus being replaceable with a different implementation which serializes to and from some other file format, without any changes necessary to the code that uses the framework. I have written such a framework, and I assure you it was not easy, but here is the thing: &lt;em&gt;Doing it right&lt;/em&gt; ™ is never easy.&lt;/p&gt;
&lt;p&gt;Leaky abstractions are the source of untold suffering in software development, and they must be avoided at all costs. Creating air-tight abstractions is often omitted in the interest of saving time, and people make do with leaky abstractions instead, but this invariably results in orders of magnitude more time wasted over the long run in dealing with the disastrous consequences of the leaky abstractions.&lt;/p&gt;
&lt;p&gt;I would dare to propose that the term abstraction has (or ought to have) an inherent notion of absoluteness; just as one can be either pregnant or non-pregnant but not slightly pregnant or almost pregnant, so can an interface either be an abstraction or not an abstraction; it cannot be somewhere in-between. Thus, an incomplete or leaky abstraction should, for all practical purposes, be regarded as not an abstraction. (Because that&amp;rsquo;s what the almost absolute* is: &lt;em&gt;non-absolute&lt;/em&gt;.)&lt;/p&gt;
&lt;h3 id=&#34;thoroughly-emulate-any-and-all-hardware&#34;&gt;Thoroughly emulate any and all hardware
&lt;/h3&gt;&lt;p&gt;Hardware emulation is a special case of abstraction, where instead of abstracting software we are abstracting hardware. Incomplete hardware emulations are a curse for the same reasons that leaky abstractions are a curse. Hardware emulations must be 100% complete so that any software performing high level operations with the hardware can make use of all of the functionality of the hardware while remaining completely agnostic of whether it is connected to the real hardware or to an emulation thereof.&lt;/p&gt;
&lt;h3 id=&#34;only-use-absolute-file-system-paths&#34;&gt;Only use absolute file-system paths
&lt;/h3&gt;&lt;p&gt;All file-system paths must be absolute. It is fine to provide the user with the convenience of entering a relative path, but the relative path must be converted to absolute immediately upon entering the system. Relative paths are based on the notion of a &amp;ldquo;current directory&amp;rdquo;, which is one of the most ill-conceived, misused, and treacherous notions in the history of programming, because it is a global mutable variable. (I hope I do not need to explain why a global mutable variable is evil, right?) Note that the &amp;ldquo;current directory&amp;rdquo; is global not only across all classes of your application, but also across all threads of your application, and, in DotNet, even global across all AppDomains of your application, which were supposed to be completely isolated. Duh!? What were they thinking?&lt;/p&gt;
&lt;h3 id=&#34;avoid-guids-also-known-as-uuids&#34;&gt;Avoid GUIDs (also known as UUIDs)
&lt;/h3&gt;&lt;p&gt;Never use GUIDs if you can avoid them. If you must use them, then make sure they are an implementation detail and that they constitute a side-note of your design, not a predominant feature of your design. Read this: &lt;a 
   href=&#34;//localhost:1313/p/what-is-wrong-with-uuids-and-guids/&#34;
   &gt;What is wrong with UUIDs and GUIDs&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;do-it-right-&#34;&gt;Do It Right ™
&lt;/h3&gt;&lt;p&gt;Avoid taking shortcuts in the name of immediate savings now but at the expense of headaches later, because the later headaches invariably end-up costing orders of magnitude more than the immediate savings. When some colleague, manager, or decision-maker suggests to &amp;ldquo;make it simple now, and worry about making it right later&amp;rdquo; they are imagining that they are being smart and they are helping optimize things, while in fact they are being a smart-ass, and they are suggesting that a technical crime be committed.&lt;/p&gt;
&lt;p&gt;An example of this, which has already been mentioned, is finding proper names for identifiers. If you want to introduce a new identifier, finding a proper name for it may require opening up the thesaurus, spending a considerable amount of time creating a list of candidate words, opening up the dictionary, looking up the exact meaning of each candidate word, applying the process of elimination, etc. So, you can save lots of time right now by skipping all this and simply calling it something meaningless, or worse yet, something inaccurate and therefore misleading. It is a fact that you will indeed experience immediate time savings right now if you do this. However, it is also a fact that the time you save now by performing this act of sabotage against yourself will invariably be paid a hundredfold later, when you and your coworkers will be wondering what on earth was meant by this meaningless name, or struggling with the realization that it is being used in the code in ways that are in conflict with its meaning.&lt;/p&gt;
&lt;p&gt;Of course, &lt;em&gt;Do It Right&lt;/em&gt; ™ does not apply only to naming, it applies to everything. And when I say everything, I mean &lt;strong&gt;E V E R Y T H I N G&lt;/strong&gt;. The practice of &lt;em&gt;Do It Right&lt;/em&gt; ™ must be a conditioned reflex; it must be the default, reliable, fail-safe, look-no-further choice that we always make, without spending time calculating the costs vs. savings of &lt;em&gt;Do it Right&lt;/em&gt; ™, debating whether we should &lt;em&gt;Do It Right&lt;/em&gt; ™ or not &lt;em&gt;Do It Right&lt;/em&gt; ™, etc. The term &lt;em&gt;Do It Right&lt;/em&gt; ™ contains in it the reason why we should &lt;em&gt;Do It Right&lt;/em&gt; ™.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;C.V. Driven Development: See  &lt;a class=&#34;external&#34; 
   href=&#34;https://martinjeeblog.com/2015/03/11/cv-driven-development-cdd/&#34; target=&#34;_blank&#34;
   &gt;Martin Jee&amp;rsquo;s blog - CV Driven Development (CDD)&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Tablecloth</title>
        <link>//localhost:1313/p/tablecloth/</link>
        <pubDate>Thu, 25 Jan 2018 18:47:57 +0000</pubDate>
        
        <guid>//localhost:1313/p/tablecloth/</guid>
        <description>&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/tablecloth/media/tablecloth.jpg&#34;
	width=&#34;1410&#34;
	height=&#34;1410&#34;
	srcset=&#34;//localhost:1313/p/tablecloth/media/tablecloth_hu_ab9e56837434f991.jpg 480w, //localhost:1313/p/tablecloth/media/tablecloth_hu_ce1cf1d77ff06e54.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Deerlux 100% Pure Linen Washable Tablecloth Solid Color from&lt;br&gt;        &lt;a class=&#34;external&#34; 
   href=&#34;https://www.target.com/p/deerlux-100-pure-linen-washable-tablecloth-solid-color/-/A-83872558&#34; target=&#34;_blank&#34;
   &gt;target.com&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;A short, high-tech, sci-fi, horror story written on the evening of January 25, 2018.&lt;/p&gt;
&lt;p&gt;There was a guy who got in a quarrel with his girlfriend, and she kicked him out of her apartment without even throwing his clothes out the window for him. So there he was, naked on the street, not knowing what to do. Out of necessity, he grabbed a tablecloth from a restaurant, draped himself with it, and started to go home, trying to look as if everything was normal and under control.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;People saw him walking down the street draped with a tablecloth, and thought that he must be making some sort of fashion statement. Some of them decided to imitate him by also wearing tablecloth, and lo and behold, before you knew it there was a tablecloth-wearing movement that was gaining ground like wildfire.&lt;/p&gt;
&lt;p&gt;Now, imagine that all this happened a long time ago, and you are now living in a society in which a large part of the population is regularly wearing tablecloth. This form of attire is considered perfectly normal, even by people who do not wear it. A multitude of explanations have been invented after the fact to try and explain why tablecloth is better than conventional clothing, as if wearing tablecloth was invented on purpose, to address specific needs. They will try to convince you to also wear tablecloth with truly disarming statements like the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tablecloth is easy: you don&amp;rsquo;t have to learn how to use complicated buttons and zippers and belts and buckles and what not; just hold it in place with your hand.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tablecloth is simple: it is one size fits all, one shape suits all, no need for designs, no need for cutting and sewing parts together, and the best thing of all? no seam lines!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tablecloth is convenient: when putting it on, you don&amp;rsquo;t have to make your hands fit through sleeves and your legs fit through trousers; you just throw the tablecloth over you, and you are good to go. Want to take it off? no need for complicated motions, just let it fall off of you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tablecloth is fashionable. Tablecloth is hip. Tablecloth is cool. Who can argue with that?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;And that, ladies and gentlemen, was my JavaScript analogy.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;P.S.&lt;/p&gt;
&lt;p&gt;Tablecloth is a source of innovation. Every six months or so, someone comes up with a new pattern for printing on tablecloth, which invariably becomes an instant fashion hit, thus revolutionizing the way we dress.&lt;/p&gt;
&lt;p&gt;Also see: &lt;a 
   href=&#34;//localhost:1313/p/on-scripting-languages/&#34;
   &gt;On Scripting Languages&lt;/a&gt;.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Simplicity</title>
        <link>//localhost:1313/p/simplicity/</link>
        <pubDate>Thu, 07 Dec 2017 12:44:13 +0000</pubDate>
        
        <guid>//localhost:1313/p/simplicity/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;Simplicity is the art of hiding complexity&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Rob Pike, &amp;ldquo;Simplicity is Complicated&amp;rdquo;, dotGo 2015&lt;/p&gt;
&lt;p&gt;(&lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=rFejpH_tAHM&#34; target=&#34;_blank&#34;
   &gt;https://www.youtube.com/watch?v=rFejpH_tAHM&lt;/a&gt;)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>My notes on &#34;Greg Young - The Long Sad History of Microservices&#34;</title>
        <link>//localhost:1313/p/my-notes-on-greg-young-the-long-sad-history-of-microservices/</link>
        <pubDate>Fri, 27 Oct 2017 08:32:53 +0000</pubDate>
        
        <guid>//localhost:1313/p/my-notes-on-greg-young-the-long-sad-history-of-microservices/</guid>
        <description>&lt;iframe allowfullscreen=&#34;&#34; class=&#34;YOUTUBE-iframe-video&#34; data-thumbnail-src=&#34;https://i.ytimg.com/vi/MjIfWe6bn40/0.jpg&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/MjIfWe6bn40?feature=player_embedded&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Greg Young - The Long Sad History of Microservices&lt;/p&gt;
&lt;p&gt;From the &amp;ldquo;Build Stuff&amp;rdquo; event of April 2017.&lt;/p&gt;
&lt;p&gt;Talk begins at 9:45.&lt;/p&gt;
&lt;p&gt;Highlights of the talk:&lt;/p&gt;
&lt;!-- more --&gt;
&lt;blockquote&gt;
&lt;p&gt;27:00 Placing a network between modules simply to enforce programmer discipline&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;29:05 There is other levels of isolation I can go to.  I can run a docker container per service.  That&amp;rsquo;s the coolest stuff right?  What that means is I can make it work on my machine so I send my machine to production.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;29:52 Now, one thing that&amp;rsquo;s very useful is I don&amp;rsquo;t necessarily want to make this decision up front. And I don&amp;rsquo;t necessarily want to make the same decision in dev as in production.  I may want in dev to have a different way that we run things, why? because bringing up 19 docker containers on your laptop is not very much fun.  I may prefer to host everything inside a single process to make debugging and such a lot easier when I am running on dev in my laptop.  Whereas in production we may go off to multiple nodes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;34:16 If you have maintenance windows, why are you working towards getting rid of your maintenance windows?  Is this a business drive or is this you just being like C.V. driven development?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My notes:&lt;/p&gt;
&lt;p&gt;Unfortunately his shrieky voice makes him sound like he is bitching about things, which in a sense he is, but it would help his cause to deliver his criticism in a more palatable tone.  Also, in order to make his point about microservices being nothing new he seems to disregard statelessness.&lt;/p&gt;
&lt;p&gt;Resources referenced in the talk:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Queueing_theory&#34; target=&#34;_blank&#34;
   &gt;https://en.wikipedia.org/wiki/Queueing_theory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/%CE%A0-calculus&#34; target=&#34;_blank&#34;
   &gt;https://en.wikipedia.org/wiki/π-calculus&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Actor_model&#34; target=&#34;_blank&#34;
   &gt;https://en.wikipedia.org/wiki/Actor_model&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Leslie Lamport - Time, Clocks, and the Ordering of Events in a Distributed System&lt;/p&gt;
&lt;p&gt;(available on the interwebz)&lt;/p&gt;
&lt;p&gt;C.A.R. Hoare - Communicating Sequential Processes&lt;/p&gt;
&lt;p&gt;(available on the interwebz)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Migrating a project from java 8 to java 9</title>
        <link>//localhost:1313/p/migrating-a-project-from-java-8-to-java-9/</link>
        <pubDate>Sat, 30 Sep 2017 20:27:45 +0000</pubDate>
        
        <guid>//localhost:1313/p/migrating-a-project-from-java-8-to-java-9/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/migrating-a-project-from-java-8-to-java-9/media/Java9-migration.png&#34;
	width=&#34;700&#34;
	height=&#34;400&#34;
	srcset=&#34;//localhost:1313/p/migrating-a-project-from-java-8-to-java-9/media/Java9-migration_hu_6a31957c51b3aca6.png 480w, //localhost:1313/p/migrating-a-project-from-java-8-to-java-9/media/Java9-migration_hu_6f2dd076c17d35bf.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Now that Java 9 is out, I decided to migrate to it my pet project, which is around 120K lines of java.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The first step is to just start compiling and running against jdk9, without using any of its features yet.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is an account of the surprisingly few issues that I encountered during this first step and how I resolved them.&lt;/p&gt;
&lt;h4 id=&#34;issue-1-objectfinalize-has-been-deprecated&#34;&gt;Issue #1: Object.finalize() has been deprecated.
&lt;/h4&gt;&lt;p&gt;The javadoc of Object.finalize() explains why it has been deprecated and suggests the use of java.lang.ref.Cleaner and java.lang.ref.PhantomReference as alternatives.&lt;/p&gt;
&lt;p&gt;Solution: For now, an acceptable solution is to just mark any overrides of Object.finalize() as also deprecated, so that no warnings are issued.&lt;/p&gt;
&lt;h4 id=&#34;issue-2-accessibleobjectisaccessible-has-been-deprecated&#34;&gt;Issue #2: AccessibleObject.isAccessible() has been deprecated.
&lt;/h4&gt;&lt;p&gt;This means that method.isAccessible() and field.isAccessible() should not be used anymore.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Replace this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object callMethod( Object instance, Method method )
{
    boolean access = method.isAccessible();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object callMethod( Object instance, Method method )
{
    boolean access = method.canAccess( instance );
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;issue-3-comsunxmlinternalstreamxmlinputfactoryimpl-is-not-visible-anymore&#34;&gt;Issue #3: com.sun.xml.internal.stream.XMLInputFactoryImpl is not visible anymore.
&lt;/h4&gt;&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Replace this:&lt;/p&gt;
&lt;p&gt;XMLInputFactory xmlInputFactory = new XMLInputFactoryImpl();&lt;/p&gt;
&lt;p&gt;with this:&lt;/p&gt;
&lt;p&gt;XMLInputFactory xmlInputFactory = XMLInputFactory.newDefaultFactory();&lt;/p&gt;
&lt;h4 id=&#34;issue-4-classnewinstance-has-been-deprecated&#34;&gt;Issue #4: Class.newInstance() has been deprecated.
&lt;/h4&gt;&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Replace this:&lt;/p&gt;
&lt;p&gt;Class.forName( &amp;ldquo;com.mysql.jdbc.Driver&amp;rdquo; ).newInstance();&lt;/p&gt;
&lt;p&gt;with this:&lt;/p&gt;
&lt;p&gt;Class.forName( &amp;ldquo;com.mysql.jdbc.Driver&amp;rdquo; ).getDeclaredConstructor().newInstance();&lt;/p&gt;
&lt;h4 id=&#34;issue-5-comsunniofileextendedopenoption-does-not-exist-anymore&#34;&gt;Issue #5: com.sun.nio.file.ExtendedOpenOption does not exist anymore.
&lt;/h4&gt;&lt;p&gt;I was making use of ExtendedOpenOption.NOSHARE_WRITE, but the ExtendedOpenOption enum has now been moved into some module called jdk.unsupported and even though IntelliJ IDEA somehow does see the type, the compiler does not see it.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Stop using com.sun.nio.file.ExtendedOpenOption. I wish I knew of an alternative.&lt;/p&gt;
&lt;h4 id=&#34;issue-6-the-java-compiler-now-resolves-symbolic-links-of-source-files&#34;&gt;Issue #6 The java compiler now resolves symbolic links of source files
&lt;/h4&gt;&lt;p&gt;This is a problem for me, because I have all my projects in C:\Users\Michael\Projects, but this is actually a link to D:\Michael\Docs\Projects, which I normally never touch.  This has been working fine for years, but now with java 9 when an error occurs in a source file, javac reports the error using the resolved source pathname, which is on drive D:, and this completely confuses the IDE which does not know of any source file with that pathname.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Abandon the practice of accessing the project from a path which contains a symbolic link, work on the project in its actual location.&lt;/p&gt;
&lt;h4 id=&#34;issue-7-classloadergetsystemclassloader-cannot-be-cast-to-urlclassloader-anymore&#34;&gt;Issue #7 ClassLoader.getSystemClassLoader() cannot be cast to URLClassLoader anymore.
&lt;/h4&gt;&lt;p&gt;This was definitely to be expected.&lt;/p&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;p&gt;Replace this:&lt;/p&gt;
&lt;p&gt;URLClassLoader urlClassLoader = (URLClassLoader)ClassLoader.getSystemClassLoader();
for( URL url : urlClassLoader.getURLs() ) { &amp;hellip;&lt;/p&gt;
&lt;p&gt;with this:&lt;/p&gt;
&lt;p&gt;ClassLoader classLoader = ClassLoader.getSystemClassLoader();
for( URL url : Collections.list( classLoader.getResources( &amp;quot;&amp;quot; ) ) ) { &amp;hellip;&lt;/p&gt;
&lt;h4 id=&#34;issue-8-jackson-fails-to-deserialize-exceptions-from-json&#34;&gt;Issue #8 Jackson fails to deserialize exceptions from JSON.
&lt;/h4&gt;&lt;p&gt;For debugging purposes, I used to have exceptions serialized into JSON and deserialized later.  For some unknown reason, this does not work anymore.  Now each element of the stackTrace contains several additional fields, like classLoaderName, moduleName and moduleVersion, and although Jackson serializes them just fine, for some reason it fails to deserialize them.  Upgrading to the latest version of jackson-jaxrs-json-provider (version 2.9.0) did not fix this problem.&lt;/p&gt;
&lt;p&gt;Solution: stop serializing and deserializing exceptions.&lt;/p&gt;
&lt;p&gt;At the end of all this, my 817 tests passed, so I consider the migration complete.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Rich Hickey - Simple Made Easy</title>
        <link>//localhost:1313/p/rich-hickey-simple-made-easy/</link>
        <pubDate>Wed, 12 Jul 2017 10:46:10 +0000</pubDate>
        
        <guid>//localhost:1313/p/rich-hickey-simple-made-easy/</guid>
        <description>&lt;p&gt;&amp;ldquo;Simple Made Easy&amp;rdquo; presentation by Rich Hickey from the InfoQ Software Development Conference, recorded at Strangeloop 2011&lt;/p&gt;
&lt;p&gt;Watch the presentation here:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.infoq.com/presentations/Simple-Made-Easy&#34; target=&#34;_blank&#34;
   &gt;https://www.infoq.com/presentations/Simple-Made-Easy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(the slideshow plays alongside with the video.)&lt;/p&gt;
&lt;p&gt;My notes on the presentation:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Simplicity is prerequisite for reliability&amp;rdquo; - Edsger W. Dijkstra&lt;/p&gt;
&lt;p&gt;Simple vs. Complex, Easy vs. Hard&lt;/p&gt;
&lt;p&gt;Simple: one role; one task; one concept; one dimension.  (But not one instance; one operation.)  Lack of interleaving, but not lack of cardinality.  Objective notion.&lt;/p&gt;
&lt;p&gt;Easy: near, at hand;  near to our understanding / skill set;  familiar;  near our capabilities.  Relative notion.&lt;/p&gt;
&lt;p&gt;Regarding &amp;ldquo;at hand&amp;rdquo; and &amp;ldquo;familiar&amp;rdquo;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I think that collectively we are infatuated with these two notions of easy.&lt;/p&gt;
&lt;p&gt;We are just so self-involved in these two aspects, it&amp;rsquo;s hurting us tremendously.&lt;/p&gt;
&lt;p&gt;All we care about is, can I get it instantly and start running it in five seconds?&lt;/p&gt;
&lt;p&gt;It could be this giant hairball that you got, but all you care for is can you get it?&lt;/p&gt;
&lt;p&gt;In addition, we are fixated on &amp;ldquo;oh, I can&amp;rsquo;t, I can&amp;rsquo;t read that.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I can&amp;rsquo;t read German. Does this mean that German is unreadable? No! I don&amp;rsquo;t know German!&lt;/p&gt;
&lt;p&gt;So, you know, this sort of approach is definitely not helpful.&lt;/p&gt;
&lt;p&gt;In particular, if you want everything to be familiar you will never learn anything new&lt;/p&gt;
&lt;p&gt;&amp;lsquo;cause it can&amp;rsquo;t be significantly different from what you already know, and not drift&lt;/p&gt;
&lt;p&gt;away from the familiarity.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Regarding &amp;ldquo;near to our capabilities&amp;rdquo;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;due to a combination of hubris and insecurity we never really talk about whether or not something is outside of our capabilities.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Regarding easy being &amp;ldquo;relative&amp;rdquo;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Playing the violin and reading German are really hard for me; they are easy for other people; certain other people.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;So, unlike simple, where we can go and look for interleavings, look for braiding, easy is always going to be easy for whom; or hard for whom; it is a relative term. The fact that we throw these things around, sort of casually saying, oh I like to use that technology cause it is simple, and when I am saying simple I mean easy, and when I am saying easy I mean because I already know something that looks very much alike that, is how this whole thing degrades, and we can never have an objective discussion about the qualities that matter to us in our software.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Constructs and artifacts&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We program with constructs. We have programming languages, we use particular libraries, and those things in and of themselves, when we look at them, when we look at the code we write, have certain characteristics in and of themselves.  But we are in a business of artifacts, right? We don&amp;rsquo;t ship source code, and the user doesn&amp;rsquo;t look at our source code and say &amp;ldquo;oh, this is so pleasant&amp;rdquo;.  They run our software. And they run it for a long period of time. [&amp;hellip;] all that stuff, the running of it, the performance of it, the ability to change it, all is an attribute of the artifact. Not the original construct.  But again, here we still focus so much on our experience of the use of the construct.  &amp;ndash;Oh look, I only had to type 16 characters.  Wow, that&amp;rsquo;s great, no semicolons.  Or things like that.  This whole notion of programmer convenience.  Again, we are infatuated by it, not to our benefit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;So, we are going to contrast this with the impacts of long term use.  What does this mean to use this long term?  And, what&amp;rsquo;s there?  What&amp;rsquo;s there is all the meat, right? Does the software do what it is supposed to do?  Is it of high quality?  Can we rely on it doing what it&amp;rsquo;s supposed to do?  Can we fix problems when they arise, and if we are given a new requirement, can we change it?  These things have nothing to do with the construct as we typed it in, or very little to do with it, and have a lot to do with the attributes of the artifact.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We have to start assessing our constructs based around the artifacts, not around the look and feel of the experience of typing it in, or the cultural aspects of it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We can only hope to make reliable those things we can understand.&lt;/p&gt;
&lt;p&gt;We can only consider a few things at a time.&lt;/p&gt;
&lt;p&gt;Intertwined things must be considered together.&lt;/p&gt;
&lt;p&gt;Complexity undermines understanding.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;What&amp;rsquo;s true of every bug found in the field?&lt;/p&gt;
&lt;p&gt;It passed the type checker.&lt;/p&gt;
&lt;p&gt;What else did it do?&lt;/p&gt;
&lt;p&gt;It passed all the tests.&lt;/p&gt;
&lt;p&gt;Your ability to reason about your program is critical to debugging.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Development speed:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now, of course everyone is going to start moaning, but I have all this speed, I am agile, I&amp;rsquo;m fast, this easy stuff is making my life good because I have a lot of speed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;So, what kind of runner can run as fast as they possibly can from the very start of the race?&lt;/p&gt;
&lt;p&gt;(Audience: Sprinters.)&lt;/p&gt;
&lt;p&gt;Right. Only someone who runs really short races!&lt;/p&gt;
&lt;p&gt;But of course we are programmers, and we are smarter than runners, apparently, because we know how to fix that problem, right? We just fire the starting pistol every hundred yards; and call it a new sprint. Right?&lt;/p&gt;
&lt;p&gt;(Applause)&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know why they haven&amp;rsquo;t figured that out.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s my contention, based on experience, that if you ignore complexity you will slow down, you will invariably slow down over the long haul. Of course if you are doing something that is really short term, you don&amp;rsquo;t need any of this, you can write it, you know, in ones and zeros.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Emphasizing ease gives early speed.&lt;/p&gt;
&lt;p&gt;Ignoring complexity will slow you down over the long haul.&lt;/p&gt;
&lt;p&gt;On throwaway or trivial projects, nothing much matters.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If you focus on ease, and ignore simplicity (so I am not saying you can&amp;rsquo;t try to do both, that&amp;rsquo;d be great) but if you focus on ease you will be able to go as fast as possible from the beginning of the race, but no matter what technology you use, or sprints or firing pistols or whatever, the complexity will eventually kill you; it will kill you in a way that will make every sprint accomplish less, most sprints being about completely redoing things that you have already done, and the net event is that you are not moving forward in any significant way.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Now, if you start by focusing on simplicity why can&amp;rsquo;t you go as fast as possible right from the beginning?  Cause some tools that are simple are actually as easy to use as some tools that are not, why can&amp;rsquo;t you go as fast then?  You have to think &amp;ndash;you have to actually apply some simplicity work to the problem before you start, and that&amp;rsquo;s going to give you this ramp-up.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;So, one of the problems I think we have is this conundrum that some things that are easy actually are complex.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;But we don&amp;rsquo;t care about that, right? Again, the user does not look at our software and they don&amp;rsquo;t actually care very much about how good a time we had when we were writing it.  What they care about is what the program does, and if it works well it will be related to whether or not the output of those constructs were simple &amp;ndash;in other words, what complexity did they yield.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;When there is complexity there, we are going to call that _incidental complexity_.   It was not part of the user asked us to do, we chose the tool, it had some incidental complexity.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The mental capability part&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The fact is we can learn more things, we actually can&amp;rsquo;t get much smarter.  We are not going to move our brain closer to the complexity, we have to make things near by simplifying them.  The truth here is that there are not these super bright people who can do these amazing things and everyone else is stuck.  Because the juggling analogy is pretty close.  The average juggler can do three balls.  The most amazing juggler in the world can do like nine balls or twelve, or something like that. They can&amp;rsquo;t do twenty, or a hundred. We are all very limited.  Compared to the complexity we can create, we are all statistically at the same point in our ability to understand it, which is not very good.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(section about parens rather uninteresting to anyone not using them.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You never see in these discussions was there a tradeoff?  Is there any downside?  Is there anything bad that comes along with this? Never, nothing; we are looking all for benefits. So I think that as programmers now I think we are looking all for benefits and we are not looking at the byproducts.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Complect vs. Compose&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Composing simple components is the key to writing robust software.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;State is Never Simple&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complects value and time&lt;/li&gt;
&lt;li&gt;It is easy, in the at-hand and familiar senses&lt;/li&gt;
&lt;li&gt;Interweaves everything that touches it, directly or indirectly&lt;/li&gt;
&lt;li&gt;Not mitigated by modules, encapsulation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Complexity Toolkit&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Construct&lt;/th&gt;
          &lt;th&gt;Complects&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;State&lt;/td&gt;
          &lt;td&gt;Everything that touches it&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Objects&lt;/td&gt;
          &lt;td&gt;State, identity, value&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Methods&lt;/td&gt;
          &lt;td&gt;Function and state, namespaces&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Syntax&lt;/td&gt;
          &lt;td&gt;Meaning, order&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Inheritance&lt;/td&gt;
          &lt;td&gt;Types&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Switch/matching&lt;/td&gt;
          &lt;td&gt;Multiple who/what pairs&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;var(iable)s&lt;/td&gt;
          &lt;td&gt;Value, time&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Imperative loops, fold&lt;/td&gt;
          &lt;td&gt;what/how&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Actors&lt;/td&gt;
          &lt;td&gt;what/who&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ORM&lt;/td&gt;
          &lt;td&gt;OMG&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Conditionals&lt;/td&gt;
          &lt;td&gt;Why, rest of program&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Simplicity Toolkit&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Construct&lt;/th&gt;
          &lt;th&gt;Get it via&amp;hellip;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Values&lt;/td&gt;
          &lt;td&gt;final, persistent collections&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Functions&lt;/td&gt;
          &lt;td&gt;a.k.a. stateless methods&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Namespaces&lt;/td&gt;
          &lt;td&gt;language support&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Data&lt;/td&gt;
          &lt;td&gt;Maps, arrays, sets, XML, JSON etc&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Polymorphism a la carte&lt;/td&gt;
          &lt;td&gt;Protocols, type classes&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Managed refs&lt;/td&gt;
          &lt;td&gt;Clojure/Haskell refs&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Set functions&lt;/td&gt;
          &lt;td&gt;Libraries&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Queues&lt;/td&gt;
          &lt;td&gt;Libraries&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Declarative data manipulation&lt;/td&gt;
          &lt;td&gt;SQL/LINQ/Datalog&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Rules&lt;/td&gt;
          &lt;td&gt;Libraries, Prolog&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Consistency&lt;/td&gt;
          &lt;td&gt;Transactions, values&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Complexity that you have no control over: Environmental Complexity (Inherent)&lt;/p&gt;
&lt;p&gt;Not part of the problem, part of the implementation.  (You cannot go back to the customer and say the thing you wanted is not good because I have GC problems.)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Programming, when stripped of all its circumstantial irrelevancies, boils down to no more and no less than very effective thinking so as to avoid unmastered complexity, to very vigorous separation of your many different concerns&amp;rdquo;.  &amp;ndash;Edsger W. Dijkstra&lt;/p&gt;
&lt;p&gt;Strictly separating what from how is the key to making how somebody else&amp;rsquo;s problem.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Simplicity is the ultimate sophistication&amp;rdquo;.  &amp;ndash;Leonardo da Vinci&lt;/p&gt;
&lt;p&gt;Here is a somewhat shorter and somewhat different version of this presentation:&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/rI8tNMsozo0&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;</description>
        </item>
        <item>
        <title>6 videos from TechSummit Amsterdam 2017 (Jun 1st)</title>
        <link>//localhost:1313/p/6-videos-from-techsummit-amsterdam-2017-jun-1st/</link>
        <pubDate>Fri, 16 Jun 2017 10:11:13 +0000</pubDate>
        
        <guid>//localhost:1313/p/6-videos-from-techsummit-amsterdam-2017-jun-1st/</guid>
        <description>&lt;p&gt;A couple of weeks ago some of us went to the &lt;a class=&#34;external&#34; 
   href=&#34;https://www.techsummit.io/amsterdam/&#34; target=&#34;_blank&#34;
   &gt;TechSummit conference organized by LeaseWeb&lt;/a&gt;.  Here is a list of the talks that I attended, along with a short description for each.&lt;/p&gt;
&lt;p&gt;The first presentation was “Shaving my head made me a better programmer” by Alex Qin, which was about what it is like to be a woman, and specifically a programmer, in the U.S. tech industry.  (And in the University before that.)  She talked about the inequality, the sexism, and the harassment.   She mentioned that she once gave a talk in a really big conference about accessibility in the U.S., and afterwards she was asked “How do I talk to women at bars?”  The head-shaving part refers to how changing her appearance resulted in being taken more seriously.  It was quite an interesting talk, though I suspect that in Amsterdam, she was to a large extent preaching to the choir.&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/2s541U7I_z8&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;The next presentation was about “Least privilege container deployment” by D. Monica from Docker.&lt;/p&gt;
&lt;p&gt;As you understand, it was mostly about security.  He spoke about six tools that have been developed by the guys at Docker that can be used to provision and manage resources in a distributed system while maintaining security.  These tools are infraKit, linuxKit, runC, containerD, Notary and swarmKit, none of which I had ever heard of before.&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/95POKn1niK8&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;The next presentation was “Why you should run performance tests in the cloud or on CDN”, by J. van Gaalen.&lt;/p&gt;
&lt;p&gt;I attended this one because I have an interest in performance testing, as I am participating in the Performance CoP, but I did not find it as interesting as I had hoped. (No surprises and no eye-opening revelations there.)  The talk focused on the single big-bang event scenario, where you normally have no load on your web site, and suddenly a specific event (e.g. a football game) causes millions of users to visit your site simultaneously.  Admittedly, this scenario has some exotic performance test requirements, but it is largely irrelevant to us.&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/PHEw-btwaJY&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;The next presentation was “Deploying Image Recognition with TensorFlow and Kubernetes” by C. West from Google.&lt;/p&gt;
&lt;p&gt;This was an interesting presentation because of the subject, and because the presenter was quite good at it.  Within half an hour we were taken through a tutorial on setting up a machine learning application using google technologies.&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/QwTW870n2pQ&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;The next presentation was “Containerize everything: Stateful apps on Kubernetes” by Chris Madden.&lt;/p&gt;
&lt;p&gt;It was mainly about using Persistent Volumes of Kubernetes to provision storage for persisting the state of (otherwise stateless) scalable web applications.  Fairly narrow scope, fairly convincing.&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/UqVC0_BtNis&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;The next presentation was “Kubernetes in production” by K. Bollen, (who comes from game development so he likes things to run fast,) and it was a description of how they deploy their web app using kubernetes.  A considerable part of the talk had to do with features and peculiarities of the google infrastructure that they use for this.&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/5bvgTs7DfJ0&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Mind you, these were just the talks that I attended.  There were more, some happening in parallel, and at least one more happening after I left.  (By the time 6th talk was over, my brain was fried.)&lt;/p&gt;</description>
        </item>
        <item>
        <title>What is wrong with UUIDs and GUIDs</title>
        <link>//localhost:1313/p/what-is-wrong-with-uuids-and-guids/</link>
        <pubDate>Mon, 12 Jun 2017 17:47:55 +0000</pubDate>
        
        <guid>//localhost:1313/p/what-is-wrong-with-uuids-and-guids/</guid>
        <description>&lt;h4 id=&#34;introduction&#34;&gt;Introduction
&lt;/h4&gt;&lt;p&gt;Universally Unique Identifiers (UUIDs) otherwise known as Globally Unique Identifiers (GUIDs) are 128-bit numbers that are often used to identify information. In its canonical representation, a UUID looks like this: 2205cf3e-139c-4abc-be2d-e29b692934b0.&lt;/p&gt;
&lt;p&gt;The Wikipedia entry for Universally Unique Identifier (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Universally_unique_identifier&#34; target=&#34;_blank&#34;
   &gt;?&lt;/a&gt;) says that they are &lt;em&gt;for practical purposes unique&lt;/em&gt; and that &lt;em&gt;while the probability that a UUID will be duplicated is not zero, it is so close to zero as to be negligible.&lt;/em&gt; Wikipedia then does the math and shows that if 103 trillion UUIDs are generated, the chance of duplication among them is one in a billion.&lt;/p&gt;
&lt;p&gt;Despite the infinitesimally small chances of receiving a duplicate UUID, there exist programmers out there who are afraid of this actually happening, and who will not hesitate to suspect duplicate UUIDs as being responsible for an observed malfunction rather than first look for a bug in their code. Clearly, these folks do not understand the meaning of &lt;em&gt;infinitesimally small chance&lt;/em&gt;, so let me try to explain it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Infinitessimally small chance&lt;/em&gt; means &lt;em&gt;practically impossible to happen&lt;/em&gt;, and the &lt;em&gt;practically&lt;/em&gt; part is only mentioned for scientific correctness: practically, you can disregard the word &lt;em&gt;practically&lt;/em&gt; and consider it as simply &lt;em&gt;impossible to happen&lt;/em&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Great. Now, let me tell you why I hate UUIDs.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h4 id=&#34;known-disadvantages&#34;&gt;Known disadvantages
&lt;/h4&gt;&lt;p&gt;Disadvantages of UUIDs that are unanimously recognized are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A UUID is 4 times larger than a regular 32-bit integer. This undeniably affects the performance and storage demands of a system. Apparently, the industry has decided that the benefits of UUIDs are so great that they are worth the sacrifice.&lt;/li&gt;
&lt;li&gt;The randomness of UUIDs is technically unsuitable in certain scenarios, for example in database clustered indexes, where the record ids must be sequential. When a UUID is needed in such applications, a special kind of UUID is used which contains a sequential part, but its uniqueness guarantees are severely limited. (Remember that one-in-a-billion chance of duplication mentioned earlier? Well, you may forget it now.)&lt;/li&gt;
&lt;li&gt;UUIDs are cumbersome to debug with, because they are unreadable, non-sequential, and non-repeatable. Debugging is a notoriously difficult process, so we do not need anything that makes it harder than it already is, but the use of UUIDs imposes an additional burden on debugging.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the paragraphs that follow I will address some of those disadvantages in greater detail, and I will also address some disadvantages that I have personally identified with UUIDs.&lt;/p&gt;
&lt;h4 id=&#34;the-entropy&#34;&gt;The entropy
&lt;/h4&gt;&lt;p&gt;When looking at a table of columns, I find that the UUID column is always the angry column. This is because the 32 hexadecimal digits that make up a UUID have a higher concentration of entropy than anything else that I deal with during a regular working day. (It helps that IntelliJ IDEA spares me from having to see git commit hashes.) This is to say that the overwhelming majority of all the entropy that I am exposed to nowadays is due to seeing UUIDs. This was not happening in the days before the UUID; entire weeks could pass without seeing something as hopelessly nonsensical as a UUID, requiring me to coerce my brain to ignore it because &lt;em&gt;there is no sense to be made there&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The higher the entropy of the visual stimulus we are exposed to, the higher the cognitive effort required to process it, even if just to dismiss it as un-processable. This makes UUIDs very tiresome to work with.&lt;/p&gt;
&lt;h4 id=&#34;the-undebuggability&#34;&gt;The Undebuggability
&lt;/h4&gt;&lt;p&gt;Ben Morris says in &lt;em&gt;The Problem with GUIDs&lt;/em&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.ben-morris.com/the-problem-with-guids/&#34; target=&#34;_blank&#34;
   &gt;http://www.ben-morris.com/the-problem-with-guids/&lt;/a&gt;) :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This readability issue is often dismissed as mere inconvenience, but it&amp;rsquo;s a real problem for anybody who has to support applications or trouble-shoot data. GUIDs are often a lazy solution selected by developers who will not have to deal with the support consequences.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re going to replicate or combine disparate data sources then you really will need some globally unique identifiers. However, this is an implementation detail that does not have to be baked into data design. There&amp;rsquo;s nothing to stop you from adding separate identifiers onto your data rows in response to replication requirements.&lt;/p&gt;
&lt;p&gt;Let me explain in a bit more detail what the problem is with troubleshooting in a system that identifies entities using UUIDs instead of regular sequentially issued integers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With sequentially issued integers you can take a mental note of the id of the entity that you are troubleshooting, and then see when and where it pops up. This means noting say, the number 1015, and then looking for a 1015 to appear again. With UUIDs you cannot do that, because a UUID is impossible to memorize. You literally cannot tell that the UUID that you are seeing now is the same as a UUID that you saw a few seconds earlier. Even if you write down the UUID that you are looking for, there is still considerable difficulty in visually comparing a UUID on the screen with a copy you made earlier.&lt;/li&gt;
&lt;li&gt;While you are looking for that 1015, if you see 1010, you know you are close. When you see 1020, you know you passed it. With UUIDs, you cannot do that, because they do not form a sequence. Even when UUIDs are of the special sequentially issued kind, the sequential part is hidden among random digits, making extraction difficult, and even if you detect the subset of the digits that make up the counter, it is in hexadecimal instead of decimal, so it is hard to make sense out of it.&lt;/li&gt;
&lt;li&gt;In the mean time, when the ids of some other entity increment from 2100 to 2200, you know that for every entity of the kind you are troubleshooting, 10 entities of the other kind are being generated. So, if you suddenly see a newly issued id of the other kind in the 3000 range, you know that something for some reason generated more of that kind of entity than expected. No such hint is available when using UUIDs, because they are just random numbers.&lt;/li&gt;
&lt;li&gt;Most importantly, on a subsequent test run, starting with the same initial database state, you can expect the exact same sequential ids to be issued, so you have the exact same ids to troubleshoot. Not so with UUIDs, which are entirely different from run to run.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, what it boils down to is that none of the most common lines of reasoning are applicable when troubleshooting UUIDs: you are constantly in the dark about most aspects that have to do with the identifiers of the entities that you are dealing with.&lt;/p&gt;
&lt;p&gt;Let that sink in for a moment:&lt;/p&gt;
&lt;p&gt;The identifier of an entity is what you use to identify the entity with.&lt;/p&gt;
&lt;p&gt;It is a very important piece of information.&lt;/p&gt;
&lt;p&gt;Arguably, in most scenarios, it is the most important piece of information about an entity.&lt;/p&gt;
&lt;p&gt;UUIDs invalidate all previously known methods of reasoning about identifiers.&lt;/p&gt;
&lt;p&gt;They are essentially useless to humans.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We don&amp;rsquo;t want that.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a matter of fact, let me put it in blunt terms to drive home a point:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What kind of idiot thought that this would be a good idea?&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-needlessness&#34;&gt;The Needlessness
&lt;/h4&gt;&lt;p&gt;I agree that UUIDs have certain usages, but quite often I see them being used in situations where they are not needed, or they are rather unwanted. Here is a stackoverflow question where some genius is assigning names to his threads, and he is using UUIDs as names: &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/questions/44198702/writing-a-custom-threadpool&#34; target=&#34;_blank&#34;
   &gt;Stack Overflow - Writing a custom ThreadPool&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The only scenario where you really need UUIDs is when you have a decentralized system (consisting of &amp;ldquo;nodes&amp;rdquo;) in which all of the following conditions hold true:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You want to have no single point of failure and therefore no single node issuing unique identifiers.&lt;/li&gt;
&lt;li&gt;You have such high performance requirements that you do not want the nodes to have to coordinate with each other in order to issue unique identifiers.&lt;/li&gt;
&lt;li&gt;You are for some reason unable to issue a guaranteed unique node id to each node, so as to trivially solve the problem of unique keys by making each key consist of node id + node-local sequential number.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you do not have a situation that meets all of the above criteria, then you are only using GUIDs because you heard of some really smart and successful guys using them on some really monstrous systems, and you want to be like them.&lt;/p&gt;
&lt;p&gt;The only kind of scenario that I can think of that would actually meet the above criteria would be a system with such a large number of nodes, and such a high new node join rate, that negotiation for a unique node id for each new node would be impractical. There are probably not very many systems in existence on the planet with such requirements, which in turn means that every single one of them is a special case. There is really no point in imposing a worldwide curse on computing just because a few special cases benefit from it.&lt;/p&gt;
&lt;p&gt;If you are using a database, then you probably already have a single point of failure. So, go ahead and use an SQL SEQUENCE, which is very efficient because it caches thousands of ids at a time, and has been available in RDBMS products since the eighties, and part of the standard since SQL2003.&lt;/p&gt;
&lt;p&gt;Many people appear to be under the impression that UUIDs are necessary for replication, but that is not true. What is necessary for replication is row identifiers that are unique over all nodes that participate in the replication of a specific table. That is &amp;ldquo;system-wide per-table unique identifiers&amp;rdquo;, which not even system-unique identifiers, and certainly a far cry from &amp;ldquo;globally-unique&amp;rdquo; identifiers. A unique row identifier could be created by concatenating a unique node identifier with a node-local, table-specific, sequential row number. It is an arbitrary choice of Microsoft SQL Server to require a ROWGUIDCOL of the xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx format for merge replication, (and transactional replication with queued updating subscriptions,) and if we are to believe the documentation, this requirement can be circumvented by creating your own GUIDs instead of using Microsoft&amp;rsquo;s newid() function.&lt;/p&gt;
&lt;p&gt;Another thing that is sometimes cited as a benefit of UUIDs is their alleged ability to be issued off-line. &amp;ldquo;Off line&amp;rdquo; was a condition that computing systems could suffer from in the old times. It is generally not an issue today, and the vast majority of those who cite this as a benefit of UUIDs do not really have an application at hand which really needs to be able to issue ids off-line. However, even in the extremely rare case where being &amp;ldquo;off-line&amp;rdquo; is an issue today, it can be taken care of with special handling. We really do not need to pollute everything everywhere with nonsensical entity identifiers just because some exceedingly rare special cases might benefit from them.&lt;/p&gt;
&lt;h4 id=&#34;the-paradigm-shift&#34;&gt;The paradigm shift
&lt;/h4&gt;&lt;p&gt;When sequentially incrementing integers are used as identifiers, they represent an absolute guarantee that every identifier will be unique. When UUIDs are used, they represent an almost-absolute guarantee.&lt;/p&gt;
&lt;p&gt;Thus, UUIDs have introduced a fundamental and completely unwanted paradigm shift in programming: we have gone from systematic absolute determinism (never leaving anything to chance) to systematic non-absolute determinism (regularly leaving something to, a however minuscule, chance.)&lt;/p&gt;
&lt;p&gt;You see, that&amp;rsquo;s what the almost-absolute is: non-absolute. I am not sure all these people who are so happily using UUIDs realize this. I find it sacrilegious, like picking a buffer size which is not a power of two.&lt;/p&gt;
&lt;h4 id=&#34;the-technological-compromise&#34;&gt;The technological compromise
&lt;/h4&gt;&lt;p&gt;Furthermore, I am not sure people realize that UUIDs represent a technological compromise. Why are UUIDs only 128 bits instead of 256 bits? 256 bits would give even more guarantees of uniqueness, right? How about 512 bits to really make sure no duplicate ever gets issued in this universe and in all parallel universes that we might one day somehow come in contact with? Wouldn&amp;rsquo;t that be the ultimate? Well, obviously, there will always be an even higher number of bits that will always be better, so what it boils down to is that a compromise has been made.&lt;/p&gt;
&lt;p&gt;The thing with GUIDs is that we don&amp;rsquo;t want them to be huge, because then they would be wasteful, so someone had to come up with a number of bits that is small enough to not be too wasteful and yet large enough to give a reasonable guarantee against collisions. And so, 128 bits it is.&lt;/p&gt;
&lt;p&gt;However, if history has taught us anything, it is that technological compromises always seem very reasonable at the time that they are made, and invariably turn out to be unreasonable at a later point in time. There is really no difference between saying &amp;ldquo;128 bits should be enough for everyone&amp;rdquo; and saying &amp;ldquo;640K should be enough for everyone&amp;rdquo;. At the time that the decision was made to make 640K the absolute upper limit for the amount of memory that the IBM PC could be equipped with, this amount was considered so astronomically large, that nobody was expected to ever have a use for it. Similarly, in our century 128-bit UUIDs seem to be a good compromise, but with almost mathematical certainty there will be another century when this compromise will not be so good anymore.&lt;/p&gt;
&lt;h4 id=&#34;epilogue&#34;&gt;Epilogue
&lt;/h4&gt;&lt;p&gt;I do believe that there will be a time, maybe in a couple of thousand years from now, maybe sooner, when we will be colonizing the galaxy, our population will be in the trillions, the individual devices embedded everywhere will number in the quadrillions, and every single one of those devices will be generating UUIDs at rates that are unthinkable today. When that time comes, we will inevitably start running into trouble with duplicate UUIDs popping up every once in a while in distant areas of the galaxy, and then it will be like 640k of memory all over again, two-digit-year millennium bug all over again, DLL hell all over again, all of them combined.&lt;/p&gt;
&lt;p&gt;When that time comes, I hope that we as a species still have some sufficiently low-level understanding of how our computers work, so as to be able to fix them. I fear we might not.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/what-is-wrong-with-uuids-and-guids/media/grumpy-cat-guids.jpg&#34;
	width=&#34;600&#34;
	height=&#34;400&#34;
	srcset=&#34;//localhost:1313/p/what-is-wrong-with-uuids-and-guids/media/grumpy-cat-guids_hu_113e75b0e444c92f.jpg 480w, //localhost:1313/p/what-is-wrong-with-uuids-and-guids/media/grumpy-cat-guids_hu_6da3ebde98bc76da.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;This post was inspired by a Stack Overflow answer that I wrote, here:
&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/8642874/773113&#34; target=&#34;_blank&#34;
   &gt;https://stackoverflow.com/a/8642874/773113&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>My notes on the Fielding Dissertation (REST)</title>
        <link>//localhost:1313/p/my-notes-on-the-fielding-dissertation-rest/</link>
        <pubDate>Sat, 03 Jun 2017 21:02:34 +0000</pubDate>
        
        <guid>//localhost:1313/p/my-notes-on-the-fielding-dissertation-rest/</guid>
        <description>&lt;p&gt;These are my notes on Roy T. Fielding&amp;rsquo;s famous Ph.D. dissertation &amp;ldquo;Architectural Styles and the Design of Network-based Software Architecture&amp;rdquo;&lt;/p&gt;
&lt;p&gt;What follows are excerpts from the dissertation, with my notes usually in parentheses.&lt;/p&gt;
&lt;p&gt;Roy Thomas Fielding is: chief Scientist in some tech company; Chairman, Apache Software Foundation; Visiting Scholar, W3C @ MIT CS Lab; etc; Publications, Honors, Awards, Fellowships etc. Involved in the authoring of the Internet standards for the Hypertext Transfer Protocol (HTTP) and Uniform Resource Identifiers (URI).&lt;/p&gt;
&lt;p&gt;Abstract:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The World Wide Web has succeeded in large part because its software architecture has been designed to meet the needs of an Internet-scale distributed hypermedia system.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;(He makes it sound as if it was designed this way on purpose.)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;In order to identify {&amp;hellip;} aspects of the Web that needed improvement and avoid undesirable modifications, a model for the modern Web architecture was needed to guide its design, definition, and deployment.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;(So, he admits the need to build a model after the fact.)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;An architectural style is a named, coordinated set of architectural constraints.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This dissertation defines a framework for understanding software architecture via architectural styles and demonstrates how styles can be used to guide the architectural design of network-based application software.&lt;/p&gt;
&lt;p&gt;A survey of architectural styles for network-based applications is used to classify styles according to the architectural properties they induce on an architecture for distributed hypermedia.&lt;/p&gt;
&lt;p&gt;I then introduce the Representational State Transfer (REST) architectural style and describe how REST has been used to guide the design and development of the architecture for the modern Web.&lt;/p&gt;
&lt;p&gt;REST emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems.&lt;/p&gt;
&lt;p&gt;I describe the software engineering principles guiding REST and the interaction constraints chosen to&lt;/p&gt;
&lt;p&gt;retain those principles, contrasting them to the constraints of other architectural styles.&lt;/p&gt;
&lt;p&gt;Finally, I describe the lessons learned from applying REST to the design of the Hypertext Transfer Protocol and Uniform Resource Identifier standards, and from their subsequent deployment in Web client and server software.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Introduction&lt;/p&gt;
&lt;p&gt;The guideline that “form follows function” comes from hundreds of years of experience with failed building projects, but is often ignored by software practitioners.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The hyperbole of The Architects Sketch may seem ridiculous, but consider how often we see software projects begin with adoption of the latest fad in architectural design, and only later discover whether or not the system requirements call for such an architecture. Design-by-buzzword is a common occurrence.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;(Aa-aa-aa-aa-meeeen, brutha!)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;This dissertation explores a junction on the frontiers of two research disciplines in computer science: software and networking. Software research has long been concerned with the categorization of software designs and the development of design methodologies, but has rarely been able to objectively evaluate the impact of various design choices on system behavior. Networking research, in contrast, is focused on the details of generic communication behavior between systems and improving the performance of particular communication techniques, often ignoring the fact that changing the interaction style of an application can have more impact on performance than the communication protocols used for that interaction.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. When given a name, a coordinated set of architectural constraints becomes an architectural style.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Over the past six years, the REST architectural style has been used to guide the design and development of the architecture for the modern Web, as presented in Chapter 6.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;(so, I am not sure I understand: did the author come up with REST, or is he just documenting it?)&lt;/p&gt;
&lt;p&gt;Chapter 1&lt;/p&gt;
&lt;p&gt;&amp;ldquo;This raises an important distinction between software architecture and what is typically referred to as software structure: the former is an abstraction of the run-time behavior of a software system, whereas the latter is a property of the static software source code&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Chapter 2&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The primary distinction between network-based architectures and software architectures in general is that communication between components is restricted to message passing {6}, or the equivalent of message passing if a more efficient mechanism can be selected at run-time based on the location of components {128}.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Tanenbaum and van Renesse {127} make a distinction between distributed systems and network-based systems: a distributed system is one that looks to its users like an ordinary centralized system, but runs on multiple, independent CPUs. In contrast, network-based systems are those capable of operation across a network, but not necessarily in a fashion that is transparent to the user. In some cases it is desirable for the user to be aware of the difference between an action that requires a network request and one that is satisfiable on their local system, particularly when network usage implies an extra transaction cost {133}. This dissertation covers network-based systems by not limiting the candidate styles to those that preserve transparency for the user.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;An interesting observation about network-based applications is that the best application performance is obtained by not using the network. This essentially means that the most efficient architectural styles for a network-based application are those that can effectively minimize use of the network when it is possible to do so, through reuse of prior interactions (caching), reduction of the frequency of network interactions in relation to user actions (replicated data and disconnected operation), {&amp;hellip;}&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Scalability refers to the ability of the architecture to support large numbers of components, or interactions among components, within an active configuration.&amp;rdquo; I do not think that&amp;rsquo;s a good definition of scalability.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Scalability can be improved by simplifying components, by distributing services across many components (decentralizing the interactions), and by controlling interactions and configurations as a result of monitoring.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;(I think scalability is something better thought of as achieved or not achieved, rather than something sort of achieved and then improved upon.)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Styles influence these factors by determining the location of application state, the extent of distribution, and the coupling between components.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;(Interestingly enough, even though the author appears to have gotten the previous two&lt;/p&gt;
&lt;p&gt;two sentences wrong, this conclusion appears to be correct.)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Generality of connectors leads to middleware.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;(I do not object to that, but I have no idea what the author is on to with it.)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Modifiability is about the ease with which a change can be made to an application architecture. Modifiability can be further broken down into evolvability, extensibility, customizability, configurability, and reusability, as described below. A particular concern of network-based systems is dynamic modifiability {98}, where the modification is made to a deployed application without stopping and restarting the entire system.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;the system must be prepared for gradual and fragmented change, where old and new implementations coexist, without preventing the new implementations from making use of their extended capabilities&amp;rdquo;&lt;/p&gt;
&lt;p&gt;(I think this may be a fallacy, or at least only possible in trivial scenarios. I think that what is far more likely to happen is that the introduction of a new feature will be incompatible with keeping an old feature around in any way shape or form. Essentially, the only way for the old functionality to remain available will be by re-implementing the associated module so that it emulates the old functionality using the new functionality.  (Providing an &amp;ldquo;illusion&amp;rdquo; of the old functionality.) And then, should this completely rewritten reincarnation of the old implementation be allowed to keep the old version number?  In theory, if your testing is not just extremely robust but actually perfect, then yes.  In practice, no.)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Evolvability represents the degree to which a component implementation can be changed without negatively impacting other components.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Extensibility is defined as the ability to add functionality to a system. Dynamic extensibility implies that functionality can be added to a deployed system without impacting the rest of the system.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Customizability refers to the ability to temporarily specialize the behavior of an architectural element, such that it can then perform an unusual service. A component is customizable if it can be extended by one client of that component’s services without adversely impacting other clients of that component. {&amp;hellip;} Customizability is a property induced by the remote evaluation and code-on-demand styles&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Configurability is related to both extensibility and reusability in that it refers to post-deployment modification of components, or configurations of components, such that they are capable of using a new service or data element type.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Reusability is a property of an application architecture if its components, connectors, or data elements can be reused, without modification, in other applications. The primary mechanisms for inducing reusability within architectural styles is reduction of coupling (knowledge of identity) between components and constraining the generality of component interfaces.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;(*Constraining* the generality of component interfaces?  Is that an error?  I thought that&lt;/p&gt;
&lt;p&gt;the more general the interface, the more reusable the component.)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Visibility {&amp;hellip;} refers to the ability of a component to monitor or mediate the interaction between two other components.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Software is portable if it can run in different environments.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Reliability, within the perspective of application architectures, can be viewed as the degree to which an architecture is susceptible to failure at the system level in the presence of partial failures within components, connectors, or data. Styles can improve reliability by avoiding single points of failure, enabling redundancy, allowing monitoring, or reducing the scope of failure to a recoverable action.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Chapter 3&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The purpose of building software is not to create a specific topology of interactions or use a particular component type — it is to create a system that meets or exceeds the application needs. The architectural styles chosen for a system’s design must conform to those needs, not the other way around.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Chapter 4&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Working groups within the Internet Engineering Taskforce were formed to work on the Web’s three primary standards: URI, HTTP, and HTML. The charter of these groups was to define the subset of existing architectural communication that was commonly and consistently implemented in the early Web architecture, identify problems within that architecture, and then specify a set of standards to solve those problems.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;(yup, that pretty much sums it up: it began as chaos, and any attempts to put the chaos into order were post-hoc.)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The next chapter introduces and elaborates the Representational State Transfer (REST) architectural style for distributed hypermedia systems, as it has been developed to represent the model for how the modern Web should work. REST provides a set of architectural constraints that, when applied as a whole, emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Chapter 5&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The REST interface is designed to be efficient for large-grain hypermedia data transfer, optimizing for the common case of the Web, but resulting in an interface that is not optimal for other forms of architectural interaction.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;REST is defined by four interface constraints: identification of resources; manipulation of resources through representations; self-descriptive messages; and, hypermedia as the engine of application state.&amp;rdquo;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;continue on last paragraph of page 83&lt;/p&gt;</description>
        </item>
        <item>
        <title>Roy T. Fielding: Understanding the REST Style</title>
        <link>//localhost:1313/p/roy-t.-fielding-understanding-the-rest-style/</link>
        <pubDate>Tue, 23 May 2017 07:21:30 +0000</pubDate>
        
        <guid>//localhost:1313/p/roy-t.-fielding-understanding-the-rest-style/</guid>
        <description>&lt;p&gt;A YouTube videoclip titled &amp;ldquo;Roy T. Fielding: Understanding the REST Style&amp;rdquo;&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/w5j2KwzzB-0&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Quote: &amp;ldquo;It&amp;rsquo;s really an accessible piece of work.  It is not full of equations.  There is one equation.  The equation is there just to have an equation, by the way.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;For my notes on REST, see other post: &lt;a 
   href=&#34;//localhost:1313/p/my-notes-on-the-fielding-dissertation-rest/&#34;
   &gt;My notes on the Fielding Dissertation (REST)&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>On scripting languages</title>
        <link>//localhost:1313/p/on-scripting-languages/</link>
        <pubDate>Fri, 19 May 2017 19:46:34 +0000</pubDate>
        
        <guid>//localhost:1313/p/on-scripting-languages/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-scripting-languages/images/pacifiers.jpg&#34;
	width=&#34;1023&#34;
	height=&#34;575&#34;
	srcset=&#34;//localhost:1313/p/on-scripting-languages/images/pacifiers_hu_6f30f1f417e0fba0.jpg 480w, //localhost:1313/p/on-scripting-languages/images/pacifiers_hu_ac31a6389070d9d4.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Teething rings (pacifiers) found on the great interwebz.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;foreword&#34;&gt;Foreword
&lt;/h3&gt;&lt;p&gt;Historically, the difference between scripting languages and real programming languages has been understood as the presence or absence of a compilation step. However, in recent decades the distinction has blurred; from time to time we have seen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interpreters for languages that were originally meant to be compiled.&lt;/li&gt;
&lt;li&gt;Compilers for languages that were originally meant to be interpreted.&lt;/li&gt;
&lt;li&gt;Scripting engines internally converting source code to bytecode before
interpreting it.&lt;/li&gt;
&lt;li&gt;Real languages compiling to bytecode which is then mostly interpreted and
rarely converted to machine code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, compiled vs. interpreted does not seem to be the real differentiating factor; nonetheless, we can usually tell a scripting language when we see one. So, what is it that we see?&lt;/p&gt;
&lt;p&gt;(Useful pre-reading:  &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;First, let us identify the three different kinds of error that can potentially occur in program code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Syntax Error:&lt;/strong&gt; this represents a violation of fundamental rules governing the &lt;em&gt;form&lt;/em&gt; of the language; for example, in most programming languages the statement &lt;code&gt;a = ;&lt;/code&gt; is a syntax error, because something is obviously missing between the equals sign and the semicolon.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Semantic Error:&lt;/strong&gt; this represents failure to respect the &lt;em&gt;meaning&lt;/em&gt; of things; for example, in most languages the statement &lt;code&gt;a = &amp;quot;x&amp;quot; / 5;&lt;/code&gt; is syntactically correct but semantically incorrect, because dividing a string by a number does not make sense. As another example, the statement &lt;code&gt;a.increment();&lt;/code&gt; may represent a semantic error if object &lt;code&gt;a&lt;/code&gt; has no method called &lt;code&gt;increment&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logic Error:&lt;/strong&gt; this corresponds to a mistake in our &lt;em&gt;reasoning&lt;/em&gt;. For example, the statement &lt;code&gt;circumference = radius * π&lt;/code&gt; can be correct both syntactically and semantically, but it is nonetheless flawed, because this is not how you calculate a circumference given a radius; the correct formula also involves a multiplication by 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the three types of error that we have identified, the first and the last are unaffected by our choice of programming language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Syntax error will be detected by any halfway decent IDE regardless of whether we are using a scripting language or a real programming language.&lt;/li&gt;
&lt;li&gt;Logic error is just as easy to make in any programming language, and the way we protect ourselves against it is by writing copious amounts of automated software tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Semantic Error is where different kinds of languages take vastly different approaches. This type of error is closely associated with the concept of data types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The expression &lt;code&gt;&amp;quot;x&amp;quot; / 5&lt;/code&gt; is flawed because the left operand is of type string, while the right operand is of a numeric type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The validity of the statement &lt;code&gt;a.increment()&lt;/code&gt; depends upon the type of &lt;code&gt;a&lt;/code&gt;, and whether that type defines an &lt;code&gt;increment()&lt;/code&gt; method or not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the programming language is strongly typed, then semantic error will always be detected during compilation, so there is never any danger of attempting to run (or ship to the customer) a program containing this kind of error; however, if the programming language is weakly typed, then all semantic error will go undetected until an attempt is made to execute code containing such error, at which point the software will severely malfunction.&lt;/p&gt;
&lt;p&gt;In light of the above, I would suggest that the actual differentiating factor between real programming and scripting languages is nothing but the presence or absence of semantic checking, in other words the use of strong vs. weak typing.&lt;/p&gt;
&lt;p&gt;TypeScript is the odd exception to the rule, and this is to be expected, because the impetus for the creation of TypeScript was vastly different from that of other scripting languages, which tend to be one-man efforts, and usually come into existence as nothing more than toy projects. In contrast, TypeScript was the result of a deliberate group effort backed by a big company (Microsoft) starting with the realization that JavaScript is unfortunately here to stay, and setting out specifically to correct one of its major deficiencies, namely the lack of strong typing.&lt;/p&gt;
&lt;p&gt;The trend of real programming languages to be compiled and of scripting languages to be interpreted can be explained &lt;em&gt;in full&lt;/em&gt; as a consequence of the primary choice of strong vs. weak typing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If a language is strongly typed, then a compilation step is very useful to
have, because it will unfailingly locate all errors that are detectable via
static semantic analysis before attempting to run.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If a language is weakly typed, then semantic errors are undetectable, so
there is no need to parse code in advance. A compilation step would only
reveal syntactic errors, which can also be detected by any halfway decent
IDE.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, allowing for the exception of TypeScript, this leaves us with the following soft rule:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Real languages are strongly typed, employ semantic checking, and are therefore usually compiled.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Scripting languages are weakly typed, lack semantic checking, and are  therefore usually interpreted.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And yet, many people like scripting languages, and write lots of code in them, supposedly because they are &amp;ldquo;easier&amp;rdquo;. This brings to mind the famous quote by Edsger W. Dijkstra:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{&amp;hellip;} some people found error messages they couldn&amp;rsquo;t ignore more annoying than wrong results, and, when judging the relative merits of programming languages, some still seem to equate &amp;ldquo;the ease of programming&amp;rdquo; with the ease of making undetected mistakes.&lt;/p&gt;
&lt;p&gt;(Edsger W. Dijkstra, &lt;em&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD667.html&#34; target=&#34;_blank&#34;
   &gt;On the foolishness of &amp;ldquo;natural language programming&amp;rdquo;&lt;/a&gt;.&lt;/em&gt;)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Note that the above quote is from a paper about Natural Language Programming (NLP) but the particular passage containing the quote pertains to programming languages in general. Dijkstra wrote against NLP back in the 1980s because at that time it was being considered by some fools as a viable prospect; luckily, it failed to catch on, (or &lt;em&gt;naturally&lt;/em&gt;, if you would permit the pun,) but little did ol&amp;rsquo; Edsger know that in the decades that would follow his nightmares would come true, because scripting languages &lt;em&gt;did&lt;/em&gt; catch on. Apparently, people &lt;em&gt;love&lt;/em&gt; making undetected mistakes.&lt;/p&gt;
&lt;h3 id=&#34;arguments-in-favor-of-scripting-languages&#34;&gt;Arguments in favor of scripting languages
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; It is easy to write code in it; look, the &amp;ldquo;hello, world!&amp;rdquo; program is a one-liner.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; What this means is that this scripting language is a very good choice, possibly even the ideal choice, for writing the &amp;ldquo;hello, world!&amp;rdquo;  program.&lt;/p&gt;
&lt;p&gt;The ease with which you may write &amp;ldquo;hello, world!&amp;rdquo; is no indication whatsoever about the ease with which a non-trivial system may be collaboratively developed, tested, debugged, maintained, and extended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; No, I mean it is really terse. There are many things besides &amp;ldquo;hello, world!&amp;rdquo; that I can write in one line.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Sure, you can write them in one line; but can you read them?&lt;/p&gt;
&lt;p&gt;One of the most important aspects of code is readability, (second only to correctness,) but terse code is not necessarily easy to read; if that was the case, then Perl would be the most readable language ever, but instead it enjoys the dubious distinction of being the least readable among all programming languages in general use.&lt;/p&gt;
&lt;p&gt;Terseness usually represents a tradeoff between verbosity and understandability: the more terse the code, the less of it you have to read, but also the harder it is to untangle its complexity. Thus, it is debatable whether terseness correlates with readability. Terseness appears to be the modern trend, so as real programming languages keep evolving they are also receiving features that make them more and more terse, for example tuples, lambdas, the fluent style of invocations, etc. So, terseness is not the exclusive domain of scripting languages, and to the extent that scripting languages go further in this regard it is debatable whether it is an advantage or a disadvantage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; There are lots of libraries for it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Seriously? There are more libraries for your scripting language than there are for Java?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I don&amp;rsquo;t have to compile it; I just write my code and run it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; I also just write my code and run it. When I hit the &amp;ldquo;launch&amp;rdquo; button, my IDE compiles my code in the blink of an eye and runs it. The difference between you and me is that if I have made any semantic mistakes in my code, I will be told so before wasting my time trying to run it. But what am I saying, being told that there are semantic mistakes in your code probably counts as a disadvantage for you, right?&lt;/p&gt;
&lt;p&gt;The ability to just write your code and run it without any semantic checking is causing real harm in scripting languages because it prevents them from evolving. This is, for example, a reason why Python version 2.x is still enjoying widespread use despite the language having moved on to version 3.x by now: people are afraid to make the transition to version 3.x in existing projects, even though it is mostly backwards compatible with version 2.x, because it is not 100% compatible, and lack of semantic checking means that there is no way of knowing which lines of code will break unless these lines get executed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I can modify my program as it runs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; I can also modify my program as it runs; the ability to do this is available in most real programming languages, and it is called &amp;ldquo;edit and continue&amp;rdquo; or &amp;ldquo;hot reload&amp;rdquo; depending on the language; look it up.&lt;/p&gt;
&lt;p&gt;Modification of running code is not always applicable in real programming languages, and it does not always work, but then again nor does it always work when you modify running code in a scripting language, because usually, you already have data structures in memory that were created by the code before it was modified. In real programming languages, you are prevented from making edits to running code that would seriously foul things up; in scripting languages, you are allowed to do whatever you please, and the catastrophic consequences of doing so are your own problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I do not like to have to declare the type of every single variable because it is a pain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; This is akin to arguing against seat belts because putting them on and taking them off is a pain. Do you have any idea of what kind of pain you are looking at if you get in a traffic accident without a seat belt?&lt;/p&gt;
&lt;p&gt;Furthermore, the ability to not have to declare the type of every single variable is not the exclusive privilege of scripting languages, because in recent years type inference has been gaining ground in real programming languages, allowing us to omit declaring the type of many of the variables that we use. The difference is that in real programming languages this is done right, by means of type inference instead of type ostrichism:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Type inference is deterministic extra work that the compiler does for us,
and it relies on having already assigned specific types to other variables,
so that we do not have to repeat things that are already known to, or can be
inferred by, the compiler.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type ostrichism is scripting language programmers preferring to not see
types and to not deal with types, as if that will make the types go away.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It might be worth taking a look at PEP 483 (&lt;a class=&#34;external&#34; 
   href=&#34;https://peps.python.org/pep-0483/&#34; target=&#34;_blank&#34;
   &gt;https://peps.python.org/pep-0483/&lt;/a&gt;) where the people responsible for the advancement of Python are acknowledging that behind the scenes every variable is of course of a specific type, and discussing the potential benefits of adding a type annotation system to the language which will allow programmers to make their intentions about types explicit, so as to be able to at least partially, and at least as an afterthought, enjoy some of the benefits of strong typing. I quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These annotations can be used to avoid many kind of bugs, for documentation purposes, or maybe even to increase speed of program execution.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I am not worried about errors, because I use testing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Oh really? Are your tests achieving even a mere 60% code coverage as we speak? And supposing that they do, how do you feel about the fact that in the remaining 40%, every single line is liable to break due to reasons as trivial and yet as common as a typo?&lt;/p&gt;
&lt;p&gt;Testing is an indispensable quality assurance mechanism for software, but it does not, in and by itself, guarantee correctness. You can easily forget to test something, and you can easily test &amp;ldquo;around&amp;rdquo; a bug, essentially creating tests that pretty much require the bug to be in place in order to pass. Despite these deficiencies, testing is still very important, but it is nothing more than a weapon in our arsenal against bugs. This arsenal also happens to include another weapon, which is closer to the forefront in the battle against bugs, and it is 100% objective, and &lt;em&gt;definitive&lt;/em&gt;. This weapon is called &lt;em&gt;strong typing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; It has lots and lots of built-in features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Sure, and that&amp;rsquo;s why scripting languages are not entirely useless. If the only thing that matters is to accomplish a certain highly self-contained goal of severely limited scope in as little time as possible, then please, by all means, do go ahead and use your favorite scripting language with its awesome built-in features. However, if the project is bound to take a life of its own, you are far better off investing a couple of minutes to create a project in a real programming language, and to include the external libraries that will give you any extra features that you might need.&lt;/p&gt;
&lt;p&gt;Built-in features do not only come with benefits; in contrast to libraries, they are much more difficult to evolve, because even a minute change in them may break existing code, resulting in people being reluctant to migrate to the latest version of the language. (Take the Python 2.x vs. 3.x conundrum for example.)&lt;/p&gt;
&lt;p&gt;Furthermore, built-in features usually have to be supported forever, even after better alternatives have been invented, or after they simply go out of style and fall out of grace, so over time scripting languages tend to gather lots of unnecessary baggage. We have tried feature-bloated programming languages before, (with ADA for example,) and the consensus is that they are not the way to go.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; But really, it is so much easier! Look here, in one statement I obtain a list and assign its elements to individual variables!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; That&amp;rsquo;s great, I bet this has slashed your time-to-market by half. What happens if the number of elements in the list differs from the number of variables that you decompose it into? I bet there is no error, because you do not like being bothered with errors, right?&lt;/p&gt;
&lt;p&gt;In any case, my compiled language of choice has its own unique, arcane syntax quirks that I could, if I wanted to, claim that they make things so much easier for me.&lt;/p&gt;
&lt;p&gt;Some of them are not even that arcane; for example, instead of using clunky annotations to hint to the IDE the types of my variables, so that it can then provide me with some rudimentary type checking, I get to simply declare the type of each variable as part of the actual syntax of the language! Imagine that!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I like dynamic typing. It gives me freedom.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Yes, freedom to shoot yourself in the foot. Also please note that there is no such thing as &amp;ldquo;dynamic&amp;rdquo; typing; this term is just a euphemism invented by scripting language aficionados to down-play the detrimental nature of this practice. The proper term is &lt;em&gt;&lt;strong&gt;weak&lt;/strong&gt;&lt;/em&gt; typing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I do not need type safety. I am better off without it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Right. So, you are the technological equivalent of an anti-vaxxer. (Credit: &lt;a class=&#34;external&#34; 
   href=&#34;https://danluu.com/empirical-pl/&#34; target=&#34;_blank&#34;
   &gt;danluu&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; I do not have to use an IDE, I can just use my favorite text editor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rebuttal:&lt;/strong&gt; Oh sure. You are also the technological equivalent of an Amish farmer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument:&lt;/strong&gt; My scripting language is trendy. It is hip.&lt;/p&gt;
&lt;p&gt;No contest here. I can&amp;rsquo;t argue with hipsters.&lt;/p&gt;
&lt;h3 id=&#34;the-problems-with-scripting-languages&#34;&gt;The problems with scripting languages
&lt;/h3&gt;&lt;h4 id=&#34;the-nonsense&#34;&gt;The nonsense
&lt;/h4&gt;&lt;p&gt;I don&amp;rsquo;t need to say much here, just watch the legendary &amp;ldquo;Wat&amp;rdquo; video by Gary Bernhardt from CodeMash 2012, it is only 4 minutes long:&lt;/p&gt;
&lt;video width=&#34;97%&#34; poster=&#34;https://www.destroyallsoftware.com/assets/posters/talks/wat.poster-4f5425901c10ffeaceb61f82e25dc40b9212aadf078cead0dc6ffe40696e2bec.png&#34; preload=&#34;none&#34;&gt;
        &lt;source src=&#34;https://destroyallsoftware-talks.s3.amazonaws.com/wat.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;amp;X-Amz-Credential=AKIAIKRVCECXBC4ZGHIQ%2F20241128%2Fus-east-1%2Fs3%2Faws4_request&amp;amp;X-Amz-Date=20241128T124514Z&amp;amp;X-Amz-Expires=14400&amp;amp;X-Amz-SignedHeaders=host&amp;amp;X-Amz-Signature=866f87a9e2a988029db034ad51f846818c5a2e4415da80559bb334e602fd6bad&#34;&gt;
        &lt;track label=&#34;English&#34; kind=&#34;captions&#34; srclang=&#34;en&#34; src=&#34;//localhost:1313/captions/talks/wat.vtt&#34;&gt;&lt;/track&gt;
&lt;/video&gt;
&lt;p&gt;Source: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.destroyallsoftware.com/talks/wat&#34; target=&#34;_blank&#34;
   &gt;https://www.destroyallsoftware.com/talks/wat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The reason for all this nonsense is that all these languages are hacks.&lt;/p&gt;
&lt;p&gt;When the foundation that you are working on is a hack, then either anything you will build on top of it will in turn be a hack, or you are going to be putting an enormous effort to circumvent the hackiness of the foundation and build something reasonable over it. Why handicap yourself?&lt;/p&gt;
&lt;h4 id=&#34;the-errors&#34;&gt;The errors
&lt;/h4&gt;&lt;p&gt;Lack of semantic checking means that the mistakes that will inevitably be made will not be caught by a compilation step. Therefore, lack of semantic checking necessarily means that there will be more errors.&lt;/p&gt;
&lt;p&gt;It is an established fact that a certain percentage of errors will always pass testing and make it to production, which in turn inescapably means that there will be a somewhat increased number of bugs in production.&lt;/p&gt;
&lt;p&gt;This alone is enough to classify scripting languages as unsuitable for anything but tinkering, and the debate should be over right there.&lt;/p&gt;
&lt;h4 id=&#34;the-crippled-ide&#34;&gt;The crippled IDE
&lt;/h4&gt;&lt;p&gt;Lack of semantic checking means that your IDE cannot provide you with many useful features that you get with strongly typed languages. Specifically, you either have limited functionality, or you do not have at all, some or all of the following features:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Context-sensitive argument auto-completion.&lt;/strong&gt; Since any parameter to any function can be of any type, the IDE usually has no clue as to which of the variables in scope may be passed to a certain parameter of a certain function. Therefore, it has to suggest everything that happens to be in scope. Most of these suggestions are preposterous, some are even treacherous.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Member Auto-completion.&lt;/strong&gt; Since a variable does not have a specific type, the IDE usually has no clue as to what member fields and functions are exposed by that variable. Therefore, either it cannot give any suggestions, or it has to suggest every single member of every single known type and the kitchen sink.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listing all usages of a type.&lt;/strong&gt; Since any variable can be of any type, the IDE usually has no clue as to where a given type is used, or if it is used at all. Contrast this with strongly typed languages where the IDE can very accurately list all usages of any given type and even provide you with visual clues about unused types.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type sensitive search.&lt;/strong&gt; If you have multiple different types where each one of them contains, say, a &lt;code&gt;Name&lt;/code&gt; member, you cannot search for all references of the &lt;code&gt;Name&lt;/code&gt; member of only one of those types. You have to use text search, which will yield all irrelevant synonyms in the results. This can be okay in tiny projects, but it very quickly becomes non-viable as the project size increases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Refactoring.&lt;/strong&gt; When the IDE has no knowledge of the semantics of your code, it is incapable of performing various useful refactoring operations on it. IDEs that nonetheless offer some limited set of refactoring features on untyped languages are actually faking it; they should not be calling it refactoring, they should be calling it &lt;em&gt;Cunning Search and Replace&lt;/em&gt;. Needless to say, it does not always work as intended, and it does sometimes severely mess up the code. (When this happens, it is called &lt;em&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.catb.org/jargon/html/S/search-and-destroy-mode.html&#34; target=&#34;_blank&#34;
   &gt;Search and Destroy&lt;/a&gt;.&lt;/em&gt;) Furthermore, since there is no compiler, you have no way of knowing that a line of code has been messed up until that line of code gets executed, which is something that may happen very rarely for some lines of code.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;that-little-performance-issue&#34;&gt;That little performance issue
&lt;/h4&gt;&lt;p&gt;Performance is generally not an issue for scripting languages, because they tend to be used in situations where performance is not required.&lt;/p&gt;
&lt;p&gt;(There are of course some situations where people opt to use a scripting language despite the fact that performance matters, and in those situations people do in fact suffer the consequences of poor performance, take web servers written in node.js for example.)&lt;/p&gt;
&lt;p&gt;In today&amp;rsquo;s world where the majority of personal computers are running on precious battery power, it can be argued that even the tiniest bit of performance matters, but we can let that one slide, since battery technology is constantly improving.&lt;/p&gt;
&lt;p&gt;In cases where performance matters but the task at hand is well-defined and relatively isolated, performance is again not an issue for scripting languages because external libraries tend to be quickly developed to handle those tasks. (These external libraries are written in guess what: &lt;em&gt;real&lt;/em&gt; programming languages.)&lt;/p&gt;
&lt;p&gt;Having explained that performance is usually not an issue, let us also quickly mention before moving on that on computationally expensive tasks, such as iterating over all pixels of an image to manipulate each one of them, and assuming a competent programmer in each language, the following statements hold true:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there is no way that a scripting language will perform as well as Java, just as:&lt;/li&gt;
&lt;li&gt;there is no way that Java will perform as well as C++, just as:&lt;/li&gt;
&lt;li&gt;there is no way that C++ will perform as well as Assembly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stop arguing about this.&lt;/p&gt;
&lt;h4 id=&#34;the-horrendous-syntax&#34;&gt;The horrendous syntax
&lt;/h4&gt;&lt;p&gt;Most scripting languages suffer from a severe case of capriciously arcane and miserably grotesque syntax. No, beauty is not in the eye of the beholder, and there is only a certain extent up to which aesthetics are subjective.&lt;/p&gt;
&lt;p&gt;The syntax of scripting languages tends to suffer due to various reasons, the most common being:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their priorities are all wrong to begin with.&lt;/li&gt;
&lt;li&gt;They were hastily hacked together in a very short amount of time.&lt;/li&gt;
&lt;li&gt;Plain incompetence on behalf of their creators.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scripting languages that have their priorities wrong are, for example, all the shell scripting languages. These languages aim to make strings (filenames) look and feel as if they are identifiers, so that you can type commands without having to enclose them in quotes, as if the convenience of not having to use quotes was the most important thing ever. If all we want to do in a shell script is to list a sequence of commands to execute, then this convenience is perhaps all we care for, but the moment we try to use any actual programming construct, like variables and flow control statements, what we have in our hands is a string-escaping nightmare of epic proportions.&lt;/p&gt;
&lt;p&gt;Obligatory XKCD comic:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/on-scripting-languages/images/xkcd-backslash.png&#34;
	width=&#34;571&#34;
	height=&#34;207&#34;
	srcset=&#34;//localhost:1313/p/on-scripting-languages/images/xkcd-backslash_hu_a3b55ba8a827aa03.png 480w, //localhost:1313/p/on-scripting-languages/images/xkcd-backslash_hu_1eec207eb5351c55.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Backslashes&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;275&#34;
		data-flex-basis=&#34;662px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;(Source: &amp;ldquo;Backslashes&amp;rdquo; &lt;a class=&#34;external&#34; 
   href=&#34;https://www.xkcd.com/1638/&#34; target=&#34;_blank&#34;
   &gt;https://www.xkcd.com/1638/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;A scripting language that owes its bad syntax to being hastily hacked together is JavaScript. Brendan Eich, its creator, has admitted that JavaScript was developed within a couple of weeks, and that the language was not meant for anything but short isolated snippets of code. He is honest enough to speak of his own creation in derogatory terms, and to accept blame. (See &lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=zlcnOr81lPc&#34; target=&#34;_blank&#34;
   &gt;TEDxVienna 2016&lt;/a&gt;, opening statement, &amp;ldquo;Hello, I am to blame for JavaScript&amp;rdquo;.)  Also, pretty much anyone deeply involved with JavaScript will admit that it has serious problems. One of the most highly acclaimed books on the language is &lt;em&gt;JavaScript: The Good Parts&lt;/em&gt;, authored by Douglas Crockford and published by O&amp;rsquo;Reilly; you can take the title of the book as a hint.&lt;/p&gt;
&lt;p&gt;A scripting language that owes its horrific syntax to lack of competence is PHP. Its creator, Rasmus Lerdorf, is quoted &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/PHP#Early_history&#34; target=&#34;_blank&#34;
   &gt;on the Wikipedia article about PHP&lt;/a&gt; as saying &amp;ldquo;I don&amp;rsquo;t know how to stop it, there was never any intent to write a programming language {&amp;hellip;} I have absolutely no idea how to write a programming language, I just kept adding the next logical step on the way.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;So, from the above it should be obvious that most scripting languages are little toy projects that were created by individuals who simply wanted to prove that they could build something like that, without actually intending it to be used outside of their own workbench.&lt;/p&gt;
&lt;h4 id=&#34;the-cheapness&#34;&gt;The cheapness
&lt;/h4&gt;&lt;p&gt;The lack of semantic checking in scripting languages is usually not a deliberate design choice, but instead a consequence of the very limited effort that has gone into creating them. In many cases the creators of scripting languages would not know how to add semantic checking to the language even if they wanted to. In all cases, the amount of work required to add semantic checking would have been several orders of magnitude greater than the total amount of work that went into the creation of the language in the first place.&lt;/p&gt;
&lt;p&gt;In this sense, the comparison between scripting languages and real programming languages is a lot like comparing children&amp;rsquo;s tinker toy tools with tools for professionals: sure, a plastic screwdriver is inexpensive, lightweight and easy to use, but try screwing anything but plastic screws with it.&lt;/p&gt;
&lt;p&gt;(I was going to also add &amp;ldquo;you cannot hurt yourself with it&amp;rdquo;, but this analogy does not transfer to programming: you can very easily hurt yourself with a scripting language.)&lt;/p&gt;
&lt;h3 id=&#34;what-scripting-languages-are-good-for&#34;&gt;What scripting languages are good for
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Scripting languages used to be an easy way to write cross-platform software. This does not hold true anymore, since most major real programming languages are pretty much cross-platform nowadays.&lt;/li&gt;
&lt;li&gt;Scripting languages are useful when embedded within applications, (applications written in &lt;em&gt;real&lt;/em&gt; programming languages,) as evaluators of user-supplied expressions. (E.g. spreadsheet cell formulas.)&lt;/li&gt;
&lt;li&gt;Scripting languages are useful when shortening the time from the moment you fire up the code editor to the moment you first run your program is more important than everything else. By &amp;ldquo;everything else&amp;rdquo; we really mean everything: understandability, maintainability, performance, even correctness.&lt;/li&gt;
&lt;li&gt;Scripting languages are useful when the program to be written is so trivial, and its expected lifetime is so short, that it is hardly worth the effort of creating a new folder with a new project file in it. The corollary to this is that if it is worth creating a project for it, then it is worth using a real programming language.&lt;/li&gt;
&lt;li&gt;Scripting languages are useful when the code to be written is so small and simple that bugs can be detected by simply skimming through the code. The corollary to this is that if the program is to be even slightly complex, it should be written in a real programming language. (Adding insult to injury, many scripting languages tend to have such a cryptic write-only syntax that it is very hard to grasp what any piece of code does, let alone skim through it and vouch for it being bug-free.)&lt;/li&gt;
&lt;li&gt;The most important thing about scripting languages (and the main reason why they have become so wildly popular in recent years) is that they are useful in getting non-programmers into programming as quickly as possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of us programmers have had a friend, who was not a programmer, and who one day asked us how to get into programming. The thought process should be familiar: you think about it for a moment, you start making a mental list of things they would need in order to get started with a real programming language, and you quickly change your mind and suggest that they try Python, because this answer stands some chance of fitting within our friend&amp;rsquo;s attention span. However, the truth of the matter is that this recommendation will only save our friend from maybe a few hours of preparatory work, and it would be a crime if it condemns them to thousands of hours wasted over the course of a several year long career due to the use of an inferior programming language. This brings us to the following realization:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scripting languages are a lot like teething rings (pacifiers):&lt;/p&gt;
&lt;p&gt;It is okay to start with one; you must get rid of it as soon as you grow some teeth.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;The fact that some scripting languages catch on and spread like wildfire simply shows how eager the industry is to adopt any contemptible piece of nonsense without any critical thinking whatsoever, as long as it helps optimize some short-sighted concern, such as how to get non-programmers into programming as quickly as possible. It is a truly deplorable situation that kids nowadays learn JavaScript as their first programming language due to it being so accessible to them: all you need is a web browser, and one day instead of F11 for full-screen you accidentally hit F12 which opens up the developer tools, and you realize that you have an entire integrated development environment for JavaScript sitting right there, ready to use. The availability of JavaScript to small children is frightening.&lt;/p&gt;
&lt;p&gt;Usually, once a language becomes extremely popular, tools are created to lessen the impact of its deficiencies. Thanks to the herculean efforts of teams that develop scripting engines, and through all kinds of sorcery being done under the hood in these engines, the most popular scripting languages are considerably faster today than they used to be. However, the sorcery is not always applicable, even when it is applicable it is imperfect, and besides, it incurs a penalty of its own, so scripting languages will never match the performance of real programming languages. Also, modern IDEs have evolved to provide some resemblance of semantic checking in some scripting languages, but since this checking has been added as an afterthought, it is always partial, unreliable, hacky, and generally an uphill battle.&lt;/p&gt;
&lt;p&gt;So, you might ask, what about the hundreds of thousands of successful projects written in scripting languages? Are they all junk? And what about the hundreds of thousands of programmers all over the world who are making extensive use of scripting languages every day and are happy with them? Are they all misguided? Can&amp;rsquo;t they see all these problems? Are they all ensnared in a monstrous collective delusion?&lt;/p&gt;
&lt;p&gt;Yep, that&amp;rsquo;s exactly it. You took the words from my mouth.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/on-scripting-languages/images/grumpy-cat-scripting-languages.jpg&#34;
	width=&#34;600&#34;
	height=&#34;400&#34;
	srcset=&#34;//localhost:1313/p/on-scripting-languages/images/grumpy-cat-scripting-languages_hu_5be306c65a008b9c.jpg 480w, //localhost:1313/p/on-scripting-languages/images/grumpy-cat-scripting-languages_hu_8081d0eb266ea027.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;mandatory grumpy cat meme: &amp;ldquo;Scripting Languages - I Hate Them.&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Also read: &lt;a 
   href=&#34;//localhost:1313/p/tablecloth/&#34;
   &gt;Tablecloth - A short high-tech sci-fi horror story&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note: This is a draft. It may contain inaccuracies or mistakes. There are bound to be corrections after I receive some feedback.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Scratch&lt;/p&gt;
&lt;p&gt;See:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://stackoverflow.com/questions/397418/when-to-use-a-scripting-language&#34; target=&#34;_blank&#34;
   &gt;http://stackoverflow.com/questions/397418/when-to-use-a-scripting-language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From &lt;a class=&#34;external&#34; 
   href=&#34;http://wiki.c2.com/?SeriousVersusScriptingLanguages&#34; target=&#34;_blank&#34;
   &gt;http://wiki.c2.com/?SeriousVersusScriptingLanguages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Scripting Languages emphasize quickly writing one-off programs&lt;/p&gt;
&lt;p&gt;Serious languages emphasize writing long-lived, maintainable, fast-running programs.&lt;/p&gt;
&lt;p&gt;light-duty &amp;ldquo;gluing&amp;rdquo; of components and languages.&lt;/p&gt;
&lt;p&gt;From &lt;a class=&#34;external&#34; 
   href=&#34;https://danluu.com/empirical-pl/&#34; target=&#34;_blank&#34;
   &gt;https://danluu.com/empirical-pl/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;I think programmers who doubt that type systems help are basically the tech equivalent of an anti-vaxxer&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The effect isn&amp;rsquo;t quantifiable by a controlled experiment.&lt;/p&gt;
&lt;p&gt;Misinformation people want to believe spreads faster than information people don&amp;rsquo;t want to believe.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.blog/2023/01/19/adding-structure-to-dynamic-languages&#34; target=&#34;_blank&#34;
   &gt;The Stack Overflow Blog: Minimizing the downsides of dynamic programming languages&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Devoxx 2016 Belgium - Microservices Evolution: How to break your monolithic database by Edson Yanaga </title>
        <link>//localhost:1313/p/devoxx-2016-belgium-microservices-evolution-how-to-break-your-monolithic-database-by-edson-yanaga/</link>
        <pubDate>Thu, 18 May 2017 19:08:00 +0000</pubDate>
        
        <guid>//localhost:1313/p/devoxx-2016-belgium-microservices-evolution-how-to-break-your-monolithic-database-by-edson-yanaga/</guid>
        <description>&lt;p&gt;My notes on Devoxx 2016 Belgium - Microservices Evolution: How to break your monolithic database by Edson Yanaga (I attended this conference)&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6dfBd-2Oq1M&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Reduce maintenance window&lt;/p&gt;
&lt;p&gt;Achieve zero downtime deployments&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Code is easy, state is hard&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Changes in a database schema from one version to another are called database migrations&lt;/p&gt;
&lt;p&gt;Tools: Flyweight Liquibase&lt;/p&gt;
&lt;p&gt;Migrations require back and forward compatibility&lt;/p&gt;
&lt;p&gt;Baby steps = Smallest Possible Batch Size&lt;/p&gt;
&lt;p&gt;Too many rows = Long Locks&lt;/p&gt;
&lt;p&gt;Shard your updates (not updating the entire table in one go)&lt;/p&gt;
&lt;p&gt;Renaming a column&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ALTER TABLE customers RENAME COLUMN wrong TO correct;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ALTER TABLE customers ADD COLUMN correct VARCHAR(20);
UPDATE customers SET correct = wrong WHERE id &amp;amp;lt; 100;
UPDATE customers SET correct = wrong WHERE id &amp;amp;gt;= 100 AND id &amp;amp;lt; 200;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;{&amp;hellip;}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(later)ALTER TABLE customers DELETE COLUMN wrong;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adding a column&lt;/p&gt;
&lt;p&gt;ADD COLUMN, setting NULL/DEFAULT value/computed value&lt;/p&gt;
&lt;p&gt;Next release: Use Column&lt;/p&gt;
&lt;p&gt;Renaming / Changeing Type / Format of a Column:
Next version: ADD COLUMN, Copy data using small shards
Next release: Code reads from old column and writes to both
Next release: Code reads from new column and writes to both
Next release: Code reads and writes from new column
Next release: Delete old column&lt;/p&gt;
&lt;p&gt;Deleting a column&lt;/p&gt;
&lt;p&gt;Next version: Stop using the column but keep updating the column
Next version: Delete the column&lt;/p&gt;
&lt;p&gt;For migrating from a monolithic application with a monolithic database to many microservices with own database each:&lt;/p&gt;
&lt;p&gt;Using Event Sourcing&lt;/p&gt;
&lt;p&gt;tool: debezium.io&lt;/p&gt;
&lt;p&gt;You tell it which tables you want to monitor, and from then on it monitors them and generates an event for each DDL/DML statement you issue.  The event is propagated to as many event consumers as you want. So, microservices can receive these events and update their own databases.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;HTTP and REST are incredibly slow&amp;rdquo;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Devoxx US 2017, Knowledge is Power: Getting out of trouble by understanding Git by Steve Smith</title>
        <link>//localhost:1313/p/devoxx-us-2017-knowledge-is-power-getting-out-of-trouble-by-understanding-git-by-steve-smith/</link>
        <pubDate>Thu, 18 May 2017 18:33:34 +0000</pubDate>
        
        <guid>//localhost:1313/p/devoxx-us-2017-knowledge-is-power-getting-out-of-trouble-by-understanding-git-by-steve-smith/</guid>
        <description>&lt;p&gt;My notes on Devoxx US 2017, Knowledge is Power: Getting out of trouble by understanding Git by Steve Smith&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/sevc6668cQ0&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;&amp;ldquo;If that doesn&amp;rsquo;t fix it, git.txt contains the phone number of a friend of mine who understands git. Just wait through a few minutes of &amp;lsquo;It&amp;rsquo;s really pretty simple, just think of branches as&amp;hellip;&amp;rsquo; and eventually you&amp;rsquo;ll learn the commands that will fix everything.&amp;rdquo;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>GOTO 2016 - Microservices at Netflix Scale: Principles, Tradeoffs &amp; Lessons Learned - R- Meshenberg </title>
        <link>//localhost:1313/p/goto-2016-microservices-at-netflix-scale-principles-tradeoffs-lessons-learned-r-meshenberg/</link>
        <pubDate>Thu, 18 May 2017 18:20:46 +0000</pubDate>
        
        <guid>//localhost:1313/p/goto-2016-microservices-at-netflix-scale-principles-tradeoffs-lessons-learned-r-meshenberg/</guid>
        <description>&lt;p&gt;My notes on GOTO 2016 - Microservices at Netflix Scale: Principles, Tradeoffs &amp;amp; Lessons Learned - R. Meshenberg&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/57UK46qfBLY&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;They have a division making a layer of tools for other teams to build their stuff on top of it.&lt;/p&gt;
&lt;p&gt;Exceptions for statelessness are persistence (of course) but also caching.&lt;/p&gt;
&lt;p&gt;Destructive testing - Chaos monkey -&amp;gt; simian army - in production, all the time. (During office hours)&lt;/p&gt;
&lt;p&gt;Their separation of concerns looks like a grid, not like a vertical or horizontal table.&lt;/p&gt;
&lt;p&gt;They have open sourced many of their tools, we can find them at netflix.github.com&lt;/p&gt;
</description>
        </item>
        <item>
        <title>GOTO 2015 - Progress Toward an Engineering Discipline of Software - Mary Shaw</title>
        <link>//localhost:1313/p/goto-2015-progress-toward-an-engineering-discipline-of-software-mary-shaw/</link>
        <pubDate>Thu, 18 May 2017 18:20:02 +0000</pubDate>
        
        <guid>//localhost:1313/p/goto-2015-progress-toward-an-engineering-discipline-of-software-mary-shaw/</guid>
        <description>&lt;p&gt;My notes on GOTO 2015 - Progress Toward an Engineering Discipline of Software - Mary Shaw&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/lLnsi522LS8&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Notes&lt;/p&gt;
&lt;p&gt;17:28 past the bridges and into software engineering&lt;/p&gt;
&lt;p&gt;Software Engineering is all design. Production used to be printing the CDs, and nowadays it is hitting the &amp;ldquo;deploy&amp;rdquo; button.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;scaling the costs to the consequences&amp;rdquo; &amp;ndash; the point is not to minimize the cost, the point is to scale it to the consequences.  Risks must be taken, and if the potential gains are huge, then the risks can be correspondingly large.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>GOTO 2015 - DDD &amp; Microservices: At Last, Some Boundaries! - Eric Evans</title>
        <link>//localhost:1313/p/goto-2015-ddd-microservices-at-last-some-boundaries-eric-evans/</link>
        <pubDate>Thu, 18 May 2017 18:19:17 +0000</pubDate>
        
        <guid>//localhost:1313/p/goto-2015-ddd-microservices-at-last-some-boundaries-eric-evans/</guid>
        <description>&lt;p&gt;My notes on GOTO 2015 - DDD &amp;amp; Microservices: At Last, Some Boundaries! - Eric Evans&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/yPvef9R3k-M&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Microservices and Netflix - what is the connection?&lt;/p&gt;
&lt;p&gt;Isolated data stores&lt;/p&gt;
&lt;p&gt;&amp;ldquo;A service is something that can consume messages and can produce messages&amp;rdquo;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>GOTO 2014 - REST: I don&#39;t Think it Means What You Think it Does - Stefan Tilkov</title>
        <link>//localhost:1313/p/goto-2014-rest-i-dont-think-it-means-what-you-think-it-does-stefan-tilkov/</link>
        <pubDate>Thu, 18 May 2017 18:16:57 +0000</pubDate>
        
        <guid>//localhost:1313/p/goto-2014-rest-i-dont-think-it-means-what-you-think-it-does-stefan-tilkov/</guid>
        <description>&lt;p&gt;My notes on GOTO 2014 - REST: I don&amp;rsquo;t Think it Means What You Think it Does - Stefan Tilkov&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/pspy1H6A3FM&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;&amp;ldquo;People decide they want to build something in a RESTful fashion, so they spend all their time arguing about where the slashes go&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;It is the first litmus test for your REST API whether you depend on specific characters in your URIs for things to work.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;(From the client&amp;rsquo;s point of view.)&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Version numbers in URIs just suck.  Everybody does it which doesn&amp;rsquo;t make it any less sucky.  It is a stupid idea.  Don&amp;rsquo;t do that.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;The version number is in the URI because the URI is the API&amp;rdquo;. &amp;lt;&amp;ndash; ? I would assume the URI is NOT the API.&lt;/p&gt;
&lt;p&gt;Versioning: &amp;ldquo;Version your documentation documents. Wait what? &amp;ndash;Yes, no versioning&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Postel&amp;rsquo;s law &amp;ldquo;TCP implementations should follow a general principle of robustness: Be conservative in what you do, be liberal in what you accept from others.&amp;rdquo; &lt;a class=&#34;external&#34; 
   href=&#34;http://tools.ietf.org/html/rfc761&#34; target=&#34;_blank&#34;
   &gt;http://tools.ietf.org/html/rfc761&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Client rules
Don&amp;rsquo;t depend on URI structure
Support unknown links
Ignore unknown content&lt;/p&gt;
&lt;p&gt;Server rules
Don&amp;rsquo;t break URI structure unnecessarily
Evolve via additional resources
Support older formats&lt;/p&gt;
&lt;p&gt;Discovery/Discoverability: &amp;ldquo;JSON Home&amp;rdquo; &lt;a class=&#34;external&#34; 
   href=&#34;http://tools.ietf.org/html/draft-nottingham-json-home-03&#34; target=&#34;_blank&#34;
   &gt;http://tools.ietf.org/html/draft-nottingham-json-home-03&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hypermedia APIs &amp;ldquo;give you flexibility&amp;rdquo;, &amp;ldquo;are cool&amp;rdquo;, &amp;ldquo;are neat&amp;rdquo; &amp;lt;&amp;ndash; no explanation&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Excellent question, do I know any examples of widely used public APIs that fully follow this model?  No.&amp;rdquo;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>GΟΤΟ 2014 - Microservices - Martin Fowler</title>
        <link>//localhost:1313/p/g%CE%BF%CF%84%CE%BF-2014-microservices-martin-fowler/</link>
        <pubDate>Thu, 18 May 2017 18:14:12 +0000</pubDate>
        
        <guid>//localhost:1313/p/g%CE%BF%CF%84%CE%BF-2014-microservices-martin-fowler/</guid>
        <description>&lt;p&gt;My notes on GΟΤΟ 2014 - Microservices - Martin Fowler&lt;/p&gt;
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/wgdBVIX9ifA&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;Characteristics of Microservices&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Componentization&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Organized around business capabilities&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Products not Projects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smart endpoints and dumb pipes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decentralized Governance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decentralized Data Management&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Infrastructure Automation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Design for failure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evolutionary Design&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With services we typically use some kind of interprocess communication facilities such as web service calls or messaging or something of that kind.&lt;/p&gt;
&lt;p&gt;How big should a microservice be?&lt;/p&gt;
&lt;p&gt;&amp;ldquo;It should have one responsibility&amp;rdquo; &amp;ndash;too vague&lt;/p&gt;
&lt;p&gt;&amp;ldquo;It should fit in my head&amp;rdquo; &amp;ndash;fairly good&lt;/p&gt;
&lt;p&gt;&amp;ldquo;You should not have a team that you cannot feed with 2 pizzas&amp;rdquo;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>The Mother of All Bugs</title>
        <link>//localhost:1313/p/the-mother-of-all-bugs/</link>
        <pubDate>Wed, 21 Oct 2015 00:20:15 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-mother-of-all-bugs/</guid>
        <description>&lt;h3 id=&#34;summary&#34;&gt;Summary
&lt;/h3&gt;&lt;p&gt;This is a story about the most elusive and sinister software bug I ever came across in my decades-long career as a programmer.&lt;/p&gt;
&lt;h3 id=&#34;the-setting&#34;&gt;The setting
&lt;/h3&gt;&lt;p&gt;At some point early in my career I was working for a company that was developing a hand-held computer for the area of Home Health Care. It was called InfoTouch™. The job involved daily interaction with the guys in the hardware department, which was actually quite a joy, despite the incessant &amp;ldquo;It&amp;rsquo;s a software problem!&amp;rdquo; &amp;ndash; &amp;ldquo;No, it&amp;rsquo;s a hardware problem!&amp;rdquo; arguments, because these arguments were being made by well-meant engineers from both camps, who were all in search of the truth, without egoisms, vested interests, or illusions of infallibility. That is, in true engineering tradition.&lt;/p&gt;
&lt;h3 id=&#34;the-manifestations&#34;&gt;The manifestations
&lt;/h3&gt;&lt;p&gt;During the development of the InfoTouch, for more than a year, possibly two, the device would randomly die for no apparent reason. Sometimes it would die once a day, other times weeks would pass without a problem. On some rare occasions it would die while someone was using it, but more often it would die while sleeping, or while charging. So, the problem seemed to be completely random, and no matter how hard we tried we could not find a sequence of steps that would reproduce it.&lt;/p&gt;
&lt;p&gt;When the machine died, the only thing we could do was to give it to the hardware guys, who would open it up, throw an oscilloscope at it, and try to determine whether it was dead due to a hardware or a software malfunction. And since we software guys were not terribly familiar with oscilloscopes, we had to trust what the hardware guys said.&lt;/p&gt;
&lt;p&gt;Luckily, the hardware guys would never say with absolute certainty that it was a software problem. At worst, they would say that it was &amp;ldquo;most probably&amp;rdquo; a software problem. What did not help at all was that one out of every dozen times that they went through the drill, they found that it did in fact appear to be a hardware problem: the machine was just dead; there was no clock, no interrupts, no electronic magic of the kind that makes software run. But what was happening the rest of the times was still under debate.&lt;/p&gt;
&lt;p&gt;This situation was going on for a long time, and we had no way of dealing with it other than hoping that one day someone either from the software department or the hardware department would stumble upon the solution by chance. The result was a vague sense of helplessness and low overall morale, which was the last thing needed in that little startup company which was struggling to survive due to many other reasons having to do with funding, partnerships, competitors, etc.&lt;/p&gt;
&lt;h3 id=&#34;the-discovery&#34;&gt;The discovery
&lt;/h3&gt;&lt;p&gt;Then one day as I was working on some C code somewhere in our code base, I stumbled upon a function which was declaring a local variable of pointer type and proceeding to write to the memory location pointed by it without first initializing it. This is a silly little bug which is almost guaranteed to cause a malfunction, possibly a crash.&lt;/p&gt;
&lt;p&gt;To this day still I do not know (or do not remember) whether that early version of Microsoft C did not yet support warnings for this type of mistake, or whether the people responsible for our build configuration had such hubris as to believe that &amp;ldquo;we don&amp;rsquo;t need no stinkin&amp;rsquo; warnings&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I quickly fixed the bug, and I was about to proceed with my daily work, when I thought to take a minute and check precisely what were the consequences and ramifications of that bug before the fix.&lt;/p&gt;
&lt;p&gt;First of all, I checked to see whether the function was ever being called, and it turned out that it was; however, the InfoTouch was running fine for 99.9% of the time, so obviously, due to some coincidence, this bug did not seem to cause any problems.&lt;/p&gt;
&lt;p&gt;Or did it?&lt;/p&gt;
&lt;h3 id=&#34;the-astonishment&#34;&gt;The astonishment
&lt;/h3&gt;&lt;p&gt;I decided to see exactly what was the garbage that the pointer was being initialized with.&lt;/p&gt;
&lt;p&gt;The problem was in function &lt;code&gt;cfunc()&lt;/code&gt;. Function &lt;code&gt;cfunc()&lt;/code&gt; was invoked from function &lt;code&gt;afunc()&lt;/code&gt;, which had just previously invoked function &lt;code&gt;bfunc()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;afunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nf&#34;&gt;bfunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nf&#34;&gt;cfunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;lt;-- function with uninitialized local variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Function &lt;code&gt;bfunc()&lt;/code&gt; had two arguments and one local variable . Function &lt;code&gt;cfunc()&lt;/code&gt; had one argument and two  local variables, of which the second was the uninitialized pointer. So, the uninitialized pointer in &lt;code&gt;cfunc()&lt;/code&gt; shared the same stack word as the local variable in &lt;code&gt;bfunc()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To my astonishment, I discovered that the local variable in &lt;code&gt;bfunc()&lt;/code&gt; was a timestamp, where the function stored the current time.&lt;/p&gt;
&lt;p&gt;This is how the stack looked:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/the-mother-of-all-bugs/media/mother-of-all-bugs-diagram.png&#34;
	width=&#34;640&#34;
	height=&#34;335&#34;
	srcset=&#34;//localhost:1313/p/the-mother-of-all-bugs/media/mother-of-all-bugs-diagram_hu_b2e0d5640544bafb.png 480w, //localhost:1313/p/the-mother-of-all-bugs/media/mother-of-all-bugs-diagram_hu_95f9a01854c21024.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;458px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;So, the uninitialized pointer contained a bit pattern that represented a date and time. This resulted in random memory corruption during different hours of the day and different days of the month. The function was not being invoked very frequently, so the memory corruption was building up slowly, until some vital memory location would be affected and the software would crash. It is amazing that the machine ever worked at all.&lt;/p&gt;
&lt;p&gt;After this bugfix the InfoTouch never again experienced any problems of a similar kind.&lt;/p&gt;
&lt;h3 id=&#34;the-lesson-learned&#34;&gt;The lesson learned
&lt;/h3&gt;&lt;p&gt;What do we learn from this? Warnings are your friend. Enable as many warnings as you can, and use the &amp;ldquo;treat warnings as errors&amp;rdquo; option to ensure that not a single warning goes unnoticed.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unspecified 2015-12-14 13:11:39 UTC&lt;/p&gt;
&lt;p&gt;nice story&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://michael.gr&#34; target=&#34;_blank&#34;
   &gt;michael.gr&lt;/a&gt; 2015-12-14 13:39:21 UTC&lt;/p&gt;
&lt;p&gt;Thanks, Divyesh! C-:=&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2019-09-16 18:56:39 UTC&lt;/p&gt;
&lt;p&gt;Classic :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Computer telephony in C&#43;&#43; with MFC</title>
        <link>//localhost:1313/p/computer-telephony-in-c-with-mfc/</link>
        <pubDate>Sun, 18 Oct 2015 13:39:42 +0000</pubDate>
        
        <guid>//localhost:1313/p/computer-telephony-in-c-with-mfc/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/computer-telephony-in-c-with-mfc/images/dialogic-corporation-logo.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;p&gt;Back in 1999-2000 the state of the art in computer telephony was called &lt;em&gt;Interactive Voice Response&lt;/em&gt; (IVR).  Nowadays when we speak of &amp;ldquo;voice&amp;rdquo; we usually mean voice recognition, but all that those telephony systems did back then was to playback recorded messages and wait for the caller to press digits on their phone. Sometimes, we would ask the caller to speak on the phone, and we would record their voice, for a human operator to listen to later.&lt;/p&gt;
&lt;p&gt;The hardware had special filters on it to recognize the DTMF digits, probably because the CPU was thought of as too wimpy to do it by itself.  I experimented writing WAV-file processing filters on my own, and discovered that it took less than 10% of CPU time per phone line to run such filters in software, so it could certainly be done, but then again there existed systems out there in configurations of 30 or even 100 lines per computer, and of course the CPU was not enough in these cases.  We only worked with configurations of four lines per computer, but still, since the filters were made available by the hardware, I made use of them for the work project, and I only re-invented the wheel at home, for fun.&lt;/p&gt;
&lt;p&gt;My employer at that time managed to secure a number of computer telephony contracts for a couple of big clients; he gave me a rough description of what the projects were supposed to do, and he had my coworkers slide pizza under my office door for as long as it took me to complete them. He probably charged his clients the equivalent of a dozen programmers for this, and it was all done by me. The only external help that went into these projects was messages recorded by a professional at a recording studio.&lt;/p&gt;
&lt;p&gt;What follows is some screenshots of the telephony application that I created to run these projects, in Microsoft Visual C++ using MFC and the Dialogic Telephony API.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/computer-telephony-in-c-with-mfc/images/monitor1.gif&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	srcset=&#34;//localhost:1313/p/computer-telephony-in-c-with-mfc/images/monitor1_hu_a0637dee97c77539.gif 480w, //localhost:1313/p/computer-telephony-in-c-with-mfc/images/monitor1_hu_93fe3720a4ec5dc8.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;All applets waiting to start. Click to enlarge.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This is a Multiple Document Interface (MDI) application (remember
those?) which opened one MDI client window per phone line made available by the underlying hardware, and allowed the user to select a telephony applet to run on each phone line.  The operator could see the status of each line and the log messages produced by each applet, and he could start, stop, and select applets to run.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/computer-telephony-in-c-with-mfc/images/monitor2.gif&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	srcset=&#34;//localhost:1313/p/computer-telephony-in-c-with-mfc/images/monitor2_hu_5f5f4ff3899ae9db.gif 480w, //localhost:1313/p/computer-telephony-in-c-with-mfc/images/monitor2_hu_5cfe56faa3285a76.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;All applets running.  Click to enlarge.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each applet was instantiated by the framework to run on its own thread, and it was given a simple
abstraction of the telephony API to do work with, and another
simple API to display its status and log messages.  I also wrote an emulated implementation of my telephony API abstraction, so as to be able to test the applets without having to place actual phone calls.  The emulator would run in a special MDI client window with a few additional controls on it for calling the applet, sending DTMF digits, hanging up, and even faking a timeout so that I did not have to wait while testing.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/computer-telephony-in-c-with-mfc/images/monitor3.gif&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	srcset=&#34;//localhost:1313/p/computer-telephony-in-c-with-mfc/images/monitor3_hu_4ab38ceb4803c6a0.gif 480w, //localhost:1313/p/computer-telephony-in-c-with-mfc/images/monitor3_hu_566fa864dbbb1cc6.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;The emulator.  Click to enlarge.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The main application also provided a uniform means of specifying configuration parameters for the applets, so that the applets did not need to have any GUI of their own.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/computer-telephony-in-c-with-mfc/images/monitor4.gif&#34;
	width=&#34;1024&#34;
	height=&#34;768&#34;
	srcset=&#34;//localhost:1313/p/computer-telephony-in-c-with-mfc/images/monitor4_hu_1db6f1481ef837fd.gif 480w, //localhost:1313/p/computer-telephony-in-c-with-mfc/images/monitor4_hu_dd81b1c8b8f76876.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
&lt;/p&gt;</description>
        </item>
        <item>
        <title>Crossword Puzzle Compiler</title>
        <link>//localhost:1313/p/crossword-puzzle-compiler/</link>
        <pubDate>Sun, 18 Oct 2015 01:16:02 +0000</pubDate>
        
        <guid>//localhost:1313/p/crossword-puzzle-compiler/</guid>
        <description>&lt;p&gt;![[media/crossword-compiler-screenshot.png]]&lt;/p&gt;
&lt;p&gt;This is old-style artificial intelligence in action, solving within seconds a problem that would normally take eons to complete.&lt;/p&gt;
&lt;p&gt;You give it a crossword grid, and a long list of words, and it finds ways to mesh words into the grid so as to form a complete crossword puzzle.  The final working version was done in 2003 using C# version 1.2 with a minimalistic UI in WinForms.&lt;/p&gt;
&lt;p&gt;The following 30-second video shows the crossword compiler in action, filling multiple successive crosswords using a word list taken from actual crosswords that have been published on the interwebz by various sources through the years.  The video is in real time, showing that the crossword compiler is, in most cases, extremely fast.&lt;/p&gt;
&lt;h3 id=&#34;techniques-demonstrated&#34;&gt;Techniques demonstrated:
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Solving an intractable problem using a scoring heuristic&lt;/li&gt;
&lt;li&gt;Super-indexing data structures for ultra-fast domain-specific queries&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe allowfullscreen=&#34;&#34; class=&#34;YOUTUBE-iframe-video&#34; data-thumbnail-src=&#34;https://i.ytimg.com/vi/qfFd_KBeDrw/0.jpg&#34; frameborder=&#34;0&#34; height=&#34;400&#34; src=&#34;https://www.youtube.com/embed/qfFd_KBeDrw?feature=player_embedded&#34; width=&#34;600&#34;&gt;&lt;/iframe&gt;
&lt;h3 id=&#34;a-longer-description-for-those-who-like-reading&#34;&gt;A longer description for those who like reading
&lt;/h3&gt;&lt;p&gt;For my Graduation Project at California State University, San Bernardino in 1993 I chose to develop a Crossword Puzzle Compiler.  That&amp;rsquo;s a program that you give it a crossword grid and a long list of words, and it weaves the words into the grid to produce a Crossword Puzzle. I wrote the program in C, on the killer machine that I had at home, an &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/IBM_Personal_System/2&#34; target=&#34;_blank&#34;
   &gt;IBM PS/2 Model 80&lt;/a&gt; running DOS, with an Intel 80386 clocked at 16Mhz, and equipped with an entire megabyte of RAM. I had not taken any Artifical Intelligence courses, so poor me was under the impression that I could just brute force it and it would work, since the machine was so incredibly fast.  Afterall, DOS directory listings scrolled by so much faster than on my old 8Mhz Intel 8088!&lt;/p&gt;
&lt;p&gt;The program did work, but only in the sense that it would begin to fill the grid, and it would keep working on it without any errors. However, it would never actually complete the grid, because this is not one of those problems that you can just brute force: you need to be more clever than that.&lt;/p&gt;
&lt;p&gt;The test grid was American-style 15 by 15 symmetrical, divided into 9 compartments that were roughly 4 by 4 each, each one of them communicating with the rest via only one or two longer words.  Back then we had text-mode VGA displays, so storing a single byte in the video RAM caused a character to appear on the screen, which made it very easy to have the program display its progress.  The program would fill the first 4 by 4 compartment within a fraction of a second, but then it would get stuck in the second compartment, unable to find a way to mesh the words. It would back-track to the first compartment, undo a word, and try the second compartment again for several seconds, only to back-track again. Hours would pass, and it was not getting any further than the second compartment. I once let it work overnight, and by the next day it had completed the second compartment and was now struggling with the third.  As I was watching it, it back-tracked from the third to the second, and to my great dismay after a few seconds it back-tracked to the first. I was sure that it would complete all 9 compartments one day, but I understood that the day was several centuries in the future.&lt;/p&gt;
&lt;p&gt;I admitted failure to my professor, and he agreed to let me pick another subject, which I promptly did and graduated.  However, the desire to get that Crossword Puzzle Compiler to work stayed with me.&lt;/p&gt;
&lt;p&gt;By the time I was back in Greece in the late nineties I hard learned about heuristics and search tree pruning, so I thought I would give it another go. I decided that I would first rewrite the whole thing in C++, and then I would try to find some heuristic to make it cut corners and complete crosswords in a timely manner.  When I had just gotten it to roughly the same point where the older version was, and before I had the chance to try any heuristics, my apartment was broken into and my laptop was stolen, so I lost all of the work that I had done.&lt;/p&gt;
&lt;p&gt;In early 2003 I decided to give it another go, this time in a brand-new language called C#. (That was .NET Framework 1.1 on Visual Studio .NET 2003.) Either because the language made it so much easier to be productive, or because by that time I had learned so much more about Object Oriented Programming, I was able to re-create the program very quickly, and then I used a simple technique to cut corners, and thus avoid brute-forcing: when it had a list of words to consider, it would first assign a score to each word based on how many words could be found perpendicular to it, then it would sort the words by score, and then it would start trying each word in the list starting from the word with the highest score.  So, one day I hit the &amp;ldquo;Run&amp;rdquo; key on my keyboard, and after only a few seconds of waiting, a completely filled Crossword Puzzle appeared in front of me for the first time.  That must have been the most magic moment in my life. (Well, excluding certain moments with girls.)&lt;/p&gt;
&lt;p&gt;The generated crosswords were not of a very good quality, because the Crossword Compiler would keep picking words that have high perpendicular counts, like &amp;ldquo;ADD&amp;rdquo; and &amp;ldquo;DAD&amp;rdquo;. So, in 2011 I revisited the project with the intention improving the heuristic.  However, I knew that would be a time consuming process, involving a lot of trial and error, so I decided to first improve the linear running time of the program.  I did many optimizations, all of them structural and algorithmic, without any small-scale hacking and tweaking of the kind which shaves clock cycles but renders the code unmaintainable.&lt;/p&gt;
&lt;p&gt;By far the greatest optimization that I did was what I called the &lt;em&gt;Super Index&lt;/em&gt;.  The Crossword Dictionary Model of the Crossword Puzzle Compiler needs to be able to very quickly answer queries like &amp;ldquo;give me all 5-letter words with a the letter &amp;lsquo;G&amp;rsquo; on the 3rd position.&amp;rdquo;  A simplistic approach is to have words already grouped by word length, and to just enumerate all words of the requested length, looking for ones that have the requested letter in the requested position. However, we can do a lot better than that.  The Super Index is an index which has a sub-index for each word length, which has a sub-index for each position along that word length, which has a sub-index for each letter of the alphabet, which has a list of all words of that length, that contain that letter, at that position. Therefore, search through words is completely eliminated.  If I remember correctly, the introduction of the super index cut the running time of the Crossword Compiler to one twentieth of what it used to be.&lt;/p&gt;
&lt;p&gt;■&lt;/p&gt;</description>
        </item>
        <item>
        <title>Is my mentor&#39;s concern for code quality excessive?</title>
        <link>//localhost:1313/p/is-my-mentors-concern-for-code-quality-excessive/</link>
        <pubDate>Fri, 25 Sep 2015 21:07:12 +0000</pubDate>
        
        <guid>//localhost:1313/p/is-my-mentors-concern-for-code-quality-excessive/</guid>
        <description>&lt;p&gt;This question was asked on Programmers SE on Jun 12, 2015. I answered it, but after a few days the question was closed as primarily opinion-based and then deleted, along with all answers. Since I now have sufficient reputation to view deleted questions, I was able to find it, so I am posting the question and my answer here for posterity.&lt;/p&gt;
&lt;h4 id=&#34;the-question&#34;&gt;The Question
&lt;/h4&gt;&lt;p&gt;Original link: &lt;a class=&#34;external&#34; 
   href=&#34;https://programmers.stackexchange.com/questions/286508/is-my-mentors-concern-for-code-quality-excessive&#34; target=&#34;_blank&#34;
   &gt;https://programmers.stackexchange.com/questions/286508/is-my-mentors-concern-for-code-quality-excessive&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;is-my-mentors-concern-for-code-quality-excessive&#34;&gt;Is my mentor&amp;rsquo;s concern for code quality excessive? \[closed\]
&lt;/h4&gt;&lt;p&gt;Score: 75 (79 upvotes, 4 downvotes) Favorites: 28&lt;/p&gt;
&lt;p&gt;To tell you a little about myself: I&amp;rsquo;m a newbie programmer working internships and learning a lot from experienced programmers. I can&amp;rsquo;t believe I used to think I was good in college.&lt;/p&gt;
&lt;p&gt;The one I&amp;rsquo;m doing right now is pretty great due to the amount of time and resources that the company is putting into helping and mentoring me and another intern. I&amp;rsquo;m learning a whole lot and for the first time, I feel like I get close to being competent.&lt;/p&gt;
&lt;p&gt;The only &amp;ldquo;problem&amp;rdquo; are the massive code quality concerns of one of my mentors. It&amp;rsquo;s to the point that anything takes a whole lot of time because I have to find the best way to do it or else it&amp;rsquo;s a waste of time. It also feels like my creativity doesn&amp;rsquo;t matter because there is only one right way to do everything. I don&amp;rsquo;t mind any of this at all but I wonder, and this is mainly what I&amp;rsquo;m asking, if it&amp;rsquo;s normal in the industry.&lt;/p&gt;
&lt;p&gt;Also, when I get assigned a little feature and this guy reviews my code, he actually reviews the whole codebase I&amp;rsquo;m working on, pointing out loads of mistakes, most of them from before I was even hired. I have spent this whole week fixing code (that worked) written by their full-time programmers, even some things that are best practice according to other mentors.&lt;/p&gt;
&lt;p&gt;Tags: &lt;code&gt;[javascript]&lt;/code&gt; &lt;code&gt;[web-development]&lt;/code&gt; &lt;code&gt;[programming-practices]&lt;/code&gt; &lt;code&gt;[object-oriented-design]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;asked Jun 11 2015 at 18:51 by &lt;a class=&#34;external&#34; 
   href=&#34;https://programmers.stackexchange.com/users/183300/cyborgfish&#34; target=&#34;_blank&#34;
   &gt;CyborgFish&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;my-answer&#34;&gt;My Answer:
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Let me quote from Page xxii (Foreword) of &amp;ldquo;Clean Code&amp;rdquo; by Robert C. Martin from Prentice Hall.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Back in my days working in the Bell Labs Software Production Research organization (Production, indeed!) we had some back-of-the-envelope findings that suggested that consistent indentation style was one of the most statistically significant indicators of low bug density. We want it to be that architecture or programming language or some other high notion should be the cause of quality; as people whose supposed professionalism owes to the mastery of tools and lofty design methods, we feel insulted by the value that those factory floor machines, the coders, add through the simple consistent application of an indentation style. To quote my own book of 17 years ago, such style distinguishes excellence from mere competence.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I would like to suggest that what the author observed as &amp;ldquo;consistent indentation style&amp;rdquo; was most probably in fact a &amp;ldquo;consistent coding style&amp;rdquo;, which in turn shows &lt;em&gt;discipline&lt;/em&gt;. So, is discipline important? You bet!&lt;/p&gt;
&lt;p&gt;Yes, you may be grunting now; yes this is probably a drag; but it is short-term, within less than a year you will have learned to do things correctly, and this will stay with you for decades, so it&amp;rsquo;s actually very good.&lt;/p&gt;
&lt;p&gt;The author says it is what &lt;strong&gt;distinguishes &lt;em&gt;excellence&lt;/em&gt; from mere &lt;em&gt;competence&lt;/em&gt;&lt;/strong&gt;. So, none of this means that you are incompetent; but your mentor actually wants &lt;em&gt;excellence&lt;/em&gt; from you; and that&amp;rsquo;s something you should be glad about.&lt;/p&gt;
&lt;p&gt;Early in my career, (actually, precisely when I was fresh out of college,) I also had to work for some people who were hell bent on telling me how to do things down to the comma, and I am glad now that I went through that process back then.&lt;/p&gt;
&lt;p&gt;Also please keep in mind that your creativity will best manifest itself in building &lt;em&gt;designs&lt;/em&gt;, not in formulating code. Creativity in formulating code is a synonym for disorder; creativity in designs is what all the good stuff are made of.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It is worth also including some of the comments to my answer, which were quite insightful.  Most importantly, dodgethesteamroller&amp;rsquo;s comment is about an issue which I should have addressed: correlation vs. causality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;26^&lt;/strong&gt; &amp;ldquo;consistent indentation style was one of the most statistically significant indicators of low bug density.&amp;rdquo; Totally true for python (: – &lt;strong&gt;ecoologic Jun 11 at 23:49&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;23&lt;/strong&gt;^ However, beware Goodhart&amp;rsquo;s law (en.wikipedia.org/wiki/Goodhart%27s_law). Once you notice that indentation is strongly correlated with good code, and argue on that basis that the code should be indented consistently in order to pass review, then typically you should expect the correlation to weaken and eventually disappear, because ill-disciplined people now learn to fix their indentation without becoming more disciplined in any other respect. –  &lt;strong&gt;Steve Jessop Jun 12 at 9:35&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;8&lt;/strong&gt;^ &amp;ldquo;Also please keep in mind that your creativity will best manifest itself in building designs, not in formulating code. Creativity in formulating code is a synonym for disorder; creativity in designs is what all the good stuff are made of.&amp;rdquo; This :) –  &lt;strong&gt;TheCatWhisperer Jun 12 at 12:45&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;4&lt;/strong&gt;^ Programming is actually quite tolerant in that respect. Creativity in chess is all at the strategic level; inventing new moves for your chess pieces is frowned upon ;) –  &lt;strong&gt;MSalters Jun 12 at 15:16&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;^ @SteveJessop: Right on. Very perceptive. That quotation does nothing to improve my already low opinion of Uncle Bob and his ilk. Sounds like a classic case of correlation mistaken for causation. –  &lt;strong&gt;dodgethesteamroller Jun 13 at 0:33&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;@dodgethesteamroller: in particular, you can get consistent indents just by running a linter over whatever junk some cowboy throws out. Clearly this will not reduce bug density, although I suppose it might help future maintainers avoid introducing more bugs. –  &lt;strong&gt;Steve Jessop Jun 13 at 0:59&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;@SteveJessop Good, then we will move to the next offender and teach them one good practice at the time. –  &lt;strong&gt;Davidmh Jun 14 at 14:24&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>Why Oracle Sucks</title>
        <link>//localhost:1313/p/why-oracle-sucks/</link>
        <pubDate>Mon, 14 Sep 2015 11:40:29 +0000</pubDate>
        
        <guid>//localhost:1313/p/why-oracle-sucks/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/why-oracle-sucks/media/oracle-logo.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
Oracle talks a lot about 11g Express Edition, and how it differs from the full (paid) versions of their database, but it does not say a word about the most important thing:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is it compatible at the SQL syntax level?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No way to find out other than to try it.  So, let&amp;rsquo;s try it.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The downloaded installation zip file contains a folder called DISK1.  Now, Oracle Database Express Edition 11g Release 2 bears the date June 4, 2014, so 14 years into the 3rd millennium Oracle is still masturbating with the concept of &amp;ldquo;disks&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The downloaded installation zip file is 316MB, it contains a setup.exe which is 317MB, and when you run it, it extracts a contained &lt;code&gt;.msi&lt;/code&gt; file, which in turn extracts its contents.&lt;/p&gt;
&lt;p&gt;The installer asks me to specify a database password.  It says that this password will be used for the SYS and SYSTEM accounts.  If both accounts are to have the same password, then clearly, one of them must be redundant, no?&lt;/p&gt;
&lt;p&gt;Oracle 11g Express installs an icon on my desktop which is &lt;em&gt;literally hideous&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I double-click the icon, and an error message dialog pops up.  The title of the dialog is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://127.0.0.1:%HTTPPORT%/apex/f?p=4950&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;and the message in the dialog is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows cannot find &amp;lsquo;http://127.0.0.1:%HTTPPORT%/apex/f?p=4950&amp;rsquo;. Make sure you typed the name correctly, and then try again.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I open up the start menu, find a &amp;ldquo;Start Database&amp;rdquo; icon, double click it, and an elevated command prompt shows up.  The command prompt appears to do nothing at all, it just sits there waiting for me to type something. I haven&amp;rsquo;t the slightest clue as to what I am supposed to type in there.  After some troubleshooting it turns out that the command prompt executed a command which (might have) silently started the database.  But they used the /k option, so the command prompt stayed open, so it appears as if nothing was done.&lt;/p&gt;
&lt;p&gt;And then, that&amp;rsquo;s it.  Some database must have started somewhere, but you are given no means of working with it.  There is a &amp;ldquo;Get Started&amp;rdquo; icon in the start menu, but clicking it gives the same stupendous message as the one on the desktop:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows cannot find &amp;lsquo;http://127.0.0.1:%HTTPPORT%/apex/f?p=4950&amp;rsquo;. Make sure you typed the name correctly, and then try again.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So, you have to guess that you must download and run Oracle SQLDeveloper.&lt;/p&gt;
&lt;p&gt;When Oracle SQLDeveloper starts, it begins with a &amp;ldquo;Confirm Import Preferences&amp;rdquo; box which asks me if I want to import preferences from a previous SQL Developer installation.  The dialog has a list of &amp;ldquo;previous installations&amp;rdquo;, but it is empty.  You have to use your magic powers to guess that you need to click on a tiny magnifying glass icon on the side, to search for a previous installation.  It opens a file selection dialog which starts pointing to &amp;ldquo;roaming/SQLDeveloper&amp;rdquo;, and then you have to guess that you need to doubleclick one of its subdirectories.&lt;/p&gt;
&lt;p&gt;The process of importing preferences from the previous version takes forever, (entire minutes on a 4GHz i7-4790 with SATA3 SSD,) even though I hardly used that previous version: I just launched it once and closed it.&lt;/p&gt;
&lt;p&gt;My firewall shows that as soon as Oracle SQLDeveloper launches, it calls home, even as it is prompting me whether I would like to participate in their data collection scheme.  (&amp;ldquo;Allow automated usage reporting to Oracle.&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;When trying to create a connection, I am presented with a dialog with far more options than should be necessary, and I have to guess what to enter in various fields.  Trying with &amp;ldquo;SYS&amp;rdquo; for username yields an error message saying &amp;ldquo;ORA-28009: connection as SYS should be as SYSDBA or SYSOPER&amp;rdquo;, but then trying with &amp;ldquo;SYSDBA&amp;rdquo; and with &amp;ldquo;SYSOPER&amp;rdquo; gives &amp;ldquo;ORA-01017: invalid username/password; logon denied&amp;rdquo;.  So, again, I have to guess that &amp;ldquo;SYSTEM&amp;rdquo; must be the magic word.&lt;/p&gt;
&lt;p&gt;Also, it is not enough to check &amp;ldquo;Save password&amp;rdquo;, I have to also remember to click &amp;ldquo;Save&amp;rdquo; to save the saved password.&lt;/p&gt;
&lt;p&gt;Upon opening a brand spanking new (empty) database, it contains dozens of system tables.  A filter has already been applied, but it only excludes tables in some &amp;ldquo;recycle bin&amp;rdquo;.  It is possible to extend the filter to exclude most system tables, but it takes quite a bit of work, because they do not all obey a consistent naming pattern.&lt;/p&gt;
&lt;p&gt;There is a &amp;ldquo;manage database&amp;rdquo; option which opens up a purely informational page, nothing to manage there.&lt;/p&gt;
&lt;p&gt;So, it turns out that Oracle 11g Express Edition installed with a &amp;ldquo;sid&amp;rdquo; of &amp;ldquo;xe&amp;rdquo;, which is different from the one that I needed.  I do not know what this &amp;ldquo;sid&amp;rdquo; thing is, and I do not care, and frankly, it should not exist, but it does. So, I have to change the sid of my local instance. Luckily, there is an article on stackoverflow on how to do it: &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/3424544/773113&#34; target=&#34;_blank&#34;
   &gt;http://stackoverflow.com/a/3424544/773113&lt;/a&gt;  I decide that this is insanely complicated and opt to uninstall my local instance and re-install it from scratch, only to discover that nowhere during installation does oracle ask me for the sid that the local instance will have.&lt;/p&gt;
&lt;p&gt;The first time I invoke &lt;strong&gt;databaseMetaData. getImportedKeys()&lt;/strong&gt; it takes an exorbitant amount of time for the server to respond, (14 seconds on an i7-4790K with SATA3 SSD,) even on a freshly created, empty database.&lt;/p&gt;
&lt;p&gt;In Oracle SQL Developer, If you select a single table, the context menu allows you to drop it.  But if you select multiple tables, a different context menu is shown, which does not contain an option to drop them.  So, you have to do it table by table.&lt;/p&gt;
&lt;p&gt;In Oracle SQL Developer, there is a &amp;ldquo;Quick DDL&amp;rdquo; entry in the context menu. If you select multiple tables and activate this menu entry, you find out that it is anything but quick: it takes 4 minutes for 20 small tables.&lt;/p&gt;
&lt;p&gt;The dialog shown for lengthy operations has a &amp;ldquo;run in background&amp;rdquo; option. If you select this option, the dialog disappears and not a single hint of it remains anywhere to be seen.  So, you don&amp;rsquo;t know if it is running, and you have no way of checking its progress.&lt;/p&gt;
&lt;p&gt;Supposedly, &amp;ldquo;run in background&amp;rdquo; means &amp;ldquo;take this application-modal dialog out of my face so that I can continue using the application&amp;rdquo;.  But if you send a lengthy operation to the background, and then you try to do anything with the application, you get a message saying that &amp;ldquo;the connection is currently busy&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;connection is currently busy&amp;rdquo; dialog has two buttons: one says &amp;ldquo;Retry&amp;rdquo; and the other says &amp;ldquo;Abort&amp;rdquo;.  This makes you wonder what is going to happen if you click &amp;ldquo;Abort&amp;rdquo;: is it going to terminate the application?  Is it going to terminate the background process?  No, it turns out that it just cancels the dialog. How callous must an engineer be call the button &amp;ldquo;Abort&amp;rdquo; when they just mean &amp;ldquo;Cancel&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;In Oracle SQL Developer, whenever you issue a command which fails, you get extensive but completely lame error messages.  For example, the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error starting at line : 3 in command -
ALTER TABLE &amp;ldquo;APV_OWNER&amp;rdquo;.&amp;ldquo;CONNECTIBLES&amp;rdquo; DROP FOREIGN KEY
&amp;ldquo;SYS_C0010516&amp;rdquo;
Error report -
SQL Error: ORA-00905: missing keyword
00905. 00000 -  &amp;ldquo;missing keyword&amp;rdquo;
*Cause: &lt;br&gt;
*Action:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There is a problem with every single line of the above error report:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;Error starting at line : 3 in command -&amp;rdquo;&lt;/strong&gt;: When it says &amp;ldquo;line 3&amp;rdquo; it does not mean line 3 of the failed command, it means that the failed command was taken from line 3 of the original script.  But I chose to execute only that particular command from the script, so I really do not care to hear which line of the script it came from: it is the one and only one command that I chose to execute.  Furthermore, if the failed command was several lines long then this blatant lie about line 3 would have sent me on a wild goose chase, looking for an error at line 3 of the failed command.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ALTER TABLE &amp;ldquo;APV_{&amp;hellip;}&amp;rdquo;&lt;/strong&gt;: I know what command I issued, you see, I just issued it, so I do not need to see its full text again, inside the error report.  At most, the command should have been echoed when it was about to be executed.  Furthermore, Oracle does not help me at all to pinpoint the precise location within the command where the error occurred, (see further down,) so including the full text of the command with the error report without telling me where the error occurred is only adding insult to injury.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;Error report -&amp;rdquo;:&lt;/strong&gt; I know that this is an error report, I do not need to be told that it is an error report.  This is a Z.I.S. (Zero Information Statement.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;ldquo;SQL Error: ORA-00905: missing keyword&amp;rdquo;:&lt;/strong&gt; A useless message which is giving me absolutely no hint as to what went wrong, and where. This is as good as saying &amp;ldquo;an error occurred&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;00905. 00000 -  &amp;ldquo;missing keyword&amp;rdquo;:&lt;/strong&gt; Oracle, you are repeating yourself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;quot;*Cause:&amp;quot;&lt;/strong&gt;  So, what is the cause?  How lame is this?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;quot;*Action:&amp;quot;&lt;/strong&gt;  So, what is the action?  How lame is this?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, as it turns out, Oracle Express Edition luckily does understand the exact same SQL syntax as the paid versions.  Now, let&amp;rsquo;s look at how Oracle SQL differs from other relational databases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Numeric data types do not correspond to machine data types.&lt;/strong&gt; Instead, they are all stored in Binary-Coded-Decimal (BCD) form, and they must be declared in ancient SQL syntax.  So, there is no such thing as INTEGER and BIGINT, there is only NUMBER(10) and NUMBER(19).  The corresponding stupidity holds true for real numbers.  This comes straight from the nineteen sixties.  The middle of the previous frigging century.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Identifiers can only be up to 30 characters long.&lt;/strong&gt;  I do not know whether the folks at Oracle have realized this, but for more than a decade now, we live in the third millennium.  Unlimited identifier length is what we have grown accustomed and expect for decades now. We use long identifiers, quite commonly in excess of 30 characters long, and we also use tools and techniques that automatically construct identifier names from other identifiers.  For example, a foreign key name is commonly constructed as &amp;ldquo;fk_&amp;rdquo; + tableName + &amp;ldquo;_&amp;rdquo; + keyColumnName.  This all breaks under Oracle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There are no catalogs, and schemas correspond to users.&lt;/strong&gt;  Which means that in order to create a schema, you need to create a user.  With a password.  And when creating a new user, you must specify something called a tablespace, which must have the magic name &amp;ldquo;USERS&amp;rdquo;, which will &lt;em&gt;hopefully&lt;/em&gt; work on any installation out there. All this means that automated schema creation suddenly becomes very tricky business with Oracle. I understand that features like this are very good for the job security of the sysadmins, but they are very bad for anyone wishing to get any useful work done.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The empty string is treated the same as NULL.&lt;/strong&gt; This is the most devastating difference between Oracle and other RDBMSes, and it alone is enough for me to never recommend Oracle for anything, to anyone. (Except my enemies.)  What it means is that if you write NULL, you get NULL, but if you write an empty string, you also get NULL. There is no option to change this behaviour, and no easy workaround.  This is incredibly lame.  Actually, words cannot express how lame this is.  The lameness of this is of epic proportions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There is no such thing as an AUTOINCREMENT column.&lt;/strong&gt;  Oracle supports SEQUENCEs, but it does not offer any easy way of specifying that a column should obtain its value from a sequence.  There is a Byzantine way of declaring a TRIGGER which gets triggered once a row is inserted and fills the value of a column with the next value from a sequence, but good luck in getting that bitch to work.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;There is no LIMIT or TOP clause.&lt;/strong&gt; In order to limit the number of rows returned by a query you have to embed it as a subquery of an absolutely idiomatic &amp;ldquo;SELECT * FROM (query) WHERE ROWNUM &amp;lt;= N&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The syntax is generally very poor&lt;/strong&gt; and lacking in features to make the life of the programmers easier.  For example, there are no niceties such as DROP TABLE IF EXISTS and CREATE OR REPLACE SEQUENCE, forcing you to write (and debug) tons of script, which in turn locks you with their product.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2017-08-18 11:22:14 UTC&lt;/p&gt;
&lt;p&gt;Masterpiece&amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unspecified 2018-11-19 10:22:05 UTC&lt;/p&gt;
&lt;p&gt;Oracle never pleases users. All that company is good at is bureaucracy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Woohoo! One more of my &#34;Programmers SE&#34; answers has received a score of -5 !</title>
        <link>//localhost:1313/p/woohoo-one-more-of-my-programmers-se-answers-has-received-a-score-of-5/</link>
        <pubDate>Tue, 28 Jul 2015 13:26:37 +0000</pubDate>
        
        <guid>//localhost:1313/p/woohoo-one-more-of-my-programmers-se-answers-has-received-a-score-of-5/</guid>
        <description>&lt;p&gt;The question is on a controversial topic, and as usual, I take the controversial stance.  So, it is no wonder that people do not agree with me.&lt;/p&gt;
&lt;p&gt;Here is the question:&lt;/p&gt;
&lt;p&gt;programmers.stackexchange.com: &lt;a class=&#34;external&#34; 
   href=&#34;https://programmers.stackexchange.com/questions/290951/does-it-make-sense-to-use-ys-instead-of-ies-in-identifiers-to-ease-find-and&#34; target=&#34;_blank&#34;
   &gt;Does it make sense to use “ys” instead of “ies” in identifiers to ease find-and-replace functionality?&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;update&#34;&gt;Update:
&lt;/h4&gt;&lt;p&gt;It turns out that the question was closed as &amp;ldquo;primarily opinion based&amp;rdquo;,
so I am saving the question and my answer here for posterity.&lt;/p&gt;
&lt;p&gt;The question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;does-it-make-sense-to-use-ys-instead-of-ies-in-identifiers-to-ease-find-and-replace-functionality-closed&#34;&gt;Does it make sense to use “ys” instead of “ies” in identifiers to ease find-and-replace functionality? {closed}
&lt;/h4&gt;&lt;p&gt;Although grammatically incorrect, when writing identifiers for functions, variables etc. does it make sense to simply append an &amp;ldquo;s&amp;rdquo; to plurals of words ending in Y? My reason for this would be that if you need to find-and-replace, for example, replacing &amp;ldquo;company&amp;rdquo; with &amp;ldquo;vendor&amp;rdquo;, &amp;ldquo;company&amp;rdquo; would match both singular and plural forms (&amp;ldquo;company and &amp;ldquo;companys&amp;rdquo;), whereas if the plural was spelled correctly, you would have to do two separate searches.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My answer:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes! Yes! Yes!  It makes perfect sense to do that.  And I have been doing it for years.&lt;/p&gt;
&lt;p&gt;Disclosure 1: English is not my native language.&lt;/p&gt;
&lt;p&gt;Disclosure 2: My knowledge of English grammar is considerably better than that of the average native speaker.&lt;/p&gt;
&lt;p&gt;Disclosure 3: When it comes to communicating with humans, I am a vehement grammar Nazi.&lt;/p&gt;
&lt;p&gt;And now that these disclosures are out of the way, let me state that English grammar has no place in code.  You see, that&amp;rsquo;s why it is called &lt;strong&gt;code&lt;/strong&gt; and not &lt;strong&gt;prose&lt;/strong&gt;.  It is supposed to have some resemblance to a language understood by humans, for the purpose of readability, but other than that, what we mostly need from code is not the qualities of prose; it is other, more technical qualities, like &lt;em&gt;precision&lt;/em&gt;, &lt;em&gt;unambiguity&lt;/em&gt;, and &lt;em&gt;terseness&lt;/em&gt;.  That&amp;rsquo;s why the C syntax of &lt;code&gt;if( x != y ) y++;&lt;/code&gt; is &lt;em&gt;&lt;strong&gt;much&lt;/strong&gt;&lt;/em&gt; preferable to the &lt;code&gt;IF X IS NOT EQUAL TO Y THEN ADD 1 TO Y END-IF.&lt;/code&gt; syntax of Cobol.  The alleged desirability of compilers that understand natural language is a fallacy, and don&amp;rsquo;t take my word for it, see what ol&amp;rsquo;Edsger has to say about it: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.cs.utexas.edu/users/EWD/transcriptions/EWD06xx/EWD667.html&#34; target=&#34;_blank&#34;
   &gt;Edsger W. Dijkstra, &lt;em&gt;On the foolishness of &amp;ldquo;natural language programming&amp;rdquo;&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another quality which is of importance is &lt;em&gt;&lt;strong&gt;computability of identifiers&lt;/strong&gt;&lt;/em&gt;.  The fact that a property called &lt;code&gt;Color&lt;/code&gt; can always be read via a method called &lt;code&gt;getColor()&lt;/code&gt; and written via a method called &lt;code&gt;setColor()&lt;/code&gt; is of paramount importance.  These identifiers are computable from the name of the property, so you do not have to know them by heart. If a programmer was to choose a pair of methods called &lt;code&gt;getColor()&lt;/code&gt; on one hand, but &lt;code&gt;colorize()&lt;/code&gt; on the other hand, their colleagues would rightfully consider this sabotage.  That&amp;rsquo;s how important identifier computability is.&lt;/p&gt;
&lt;p&gt;Also, programming tools can be written (and plenty of them have in fact been written, for example, *Hibernate*) which can compute these names. Without identifier name computability you would have to use additional syntax (e.g. in Hibernate, extra annotations) to specify to each tool precisely how to create every single identifier name, or precisely which ad hoc name you have given to each entity.&lt;/p&gt;
&lt;p&gt;So, identifier computability is important, while at the same time English grammar is irrelevant, (since we are not doing natural language programming,) so to be able to compute the name of a collection of entities by *always* appending &amp;ldquo;s&amp;rdquo; to the name of a single instance makes perfect sense, never mind the fact that it violates most people&amp;rsquo;s (mine included) English language sensitivities.&lt;/p&gt;
&lt;p&gt;And whether we like it or not, this is the trend of the future.  The native language of the majority of programmers on the planet is not English anymore, and the trend is to continue *very strong* in this direction.  (Also, I would not even be willing to bet money on the suggestion that English is the native language of the majority of programmers working in the USA right now.) These are people who, to a large extent, when trying to calculate the name of a collection from the name of a single instance of &amp;ldquo;company&amp;rdquo;, will simply append an &amp;ldquo;s&amp;rdquo;, and the form &amp;ldquo;companies&amp;rdquo; will not even cross their mind.  To a great and ever increasing percentage of programmers in the world, knowledge of the peculiarities of the English language does not add any value to their work, it only makes it slightly harder.&lt;/p&gt;&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>On dogma in engineering</title>
        <link>//localhost:1313/p/on-dogma-in-engineering/</link>
        <pubDate>Thu, 30 Apr 2015 10:11:59 +0000</pubDate>
        
        <guid>//localhost:1313/p/on-dogma-in-engineering/</guid>
        <description>&lt;p&gt;I once had a colleague who had a higher rank than me, and who was not only unconvinced by my rational and articulate arguments for doing a certain thing in a certain way, but he concluded the discussion by stating that &amp;ndash;&lt;em&gt;and I am not paraphrasing here, this is what he actually said&amp;ndash;&lt;/em&gt; &lt;strong&gt;the way he wanted it done was mentioned in a book, so unless I could find a book backing up my proposal, it was to be done his way&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I did not argue with him at that time, (how can you argue with &lt;em&gt;that&lt;/em&gt;?), but I would now like to quickly jot down my thoughts on why saying such a thing is incredibly stupid:&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Engineering books are there for you to learn things from them, not to be taken as truth by revelation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An engineering book makes (or fails to make) a point by analyzing it in detail until it is self-evident that the point holds true, not by proclaiming the point and putting the name of the author underneath it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The value of an engineering book lies in providing justification for the claims that it makes, not in making the claims available as ink impressed onto paper.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Therefore, engineering books are supposed to help you win arguments by &lt;strong&gt;equipping you with valid points to bring in defense of your positions&lt;/strong&gt;, not by &lt;strong&gt;playing the books as trump cards&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For all I know, you may have read the whole book and misunderstood every single bit of it, or you may be completely wrong about the applicability of the points made in the book to the particular situation that you have at hand.&lt;/p&gt;
&lt;p&gt;So, unless you can &lt;strong&gt;use&lt;/strong&gt; what you have learned from a book &lt;strong&gt;to reason&lt;/strong&gt;, any insistence on things written in a book on the grounds that they are written in a book is blatantly stupid &lt;strong&gt;dogma&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Of course, I understand that other concerns may be at play.  For example, that particular guy, having been tasked with being a team leader in a team of relatively senior engineers while being only in his early thirties, and having knowledge of the fact that he is good at his job but not stellar, he was probably insecure about the possibility of large scale project failure, in which case (so he thought) he wanted to be able to save face by claiming that he had followed &amp;ldquo;best practices&amp;rdquo;, and here are the books to prove it.  Oh, the cowardice.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2015-05-09 19:30:31 UTC&lt;/p&gt;
&lt;p&gt;In response you should pick up the bible, quran or - even better - some random rambling published by yourself and cite something incoherent from it. If he frowns, just yell at him &amp;ldquo;IT&amp;rsquo;S WRITTEN IN A GOD DAMN BOOK!!&amp;rdquo;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://michael.gr&#34; target=&#34;_blank&#34;
   &gt;michael.gr&lt;/a&gt; 2015-05-09 19:50:51 UTC&lt;/p&gt;
&lt;p&gt;+1  C-:=&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2015-07-17 08:20:38 UTC&lt;/p&gt;
&lt;p&gt;Respond by proving the opposition is not true. Say that unless his ideas are backed up by a book (I know you dont like the logic), then his ideas are not valid. Use his own logic against him.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Wow, 5 upvotes, 10 downvotes and counting</title>
        <link>//localhost:1313/p/wow-5-upvotes-10-downvotes-and-counting/</link>
        <pubDate>Thu, 30 Apr 2015 08:47:49 +0000</pubDate>
        
        <guid>//localhost:1313/p/wow-5-upvotes-10-downvotes-and-counting/</guid>
        <description>&lt;p&gt;I have this answer on programmers.stackexchange.com which, at the time of writing these words, has 5 upvotes and 10 downvotes, and in all likelihood it will continue collecting downvotes, while I adamantly refuse to remove it, standing 100% by my ideas. I am dumbfounded, as such a thing has never happened before.&lt;/p&gt;
&lt;p&gt;Here is &lt;a class=&#34;external&#34; 
   href=&#34;https://programmers.stackexchange.com/a/280522/41811&#34; target=&#34;_blank&#34;
   &gt;the programmers.stackexchange.com question&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3 id=&#34;is-it-okay-to-have-objects-that-cast-themselves-even-if-it-pollutes-the-api-of-their-subclasses&#34;&gt;Is it okay to have objects that cast themselves, even if it pollutes the API of their subclasses?
&lt;/h3&gt;&lt;p&gt;I have a base class, &lt;code&gt;Base&lt;/code&gt;. It has two subclasses, &lt;code&gt;Sub1&lt;/code&gt; and &lt;code&gt;Sub2&lt;/code&gt;. Each subclass has some additional methods. For example, &lt;code&gt;Sub1&lt;/code&gt; has &lt;code&gt;Sandwich makeASandwich(Ingredients... ingredients)&lt;/code&gt;, and &lt;code&gt;Sub2&lt;/code&gt; has &lt;code&gt;boolean contactAliens(Frequency onFrequency)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Since these methods take different parameters and do entirely different things, they&amp;rsquo;re completely incompatible, and I can&amp;rsquo;t just use polymorphism to solve this problem.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Base&lt;/code&gt; provides most of the functionality, and I have a large collection of &lt;code&gt;Base&lt;/code&gt; objects. However, all &lt;code&gt;Base&lt;/code&gt; objects are either a &lt;code&gt;Sub1&lt;/code&gt; or a &lt;code&gt;Sub2&lt;/code&gt;, and sometimes I need to know which they are.&lt;/p&gt;
&lt;p&gt;It seems like a bad idea to do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;for (Base base : bases) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    if (base instanceof Sub1) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ((Sub1) base).makeASandwich(getRandomIngredients());
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        // ... etc.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    } else { // must be Sub2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        ((Sub2) base).contactAliens(getFrequency());
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        // ... etc.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;So I came up with a strategy to avoid this without casting. &lt;code&gt;Base&lt;/code&gt; now has these methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;boolean isSub1();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Sub1 asSub1();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Sub2 asSub2();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;And of course, &lt;code&gt;Sub1&lt;/code&gt; implements these methods as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;boolean isSub1() { return true; }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Sub1 asSub1();   { return this; }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Sub2 asSub2();   { throw new IllegalStateException(); }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;And &lt;code&gt;Sub2&lt;/code&gt; implements them in the opposite way.&lt;/p&gt;
&lt;p&gt;Unfortunately, now &lt;code&gt;Sub1&lt;/code&gt; and &lt;code&gt;Sub2&lt;/code&gt; have these methods in their own API. So I can do this, for example, on &lt;code&gt;Sub1&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/** no need to use this if object is known to be Sub1 */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Deprecated
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;boolean isSub1() { return true; }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/** no need to use this if object is known to be Sub1 */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Deprecated
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Sub1 asSub1();   { return this; }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/** no need to use this if object is known to be Sub1 */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@Deprecated
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Sub2 asSub2();   { throw new IllegalStateException(); }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This way, if the object is known to be only a &lt;code&gt;Base&lt;/code&gt;, these methods are un-deprecated, and can be used to &amp;ldquo;cast&amp;rdquo; itself to a different type so I can invoke the subclass&amp;rsquo;s methods on it. This seems elegant to me in a way, but on the other hand, I&amp;rsquo;m kind of abusing Deprecated annotations as a way to &amp;ldquo;remove&amp;rdquo; methods from a class.&lt;/p&gt;
&lt;p&gt;Since a &lt;code&gt;Sub1&lt;/code&gt; instance really &lt;em&gt;is&lt;/em&gt; a Base, it does make sense to use inheritance rather than encapsulation. Is what I&amp;rsquo;m doing good? Is there a better way to solve this problem?&lt;/p&gt;
&lt;p&gt;Tags: java, inheritance, type-casting&lt;/p&gt;
&lt;p&gt;asked by codebreaker&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The highest scoring answer so far has collected 21 upvotes and 3 downvotes, and it dismisses the OPs question stating that his design is wrong.  Basically, it draws a straw man of the OP&amp;rsquo;s description and proceeds to attack it.  The strawman is terrible, so he is mighty successful at destroying it. Needless to say, one of the 3 downvotes is mine.&lt;/p&gt;
&lt;p&gt;Then, here is my answer, which turned out to be highly unpopular:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What you are doing is perfectly legitimate. Do not pay attention to the naysayers who merely reiterate dogma because they read it in some books. Dogma has no place in engineering.&lt;/p&gt;
&lt;p&gt;I have employed the same mechanism a couple of times, and I can say with confidence that the java runtime could have also done the same thing in at least one place that I can think of, thus improving performance, usability, and readability of code that uses it.&lt;/p&gt;
&lt;p&gt;Take for example &lt;code&gt;java.lang.reflect.Member&lt;/code&gt;, which is the base of &lt;code&gt;java.lang.reflect.Field&lt;/code&gt; and &lt;code&gt;java.lang.reflect.Method&lt;/code&gt;. (The actual hierarchy is a bit more complicated than that, but that&amp;rsquo;s irrelevant.) Fields and methods are vastly different animals: one has a value that you can get or set, while the other has no such thing, but it can be invoked with a number of parameters and it may return a value. So, fields and methods are both members, but the things you can do with them are about as different from each other as making sandwiches vs. contacting aliens.&lt;/p&gt;
&lt;p&gt;Now, when writing code that uses reflection we very often have a &lt;code&gt;Member&lt;/code&gt; in our hands, and we know that it is either a &lt;code&gt;Method&lt;/code&gt; or a &lt;code&gt;Field&lt;/code&gt;, (or, rarely, something else,) and yet we have to do all the tedious &lt;code&gt;instanceof&lt;/code&gt; to figure out precisely what it is and then we have to cast it to get a proper reference to it. (And this is not only tedious, but it also does not perform very well.) The &lt;code&gt;Method&lt;/code&gt; class could have very easily implemented the pattern that you are describing, thus making the life of thousands of programmers easier.&lt;/p&gt;
&lt;p&gt;Of course, this technique is only viable in small, well-defined hierarchies of closely coupled classes that you have (and will always have) source-level control of: you don&amp;rsquo;t want to be doing such a thing if your class hierarchy is liable to be extended by people who are not at liberty to refactor the base class.&lt;/p&gt;
&lt;p&gt;Here is how what I have done differs from what you have done:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The base class provides a default implementation for the entire &lt;code&gt;asDerivedClass()&lt;/code&gt; family of methods, having each one of them return &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each derived class only overrides one of the &lt;code&gt;asDerivedClass()&lt;/code&gt; methods, returning &lt;code&gt;this&lt;/code&gt; instead of &lt;code&gt;null&lt;/code&gt;. It does not override any of the rest, nor does it want to to know anything about them. So, no &lt;code&gt;IllegalStateException&lt;/code&gt;s are thrown.&lt;/li&gt;
&lt;li&gt;The base class also provides &lt;code&gt;final&lt;/code&gt; implementations for the entire &lt;code&gt;isDerivedClass()&lt;/code&gt; family of methods, coded as follows: &lt;code&gt;return asDerivedClass() != null;&lt;/code&gt; This way, the number of methods that need to be overridden by derived classes is minimized.&lt;/li&gt;
&lt;li&gt;I have not been using &lt;code&gt;@Deprecated&lt;/code&gt; in this mechanism because I did not think of it. Now that you gave me the idea, I will put it to use, thanks!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C# has a related mechanism built-in via the use of the &lt;code&gt;as&lt;/code&gt; keyword. In C# you can say &lt;code&gt;DerivedClass derivedInstance = baseInstance as DerivedClass&lt;/code&gt; and you will get a reference to a &lt;code&gt;DerivedClass&lt;/code&gt; if your &lt;code&gt;baseInstance&lt;/code&gt; was of that class, or &lt;code&gt;null&lt;/code&gt; if it was not. This (theoretically) performs better than &lt;code&gt;is&lt;/code&gt; followed by cast, (&lt;code&gt;is&lt;/code&gt; is the admittedly better named C# keyword for &lt;code&gt;instanceof&lt;/code&gt;,) but the custom mechanism that we have been hand-crafting performs even better: the pair of &lt;code&gt;instanceof&lt;/code&gt;-and-cast operations of Java, as well as the &lt;code&gt;as&lt;/code&gt; operator of C# do not perform as fast as the single virtual method call of our custom approach.&lt;/p&gt;
&lt;p&gt;I hereby put forth the proposition that this technique should be declared to be &lt;strong&gt;a pattern&lt;/strong&gt; and that a nice name should be found for it.&lt;/p&gt;
&lt;h3 id=&#34;gee-thanks-for-the-downvotes&#34;&gt;Gee, thanks for the downvotes!
&lt;/h3&gt;&lt;p&gt;A summary of the controversy, to save you from the trouble of reading the comments:&lt;/p&gt;
&lt;p&gt;People&amp;rsquo;s objection appears to be that the original design was wrong, meaning that you should never have vastly different classes deriving from a common base class, or that even if you do, the code which uses such a hierarchy should never be in the position of having a base reference and needing to figure out the derived class. Therefore, they say, the self-casting mechanism proposed by this question and by my answer, which improves the use of the original design, should never have been necessary in the first place. (They don&amp;rsquo;t really say anything about the self-casting mechanism itself, they only complain about the nature of designs that the mechanism is meant to be applied to.)&lt;/p&gt;
&lt;p&gt;However, in the example above I have &lt;strong&gt;already&lt;/strong&gt; shown that the creators of the java runtime did in fact choose precisely such a design for the &lt;code&gt;java.lang.reflect.Member&lt;/code&gt;, &lt;code&gt;Field&lt;/code&gt;, &lt;code&gt;Method&lt;/code&gt; hierarchy, and in the comments below I &lt;strong&gt;also&lt;/strong&gt; show that the creators of the C# runtime independently arrived at an &lt;strong&gt;equivalent&lt;/strong&gt; design for the &lt;code&gt;System.Reflection.MemberInfo&lt;/code&gt;, &lt;code&gt;FieldInfo&lt;/code&gt;, &lt;code&gt;MethodInfo&lt;/code&gt; hierarchy. So, these are two different real world scenarios which are sitting right under everyone&amp;rsquo;s nose and which have demonstrably workable solutions using precisely such designs.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s what all the following comments boil down to. The self-casting mechanism is hardly mentioned.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So, I have copied all this here for posterity, because I really do stand by my convictions and I will continue to do so no matter how many people disagree with me, for as long as I don&amp;rsquo;t see any valid arguments against my convictions.&lt;/p&gt;
&lt;p&gt;Acceptance of some strategy and dismissal of some other strategy without objective reasons for doing so is just plain good ol&amp;rsquo; dogma.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2015-07-05 13:06:52 UTC&lt;/p&gt;
&lt;p&gt;See your note on &amp;ldquo;Clean Code&amp;rdquo;, Page 291 - “G7: Base Classes Depending on Their Derivatives” here: &lt;a 
   href=&#34;//localhost:1313/p/my-notes-on-clean-code-by-robert-c-martin/&#34;
   &gt;My notes on Clean Code&lt;/a&gt;. Seems you changed your tune by admitting there are exceptions. How&amp;hellip; unpopular!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://michael.gr&#34; target=&#34;_blank&#34;
   &gt;michael.gr&lt;/a&gt; 2015-07-05 13:11:58 UTC&lt;/p&gt;
&lt;p&gt;Yes, I changed my mind.  There are some exceptions.  I do have the right to change my mind, right?  Have you never changed your mind about anything?  How do you like it when people make snide remarks about changes of tune?  Anyhow, thanks for pointing that out to me, I will now go fix it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://michael.gr&#34; target=&#34;_blank&#34;
   &gt;michael.gr&lt;/a&gt; 2015-07-05 13:20:14 UTC&lt;/p&gt;
&lt;p&gt;So, I fixed it.  The comment that I removed about Page 291 &amp;ldquo;G7&amp;rdquo; was: &amp;ldquo;A class should not know anything about its derivatives, period. I do not believe that there should ever be exceptions to this rule.&amp;rdquo;  Well, it turns out, there are some cases where this rule can have some useful exceptions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Mandatory disposal vs- the &#34;Dispose-disposing&#34; abomination</title>
        <link>//localhost:1313/p/mandatory-disposal-vs-the-dispose-disposing-abomination/</link>
        <pubDate>Fri, 20 Mar 2015 09:54:20 +0000</pubDate>
        
        <guid>//localhost:1313/p/mandatory-disposal-vs-the-dispose-disposing-abomination/</guid>
        <description>&lt;p&gt;This article started as a &lt;a class=&#34;external&#34; 
   href=&#34;https://programmers.stackexchange.com/a/276792/41811&#34; target=&#34;_blank&#34;
   &gt;stackoverflow answer&lt;/a&gt;, and then I copied it over here to expand on it.&lt;/p&gt;
&lt;p&gt;For a discussion of the same issue but in java-oriented terms, see this Stack Overflow answer of mine: &lt;em&gt;Is overriding Object.finalize() really bad?&lt;/em&gt; &lt;a class=&#34;external&#34; 
   href=&#34;https://programmers.stackexchange.com/a/288724/41811&#34; target=&#34;_blank&#34;
   &gt;http://programmers.stackexchange.com/a/288724/41811&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is this practice which is unfortunately very prevalent in the C# world, of implementing object disposal using the ugly, clunky, inelegant, ill-conceived, and error prone idiom known as &lt;strong&gt;IDisposable-disposing&lt;/strong&gt;. MSDN &lt;a class=&#34;external&#34; 
   href=&#34;https://msdn.microsoft.com/en-us/library/fs2xkftw%28v=vs.110%29.aspx&#34; target=&#34;_blank&#34;
   &gt;describes it in length&lt;/a&gt;, and lots of people swear by it, follow it religiously, write walls of text discussing &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/538060/773113&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;precisely&lt;/em&gt; how it should be done and &lt;em&gt;precisely&lt;/em&gt; how it works&lt;/a&gt;, and &lt;a class=&#34;external&#34; 
   href=&#34;https://joeduffyblog.com/2005/04/08/dg-update-dispose-finalization-and-resource-management/&#34; target=&#34;_blank&#34;
   &gt;precisely how they arrived at this particular way of doing it&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;(Please note that what I am calling ugly here is not the object disposal pattern itself; what I am calling ugly is the particular idiom of implementing an extra &lt;code&gt;Dispose&lt;/code&gt; method with a &lt;code&gt;bool disposing&lt;/code&gt; parameter.)&lt;/p&gt;
&lt;p&gt;This idiom was invented under the assumption that the invocation of &lt;code&gt;IDisposable.Dispose()&lt;/code&gt; is something optional, or in any case something which might be OK to forget, in combination with the fact that it is impossible to guarantee that our objects&amp;rsquo; destructor will always be invoked by the garbage collector to clean up resources.  So, people tend to make their best effort to invoke their &lt;code&gt;IDisposable.Dispose()&lt;/code&gt; methods, and in case they forget, they also give it one more try from within the destructor. You know, just in case.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;But then your &lt;code&gt;IDisposable.Dispose()&lt;/code&gt; might have both managed and unmanaged objects to clean up, but the managed ones cannot be cleaned up when &lt;code&gt;IDisposable.Dispose()&lt;/code&gt; is invoked from within the destructor, because they have already been taken care of by the garbage collector at that point in time, so there is this need for a separate &lt;code&gt;Dispose()&lt;/code&gt; method that accepts a &lt;code&gt;bool disposing&lt;/code&gt; flag to know if both managed and unmanaged objects should be cleaned up, or only unmanaged ones.  In addition to that, you have to guard against disposing your unmanaged resources twice, so you have to either have a &lt;code&gt;disposed&lt;/code&gt; member variable to keep track of whether &lt;code&gt;IDisposable.Dispose()&lt;/code&gt; has been invoked, or, better yet, invoke &lt;code&gt;GC.SuppressFinalize()&lt;/code&gt; from within &lt;code&gt;IDisposable.Dispose()&lt;/code&gt; so that finalization can be skipped if the object is known to have been properly disposed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Excuse me, but this is just insane.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I go by Einstein&amp;rsquo;s axiom, which says that &lt;em&gt;things should be as simple as possible, but not simpler.&lt;/em&gt; Clearly, we cannot omit the cleaning up of resources, so the simplest possible solution has to include at least that. The next simplest solution involves always disposing everything at the precise point in time that it is supposed to be disposed, without complicating things by bringing into the picture the destructor as an alternative fall back. So, that has to be it, according to my line of thinking. I call it &lt;strong&gt;&lt;em&gt;Mandatory Disposal&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now, strictly speaking, it is of course impossible to guarantee that every single programmer out there will always remember to make sure that &lt;code&gt;IDisposable.Dispose()&lt;/code&gt; will be invoked, but what &lt;em&gt;can&lt;/em&gt; be done, is that the destructor can be used to detect such omissions.  The crux of the matter is what we do once we have detected such an omission: &lt;strong&gt;we do not attempt to correct it; instead, we generate an error message.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is very simple, really.  (Duh!)  All the destructor has to do is generate a log entry if it detects that the &lt;code&gt;disposed&lt;/code&gt; flag of the &lt;code&gt;IDisposable&lt;/code&gt; object was never set to true. So, the use of the destructor is not an integral part of our disposal strategy, but it is our quality assurance mechanism. And since this is a debug-mode only test, we can place our entire destructor inside an &lt;code&gt;#if DEBUG&lt;/code&gt; block, so we never incur any destruction penalty in a production environment. The IDisposable-disposing idiom prescribes that &lt;code&gt;GC.SuppressFinalize()&lt;/code&gt; should be invoked precisely in order to lessen the overhead of finalization, but with Mandatory Disposal it is possible to &lt;strong&gt;completely avoid all finalization in our production build.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What it boils down to is the eternal &lt;strong&gt;hard error doctrine vs. soft error doctrine&lt;/strong&gt; argument:&lt;/p&gt;
&lt;p&gt;The IDisposable-disposing idiom of object disposal is a soft error doctrine approach, allowing the programmer to forget to invoke &lt;code&gt;IDisposable.Dispose()&lt;/code&gt; and attempting to somehow (magically) make things right in the end. My Mandatory Disposal idiom is a hard error doctrine approach, requiring that the programmer must always make sure that &lt;code&gt;IDisposable.Dispose()&lt;/code&gt; gets invoked, under penalty of error.&lt;/p&gt;
&lt;p&gt;The error is mitigated in this special case, from the standard assertion failure exception that the hard error doctrine usually calls for, to a mere error-level message in the debug log, since the error is detected during finalization, and by that time it is too late for fail-fast measures anyway.&lt;/p&gt;
&lt;p&gt;The Mandatory Disposal mechanism works best if the &lt;code&gt;DEBUG&lt;/code&gt; build of our application performs a full garbage disposal before quitting, so as to guarantee that all destructors will be invoked, and thus detect any &lt;code&gt;IDisposable&lt;/code&gt; objects that we forgot to dispose.  Also, the Mandatory Disposal mechanism works best if we avoid using static references to objects, because such references prevent objects from being garbage-collected.&lt;/p&gt;
&lt;p&gt;Once you start using Mandatory Disposal, one issue you inevitably encounter is that you discover objects which you forgot to dispose of, but you do not know how to fix them because you have no idea where they were allocated.  There is a nice way of solving this problem without considerable complications, but this will be the subject of another post.&lt;/p&gt;
&lt;p&gt;More on this issue, but in java-oriented terms, in this Stack Overflow answer of mine: &lt;em&gt;Is overriding Object.finalize() really bad?&lt;/em&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://programmers.stackexchange.com/a/288724/41811&#34; target=&#34;_blank&#34;
   &gt;http://programmers.stackexchange.com/a/288724/41811&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A whole new paper on this issue is here: &lt;a 
   href=&#34;//localhost:1313/p/object-lifetime-awareness/&#34;
   &gt;Object Lifetime Awareness&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>The transaction pattern and the feature badly missing from exceptions</title>
        <link>//localhost:1313/p/the-transaction-pattern-and-the-feature-badly-missing-from-exceptions/</link>
        <pubDate>Wed, 26 Nov 2014 20:14:08 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-transaction-pattern-and-the-feature-badly-missing-from-exceptions/</guid>
        <description>&lt;p&gt;Exceptions are the best thing since sliced bread.  If you use them properly, you can write code of much higher quality than without them.  I think of the old days before exceptions, and I wonder how we managed to get anything done back then.  There is, however, one little very important thing missing from implementations of exceptions in all languages that I know of, and it has to do with transactions.&lt;/p&gt;
&lt;p&gt;At a high level, exception handling looks structurally similar to transactional processing.  In both cases we have a block of guarded code, during the execution of which we acknowledge the possibility that things may go wrong, in which case we are given the opportunity to leave things exactly as we found them. So, given this similarity, it is no wonder that one can nicely facilitate the other, as this sample code shows:&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Transaction&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transactionable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Note that the transaction illustrated above is a simple type of open-close transaction, not a database-style transaction. Database-style transactions are a bit more complicated, because they cannot be just closed, they need to be either committed, or rolled back. The collaboration between exception handling and database-style transactional processing is just slightly more involved:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Transaction&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transactionable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newTransaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transaction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;rollback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s all very nice, but it is a bit too verbose. So, the good folks who design languages have come up with a nifty feature: the &lt;code&gt;try-with-resources&lt;/code&gt; construct of Java, or the &lt;code&gt;using-IDisposable&lt;/code&gt; construct of C#, which allows you to have a method automatically invoked at the end of a block regardless of whether an exception was thrown or not, and greatly helps in keeping things neat by keeping cleanup code hidden.&lt;/p&gt;
&lt;p&gt;I like this construct a lot, and I use it all the time. Actually, I practically use it in every single situation where I need to remember (or otherwise not fail) to do something at the end of something. The mere presence of such a need tells me that I have a &lt;em&gt;transaction pattern&lt;/em&gt; in my hands, and I like to always code it as such.&lt;/p&gt;
&lt;p&gt;For example, I have this special collection which issues a notification whenever it is changed, and I am about to make multiple changes to it, but I only want notifications to be issued once I am done with all the changes, not while I am doing the changes, so I have to somehow suppress notifications for a while, and then re-enable them. Someone else in my shoes would simply add a notification suppression flag to the notifying collection, and then code a statement at the beginning of the block which sets that flag, and another statement at the end of the block which clears that flag.  But not me. No, I have to have an &lt;code&gt;AutoCloseable&lt;/code&gt; (in Java, or &lt;code&gt;IDisposable&lt;/code&gt; in C#) object called &lt;code&gt;NotificationSuppression&lt;/code&gt; instantiated at the beginning of the block, which sets the notification suppression flag from within its constructor, and gets automatically invoked at the end of the &lt;code&gt;try-with-resources&lt;/code&gt; block (in Java, or &lt;code&gt;using-IDisposable&lt;/code&gt; in C#) to clear the flag. The beauty of it is that if an exception is ever thrown in the mean time, the notifying collection will not be left in a permanent notification suppression state.&lt;/p&gt;
&lt;p&gt;I suppose that the days when I used to care about clock cycles are long gone, and what I care most about now is reliability and elegance.&lt;/p&gt;
&lt;p&gt;So, one might be tempted to guess that database-style transactions could also benefit from this construct, by having the transaction object automagically invoked at the end of the &lt;code&gt;try-with-resources&lt;/code&gt; (in Java, or &lt;code&gt;using-IDisposable&lt;/code&gt; in C#) block to provide proper termination for the transaction, saving us from having to write all that committing, exception-catching, rollbacking boilerplate code each time.  Right?  Well, unfortunately, wrong.  You &lt;em&gt;cannot&lt;/em&gt; use &lt;code&gt;try-with-resources&lt;/code&gt; (in Java, or &lt;code&gt;using-IDisposable&lt;/code&gt; in C#) with database-style transactions, at least not in any elegant way.&lt;/p&gt;
&lt;p&gt;The reason why you cannot do this is because your &lt;code&gt;close()&lt;/code&gt; (in Java, &lt;code&gt;Dispose()&lt;/code&gt; in C#) method has no way of knowing whether it is being invoked as a result of normal termination of the controlled block, or whether an exception has occurred, and so it has no way of deciding whether it should commit or rollback the transaction.&lt;/p&gt;
&lt;p&gt;I suppose there are various different ways to fix this in future versions of Java and C#; one way that I can think of would be to introduce a new interface, say &lt;code&gt;AutoCloseable2&lt;/code&gt; or &lt;code&gt;IDisposable2&lt;/code&gt;, which accepts a &lt;code&gt;Throwable&lt;/code&gt; (in Java. or &lt;code&gt;Exception&lt;/code&gt; in C#) as a parameter, and operates in collusion with the compiler, as the case already is with the existing &lt;code&gt;AutoCloseable&lt;/code&gt; and &lt;code&gt;IDisposable&lt;/code&gt;.  If this throwable parameter is null, it would mean that the method is being invoked as a result of normal termination, while if it is not null, then it would mean that the method is being invoked as a result of abnormal termination, and the throwable is being passed just in case the method has any use for it.&lt;/p&gt;
&lt;p&gt;True, in the majority of &lt;code&gt;try-with-resources&lt;/code&gt; (in Java, or &lt;code&gt;using-IDisposable&lt;/code&gt; in C#) blocks you do not need this special functionality, and true, such a feature would probably be misused by some. But that&amp;rsquo;s all irrelevant; the point is that there is this very important and frequently used type of processing, namely, database-style transactional processing, which &lt;em&gt;cannot be done&lt;/em&gt; the way things are now, at least not in an elegant way. I think that&amp;rsquo;s worth fixing.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Bug reporting: a checklist</title>
        <link>//localhost:1313/p/bug-reporting-a-checklist/</link>
        <pubDate>Sun, 16 Nov 2014 13:54:13 +0000</pubDate>
        
        <guid>//localhost:1313/p/bug-reporting-a-checklist/</guid>
        <description>&lt;p&gt;Here is a check list for creating useful bug reports:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Before reporting, make sure that you are using the latest version of the software.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Before reporting something as a bug, make sure it is in fact a bug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Before reporting, play around with the bug to identify it with at least a bit of accuracy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Report through the proper channel, usually an issue tracking system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure that the bug has not already been reported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invest some time to find a proper title for the bug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State the name of the product in which you found the bug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State the version of the product in which you found the bug.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Describe your environment (Operating System name and version, etc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;List the steps to reproduce the problem.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State the &amp;ldquo;observed result&amp;rdquo; of following the steps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State the &amp;ldquo;expected result&amp;rdquo; of following the steps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State the reproducibility of the bug. (Or your best estimate of it.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stick to the facts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Address only one bug per bug report.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Include any useful attachments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is a slightly more detailed discussion of each one of the above items:&lt;/p&gt;
&lt;h3 id=&#34;1-before-reporting-make-sure-that-you-are-using-the-latest-version-of-the-software&#34;&gt;1. Before reporting, make sure that you are using the latest version of the software.
&lt;/h3&gt;&lt;p&gt;If not, then your bug report has a high probability of being irrelevant. Nobody wants to waste time with irrelevant stuff.&lt;/p&gt;
&lt;h3 id=&#34;2-before-reporting-something-as-a-bug-make-sure-that-it-is-in-fact-a-bug&#34;&gt;2. Before reporting something as a bug, make sure that it is in fact a bug.
&lt;/h3&gt;&lt;p&gt;Just because the software is not doing what you expected it to do, it does not mean that the software is not working correctly.  It is quite possible that the software is working precisely as intended, so what you think of as a bug is not really a bug, it is a change request. The main difference between bug reports and change requests is that in the case of bug reports, the title of the issue describes something which is unwanted, e.g. &amp;ldquo;my newly created item does not appear at the top of the list&amp;rdquo; while in the case of change requests, the title of the issue describes something which is wanted, e.g. &amp;ldquo;sort item list by creation date instead of name&amp;rdquo;. If you mistakenly report a change request as a bug you are going to be sending the programmers on a wild goose change looking for recent changes in the code that might have caused the observed behavior, while there are none to be found.&lt;/p&gt;
&lt;h3 id=&#34;3-before-reporting-play-around-with-the-bug-to-identify-it-with-at-least-a-bit-of-accuracy&#34;&gt;3. Before reporting, play around with the bug to identify it with at least a bit of accuracy.
&lt;/h3&gt;&lt;p&gt;Programmers tend to not appreciate it very much when users report just the first superficial manifestation of anything that appears wrong. A guy filed a bug report once about an application failing to open a document which he had just created, without first bothering to check whether the document file actually existed on his disk. As it turned out after a lot of wasted time and frustration, it was perfectly normal for the application to not be able to open the file, because the file did not exist, and the bug report should instead have been about the application failing to create the file in the first place. Another guy filed a report which included a complicated sequence of steps for arriving at a particular rarely used screen which contained a text edit box whose cursor was not blinking. He did so without noticing that no cursor was blinking on any text edit box in the entire application, not even in the search field of the main screen. So, the number of steps to reproduce could have been 2 instead of 12. Do not be the guy who sends the programmers on wild goose chases: try to investigate the bug before reporting it, so as to file a meaningful report.&lt;/p&gt;
&lt;h3 id=&#34;4-report-through-the-proper-channel-usually-an-issue-tracking-system&#34;&gt;4. Report through the proper channel, usually an issue tracking system.
&lt;/h3&gt;&lt;p&gt;If you have been explicitly informed that proper channels for reporting bugs in your organization include sending direct emails to the programmers, sticking post-it notes on their office doors, or striking up conversations with them by the water cooler, then fine, so be it.  But with most software development teams, the one and only acceptable channel for reporting bugs is a specialized issue tracking system. Yes, you will need to first learn how to use it, there is no way around that.&lt;/p&gt;
&lt;h3 id=&#34;5-make-sure-that-the-bug-has-not-already-been-reported&#34;&gt;5. Make sure that the bug has not already been reported.
&lt;/h3&gt;&lt;p&gt;Reporting the same bug multiple times wastes the programmers time and makes them less likely to pay attention to future bug reports submitted by the same person. Decent issue tracking systems tend to scan the text of your bug report and try to find similar bug reports for you, in case one of them is about the same issue. Of course, in order for this feature to work, you need to be verbose while describing the bug, so that the issue tracking system has enough keywords to search for.  If your bug has already been reported, amend the original report with whatever new information you might have.&lt;/p&gt;
&lt;h3 id=&#34;6-invest-some-time-to-find-a-proper-title-for-the-bug&#34;&gt;6. Invest some time to find a proper title for the bug.
&lt;/h3&gt;&lt;p&gt;The title should contain as much information as possible in an as concise form as possible, so as to quickly give an accurate idea of what it is about without delving into unnecessary details. Also, the title should uniquely identify the bug among all existing similar bugs and all future similar bugs. Ideally, if a bug pops up in the future whose title would be exactly the same as the title of the bug you are currently filing, then that future bug should be nothing but a re-appearance of the bug you are reporting. So, for example, &amp;ldquo;problem with the profile screen&amp;rdquo; is a very bad title for a bug, because there is a huge number of entirely unrelated things that can go wrong with a profile screen. A better bug title would be &amp;ldquo;profile picture remains unchanged when a new one is uploaded&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;7-state-the-name-of-the-product-in-which-you-found-the-bug&#34;&gt;7. State the name of the product in which you found the bug.
&lt;/h3&gt;&lt;p&gt;The development team may have produced many different applications, so they need to know precisely which one you are talking about, but even if they have produced only one, chances are that they would still like to see that you are capable of calling it with its proper name before they accept a bug report from you.  So, be sure to state the name of the product in which you found the bug, and be sure to use the precise product name as reported by the product itself, (e.g. &amp;ldquo;Acme Point of Sales For Windows&amp;rdquo;) instead of the name that you use in every day language, (e.g. &amp;ldquo;the store app&amp;rdquo;) or the name that you think is the name of the product even though you have never really looked it up. (e.g. &amp;ldquo;acme&amp;rdquo;. Which, in this case, happens to be the name of the company, not the name of the product. Not only programmers, but even technical support personnel hate it when users do that.)&lt;/p&gt;
&lt;h3 id=&#34;8-state-the-version-of-the-product-in-which-you-found-the-bug&#34;&gt;8. State the version of the product in which you found the bug.
&lt;/h3&gt;&lt;p&gt;It goes without saying that without the version number, the report is useless. Also keep in mind that the bug might persist for several versions or internal releases, so
every time you come across the same bug in a later version, amend the
bug report to indicate that it is still there.&lt;/p&gt;
&lt;h3 id=&#34;9-describe-your-environment-operating-system-name-and-version-etc&#34;&gt;9. Describe your environment (Operating System name and version, etc)
&lt;/h3&gt;&lt;p&gt;The programmers will probably need to know at least a little bit, possibly even a lot, about the software and hardware environment that you were using at the time that the bug manifested itself. This will include at the very least your operating system name and version. If the programmers need more than that, then generally, they will have (or they ought to have) produced some guidelines explaining precisely what additional information is required for bug reports on their product. Be thorough and meticulous: give the precise names and version numbers as reported by the systems themselves (e.g. &amp;ldquo;Windows 7 Ultimate 64 bit, Version 6.1, Build 7601, Service Pack 1&amp;rdquo;) instead of the names that you would use in every day language (e.g. &amp;ldquo;64 bit Seven.&amp;rdquo;)&lt;/p&gt;
&lt;h3 id=&#34;10-list-the-steps-to-reproduce-the-problem&#34;&gt;10. List the steps to reproduce the problem.
&lt;/h3&gt;&lt;p&gt;Even if the programmers opt to believe you when you say that you &amp;ldquo;saw a bug&amp;rdquo;, there is not much they can do about it unless you tell them precisely what you did that caused the bug to manifest itself. Begin with the very first step, no matter how obvious, (e.g. &amp;ldquo;launch Acme Point of Sales For Windows&amp;rdquo;) and continue listing steps until the problem occurs. Be sure to list not only what you perceive to be the intended results of your actions (e.g. &amp;ldquo;save the file&amp;rdquo;) but also your actual actions (e.g. &amp;ldquo;save the file by hitting Ctrl+S&amp;rdquo;) not only because these two may, unbeknownst to you, differ, (Ctrl+S might do something other than saving the file,) but also because different ways of achieving the same thing might have different side-effects, so the programmers need to know about those, too. (Ctrl+S might just save the file, while other ways to save the file might involve opening up a file-save dialog, which in turn involves loading resources needed to display the dialog, instantiating file preview plugins, transitioning the application GUI in and out of a modal state, etc.)  Be very clear and precise, and make sure that what you wrote can be understood unambiguously and effortlessly by someone who is not you. If you have found multiple significantly different scenarios to reproduce the same bug, list them all.  If you have found some sequence of steps which gets the job done without triggering the bug, be sure to also include it.&lt;/p&gt;
&lt;h3 id=&#34;11-state-the-observed-result-of-following-the-steps&#34;&gt;11. State the &amp;ldquo;observed result&amp;rdquo; of following the steps.
&lt;/h3&gt;&lt;p&gt;Explain precisely what it is that you consider to be the bug, no matter how obvious it may seem to you. Simply saying &amp;ldquo;open the properties screen and then boom- there it is!&amp;rdquo; will not do. The programmers may have stared at the properties screen many times in the past without noticing that which you have noticed, or they may be aware of multiple different issues within the properties screen, which you know nothing about. They may even arrive at a perfectly fine properties screen after following your steps, so they need to have some quick and definitive way of knowing whether they are seeing the bug that you have seen. No programmer likes having to guess something which the bug reporter could have easily stated. Also, a great percentage of bug reports are false reports about things that are the way they are by design and not by accident, so the programmers need to be able to tell right up front whether you are reporting an actual bug, and not some feature which you do not quite like, or not quite understand.&lt;/p&gt;
&lt;h3 id=&#34;12-state-the-expected-result-of-following-the-steps&#34;&gt;12. State the &amp;ldquo;expected result&amp;rdquo; of following the steps.
&lt;/h3&gt;&lt;p&gt;Explain precisely what you expected to happen in place of that which actually happened and which you consider to be a bug. In many cases it is just a negated form of the statement made in the previous item, (e.g. &amp;ldquo;Observed result: the application crashes. Expected result: the application should not have crashed.&amp;rdquo;) so it is not very useful, but in many other cases it can be quite a bit more descriptive than that, and that&amp;rsquo;s where it is really useful. (e.g. &amp;ldquo;Actual result: nothing happens. Expected result: the text should have started dancing on the screen.&amp;rdquo;) Diligently filling this in, no matter how obvious it might seem, shows that you are not just any random person out there, but an insider of the art of software testing and bug reporting.  If there happen to be any specifications documents describing what the software should do, this is the right place to include a reference to the section of the specification document which states what should have happened.&lt;/p&gt;
&lt;h3 id=&#34;13-state-the-reproducibility-of-the-bug-or-your-best-estimate-of-it&#34;&gt;13. State the reproducibility of the bug. (Or your best estimate of it.)
&lt;/h3&gt;&lt;p&gt;On most systems, most bugs manifest themselves each time someone follows the steps to reproduce them. Such bugs are said to have a reproducibility of 100%. Unfortunately, some bugs only manifest themselves part of the time, and some particularly nasty ones manifest themselves very rarely.  Be sure to state the reproducibility of the bug that you are reporting.  If you do not, then the person reviewing your bug report will assume 100% reproducibility, so if the bug does not manifest itself on the first try, they will close your bug report with a &amp;ldquo;works for me&amp;rdquo; comment. Nobody will waste time repeating the same steps over and over just in case this is a less-than-100%-reproducible bug which was simply not reported as such. Of course, in order to estimate the reproducibility of a bug, you will need to trigger it a few times. Triggering it only once is generally unacceptable, and besides, if you trigger it only once then clearly you have not played around with it enough in order to identify it with accuracy, as a previous item in this checklist requires.&lt;/p&gt;
&lt;h3 id=&#34;14-stick-to-the-facts&#34;&gt;14. Stick to the facts.
&lt;/h3&gt;&lt;p&gt;The programmers
are primarily interested in the facts, not in your interpretations of
the facts, nor in your assumptions about what the facts are. If you would like to include your thoughts besides the facts, that is
fine, but be sure to clearly indicate where the facts end and your own
opinions begin, and be sure that in your eagerness to start writing your opinions you have not left out any of the facts.&lt;/p&gt;
&lt;h3 id=&#34;15-address-only-one-bug-per-bug-report&#34;&gt;15. Address only one bug per bug report.
&lt;/h3&gt;&lt;p&gt;A different bug should receive a separate bug report. When in doubt, filing two different bug reports is the way to go, because a bug report can easily be marked as a duplicate of another, whereas multiple bugs rolled into one report are not as easy to split into separate bug reports.&lt;/p&gt;
&lt;h3 id=&#34;16-include-any-useful-attachments&#34;&gt;16. Include any useful attachments.
&lt;/h3&gt;&lt;p&gt;A screenshot showing the problem can be very useful to the people who will be troubleshooting it. If the bug only happens when you use the application with some specific external file, be sure to attach a copy of that file to your bug report. For example, if &amp;ldquo;the profile picture remains unchanged after uploading a new one&amp;rdquo;, then please do attach the picture which you tried uploading. Also, if the application you are using has undergone any configuration from your part, then you need to attach your configuration files with your bug report, or else your bug report might not make sense to the programmers. For example, if you have assigned a key to perform a certain action, then stating in your bug report that you pressed that key is meaningless, because the programmers do not know what action you have assigned to that key.  Your configuration file will tell them. Also, many applications log everything they do in special &amp;ldquo;debug logs&amp;rdquo;.  If you have a debug log, be sure to attach it to your bug report. Note that attachments are useful only in addition to the previous items in this checklist, and never as a substitute to any of them, so the fact that you included an attachment does not in any way exempt you from having to fill in all of the above. &amp;ldquo;Actual result: see attachment&amp;rdquo; is unacceptable. Please describe the actual result with words, (hint: searchable keywords,) and follow your description with &amp;ldquo;also see attachment.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ndash;michael.gr&lt;/p&gt;</description>
        </item>
        <item>
        <title>Why the &#39;final&#39; (Java) or &#39;readonly&#39; (C#) keyword is a bad idea</title>
        <link>//localhost:1313/p/why-the-final-java-or-readonly-c%23-keyword-is-a-bad-idea/</link>
        <pubDate>Tue, 21 Oct 2014 17:56:01 +0000</pubDate>
        
        <guid>//localhost:1313/p/why-the-final-java-or-readonly-c%23-keyword-is-a-bad-idea/</guid>
        <description>&lt;p&gt;A quick look at the source code that I have written over the past couple of decades in various work projects and hobby projects of mine shows that the percentage of class member variables that I declare as &amp;lsquo;final&amp;rsquo; in Java or as &amp;lsquo;readonly&amp;rsquo; in C# is in excess of 90%. I declare only about 10% of them as non-final. By looking at parameters and locals, a similar ratio seems to apply: their vast majority is effectively final, meaning that even though I do not explicitly declare them as final, the only time I ever write to them is when I initialize them. I would have been declaring them as final, if doing so was not tedious.&lt;/p&gt;
&lt;p&gt;My percentages may be higher than the percentages of the average programmer out there, but I shall be bold enough to claim that this is probably because I pay more attention to quality of code than the average programmer out there.&lt;/p&gt;
&lt;p&gt;I will even be as bold as to say that the above was an understatement.&lt;/p&gt;
&lt;p&gt;In my book, there is a simple rule: if it can be made final, it absolutely ought to be made final. If there is even a remote chance of making it final, that chance should be pursued tenaciously.&lt;/p&gt;
&lt;p&gt;To put it in other words, it is my firm conviction that good code uses &amp;lsquo;final&amp;rsquo; a lot, and bad code uses &amp;lsquo;final&amp;rsquo; sparsely.&lt;/p&gt;
&lt;p&gt;So, in light of the fact that immutability is a most excellent quality, and the fact that actual usage shows that values in well written code are in fact immutable far more often than not, it seems to me that the &amp;lsquo;final&amp;rsquo; keyword is a bad idea. Not in the sense that things should not be final, of course, but in the sense that &amp;lsquo;final&amp;rsquo; should be the default nature of all values, and therefore unnecessary. A keyword like &amp;lsquo;mutable&amp;rsquo; should be used to explicitly indicate that something is non-final and therefore allowed (and actually expected) to be modified.&lt;/p&gt;
&lt;p&gt;I hope one day we will see a language which  implements this realization.&lt;/p&gt;
&lt;p&gt;UPDATE 2015-05-15: It turns out that &lt;a class=&#34;external&#34; 
   href=&#34;https://www.rust-lang.org/&#34; target=&#34;_blank&#34;
   &gt;Rust&lt;/a&gt; does this with a &amp;lsquo;mut&amp;rsquo; keyword.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2015-01-22 13:53:37 UTC&lt;/p&gt;
&lt;p&gt;Many functional languages are immutable by default, so that one day was at least a few decades ago.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://michael.gr&#34; target=&#34;_blank&#34;
   &gt;michael.gr&lt;/a&gt; 2015-03-20 23:28:02 UTC&lt;/p&gt;
&lt;p&gt;Okay, mr. smarty-anonymous-pants, I meant to say that I hope one day we will see an _imperative_ language which implements this realization.  C-:=&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Assertions and Testing</title>
        <link>//localhost:1313/p/assertions-and-testing/</link>
        <pubDate>Fri, 19 Sep 2014 15:27:57 +0000</pubDate>
        
        <guid>//localhost:1313/p/assertions-and-testing/</guid>
        <description>&lt;p&gt;So, since we do software testing, we should quit placing &lt;code&gt;assert&lt;/code&gt; statements in production code, right? Let me count the ways in which this is wrong:&lt;/p&gt;
&lt;p&gt;(TL;DR: skip to the paragraph containing a red sentence and read only that.)&lt;/p&gt;
&lt;h3 id=&#34;1-assertions-are-optional&#34;&gt;1. Assertions are optional.
&lt;/h3&gt;&lt;p&gt;Each programming language has its own mechanism for enabling or disabling assertions. In languages like C++ and C# there is a distinction between a release build and a debug build, and assertions are generally only enabled in the debug build. Java has a simpler mechanism: there is only one build, but assertions do not execute unless the &lt;code&gt;-enableassertions&lt;/code&gt; (&lt;code&gt;-ea&lt;/code&gt; for short) option is specified in the command line which started the virtual machine. Therefore, if someone absolutely cannot stand the idea that assertions may be executing in a production environment, they can simply refrain from supplying the &lt;code&gt;-ea&lt;/code&gt; option; problem solved.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading:  &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The mere fact that assertions are optional and not even enabled by default should be enough to quench any objections to their use. Now, in order to convince people to start actively using assertions instead of merely not minding if others do, I need to explain why assertions are awesome. This is what the rest of this document sets out to do.&lt;/p&gt;
&lt;h3 id=&#34;2-assertions-check-things-that-testing-cannot-and-should-not&#34;&gt;2. Assertions check things that testing cannot (and should not.)
&lt;/h3&gt;&lt;p&gt;Testing treats (or should be treating) the production code as a black box, ensuring that given specific input, it produces expected results. Assertions, on the other hand, have a white box view of the code, (of course, since they live in it,) so they perform internal checks to make sure that everything is working as expected under the hood. Therefore, the domain of assertions is different from the domain of software testing, so there is a clear need for both.&lt;/p&gt;
&lt;p&gt;If there is any uncertainty as to whether software testing should be taking a black box or a white box approach, let me briefly open up a parenthesis to clarify this one:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When tests are tied to implementation details of the production code, situations arise where the production code gets refactored or bugs are fixed in it, and as a result the tests break and have to be modified in order to continue passing. I would call this &lt;em&gt;The Fragile Test Problem&lt;/em&gt;. To avoid this, tests should be written having in mind nothing but the operational requirements of the software system, so that they only need to be revised in the event of a change in the requirements. (Also see footnote 1.)&lt;/li&gt;
&lt;li&gt;Testing against implementation details of the production code renders the tests non-reusable:
&lt;ol&gt;
&lt;li&gt;It should be possible to completely rewrite a piece of production code and then reuse the old tests to make sure that the new code works exactly as the old one did.&lt;/li&gt;
&lt;li&gt;It should be possible to write a test once and have it test multiple different implementations of a system, created by independently working development teams taking different approaches to solving the same problem.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Just as users tend to test software in ways that the developer never thought of, (the well known &amp;ldquo;works for me but always breaks in the hands of the user&amp;rdquo; paradox,) software tests written by developers who maintain an agnostic stance about the inner workings of the production code are likely to test for things that were never considered by those who wrote the production code.&lt;/li&gt;
&lt;li&gt;Yes, of course, black box testing cannot claim that it leaves nothing to chance, and that&amp;rsquo;s precisely why you need assertions!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Close parenthesis.&lt;/p&gt;
&lt;p&gt;So, each assertion can be seen as a little software test embedded within the software.&lt;/p&gt;
&lt;p&gt;Various techniques that are applicable to software testing are also applicable to assertions. An example of such a technique is the &amp;ldquo;do not fix it unless there is a test for it&amp;rdquo; advice.  When a malfunction is observed in production, which has obviously passed all existing tests, instead of theorizing as to what went wrong and implementing a fix according to the theory, we add a theory-agnostic test against that malfunction, and we observe it failing. Then, we fix the malfunction according to our theory, and we observe the test passing. If the test still does not pass, then our theory was wrong.&lt;/p&gt;
&lt;p&gt;The exact same approach is valid with assertions, with the added benefit that the assertion is a one-liner instead of an entire test. The savings here can be huge, both in terms of work to be done by the programmer, and in terms of total tests execution time, because a test may have to do a lot of work to set up the right conditions for the malfunction to be observed.&lt;/p&gt;
&lt;h3 id=&#34;3-assertions-are-an-excellent-documentation-tool&#34;&gt;3. Assertions are an excellent documentation tool.
&lt;/h3&gt;&lt;p&gt;Unfortunately there is a very prevalent bad habit among software engineers worldwide, the habit of documenting assumptions within comments. This is very bad because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Every time the code gets revised, amended or refactored, someone must remember to also update the comments, but this does not always happen. As a result, comments tend to become out of date as the code evolves, their accuracy and relevance eventually deteriorating so much that they come in conflict with what the code actually does.&lt;/li&gt;
&lt;li&gt;No comment ever was, or will ever be, as precise and unambiguous as a piece of code stipulating the same thing.&lt;/li&gt;
&lt;li&gt;Even the most precisely and unambiguously expressed comment is, by its very nature of being a comment, not enforceable in any way.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, if you require a certain condition to be met, or if you have a certain assumption which you believe to be true, put your code where your mouth is and back up your claim with an assertion statement. Since assertions are optional, there is no performance penalty, and even if the code is not even once run with assertions enabled, the assertion is still better documentation than a comment, because at the very least, it compiles.&lt;/p&gt;
&lt;h3 id=&#34;4-assertions-can-catch-errors-in-the-testing-code&#34;&gt;4. Assertions can catch errors in the testing code.
&lt;/h3&gt;&lt;p&gt;Sometimes the person coding or maintaining the test code and the person coding or maintaining the production code might have a different understanding of what the operational requirements actually mean. Assertions within the production code help catch any such discrepancies at the earliest point possible, and they show that the production code is the way it is on purpose, and not by accident.&lt;/p&gt;
&lt;h3 id=&#34;5-assertions-can-be-more-pertinent-than-testing&#34;&gt;5. Assertions can be more pertinent than testing.
&lt;/h3&gt;&lt;p&gt;Sometimes the operational requirements are vague on issues on which the software design needs to make specific decisions. If the preferred way of solving a certain problem involves a division by something, then obviously, that something must not be zero, but if the operational requirements say nothing about zero, then the tests might not test for zero, and in any case they cannot be expected to test for zero. The implementation, however, knowing its own limitations, should assert against a zero. Ideally, such an issue of vagueness in the specification would be submitted back to the people responsible for it, and it should receive a definitive answer in the operational requirements document, which should then be translated into an additional test, but these things do not always happen in the real world.&lt;/p&gt;
&lt;h3 id=&#34;6-assertions-pinpoint-errors-that-testing-only-broadly-hints-at&#34;&gt;6. Assertions pinpoint errors that testing only broadly hints at.
&lt;/h3&gt;&lt;p&gt;Consider this scenario: you have a TimeTable object which contains WorkShift objects.  The shifts are stored in an array which is sorted by start time, and binary search is used to answer queries such as which employee is working at a certain time. Now, suppose that you have forgotten to sort the array after an insertion, so the binary search fails.&lt;/p&gt;
&lt;p&gt;All that the failed test will tell you is that it scheduled John to work from 10:00 to 11:00, but a query for who works at 10:30 did not yield anyone. This is not very useful; the bug could be anywhere.&lt;/p&gt;
&lt;p&gt;Proper use of assertions mandates that at the very least, immediately prior to performing a binary search on your array, you should ensure that it meets the requirement for it to be searchable via binary search, that is, to be sorted. So, voila! the assertion immediately discovers the nature of the bug.&lt;/p&gt;
&lt;p&gt;Even better, at the end of each operation on your TimeTable object you can assert that the operation is leaving the object in a valid state, which includes the requirement that this array must be at all times sorted. Thus, you will have an assertion failure at the end of the method which inserted an item to the array but forgot to sort it, pinpointing the bug with great accuracy.&lt;/p&gt;
&lt;p&gt;Now imagine the same happening in an immensely more complicated software system, where a maintenance programmer attempts to make a few small changes without comprehending exactly how the entire system works, and as a result the tests of this system start to fail without any indication as to where the problem might be. Sure, those few altered lines of code broke it, but how? What is wrong? Would it not be nice if the system could tell us what is wrong with it?  Well, assertions help you achieve precisely that: software systems that can very often tell what is wrong with themselves.&lt;/p&gt;
&lt;h3 id=&#34;7-assertions-reduce-program-complexity&#34;&gt;7. Assertions reduce program complexity.
&lt;/h3&gt;&lt;p&gt;The &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Time_complexity&#34; target=&#34;_blank&#34;
   &gt;time complexity&lt;/a&gt; and &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Computational_complexity_theory&#34; target=&#34;_blank&#34;
   &gt;computational complexity&lt;/a&gt; of algorithms are subjects which have received extensive study, but most of the code being written on a daily basis all over the planet is not algorithms in an academic sense, so these notions are inapplicable to it. What is pertinent to most code that we regularly write is &lt;em&gt;state complexity&lt;/em&gt;, which is a subject that has not received much study yet. I hope that an analytical state complexity algebra will be invented one day, allowing us to accurately calculate the state complexity of any given piece of code, but until then, nothing prevents us from theorizing about it in coarse terms. I hold it as self evident that if you add a variable to a system, the total state complexity of the system is compounded by something akin to the number of bits of that variable multiplied by the total number of statements throughout the system that make use of the value of that variable. If you add an &lt;code&gt;if&lt;/code&gt; statement, total system state complexity is compounded by the number of bits of state altered by the body of the &lt;code&gt;if&lt;/code&gt; statement, times two for the case that the body of the &lt;code&gt;if&lt;/code&gt; statement does not get executed, and therefore the bits do not get altered. From this it should be evident that each time we add the tiniest little something to our program, we are exponentially increasing its state complexity.&lt;/p&gt;
&lt;p&gt;There are only two constructs that I know of which actually reduce program state complexity instead of increasing it. One is the &lt;code&gt;final&lt;/code&gt; keyword, and the other is the &lt;code&gt;assert&lt;/code&gt; statement. The &lt;code&gt;final&lt;/code&gt; keyword makes bits unalterable, thus excluding them from program state. The &lt;code&gt;assert&lt;/code&gt; keyword limits the ranges of values that variables may have, thus also reducing the number of bits that participate in program state, and it even goes one step further, eliminating &lt;code&gt;if&lt;/code&gt; statements and guaranteeing that certain paths of execution will never be followed.&lt;/p&gt;
&lt;p&gt;So, think about it: every time you code an assertion statement you are actually making your program more simple instead of more complicated.  I believe that this realization alone should be enough to convince anyone that &lt;code&gt;assert&lt;/code&gt;, along with &lt;code&gt;final&lt;/code&gt;, are literally the most useful constructs that any programmer could ever use.&lt;/p&gt;
&lt;h3 id=&#34;8-assertions-help-the-compiler-make-better-sense-of-your-code&#34;&gt;8. Assertions help the compiler make better sense of your code.
&lt;/h3&gt;&lt;p&gt;Please do try this at home:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If you have a reasonable number of warnings enabled, (as any decent programmer would,) your compiler should issue a warning telling you that the condition &lt;code&gt;x == null&lt;/code&gt; is always false. What this demonstrates is that the preceding assertion gave the compiler knowledge of the fact that &lt;code&gt;x&lt;/code&gt; cannot be null, and the compiler is now making use of this knowledge as it compiles the rest of your method, pointing out to you potential flaws in your reasoning. Furthermore, some compilers perform useful optimizations based on knowledge that they gather from assertion statements. (I do not know to what extent java compilers do that, but I know for a fact that the Microsoft Visual C++ compiler does it; see footnote 2.)&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;Test code should always be treating production code as a black box, and knowledge of the inner workings of the production code should be used at most as a hint for testing, never as an instrument for testing. Consequently, assertions are necessary for performing white box tests within the production code so as to ensure that absolutely nothing is left to chance.&lt;/p&gt;
&lt;p&gt;Additionally, assertions help document the code, reduce its complexity, strengthen it against assumptions made by the testing code, and help build systems that, in the event of an error, can tell you what is wrong with themselves.&lt;/p&gt;
&lt;p&gt;The fact that assertions are usually disabled on deployed systems means that their use can be thought of as incurring a zero performance penalty, which &lt;strong&gt;allows programmers to develop a maximalistic error-checking culture&lt;/strong&gt; of having every single assumption always checked, never leaving anything to chance. By contrast, runtime checks always incur a performance penalty, and for this reason programmers tend to use them on a minimalistic, &amp;ldquo;only if necessary&amp;rdquo; basis. &lt;strong&gt;So, with runtime checks, programmers tend to constantly ask &amp;ldquo;should I check this?&amp;rdquo; while with assertions, they can develop the habit of asking &amp;ldquo;is there anything I forgot to check?&amp;rdquo;&lt;/strong&gt; (If there is only one paragraph that you should take home from this paper, that was it.)&lt;/p&gt;
&lt;h3 id=&#34;addendum-how-to-use-assertions&#34;&gt;Addendum: How to use assertions
&lt;/h3&gt;&lt;p&gt;Assertions can be used in every single place where an unexpected exception would otherwise be thrown. This includes all instances of contract violations such as a null pointer exception or an illegal argument exception, and in general, all instances of errors which a) indicate a bug, (should never happen,) and b) cannot be handled in any meaningful way.&lt;/p&gt;
&lt;p&gt;In java the &lt;code&gt;assert&lt;/code&gt; keyword cannot throw any exception that you might wish it to throw; it only throws the &lt;code&gt;AssertionError&lt;/code&gt; exception. Usually this is not a problem, because no piece of production code should ever try to catch an unexpected exception.  (That is, after all, precisely why it is called unexpected; it is not that the guest may arrive unannounced, it is that he is not supposed to arrive at all.) Therefore, since it is never meant to be caught, &lt;code&gt;AssertionError&lt;/code&gt; is, generally speaking, a suitable one-class-fits-all replacement of all unexpected exceptions.&lt;/p&gt;
&lt;p&gt;However, when developing a library, which will be used with assertions presumably enabled at times, you will of course need to have tests which attempt to use your library in various wrong ways, ascertaining that every single one of those attempts gets asserted against, and the problem then with all errors being reported as &lt;code&gt;AssertionError&lt;/code&gt;s is that your tests cannot tell whether the error that was caught was the specific error that you were testing for, and not some unrelated coincidental error.  For this reason, when developing libraries, a different approach is needed. One approach is the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This works nicely because according to the java language specification, the expression at the right hand side of the colon of an assertion statement does not have to be of any particular type, but if it happens to be of an exception type, then it will be treated as the &amp;lsquo;cause&amp;rsquo; of the &lt;code&gt;AssertionError&lt;/code&gt; exception. (In all other cases, its &lt;code&gt;toString()&lt;/code&gt; will be used as the &amp;lsquo;message&amp;rsquo; of the &lt;code&gt;AssertionError&lt;/code&gt; exception.) Thus, your testing code can catch the assertion exception and examine its cause to ensure that it is indeed the expected exception.&lt;/p&gt;
&lt;p&gt;So, your test suite might contain a utility method like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Throwable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;expectException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exceptionClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runnable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;runnable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Throwable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;throwable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;throwable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AssertionError&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;throwable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getCause&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;throwable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;throwable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getCause&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exceptionClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;isInstance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;throwable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;throwable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//exception of the wrong kind was thrown.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;throwable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exceptionClass&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;throwable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//exception thrown was a subclass, but not the exact class, expected.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;unchecked&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;throwable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//expected exception was not thrown.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//to keep the compiler happy.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Which might be used as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;IllegalArgumentException&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;expectException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;There are times when you have the need to check whether assertions are enabled.  For example, in the first thing I always do in my test suites is to make sure that assertions are enabled, because if someone forgot to pass the -ea switch, all tests may pass without checking for a single defect in the code.  Here is how to test whether assertions are enabled in java:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isAssertEnabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;//noinspection UnusedAssignment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertEnabled&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;//noinspection AssertWithSideEffects,NestedAssignment,ConstantConditions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertEnabled&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;//noinspection ConstantConditions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;assertEnabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Note: the &lt;code&gt;//noinspection&lt;/code&gt; comments are understood by IntelliJ IDEA; if the misfortune hath befallen thee of having to use some other IDE such as Eclipse, you will have to use some different warning suppression notation.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;footnote-1&#34;&gt;Footnote 1
&lt;/h3&gt;&lt;p&gt;What makes the Fragile Test Problem especially bad is that the process of fixing tests to make them pass is often carried out under unfavorable conditions, resulting in a sloppy job:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The programmer needs to switch his frame of mind back and forth between his core work and the somewhat unrelated and usually less exciting context of tests;&lt;/li&gt;
&lt;li&gt;The need for these fixes is usually unforeseen, so time for the fixes is rarely allocated in the schedule, which means that the programmer fixing broken tests is usually in a hurry;&lt;/li&gt;
&lt;li&gt;It is not always clear whether the production code is right and the test is wrong, or whether the test is right and a dormant bug in the production code has been exposed; etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, what tends to happen is that tests are quite often fixed sloppily, so over time they tend to evolve to &amp;ldquo;test around&amp;rdquo; (specifically pass) long-standing bugs.&lt;/p&gt;
&lt;p&gt;In the preface of Roy Osherove&amp;rsquo;s &lt;em&gt;The Art of Unit Testing&lt;/em&gt; (Manning, 2009) the author admits to having participated in a project which failed to a large part due to the tremendous development burden imposed by badly designed unit tests which had to be maintained throughout the duration of the development effort.&lt;/p&gt;
&lt;h3 id=&#34;footnote-2&#34;&gt;Footnote 2
&lt;/h3&gt;&lt;p&gt;In Microsoft Visual C++ the &lt;code&gt;ASSERT(x)&lt;/code&gt; macro does not expand to nothing when _DEBUG is undefined; instead, it expands to an &lt;code&gt;assume(x)&lt;/code&gt; intrinsic directive which, even though it does not cause any code to be emitted, it allows the asserted expression to survive the preprocessing step and to be considered by the compiler, so that the corresponding optimizations can take place in the release build, too.&lt;/p&gt;
&lt;h3 id=&#34;further-reading&#34;&gt;Further reading
&lt;/h3&gt;&lt;p&gt;Stackoverflow answer by João Manuel Rodrigues
&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/49131673/773113&#34; target=&#34;_blank&#34;
   &gt;https://stackoverflow.com/a/49131673/773113&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stackoverflow answer by me
&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/27622328/773113&#34; target=&#34;_blank&#34;
   &gt;https://stackoverflow.com/a/27622328/773113&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Benchmarking Java 8 lambdas</title>
        <link>//localhost:1313/p/benchmarking-java-8-lambdas/</link>
        <pubDate>Fri, 18 Jul 2014 18:45:13 +0000</pubDate>
        
        <guid>//localhost:1313/p/benchmarking-java-8-lambdas/</guid>
        <description>&lt;p&gt;Now that Java 8 is out, I was toying in my mind with the concept of a new assertion mechanism which uses lambdas.  The idea is to have a central assertion method that works as follows: if assertions are enabled, a supplied method gets invoked to evaluate the assertion expression, and if it returns false, then another supplied method gets invoked to throw an exception. If assertions are not enabled, the assertion method returns without invoking the supplied method. This would provide more control over whether assertions are enabled or not for individual pieces of code, as well as over the type of exception thrown if the assertion fails. It would also have the nice-to-have side effect of making 100% code coverage achievable, albeit only apparently so.&lt;/p&gt;
&lt;p&gt;Naturally, I wondered whether the performance of such a construct would be comparable to the performance of existing constructs, namely, the &amp;lsquo;assert expression&amp;rsquo; construct and the &amp;lsquo;if( checking &amp;amp;&amp;amp; expression ) throw {&amp;hellip;}].&amp;rsquo; construct. I was not hoping for equal performance, not even ballpark equal, just within the same order of magnitude.&lt;/p&gt;
&lt;p&gt;Well, the result of the benchmark blew my mind.&lt;/p&gt;
&lt;p&gt;Congratulations to the guys that made Java 8, because it turns out that all three constructs take roughly the same amount of time to execute!&lt;/p&gt;
&lt;p&gt;Here is my code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;saganaki&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestProgram&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Benchmark&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;benchmark&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Benchmark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;benchmark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;benchmark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Checker&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertionsEnabled&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Benchmark&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;benchmark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;boolean&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enableAssertions&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TestProgram&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getClassLoader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setClassAssertionStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TestProgram&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enableAssertions&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertionsEnabled&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enableAssertions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;assertions &amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;enableAssertions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; enabled&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;disabled&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;benchmark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;runAndPrint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;: if-statement&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertionsEnabled&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                    &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;benchmark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;runAndPrint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;: assert      &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;benchmark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;runAndPrint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;: assertTrue()&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertTrue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;assertTrue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Checker&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;thrower&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assertionsEnabled&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;thrower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;And here is the output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions  enabled: if-statement 28237.0 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions  enabled: assert       29037.9 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions  enabled: assertTrue() 24593.2 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions disabled: if-statement 25118.5 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions disabled: assert       25912.2 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions disabled: assertTrue() 24825.6 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions  enabled: if-statement 25835.9 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions  enabled: assert       25127.6 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions  enabled: assertTrue() 25572.9 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions disabled: if-statement 25469.6 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions disabled: assert       25448.3 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions disabled: assertTrue() 25415.7 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions  enabled: if-statement 25838.6 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions  enabled: assert       25158.9 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions  enabled: assertTrue() 25541.7 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions disabled: if-statement 25373.6 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions disabled: assert       25402.5 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;assertions disabled: assertTrue() 25370.9 iterations per millisecond
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The first run shows quite different results from the next two runs, so it is best disregarded.&lt;/p&gt;
&lt;p&gt;For the Benchmark class, see my previous post: &lt;a 
   href=&#34;//localhost:1313/p/benchmarking-code-written-in-java-or-c%23-or-any-gced-jitted-vm-based-language/&#34;
   &gt;michael.gr: Benchmarking code written in Java or C# (or any GCed, JITted, VM-based language)&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>Benchmarking code written in Java or C# (or any GCed, JITted, VM-based language)</title>
        <link>//localhost:1313/p/benchmarking-code-written-in-java-or-c%23-or-any-gced-jitted-vm-based-language/</link>
        <pubDate>Fri, 18 Jul 2014 15:45:12 +0000</pubDate>
        
        <guid>//localhost:1313/p/benchmarking-code-written-in-java-or-c%23-or-any-gced-jitted-vm-based-language/</guid>
        <description>&lt;p&gt;NOTE: This paper contains various inaccuracies.&lt;/p&gt;
&lt;p&gt;Sometimes we need to measure the time it takes for various pieces of code to execute in order to determine whether a certain construct takes significantly less time to execute than another. It sounds like a pretty simple task, but anyone who has ever attempted to do it knows that simplistic approaches are highly inaccurate, and achieving any accuracy at all is not trivial.&lt;/p&gt;
&lt;p&gt;Back in the days of C and MS-DOS things were pretty straightforward: you would read the value of the system clock, run your code, read the value of the clock again, subtract the two, and that was how much time it took to run your code. The rather coarse resolution of the system clock would skew things a bit, so one trick you would at the very least employ was to loop waiting for the value of the system clock to change, then start running your code, and stop running at another transition of the value of the system clock. Another popular hack was to run benchmarks with interrupts disabled. Yes, back in those days the entire machine was yours, so you could actually do such a thing.&lt;/p&gt;
&lt;p&gt;Nowadays, things are far more complicated. For one thing, the entire machine tends to never be yours, so you cannot disable interrupts. Other threads will pre-empt your thread, and there is nothing you can do about it, you just have to accept some inaccuracy from it.  Luckily, with modern multi-core CPUs this is not so much an issue as it used to be, but in modern VM-based languages like Java and C# we have additional and far more severe inaccuracies introduced by the garbage collection and the jitting.  Luckily, their impact can be reduced.&lt;/p&gt;
&lt;p&gt;In order to avoid inaccuracies due to jitting, we always perform one run of the code under measurement before the measurements begin.  This gives the JIT compiler a chance to do its job, so it will not be getting in the way later, during the actual benchmark.&lt;/p&gt;
&lt;p&gt;In order to avoid inaccuracies due to garbage collection, we always perform one full garbage collection before starting the benchmark, and we try to keep the benchmark short, so as to reduce the chances of another garbage collection happening before it completes. The garbage collection APIs of most VMs tend to be somewhat snobbish, and they do not really guarantee that a full garbage collection will actually take place when requested, so we need an additional trick: we allocate an object keeping only a weak reference to it, then we keep calling the VM to garbage collect and run finalizers until that object disappears.  This still does not guarantee that a full garbage collection will take place, but it gives us the closest we can have to a guarantee by using only conventional means.&lt;/p&gt;
&lt;p&gt;So, here is the class that I use for benchmarking, employing all of the above tricks:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;  1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;107
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;108
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;109
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;110
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;111
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;112
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;113
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;114
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;saganaki&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;java.lang.ref.WeakReference&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Measures the time it takes to run a piece of code.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @author Michael Belivanakis (michael.gr)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Benchmark&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NANOSECONDS_PER_MILLISECOND&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1000_000L&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;durationInMilliseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * Initializes a new instance of {@link Benchmark}.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * @param durationInMilliseconds for how long to run the benchmark.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Benchmark&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;durationInMilliseconds&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;durationInMilliseconds&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;durationInMilliseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * Runs the benchmark, printing the results to {@link System#out}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * @param prefix   text to print before the results.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * @param runnable the code to benchmark.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;runAndPrint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runnable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterationsPerMillisecond&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runnable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterationsPerMillisecond&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roundToSignificantFigures&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterationsPerMillisecond&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterationsPerMillisecond&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; iterations per millisecond&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * Runs the benchmark
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * @param runnable the code to benchmark.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * @return number of iterations per millisecond.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runnable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//run the benchmarked code once, so that it gets JITted&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runnable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//perform a full garbage collection to bring the VM to an as clean as possible state&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runGarbageCollection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//wait for a system clock transition&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentNanos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nanoTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startNanos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentNanos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentNanos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startNanos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentNanos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nanoTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startNanos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentNanos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//run the benchmarked code for the given number of milliseconds&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endNanos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startNanos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;durationInMilliseconds&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NANOSECONDS_PER_MILLISECOND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterations&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentNanos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endNanos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runnable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentNanos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;nanoTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//calculate and return number of iterations per millisecond.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterations&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;currentNanos&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;startNanos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NANOSECONDS_PER_MILLISECOND&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * Runs a full garbage collection.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * See Stack Overflow: Forcing Garbage Collection in Java?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;runGarbageCollection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WeakReference&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WeakReference&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;gc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getRuntime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;runFinalization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;yield&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * Rounds a number to a given number of significant digits.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * See Stack Overflow: rounding to an arbitrary number of significant digits
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * @param number the number to round
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * @param digits the number of significant digits to round to.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * @return the number rounded to the given number of significant digits.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;roundToSignificantFigures&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digits&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;NonReproducibleMathCall&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;ceil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;log10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;NumericCastThatLosesPrecision&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;power&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digits&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;NonReproducibleMathCall&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;magnitude&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;power&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shifted&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Math&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;round&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;magnitude&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shifted&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;magnitude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;For an application of the above class, see my next post: &lt;a 
   href=&#34;//localhost:1313/p/benchmarking-java-8-lambdas/&#34;
   &gt;michael.gr: Benchmarking Java 8 lambdas&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>What do you need a debugger for?</title>
        <link>//localhost:1313/p/what-do-you-need-a-debugger-for/</link>
        <pubDate>Mon, 14 Jul 2014 06:28:52 +0000</pubDate>
        
        <guid>//localhost:1313/p/what-do-you-need-a-debugger-for/</guid>
        <description>&lt;p&gt;In my many years of experience in programming I have noticed that there are some programmers who refuse to use a debugger, or try to use the debugger as little as possible, as in, only when they run out of alternative options. They tend to rely solely on the diagnostic log to troubleshoot problems in their code, so their code tends to spew thousands of lines of log entries per second, and they keep trying to divine the causes of exceptions by looking at post-mortem stack traces.&lt;/p&gt;
&lt;p&gt;Quite often these people do not understand what usefulness others find in debuggers. I once requested the lead developer of a certain shop (Powernet, Athens, Greece, circa 2000) to enable debugging for me on their development web server so that I can run my debugger on the web site that I was developing in that shop, and she asked me &amp;ldquo;what do you need a debugger for?&amp;rdquo; Luckily, she proceeded to fulfil my request after a couple of long seconds of me staring blankly at her.&lt;/p&gt;
&lt;p&gt;Listen folks, if you want to be called a &amp;ldquo;programmer&amp;rdquo; and if you want to be worth the cost of the keyboard you are pounding on, the debugger needs to be your absolute first tool of choice at the slightest need for troubleshooting, not your last tool of choice, not even your second tool of choice. Companies that develop IDEs go through huge pains to provide us with nice sleek and powerful debuggers so that we can do our job better, don&amp;rsquo;t you dare let their efforts go to waste.&lt;/p&gt;
&lt;p&gt;A call stack trace in the diagnostic log of your program will tell you which function was called by which function, and that&amp;rsquo;s all.  This is enough in many simple cases, but when things get just slightly complicated, (and they usually do,) it is not enough. Lacking any additional information, what you end up doing is theorizing about what might have happened instead of looking and seeing what happened.&lt;/p&gt;
&lt;p&gt;In addition to which function was called by which function, the debugger will also show you the values of the parameters to each call, and the values of the local variables within each call. For any variable which is an object, the debugger will show you the contents of that object, so in essence you have access to the state of the entire machine at the moment that the exception was thrown. When you have all that information at your disposal, then you can say that you are &lt;em&gt;solving a problem&lt;/em&gt;. Anything less than that, and what you are actually doing is &lt;em&gt;monkeying with the problem&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, in my career I have noticed lots of people who, when they want to perform a test run of the program that they are developing, always hit the &amp;ldquo;Run&amp;rdquo; button of their IDE instead of the &amp;ldquo;Debug&amp;rdquo; button.  Listen folks, if you want to be called a &amp;ldquo;programmer&amp;rdquo; then the button you should be pressing is the &amp;ldquo;Debug&amp;rdquo; button. You should forget that the &amp;ldquo;Run&amp;rdquo; button exists. &amp;ldquo;Run&amp;rdquo; is for users.  Programmers use &amp;ldquo;Debug&amp;rdquo;.  Always &amp;ldquo;Debug&amp;rdquo;.  Only &amp;ldquo;Debug&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Starting your program in debug mode does not mean that you are necessarily going to be doing any debugging; it just means that if some issue pops up during the test run, then you will be able to debug your program on the spot, rather than having to rely on the diagnostic log, or having to re-run the program in debug mode hoping that the issue will be reproducible. Modern development environments even support program modification while debugging, (they call it &amp;ldquo;edit-and-continue&amp;rdquo; in the Microsoft world, &amp;ldquo;hot swap&amp;rdquo; in the Java world,) so if a small problem pops up you might even be able to fix it on the fly and continue running.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t want to take my word for it, you could take a hint from the key bindings of your IDE.  In Visual Studio the description of the F5 key is &amp;ldquo;Run the application&amp;rdquo; while the description of Ctrl+F5 is &amp;ldquo;Run the code without invoking the debugger (Start without Debugging)&amp;rdquo;.  As you can see, &amp;ldquo;Run the application&amp;rdquo; in Microsoft parlance means &amp;ldquo;Debug the application&amp;rdquo;, and the key combination for debugging is the simple one, while the key combination for running without debugging is the more complicated one. Similarly, in Eclipse, F11 is &amp;ldquo;Debug&amp;rdquo;, Ctrl+F11 is &amp;ldquo;Run&amp;rdquo;. In PyDev, the same. Obviously, the creators of these IDEs expect you to be running your program with debugging far more often than without.  For me, it is 99.99% of the time with debugging, 0.01% without.&lt;/p&gt;
&lt;p&gt;Some people complain that application start up is slower when debugging than without; I have not noticed such a thing, but what I have noticed is that sometimes one might be making use of some exotic feature of the debugger without realizing it, (for example having forgotten a so-called &amp;ldquo;function breakpoint&amp;rdquo; or a  &amp;ldquo;memory changed breakpoint&amp;rdquo; active) and that is slowing things down. Just make sure you do not have any fancy debugger features enabled unless you actually need them, and running your program with debugging should be about as fast as running it without debugging.&lt;/p&gt;
&lt;p&gt;Related article: &lt;a 
   href=&#34;//localhost:1313/p/net-code-running-faster-under-the-profiler/&#34;
   &gt;.Net code running faster under the profiler?&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>My notes on &#34;Spring in Action&#34; (Manning)</title>
        <link>//localhost:1313/p/my-notes-on-spring-in-action-manning/</link>
        <pubDate>Wed, 27 Mar 2013 16:22:49 +0000</pubDate>
        
        <guid>//localhost:1313/p/my-notes-on-spring-in-action-manning/</guid>
        <description>&lt;p&gt;![[media/spring-in-action-cover.png]]My notes on the &amp;ldquo;Spring in Action&amp;rdquo; book by Craig Walls and Ryan Breidenbach from Manning Publications Co.&lt;/p&gt;
&lt;p&gt;Page 45&lt;/p&gt;
&lt;p&gt;The author suggests that there is an ongoing debate on the issue of constructor injection vs. setter injection, and provides arguments for each one of them. Unfortunately, in the arguments that he provides for constructor injection he paints a straw-man, while his arguments for setter injection are all non-issues. It is no wonder then, that at the end of the discussion his personal preference turns out to be setter injection.&lt;/p&gt;
&lt;p&gt;Arguments for constructor injection:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Of course, this assumes that the bean&amp;rsquo;s constructor has all of the bean?s dependencies in its parameter list.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No, constructor injection does not &lt;em&gt;assume&lt;/em&gt; that; instead, it &lt;em&gt;requires&lt;/em&gt; it, because that&amp;rsquo;s &lt;em&gt;precisely the point&lt;/em&gt; of constructor injection. It is quite unfair to take the central premise of constructor injection and reword it as a drawback. Perhaps the author meant to say instead that constructor injection assumes that all of the dependencies are &lt;em&gt;available&lt;/em&gt; at the time of the construction of the bean. Well, the only case in which a dependency might be unavailable at construction time is if the design of our system has a circular dependency built into it. In which case the flaw is with our design, not with the concept of constructor injection! Correspondingly, I favor the use of constructor injection everywhere, and in the rare and unfortunate case when a circular dependency exists and is not easy to factor out, the exceptional use of setter injection as a self-documenting means of temporarily circumventing the problem.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By only allowing properties to be set through the constructor, you are, effectively, making those properties immutable, preventing accidental change in the course of application flow.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is taking a very important benefit of constructor injection and wording it as if it was a minor advantage. The issue is not just the possibility of accidental change; the issue is the fundamental object-oriented concept of encapsulation, which mandates that a class should not expose its internal members to the outside world. The dependencies of a class are, by definition, its own private business. By making every single dependency of a class available for anyone out there to modify via a setter method, encapsulation goes out the window. The dependencies might as well be declared as public non-final members, it would make no difference.&lt;/p&gt;
&lt;p&gt;Also, the issue of immutability goes beyond just the members of the bean; if all members of the bean are immutable, then the bean itself becomes immutable. The benefits of immutability are widely known, and I should not need to list them here, but let me briefly just mention thread-safety-for-free, reduction of overall program complexity as a direct result of statelessness, and the ability to use an immutable class as a key in a map.&lt;/p&gt;
&lt;p&gt;Arguments for setter injection:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a bean has several dependencies, the constructor&amp;rsquo;s parameter list can be quite lengthy.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So what? By the same token, if setter injection is used, then the list of setters will be quite lengthy.
This is not an argument.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If there are several ways to construct a valid object, it can be hard to come up with unique constructors, since constructor signatures vary only by the number and type of parameters.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Oh, puh-leez!  &lt;em&gt;if&lt;/em&gt; there are several ways to construct the bean, (a small possibility,) and &lt;em&gt;if&lt;/em&gt; it is hard to come up with unique constructors, (a minutely small possibility,) then someone, somewhere, will have to squeeze their brain a little bit more to come up with unique constructors. If one does not want to have to &lt;em&gt;think&lt;/em&gt; at work every once in a while, maybe they should not have become a programmer. Also: with constructors, there are only so many ways to construct a bean as there are constructors for it.  With setters, there exist something of the order of number-of-setters-factorial number of ways to construct it. What do you prefer?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a constructor takes two or more parameters of the same type, it may be difficult to determine what each parameter&amp;rsquo;s purpose is.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah, sure. Let me help: the 1st parameter will have purpose A, and the 2nd parameter will have purpose B. And if you ever find yourself in doubt, hover your mouse over the invocation, and your IDE will be very happy to clarify it for you. (Or use a better language, like C#, which allows you to supply parameter names in invocations.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Constructor injection does not lend itself readily to inheritance. A bean&amp;rsquo;s constructor will have to pass parameters to super() in order to set private properties in the parent object.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Wha-what?  &lt;em&gt;Constructor injection does not lend itself readily to inheritance&lt;/em&gt;?  Is the author ignorant about the concept of constructors or the concept of inheritance?  &lt;em&gt;Of course&lt;/em&gt; a bean&amp;rsquo;s constructor will have to pass parameters to super, and it will have to pass exactly those parameters that the super requires, and that&amp;rsquo;s precisely what guarantees proper instantiation of the super, and that&amp;rsquo;s &lt;em&gt;the whole point&lt;/em&gt; with using constructors, and a &lt;em&gt;very important premise&lt;/em&gt; of inheritance. Again, a feature presented as a drawback. It is not a sign of a wise man to make the same mistake twice.&lt;/p&gt;
&lt;p&gt;In short, I do not believe that there really is a debate; it is just that eternal difference in world views between the real engineers, who are compelled to build compiler-enforced robustness into their software, and those who are programmers by accident, and prefer a certain cozy amount of sloppiness sprinkled everywhere for the sake of some ill-perceived ease in coding, testing, or refactoring. It really is the same short-sighted mentality that says &amp;ldquo;I make all members public because this way I can access them easier.&amp;rdquo; Part of the problem might also be some ignorance-induced superstition, on behalf of the second group of people, against the use of constructors. I have seen it again and again: many people simply &lt;em&gt;do not get&lt;/em&gt; constructors. And people tend to fear the unknown.&lt;/p&gt;
&lt;p&gt;Page 62&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Furthermore, if a &lt;strong&gt;constructor&lt;/strong&gt; has multiple constructors, {&amp;hellip;}&amp;rdquo; should read &amp;ldquo;Furthermore, if a &lt;strong&gt;bean&lt;/strong&gt; has multiple constructors, {&amp;hellip;}&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Page 80&lt;/p&gt;
&lt;p&gt;&amp;ldquo;It just so happens that &lt;strong&gt;the&lt;/strong&gt; Harry, {&amp;hellip;}&amp;rdquo; should read  &amp;ldquo;It just so happens that Harry, {&amp;hellip;}&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Page 85&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Even though it&amp;rsquo;s prototype scoped, the guitar &lt;strong&gt;method&lt;/strong&gt; would only be injected {&amp;hellip;}&amp;rdquo; should read &amp;ldquo;Even though it&amp;rsquo;s prototype scoped, the guitar &lt;strong&gt;bean&lt;/strong&gt; would only be injected {&amp;hellip;}&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Page 141&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Spring&amp;rsquo;s basic autoproxy facility is fine for working with simple advice or when in a pre-Java 5 environment. But if you&amp;rsquo;re targeting Java 5, you may want to consider Spring&amp;rsquo;s support for AspectJ&amp;rsquo;s annotation-based aspects. Let&amp;rsquo;s see how to create aspects in Spring that are annotation based.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Well, I am kind of disappointed by the fact that I had to read 24 pages of &amp;ldquo;Spring&amp;rsquo;s basic autoproxy facility&amp;rdquo;, which is another way of saying &amp;ldquo;advising the hard way&amp;rdquo;, in order to finally reach section 4.3.2 &amp;ldquo;Autoproxying @AspectJ aspects&amp;rdquo; where advising begins to make sense.  Couldn&amp;rsquo;t we have just skipped most of that stuff?&lt;/p&gt;
&lt;p&gt;Page 173&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s like the Pareto principle2 flipped on its head; 20 percent of the code is needed to actually query a row while 80 percent is just boilerplate code.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&amp;ndash;excellent observation!&lt;/p&gt;
&lt;p&gt;&amp;ldquo;This is all the more reason to let a framework deal with the boilerplate code so that we know that it written once and written right.&amp;rdquo; should read  &amp;ldquo;This is all the more reason to let a framework deal with the boilerplate code so that we know that it &lt;strong&gt;is&lt;/strong&gt; written once and written right.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Page 211&lt;/p&gt;
&lt;p&gt;&amp;ldquo;it&amp;rsquo;s better to keep &lt;strong&gt;thing&lt;/strong&gt; separate&amp;rdquo; should read &amp;ldquo;it&amp;rsquo;s better to keep &lt;strong&gt;things&lt;/strong&gt; separate&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Page 239&lt;/p&gt;
&lt;p&gt;The word &amp;ldquo;suspect&amp;rdquo; should be &amp;ldquo;suspend&amp;rdquo;.&lt;/p&gt;</description>
        </item>
        <item>
        <title>My notes on &#34;Clean Code&#34; by Robert C- Martin</title>
        <link>//localhost:1313/p/my-notes-on-clean-code-by-robert-c-martin/</link>
        <pubDate>Wed, 20 Mar 2013 11:53:45 +0000</pubDate>
        
        <guid>//localhost:1313/p/my-notes-on-clean-code-by-robert-c-martin/</guid>
        <description>&lt;p&gt;These are my notes on the book &amp;ldquo;Clean Code&amp;rdquo; by Robert C. Martin from Prentice Hall.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/my-notes-on-clean-code-by-robert-c-martin/media/robert-martin-clean-code.jpg&#34;
	width=&#34;488&#34;
	height=&#34;648&#34;
	srcset=&#34;//localhost:1313/p/my-notes-on-clean-code-by-robert-c-martin/media/robert-martin-clean-code_hu_7e6a5abbd055cca0.jpg 480w, //localhost:1313/p/my-notes-on-clean-code-by-robert-c-martin/media/robert-martin-clean-code_hu_724ffbc460339ee5.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;I am in agreement with almost everything that this book says; the following notes are either quotes from the book which I found especially interesting and/or especially well written, or they point out issues that I disagree with, or errata which objectively need correction. If some point from the book is not mentioned below, then I agree with it.&lt;/p&gt;
&lt;p&gt;Page xxii (Foreword):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Back in my days working in the Bell Labs Software Production Research organization (Production, indeed!) we had some back-of-the-envelope findings that suggested that consistent indentation style was one of the most statistically significant indicators of low bug density. We want it to be that architecture or programming language or some other high notion should be the cause of quality; as people whose supposed professionalism owes to the mastery of tools and lofty design methods, we feel insulted by the value that those factory floor machines, the coders, add through the simple consistent application of an indentation style. To quote my own book of 17 years ago, such style distinguishes excellence from mere competence.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Page 6:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[?] what if you were a doctor and had a patient who demanded that you stop all the silly hand-washing in preparation for surgery because it was taking too much time? Clearly the patient is the boss; and yet the doctor should absolutely refuse to comply. Why? Because the doctor knows more than the patient about the risks of disease and infection. It would be unprofessional (never mind criminal) for the doctor to comply with the patient. So too it is unprofessional for programmers to bend to the will of managers who don?t understand the risks of making messes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Page 13:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We are willing to claim that if you follow these teachings, you will enjoy the benefits that we have enjoyed, and you will learn to write code that is clean and professional. But don?t make the mistake of thinking that we are somehow ?right? in any absolute sense. There are other schools and other masters that have just as much claim to professionalism as we. It would behoove you to learn from them as well.  Indeed, many of the recommendations in this book are controversial. You will probably not agree with all of them. You might violently disagree with some of them. That?s fine. We can?t claim final authority. On the other hand, the recommendations in this book are things that we have thought long and hard about. We have learned them through decades of experience and repeated trial and error. So whether you agree or disagree, it would be a shame if you did not see, and respect, our point of view.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Page 14:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Indeed, the ratio of time spent reading vs. writing is well over 10:1. We are constantly reading old code as part of the effort to write new code.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Page 32&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://www.fitnese.org&#34; target=&#34;_blank&#34;
   &gt;www.fitnese.org&lt;/a&gt; should read &lt;a class=&#34;external&#34; 
   href=&#34;https://www.fitnesse.org&#34; target=&#34;_blank&#34;
   &gt;www.fitnesse.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Page 35&lt;/p&gt;
&lt;p&gt;I find all this &amp;ldquo;very small methods&amp;rdquo; discussion rather misdirected. If you do this you end up with a multitude of tiny methods that have very long and hard to read and understand names (necessary to capture their painstakingly narrow specificity) and whose existence is atrociously artificial: they serve no purpose other than to pre-chew a perfectly sized meal into tiny pill-sized chunks that might be swallowed without chewing. I think it is not pragmatic, that is, not feasible in real-world scenarios. From the narrative my guess is that the author has never really practiced it in reality: he only briefly saw it in a few screens of source code from a colleague&amp;rsquo;s project.&lt;/p&gt;
&lt;p&gt;The absurdity continues with the classification of methods into four categories, depending on whether they accept zero, one, two, or the incredibly high number of &lt;em&gt;three&lt;/em&gt; arguments. (Four arguments being, presumably, unthinkable.)  Puh-leez, gimme a break!  As Albert Einstein said, &lt;em&gt;things should be as simple as possible, but not simpler.&lt;/em&gt;  Unless it is violating the &amp;ldquo;Single Responsibility Principle&amp;rdquo; (SRP), a method needs to accept as many arguments as necessary to do its job. There are two ways to reduce the number of arguments to a method which is not violating the SRP: one is to introduce more member variables to the class which contains the method, (which is evil, because they are &lt;em&gt;state&lt;/em&gt;,) and the other is to introduce new classes, the sole purpose of which is to group values together so as to give the &lt;em&gt;appearance&lt;/em&gt; of a single parameter. But introducing more (artificial) entities in a system is far worse than having a few methods with plenty of arguments. The presence of lots of methods with lots of arguments might be taken as a &lt;em&gt;hint&lt;/em&gt; that perhaps we are missing an entity that our system really needs, and nothing more. If our system does not really need a new entity, then methods with plenty of arguments is the way to go,  really.&lt;/p&gt;
&lt;p&gt;Luckily, on page 176, Chapter 12: &lt;em&gt;Emergence&lt;/em&gt;, in the section titled &lt;em&gt;Minimal Classes and Methods&lt;/em&gt; the book provides somewhat of a correction, by stating:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In an effort to make our classes and methods small, we might create too many tiny classes and methods. So this rule suggests that we also keep our function and class counts low&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;High class and method counts are sometimes the result of pointless dogmatism.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Page 46&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;real solution&amp;rdquo; offered seems wrong to me.&lt;/p&gt;
&lt;p&gt;Page 48&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some programmers follow Edsger Dijkstra&amp;rsquo;s rules of structured programming. Dijkstra said that every function, and every block within a function, should have one entry and one exit. Following these rules means that there should only be one return statement in a function, no break or continue statements in a loop, and never, ever, any goto statements.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Okay, no problem with the &amp;ldquo;never, ever, any goto statements&amp;rdquo;. Actually, I am glad the author begins by saying &amp;ldquo;Some programmers follow&amp;hellip;&amp;rdquo;, indicating that he included this piece of nonsense in the book only because it is popular enough to be perhaps worth mentioning, not because he really adheres to it, nor to actively suggest that the reader should adhere to it.  I think the author should have either skipped such a lame &amp;ldquo;argument from authority&amp;rdquo;, or he should have provided justification for it, so as to make it an argument by reasoning rather than an argument from authority. But I am afraid that in this case ol&amp;rsquo; Edsger is not backed by any valid reasoning.&lt;/p&gt;
&lt;p&gt;Page 49&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the end, I wind up with functions that follow the rules I&amp;rsquo;ve laid down in this chapter. I don&amp;rsquo;t write them that way to start. I don&amp;rsquo;t think anyone could.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Okay, I am glad we are in agreement on this one.&lt;/p&gt;
&lt;p&gt;Page 53&lt;/p&gt;
&lt;p&gt;Chapter 4: Comments : The author is entitled to have his own opinion about comments.  I have my own opinions, which are very different from his.&lt;/p&gt;
&lt;p&gt;Page 100 - &amp;ldquo;Data Transfer Objects&amp;rdquo;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The quintessential form of a data structure is a class with public variables and no functions. This is sometimes called a data transfer object, or DTO. DTOs are very useful structures, especially when communicating with databases or parsing messages from sockets, and so on. They often become the first in a series of translation stages that convert raw data in a database into objects in the application code.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Somewhat more common is the &amp;ldquo;bean&amp;rdquo; form shown in Listing 6-7. Beans have private variables manipulated by getters and setters. &lt;strong&gt;The quasi-encapsulation of beans seems to make some OO purists feel better but usually provides no other benefit.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;(emphasis mine.)&lt;/p&gt;
&lt;p&gt;Page 176&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Consider, for example, a coding standard that insists on creating an interface for each and every class. Or consider developers who insist that fields and behavior must always be separated into data classes and behavior classes. Such dogma should be resisted and a more pragmatic approach adopted.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This brings to mind certain funny ways of doing things at my current workplace.&lt;/p&gt;
&lt;p&gt;Page 185&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Recommendation: Learn these basic algorithms and understand their solutions.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Uh, esqueez me, algorithms don&amp;rsquo;t have solutions. Problems have solutions. Luckily, what was described was not algorithms, it was problems.&lt;/p&gt;
&lt;p&gt;Page 187&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Attempts to repeat the &lt;strong&gt;systems&lt;/strong&gt; can be &lt;strong&gt;frustratingly&lt;/strong&gt;&amp;rdquo; should read &amp;ldquo;Attempts to repeat the &lt;strong&gt;failures&lt;/strong&gt; can be &lt;strong&gt;frustrating&lt;/strong&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;trial &lt;strong&gt;an&lt;/strong&gt; error&amp;rdquo; should read &amp;ldquo;trial &lt;strong&gt;and&lt;/strong&gt; error&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Page 272&lt;/p&gt;
&lt;p&gt;Where it says &amp;ldquo;any function that used to take an int for a month, now takes a Month enumerator&amp;rdquo; the word enum should have been used instead of enumerator.&lt;/p&gt;
&lt;p&gt;Page 276&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I also deleted all the final keywords in arguments and variable declarations. As far as I could tell, they added no real value but did add to the clutter. Eliminating final flies in the face of some conventional wisdom. For example, Robert Simmons strongly recommends us to &amp;ldquo;. . . spread final all over your code.&amp;rdquo; Clearly I disagree. I think that there are a few good uses for final, such as the occasional final constant, but otherwise the keyword adds little value and creates a lot of clutter. Perhaps I feel this way because the kinds of errors that final might catch are already caught by the unit tests I write.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And clearly, I agree with Robert Simmons. First of all, the &amp;lsquo;final&amp;rsquo; keyword is compiler - enforced documentation, which is the best kind of documentation: when I see an entity marked as final, I know right away that I do not have to worry about the possibility that it may change as I read the rest of the code. Thus, the &amp;lsquo;clutter&amp;rsquo; argument is blown out of the water. Secondly, there is never a valid reason to let a run time test catch an error that could have been caught at compile time: it is a well documented fact in the industry that the sooner you catch an error, the less it costs to fix it. And last but not least, a non-final entity is immensely more complex than a final entity. Therefore, the more entities are final in the code, the smaller the overall complexity of the code. And we strive for less complex code, don&amp;rsquo;t we?&lt;/p&gt;
&lt;p&gt;Page 282&lt;/p&gt;
&lt;p&gt;&amp;ldquo;So I pushed it up&amp;rdquo; should probably read &amp;ldquo;So I pushed it down&amp;rdquo;, since judging by many other sentences, the author considers &amp;ldquo;down&amp;rdquo; to refer to descendants and &amp;ldquo;up&amp;rdquo; to refer to ancestors. (See page 279,  &amp;ldquo;So I pushed it down&amp;rdquo;, and page 282, &amp;ldquo;the getDayOfWeek method is another one that should be pulled up from SpreadSheetDate&amp;rdquo; and &amp;ldquo;I pulled the implementation up into DayDate&amp;rdquo; and &amp;ldquo;So I pulled them all up from SpreadsheetDate&amp;rdquo; etc.)&lt;/p&gt;
&lt;p&gt;Page 283&lt;/p&gt;
&lt;p&gt;&amp;ldquo;making &lt;strong&gt;the&lt;/strong&gt; all three methods much clearer&amp;rdquo; should read &amp;ldquo;making all three methods much clearer&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Page 300&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And in the FEET_PER_MILE case, the number 5280 is so very well known and so unique a constant that readers would recognize it even if it stood alone on a page with no context surrounding it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The world is not the USA. Most of the world uses the metric system, and knows very little about miles and feet. When given a number in &amp;ldquo;United States customary units&amp;rdquo;, many people outside the USA know how to convert it to metric, but it is rare to meet someone who is proficient in converting from metric to US units, and even more rare to meet someone who has the slightest clue, or the slightest interest, in converting between US units. Therefore, the number 5280 means absolutely nothing to the vast majority of the population of the planet. As a matter of fact, there are so many non-USAians working as software engineers in the USA, that even in the USA it would be a bad idea to assume that anyone who sees the number 5280 in a piece of code will know what it stands for.&lt;/p&gt;
&lt;p&gt;Page 301&lt;/p&gt;
&lt;p&gt;In &amp;ldquo;Declaring a variable to be an ArrayList when a List will &lt;strong&gt;due&lt;/strong&gt; is overly constraining&amp;rdquo;,  the word &amp;ldquo;due&amp;rdquo; should be &amp;ldquo;do&amp;rdquo; instead.&lt;/p&gt;
&lt;p&gt;Page 302&lt;/p&gt;
&lt;p&gt;&amp;ldquo;G30: Functions Should Do One Thing&amp;rdquo; &amp;ndash; no, functions should do as many things as necessary to accomplish their job with no duplication of code. Splitting functions into much smaller functions looks good as an exercise on paper, but in real life scenarios things are not so beautiful. A clean cut purpose will have to be devised for each one of the smaller functions, and a nice descriptive name will have to be invented for it. Lots of local variables may have to be passed as parameters to it, and more than one of them may need to be modified, which is impossible in Java. (That&amp;rsquo;s one of the reasons why I love C#.) And at the end of all this, the reader will still be left wondering why it is a separate function when it is only used from one and only one place in the code. These problems could be alleviated by introducing more classes into the system, but then again I do not think that a design with one class more than necessary is better than a design with one method longer than necessary. Of course my way of doing things requires comments: there where each piece of code would be documented with a self-explanatory method name, I would preface that same piece of code with a descriptive comment within a long method. That&amp;rsquo;s why I also disagree with the author on the issue of comments.&lt;/p&gt;
&lt;p&gt;Page 302&lt;/p&gt;
&lt;p&gt;&amp;ldquo;You must saturate the gradient before you can reticulate the splines, and only then can you dive for the moog.&amp;rdquo;  &amp;ndash; wow, sounds very cool, but it will be confusing to non-native speakers of English, who are bound to try to look for meaning in the sentence, whereas, I suppose, there is none. This is really a minor issue, I am not really complaining about it. I have to admit that it adds some fun to the reading even for a non-native speaker such as me. On the other hand I am afraid that this book will also be read by plenty of people whose English is just barely up to task, and who will, undoubtedly, hit their dictionaries in an effort to discover the meaning of these words, and failing to make sense after examining all synonyms in their language, they will probably call a friend who knows better English, only to puzzle them too with a sentence that was not meant to make any sense in the first place.&lt;/p&gt;
&lt;p&gt;Page 302&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You might complain that this increases the complexity of the functions, and you&amp;rsquo;d be right. But that extra syntactic complexity exposes the true temporal complexity of the situation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Very well said. Einstein&amp;rsquo;s famous quote is also about the exact same thing: &amp;ldquo;Things should be as simple as possible. But not more simple.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Page 311&lt;/p&gt;
&lt;p&gt;In the sentence ?choose names &lt;strong&gt;the&lt;/strong&gt; reflect the level of abstraction of the class or function you are working in? the first &amp;ldquo;the&amp;rdquo; should be &amp;ldquo;that&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Page 312&lt;/p&gt;
&lt;p&gt;Where it says &amp;ldquo;This is &lt;strong&gt;emphasized&lt;/strong&gt; by the fact that there is &lt;strong&gt;a function&lt;/strong&gt; named renamePage inside the function named doRename!&amp;rdquo; it should say &amp;ldquo;This is &lt;strong&gt;aggravated&lt;/strong&gt; by the fact that there is &lt;strong&gt;a call to a function&lt;/strong&gt; named renamePage inside the function named doRename!&amp;rdquo;&lt;/p&gt;</description>
        </item>
        <item>
        <title>C# Blooper №13: Stack&lt;T&gt; and Queue&lt;T&gt; do not implement ICollection&lt;T&gt;</title>
        <link>//localhost:1313/p/c%23-blooper-13-stackt-and-queuet-do-not-implement-icollectiont/</link>
        <pubDate>Fri, 04 Jan 2013 11:44:32 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-13-stackt-and-queuet-do-not-implement-icollectiont/</guid>
        <description>&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a blooper of the Common Language Runtime (CLR), not of the language itself: &lt;code&gt;Stack&amp;lt;T&amp;gt;&lt;/code&gt; and &lt;code&gt;Queue&amp;lt;T&amp;gt;&lt;/code&gt; derive from &lt;code&gt;ICollection&lt;/code&gt;, but not from &lt;code&gt;ICollection&amp;lt;T&amp;gt;&lt;/code&gt;, so they do not support the &lt;code&gt;Remove( T )&lt;/code&gt; method!  Why, oh why?&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C# Blooper №12: &#39;Where&#39; constraints not included in method signatures</title>
        <link>//localhost:1313/p/c%23-blooper-12-where-constraints-not-included-in-method-signatures/</link>
        <pubDate>Fri, 04 Jan 2013 11:31:10 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-12-where-constraints-not-included-in-method-signatures/</guid>
        <description>&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When writing generic methods in C#, it is possible to use the &amp;lsquo;where&amp;rsquo; keyword to specify constraints to the types that the generic parameters can take. Unfortunately, these constraints cannot be used for resolving overloaded methods.  Case in point:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//error CS0111: Type &amp;#39;Test&amp;#39; already defines a member called &amp;#39;Equals&amp;#39; with the same parameter types&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Equals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>C# Blooper №11: Zero to Enum conversion weirdness</title>
        <link>//localhost:1313/p/c%23-blooper-11-zero-to-enum-conversion-weirdness/</link>
        <pubDate>Fri, 04 Jan 2013 11:27:27 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-11-zero-to-enum-conversion-weirdness/</guid>
        <description>&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you assign an enum to int, you have to cast it. That&amp;rsquo;s good. When you assign an int to enum, you also have to cast it. That&amp;rsquo;s also good. But if you assign zero to an enum, you don&amp;rsquo;t have to cast it! Go figure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myenum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test_myenum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myenum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myenum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//need to cast; that&amp;#39;s good.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myenum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//need to cast; that&amp;#39;s still good.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//wtf? no need to cast?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>C# Blooper №9: Annoying case statement fall-through rules</title>
        <link>//localhost:1313/p/c%23-blooper-9-annoying-case-statement-fall-through-rules/</link>
        <pubDate>Fri, 04 Jan 2013 11:16:41 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-9-annoying-case-statement-fall-through-rules/</guid>
        <description>&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Overall, C# takes an approach which is far more friendly to novice programmers than its predecessors, C and C++ were. For example, in the case of switch statements, C# does not allow the old, error-prone style of C and C++ where you could simply fall through from one case statement to the following one; instead, at the end of each case statement C# requires either a break statement, or a goto statement to explicitly jump to another label. That&amp;rsquo;s all very nice and dandy, except for one thing: C# requires a break or goto even at the last case statement of a switch statement!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wtf_is_it_with_falling_through_the_last_case_label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Need this &amp;#39;break&amp;#39; or else: CS0163: Control cannot fall through from one case label (&amp;#39;default:&amp;#39;) to another&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I mean, seriously, WTF?&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C# Blooper №10: Switch statements are not properly formatted</title>
        <link>//localhost:1313/p/c%23-blooper-10-switch-statements-are-not-properly-formatted/</link>
        <pubDate>Fri, 04 Jan 2013 11:06:17 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-10-switch-statements-are-not-properly-formatted/</guid>
        <description>&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is rather a Microsoft Visual Studio blooper than a Microsoft C# blooper: When formatting source code, Visual Studio offers an &amp;ldquo;indent case contents&amp;rdquo; option, but you will only find it useful if you happen to have a crooked notion as to how switch statements should be formatted. The one and only normal form of formatting switch statements is not supported.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;cm&#34;&gt;/* with &amp;#34;indent case contents&amp;#34; option selected: */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;cm&#34;&gt;/* this is not properly indented */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;cm&#34;&gt;/* this is properly indented */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;cm&#34;&gt;/* with &amp;#34;indent case contents&amp;#34; option deselected: */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;cm&#34;&gt;/* this is properly indented */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;cm&#34;&gt;/* this is not properly indented */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;cm&#34;&gt;/* the normal way of indenting cannot be achieved: */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I know, you might disagree that my way of formatting switch statements is in any way &amp;rsquo;normal&amp;rsquo;. So, in your case, let us agree on this: my way of formatting switch statements, whether you like it or not, is in perfect accordance to the way I format the rest of my code; and since Visual Studio allows me to precisely describe my coding style, it should also allow for a switch statement style that matches the rest of my code.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C# Blooper №8: No warnings for conditions that are always true/false</title>
        <link>//localhost:1313/p/c%23-blooper-8-no-warnings-for-conditions-that-are-always-true/false/</link>
        <pubDate>Fri, 04 Jan 2013 10:51:13 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-8-no-warnings-for-conditions-that-are-always-true/false/</guid>
        <description>&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Microsoft C# compiler does not issue &amp;lsquo;condition is always true&amp;rsquo; and &amp;lsquo;condition is always false&amp;rsquo; warnings. Perhaps these warnings are not particularly meaningful in Java, which lacks conditional compilation directives, and therefore &lt;strong&gt;if( true )&lt;/strong&gt; and &lt;strong&gt;if( false )&lt;/strong&gt; are the only means of achieving conditional compilation; but in C#, which has special conditional compilation directives, conditions which are always true or always false are invariably so by mistake; therefore, these warnings would indeed be meaningful, and useful.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//no warning about &amp;#39;condition is always true&amp;#39;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//no warning about &amp;#39;condition is always false&amp;#39;, even though the compiler obviously knows what&amp;#39;s going on, since the following warning is issued:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;statement&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//warning CS0162: Unreachable code detected &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;For more information see &lt;a 
   href=&#34;//localhost:1313/p/why-the-microsoft-c%23-compiler-lacks-many-useful-warnings/&#34;
   &gt;Why the Microsoft C# compiler lacks many useful warnings&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Why the Microsoft C# compiler lacks many useful warnings</title>
        <link>//localhost:1313/p/why-the-microsoft-c%23-compiler-lacks-many-useful-warnings/</link>
        <pubDate>Tue, 13 Nov 2012 10:46:49 +0000</pubDate>
        
        <guid>//localhost:1313/p/why-the-microsoft-c%23-compiler-lacks-many-useful-warnings/</guid>
        <description>&lt;p&gt;As my &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;C# Bloopers series of articles&lt;/a&gt; shows, the Microsoft C# compiler fails to issue many useful warnings which one would reasonably expect from a decent compiler of any language, and which are in fact readily and lavishly issued by Java compilers.&lt;/p&gt;
&lt;p&gt;After all these years that the Microsoft C# compiler has been maturing, one cannot help but postulate that there are ulterior motives behind this continued state of misery with respect to warnings. For lo and behold, it just so happens that the &amp;ldquo;Ultimate&amp;rdquo; (most feature-packed and most outrageously expensive) edition of Microsoft Visual Studio contains a &amp;ldquo;Code Analysis&amp;rdquo; feature, which is capable of issuing hundreds of different types of warnings, ranging from the pedantic to the arcane, and including most, if not all, of the missing warnings that I am discussing here.&lt;/p&gt;
&lt;p&gt;Now, besides the fact that the Code Analysis feature comes at a considerable additional cost, it is also very cumbersome to use on a frequent basis, since it has been built as a separate product feature, instead of having been integrated into the compiler. For one thing, it is very slow. Another thing is that it is very spammy: we are talking about multiple warnings for every single line of code here, most of which are useless, and the first thing you need to do about them is to turn them off. And there are several dozen warnings to turn off.&lt;/p&gt;
&lt;p&gt;This cumbersomeness makes the Code Analysis feature unsuitable for use in the instant builds which developers tend to perform every few minutes or so, and more suitable to use as a separate code-quality-assurance step to be performed once or twice during the entire development process of a product, or at best on nightly builds. Unfortunately, it is precisely on instant builds that the warnings I am talking about in these articles are most useful. Better yet, most of these warnings are useful in real-time, while typing the code, in the form of yellow curly underlines. For example, as a developer, I want to know that a parameter to a method I have just written goes unused before I even proceed to start coding the next method, because it most probably means that I forgot something or I did something wrong. This information is useful not tomorrow, not in a couple of months, but right now.&lt;/p&gt;
&lt;p&gt;So, what has probably happened here is that the Microsoft C# compiler team was told by Microsoft&amp;rsquo;s marketing department to intentionally cripple the C# compiler and make it less useful to all of us, by moving some of the functionality which rightfully belongs to it into some other module, so that their premium &amp;ldquo;Ultimate&amp;rdquo; product can have a raison d&amp;rsquo;être.&lt;/p&gt;
&lt;p&gt;I bet you that Balmer is behind this.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C# Blooper №7: No warnings about unused private methods</title>
        <link>//localhost:1313/p/c%23-blooper-7-no-warnings-about-unused-private-methods/</link>
        <pubDate>Sat, 10 Nov 2012 07:29:56 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-7-no-warnings-about-unused-private-methods/</guid>
        <description>&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have a private method which is never used, you will not be given a warning about it by the Microsoft C# compiler. This means that your app will likely get shipped with unnecessary chunks of code in it, some of them possibly containing string literals that were never meant to make it out of the development environment, or even requiring libraries to be linked which were never meant to be required on the field.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unused&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//no warning about unused private method.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;For more information see &lt;a 
   href=&#34;//localhost:1313/p/why-the-microsoft-c%23-compiler-lacks-many-useful-warnings/&#34;
   &gt;Why the Microsoft C# compiler lacks many useful warnings&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C# Blooper №4: Lame/annoying variable scoping rules, Part 1</title>
        <link>//localhost:1313/p/c%23-blooper-4-lame/annoying-variable-scoping-rules-part-1/</link>
        <pubDate>Fri, 09 Nov 2012 15:04:33 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-4-lame/annoying-variable-scoping-rules-part-1/</guid>
        <description>&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A variable identifier is, of course, only visible within the scope in which it is declared. This includes nested (child) scopes, but it does not include enclosing (parent) scopes. In C# however, once a variable identifier has been used in a scope, its name is &amp;ldquo;poisoned&amp;rdquo;, so it cannot be used in enclosing scopes. Take this example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;//error CS0136: A local variable named &amp;#39;o&amp;#39; cannot be declared in this scope because it would give a different meaning to &amp;#39;o&amp;#39;, which is already used in a &amp;#39;child&amp;#39; scope to denote something else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Well, I am sorry, but in the above case the new variable named &amp;lsquo;o&amp;rsquo; would most definitely *not* give a different meaning to the &amp;lsquo;o&amp;rsquo; which was used in the child scope.  It would, if it had been declared before the &amp;lsquo;if&amp;rsquo; statement, but it wasn&amp;rsquo;t.  Luckily, if this &amp;ldquo;feature&amp;rdquo; was to be removed from the language, it would not break any existing code. So, can we please have this fixed? Pretty please?&lt;/p&gt;
&lt;p&gt;See also: &lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-5-lame/annoying-variable-scoping-rules-part-2/&#34;
   &gt;C# Blooper №5: Lame/annoying variable scoping rules, Part 2&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C# Blooper №6: No warnings about unused parameters</title>
        <link>//localhost:1313/p/c%23-blooper-6-no-warnings-about-unused-parameters/</link>
        <pubDate>Fri, 09 Nov 2012 14:29:46 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-6-no-warnings-about-unused-parameters/</guid>
        <description>&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One common mistake that programmers make is to forget to make use of a parameter to a method. This can lead to quite subtle bugs that are hard to track down and correct.&lt;/p&gt;
&lt;p&gt;Now, other language compilers are kind enough to warn the programmer that a parameter is unused, and they also allow temporary suppression of the warning for the rare case when such lack of use is legitimate. But not so in Visual C#. If you forget to use a parameter in Visual C#, you will not know unless you run the &amp;ldquo;Code Analysis&amp;rdquo; tool on it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//no warning about unused parameter &amp;#39;a&amp;#39;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;For more information see &lt;a 
   href=&#34;//localhost:1313/p/why-the-microsoft-c%23-compiler-lacks-many-useful-warnings/&#34;
   &gt;Why the Microsoft C# compiler lacks many useful warnings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://michael.gr&#34; target=&#34;_blank&#34;
   &gt;michael.gr&lt;/a&gt; 2013-03-25 15:37:52 UTC&lt;/p&gt;
&lt;p&gt;This blooper is about unused parameters. Yes, I would like a warning every single time a parameter goes unused.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://ganeshkamath89.blogspot.com/&#34; target=&#34;_blank&#34;
   &gt;Vigilanti&lt;/a&gt; 2013-03-25 03:12:35 UTC&lt;/p&gt;
&lt;p&gt;do you want it to warn you, every time you write a unused function&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2014-02-17 11:30:59 UTC&lt;/p&gt;
&lt;p&gt;O F  C O U R S E !!!!!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>C# Blooper №5: Lame/annoying variable scoping rules, Part 2</title>
        <link>//localhost:1313/p/c%23-blooper-5-lame/annoying-variable-scoping-rules-part-2/</link>
        <pubDate>Fri, 09 Nov 2012 14:16:36 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-5-lame/annoying-variable-scoping-rules-part-2/</guid>
        <description>&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In light of &lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-4-lame/annoying-variable-scoping-rules-part-1/&#34;
   &gt;the previous blooper&lt;/a&gt;, this one is more of a confusing error message than an actual new blooper. What I am doing below is that I am declaring a field within a class, I am accessing that field from within a method, and further down within the same method I am declaring a new local variable with the same name as the field. Now, C# will not allow me to declare that local variable because it has the same name as the field, but that&amp;rsquo;s not where I am receiving the error. Instead, the error is given when accessing the field. If you only read the first sentence of the error message, it does not make any sense at all. If you bother also reading the second sentence, it gives you a hint as to the real problem. Now, that&amp;rsquo;s not very cool.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//error CS0844: Cannot use local variable &amp;#39;a&amp;#39; before it is declared. The declaration of the local variable hides the field &amp;#39;Test5.Test.a&amp;#39;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;See also: &lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-4-lame/annoying-variable-scoping-rules-part-1/&#34;
   &gt;C# Blooper №4: Lame/annoying variable scoping rules, Part 1&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Net code running faster under the profiler?</title>
        <link>//localhost:1313/p/net-code-running-faster-under-the-profiler/</link>
        <pubDate>Fri, 27 Apr 2012 08:55:01 +0000</pubDate>
        
        <guid>//localhost:1313/p/net-code-running-faster-under-the-profiler/</guid>
        <description>&lt;p&gt;So, today it occurred to me that the C# application that I am developing is a bit too slow on startup, and I decided to throw the visual studio profiler at it to see if I have goofed up somewhere. To my astonishment, under the profiler my app ran 10 times faster. The slowness I wanted to troubleshoot was nowhere to be found.&lt;/p&gt;
&lt;p&gt;I also tried running the release version, and as I expected it performed better than the debug version under the profiler, so the universe was still in its place, but still, I would very much like to know what the profiler did that made the debug version of my app run so much faster. For one thing, it would be a great convenience to be able to enjoy this speedup while developing; waiting for 2 instead of 20 seconds for my app to start every time I want to check something would be very good for productivity.&lt;/p&gt;
&lt;p&gt;I tried my luck with various google searches, and I found a couple of articles on StackOverflow, but none pointed at the exact cause of the problem.&lt;/p&gt;
&lt;p&gt;Luckily, after quite a bit of hard thinking, troubleshooting, and browsing through the myriad of potentially relevant settings in Visual Studio, I found the answer:&lt;/p&gt;
&lt;p&gt;It is the &amp;ldquo;Enable unmanaged code debugging&amp;rdquo; feature.&lt;/p&gt;
&lt;p&gt;In Visual Studio this feature is &lt;em&gt;&lt;strong&gt;not&lt;/strong&gt;&lt;/em&gt; under &amp;ldquo;Tools / Options / Debugging&amp;rdquo;, (because that would make too much sense,) it is under &amp;ldquo;Project / Properties / Debug&amp;rdquo;.  Enabling that feature makes everything slow as molasses. The profiler disables the debugger, and that feature with it, so the application appears to run lightning fast.&lt;/p&gt;
&lt;p&gt;Here is a StackOverflow question to which I added my newly acquired wisdom:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/questions/5417663/launching-vs-profiler-boosts-application-performance-x20&#34; target=&#34;_blank&#34;
   &gt;stackoverflow.com: Launching VS Profiler boosts Application Performance x20?&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>The &#34;Handoff&#34; Pattern</title>
        <link>//localhost:1313/p/the-handoff-pattern/</link>
        <pubDate>Fri, 13 Jan 2012 15:27:33 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-handoff-pattern/</guid>
        <description>&lt;p&gt;I had been thinking about posting this for quite some time now, and all by coincidence I happened to get a chance to mention it just the other day in an answer that I wrote to &lt;a class=&#34;external&#34; 
   href=&#34;https://programmers.stackexchange.com/questions/129659/should-consistency-be-favoured-over-programming-convention/&#34; target=&#34;_blank&#34;
   &gt;a question on Programmers-StackExchange&lt;/a&gt;. So, here it is in a more formal way:&lt;/p&gt;
&lt;p&gt;If class M stores or manipulates or in any other way works with instances of destructible (disposable) class D, it may not assume the responsibility to destruct these instances, unless it is explicitly told that ownership of these instances is transferred to it. Therefore, class M must accept a boolean called &amp;lsquo;handoff&amp;rsquo; as a construction-time parameter, stating whether instances of D are being handed off to it, and it can therefore destruct them when it is done with them.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//Note: the IReader interface extends IDisposable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;IReader&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reader&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BinaryStreamReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;reader&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedStreamReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;cm&#34;&gt;/* use the reader interface */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dispose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//this destructs the buffered stream reader, and &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                          &lt;span class=&#34;c1&#34;&gt;//destruction cascades to the binary stream&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                          &lt;span class=&#34;c1&#34;&gt;//reader because handoff was specified.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;collection&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CollectionOfDestructibles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handoff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Destructible&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Destructible&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Destructible&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Dispose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//this destructs the collection and every single&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                          &lt;span class=&#34;c1&#34;&gt;//one of its contents, since handoff was specified.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In languages which support optional parameters, the &amp;lsquo;handoff&amp;rsquo; parameter should default to false.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C# Blooper №3: No warnings about fields having already been initialized</title>
        <link>//localhost:1313/p/c%23-blooper-3-no-warnings-about-fields-having-already-been-initialized/</link>
        <pubDate>Fri, 06 Jan 2012 13:51:54 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-3-no-warnings-about-fields-having-already-been-initialized/</guid>
        <description>&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you declare a member variable and you pre-initialize it at the same time, and then you try to re-initialize it within the constructor without ever making use of its original pre-initialized value, you receive no warning about the field having already been initialized.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test3&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;o&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;m2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about field having already been initialized. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;n2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about field having already been initialized. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;o2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about field having already been initialized. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;p2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about field having already been initialized. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;q2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about field having already been initialized. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;r2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about field having already been initialized. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToLower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//to prevent Warning CS0414: The field is assigned but its value is never used. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToLower&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//to prevent Warning CS0414: The field is assigned but its value is never used. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This means that you may accidentally invoke complex initialization logic twice, unnecessarily wasting memory and clock cycles, and it may also lead to logic errors, if by any chance that initialization logic has side effects which are only meant to occur once. It may also confuse someone reading your code, (or even yourself looking at your code months later,) trying to figure out what&amp;rsquo;s the purpose behind the seemingly repeated initialization, before the realization sinks in that it is simply redundant. Furthermore, if the re-initialization happens to differ from the pre-initialization, a good question arises, asking which one of the two was meant to be the correct one.&lt;/p&gt;
&lt;p&gt;It is a pity, because the compiler could warn the programmer against this pitfall.&lt;/p&gt;
&lt;p&gt;Also see related post: &lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-2-no-warnings-about-accessing-uninitialized-members/&#34;
   &gt;C# Blooper №2: No warnings about accessing uninitialized members.&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C# Blooper №2: No warnings about accessing uninitialized members</title>
        <link>//localhost:1313/p/c%23-blooper-2-no-warnings-about-accessing-uninitialized-members/</link>
        <pubDate>Fri, 06 Jan 2012 12:33:53 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-2-no-warnings-about-accessing-uninitialized-members/</guid>
        <description>&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you declare a member variable, and then you try to read it from within the constructor without having first initialized it, you receive no warning about accessing an uninitialized member. This happens even if the member is declared as readonly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test2&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Test&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToUpper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about accessing uninitialized member. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToUpper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about accessing uninitialized member. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToUpper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about accessing uninitialized member. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToUpper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about accessing uninitialized member. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToUpper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about accessing uninitialized member. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToUpper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about accessing uninitialized member. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//to prevent Warning CS0649: Field is never assigned to, and will always have its default value null &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//to prevent Warning CS0649: Field is never assigned to, and will always have its default value null &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Someone might argue that this is behavior is fine because the member in question is guaranteed to contain its default value. First of all, a readonly member containing its default value is completely useless. (See &lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-1-no-warnings-about-uninitialized-readonly-members/&#34;
   &gt;C# Blooper №1: No warnings about uninitialized readonly members when the class is public and the member is public, protected or protected internal.&lt;/a&gt;) Secondly, if the compiler is to help the developer catch potential errors and write better code, this is not a valid excuse: a different strategy is necessary.&lt;/p&gt;
&lt;p&gt;If the programmer intends the member to contain its default value, then the programmer ought to explicitly state so. Failing to do so ought to imply intention to initialize the member later on, and certainly before any attempt is made to read the member.  This way, the programmer can have it both ways: they can have members pre-initialized to their default values, and they can receive warnings when they fail to initialize members.&lt;/p&gt;
&lt;p&gt;Also please note that the compiler is capable of detecting that the value with which a member is being explicitly initialized is the default value for the type of the member, and so it can refrain from emitting any additional code for the assignment; thus, there is no performance issue.&lt;/p&gt;
&lt;p&gt;Also see related post: &lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-3-no-warnings-about-fields-having-already-been-initialized/&#34;
   &gt;C# Blooper №3: No warnings about fields having already been initialized.&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>C# Bloopers</title>
        <link>//localhost:1313/p/csharp-bloopers/</link>
        <pubDate>Thu, 05 Jan 2012 12:21:02 +0000</pubDate>
        
        <guid>//localhost:1313/p/csharp-bloopers/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/csharp-bloopers/media/csharp-logo-2023.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;p&gt;Please do not get me wrong; C# is awesome. It is the language of my choice, even though I am pretty well versed in C++ and Java. That having been said, it cannot be denied that C# has its share of flaws, too. In this series of posts I am documenting some of them, in no particular order.&lt;/p&gt;
&lt;p&gt;Also please note that some of the issues described here are Visual Studio bloopers, or DotNet bloopers, and not C#-in-general bloopers.&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-1-no-warnings-about-uninitialized-readonly-members/&#34;
   &gt;C# Blooper №1: No warnings about uninitialized readonly members&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-2-no-warnings-about-accessing-uninitialized-members/&#34;
   &gt;C# Blooper №2: No warnings about accessing uninitialized members&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-3-no-warnings-about-fields-having-already-been-initialized/&#34;
   &gt;C# Blooper №3: No warnings about fields having already been initialized&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-4-lame/annoying-variable-scoping-rules-part-1/&#34;
   &gt;C# Blooper №4: Lame/annoying variable scoping rules, Part 1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-5-lame/annoying-variable-scoping-rules-part-2/&#34;
   &gt;C# Blooper №5: Lame/annoying variable scoping rules, Part 2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-6-no-warnings-about-unused-parameters/&#34;
   &gt;C# Blooper №6: No warnings about unused parameters&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-7-no-warnings-about-unused-private-methods/&#34;
   &gt;C# Blooper №7: No warnings about unused private methods&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-8-no-warnings-for-conditions-that-are-always-true/false/&#34;
   &gt;C# Blooper №8: No warnings for conditions that are always true/false&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-9-annoying-case-statement-fall-through-rules/&#34;
   &gt;C# Blooper №9: Annoying case statement fall-through rules&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-10-switch-statements-are-not-properly-formatted/&#34;
   &gt;C# Blooper №10: Switch statements are not properly formatted&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-11-zero-to-enum-conversion-weirdness/&#34;
   &gt;C# Blooper №11: Zero to Enum conversion weirdness&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-12-where-constraints-not-included-in-method-signatures/&#34;
   &gt;C# Blooper №12: &amp;lsquo;Where&amp;rsquo; constraints not included in method signatures&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-13-stackt-and-queuet-do-not-implement-icollectiont/&#34;
   &gt;C# Blooper №13: Stack and Queue do not implement ICollection&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
   href=&#34;//localhost:1313/p/c%23-blooper-14-weird-/-annoying-interface-method-visibility-rules/&#34;
   &gt;C# Blooper №14: Weird / annoying interface method visibility rules&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Stay tuned, there is more to come.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hail-Mary Local Variable Initialization</title>
        <link>//localhost:1313/p/hail-mary-local-variable-initialization/</link>
        <pubDate>Tue, 03 Jan 2012 10:11:32 +0000</pubDate>
        
        <guid>//localhost:1313/p/hail-mary-local-variable-initialization/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/hail-mary-local-variable-initialization/media/hail-mary-initialization.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;/p&gt;
&lt;h3 id=&#34;introduction&#34;&gt;Introduction
&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Hail Mary local variable Initialization&lt;/strong&gt;&lt;/em&gt; is the &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Cargo_cult_programming&#34; target=&#34;_blank&#34;
   &gt;cargo cult programming&lt;/a&gt; practice of pre-initializing a local variable with some default value, &amp;ldquo;just in case&amp;rdquo;, even though that value will be overwritten in all code paths before it will be read. It is commonly done under the impression that it reduces the chances of error, but in reality it achieves the exact opposite: it increases the chances of error.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;what-it-is&#34;&gt;What it is
&lt;/h3&gt;&lt;p&gt;Again and again I see programmers writing code like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In this example, variable &lt;code&gt;a&lt;/code&gt; is declared and initialized at line 1, but then it receives another value either at line 3 or line 5, before it is read at line 6.&lt;/p&gt;
&lt;p&gt;A surprisingly large number of programmers are under the impression that a plain local variable declaration like &lt;code&gt;int a;&lt;/code&gt; is somehow incomplete. They have trained themselves to see such declarations as missing something important, without which bad things might happen. As a result, they believe that when a local is declared it must always be pre-initialized with some value, even when a meaningful value is not yet available.&lt;/p&gt;
&lt;p&gt;The belief is so popular, that it enjoys alleged &amp;ldquo;best practice&amp;rdquo; status, even &amp;ldquo;common knowledge&amp;rdquo; status, despite it being &lt;em&gt;&lt;strong&gt;dead wrong&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;why-people-do-it&#34;&gt;Why people do it
&lt;/h3&gt;&lt;p&gt;The practice of indiscriminately pre-initializing all variables was not always wrong. It started back in the dark ages of the first Fortran and C compilers, when it was kind of necessary. Compilers back then had a combination of unfortunate characteristics:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They required all local variables within a function to be declared up-front.&lt;/li&gt;
&lt;li&gt;They were not smart enough to detect an attempt to read an uninitialized variable.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Back in those days, accidental reading of uninitialized variables was a very common mistake, leading to many a monstrous bug. (See &lt;a 
   href=&#34;//localhost:1313/p/the-mother-of-all-bugs/&#34;
   &gt;The Mother of All Bugs&lt;/a&gt;.) After having to troubleshoot and fix a few bugs of this kind, every new programmer would quickly learn to always pre-initialize every local variable without asking why.&lt;/p&gt;
&lt;p&gt;The practice of blindly pre-initializing everything continued well into the 1990s, even though by that time compilers were fully capable of issuing warnings about accessing uninitialized variables. The practice continued because programmers were refusing to believe that they could be out-smarted by a compiler, so they were either not enabling, or deliberately disabling the associated warnings.&lt;/p&gt;
&lt;p&gt;After decades of blindly pre-initializing everything, it became a cargo cult habit, so programmers keep doing this today, also in modern languages like Java and C#, without really knowing why they are doing it, nor asking themselves if there are any downsides to this practice.&lt;/p&gt;
&lt;p&gt;And as it turns out, there are plenty.&lt;/p&gt;
&lt;h3 id=&#34;what-is-wrong-with-it&#34;&gt;What is wrong with it
&lt;/h3&gt;&lt;p&gt;A number of things:&lt;/p&gt;
&lt;h4 id=&#34;it-violates-the-principle-of-least-astonishment&#34;&gt;It violates the Principle of Least Astonishment&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/h4&gt;&lt;p&gt;When I see that a variable is initialized to a certain value, I am tempted to assume, based on the type of the variable and the initial value, that it has a certain role to play in the algorithm which follows. For example, seeing an integer initialized with zero prepares me to see it being used as a counter, or as an accumulating sum; when that is what I expect, it is rather disappointing to look further down only to discover that none of that happens, and the variable is overwritten with something entirely different before it is ever used.&lt;/p&gt;
&lt;p&gt;However, that&amp;rsquo;s just an annoyance.&lt;/p&gt;
&lt;h4 id=&#34;it-confuses-syntax-highlighting&#34;&gt;It confuses syntax highlighting
&lt;/h4&gt;&lt;p&gt;When a variable receives a value only once, it is an effectively immutable variable. However, when a variable receives a value twice, then it is by definition mutable. If you have any self-esteem whatsoever, you are using a modern Integrated Development Environment (IDE) and you have configured it to syntax-color mutable variables differently from immutable ones. Hail-Mary initialization, will cause many of your local variables to be colored as mutable, even though they were never meant to be mutable. This is a misleading signal, and coping with it causes cognitive overhead.&lt;/p&gt;
&lt;p&gt;However, that&amp;rsquo;s just an annoyance too.&lt;/p&gt;
&lt;h4 id=&#34;it-leads-to-misuse-of-the-type-system&#34;&gt;It leads to misuse of the type system
&lt;/h4&gt;&lt;p&gt;Some data types do not have default values that you can pre-initialize a variable with, so the desire to always pre-initialize everything sometimes leads to misuse of the type system.  For example, some languages (e.g. C#) support explicit nullability of reference types. This means that you cannot pre-initialize a non-nullable reference variable with null. If, in your desire to pre-initialize everything, you decide to turn a non-nullable reference into a nullable reference, then you have just committed an act of sabotage against yourself, and anyone else who will ever look at that code, by making the code considerably more complicated than it needed to be. The same applies to enums: people often add special &amp;ldquo;invalid&amp;rdquo; or &amp;ldquo;unknown&amp;rdquo; values to their enums, for no good reason other than to accommodate their craving for Hail-Mary Initialization. Such counterfeit values add needless complexity to everything.&lt;/p&gt;
&lt;h4 id=&#34;it-prevents-the-compiler-from-issuing-useful-warnings&#34;&gt;It prevents the compiler from issuing useful warnings.
&lt;/h4&gt;&lt;p&gt;Modern compilers of most mainstream programming languages do extensive data flow analysis and are fully capable of pointing out any situation where a variable is used without first having been initialized. Thus, accidental use of uninitialized variables is never a problem today.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you say &amp;ldquo;but I do not see any such warnings&amp;rdquo; then you are trying to write code without first having figured out how to enable all warnings that your compiler can issue. Do not do that. Stop whatever it is that you are doing, figure out how to enable all warnings, enable them, and only then continue coding.&lt;/li&gt;
&lt;li&gt;If you say &amp;ldquo;but my compiler does not support issuing such warnings&amp;rdquo; then you are using the wrong compiler. Stop using that compiler, and start using a different one.&lt;/li&gt;
&lt;li&gt;If you say &amp;ldquo;but there is no such compiler for the language I use&amp;rdquo; then throw away everything and start from scratch with a different language. I do not care what it takes; in the 3rd millennium you cannot be programming without flow analysis warnings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you have warnings about uninitialized variables, the superfluous initialization of a variable becomes bad practice, because it circumvents other checks that the compiler does for you, and opens up the possibility of error:&lt;/p&gt;
&lt;p&gt;If you begin by pre-initializing a variable with a value which is by definition meaningless, (since a meaningful value is not yet known at that time, otherwise you would have just used that meaningful value and you would be done,) then as far as the compiler can tell, the variable has been initialized. The compiler does not know that the initial value is meaningless. Thus, if you forget further down to assign an actual meaningful value to that variable, the compiler will not be able to warn you. So, you have deliberately sent yourself back in time, to the dark ages of the first compilers, where warnings for uninitialized variables had not been invented yet. Essentially, you have circumvented the safety checks of the compiler and you have achieved the exact opposite of what you were trying to accomplish: instead of decreasing the chances of error, you have increased the chances of error.&lt;/p&gt;
&lt;p&gt;Fortunately, modern compilers are not only capable of issuing a warning if you attempt to use an uninitialized variable; they are also capable of issuing a warning when you unnecessarily initialize a variable. Unfortunately, programmers that keep making these mistakes tend to have both of those warnings disabled.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;Make sure you have all warnings enabled, and never initialize any variable before you have a meaningful value to assign to it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;(This post has evolved from &lt;a class=&#34;external&#34; 
   href=&#34;https://codereview.stackexchange.com/questions/6283/variable-declaration-closer-to-usage-vs-declaring-at-the-top-of-method&#34; target=&#34;_blank&#34;
   &gt;an original answer of mine on CodeReview.StackExchange.com&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Neolisk 2012-01-04 20:34:48 UTC&lt;/p&gt;
&lt;p&gt;Your point would be 200% right if only compilers always worked right. For example, when you have an if statement checking AAA Is Nothing, VS warns you that AAA might be Nothing during this call, so be careful&amp;hellip; I guess I have to thank Microsoft for that, but the point stands. :)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;See  &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Principle_of_least_astonishment&#34; target=&#34;_blank&#34;
   &gt;Principle of Least Astonishment&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>C# Blooper №1: No warnings about uninitialized readonly members</title>
        <link>//localhost:1313/p/c%23-blooper-1-no-warnings-about-uninitialized-readonly-members/</link>
        <pubDate>Sat, 31 Dec 2011 09:26:01 +0000</pubDate>
        
        <guid>//localhost:1313/p/c%23-blooper-1-no-warnings-about-uninitialized-readonly-members/</guid>
        <description>&lt;p&gt;(When the class is public and the member is public, protected or protected internal.)&lt;/p&gt;
&lt;p&gt;Before reading any further, &lt;a 
   href=&#34;//localhost:1313/p/csharp-bloopers/&#34;
   &gt;please read the disclaimer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The C# compiler is kind enough to give you a &amp;ldquo;field is never assigned to&amp;rdquo; warning if you forget to initialize a readonly member which is private or internal, or if the class in which it is being declared is internal. But if the class is public, and the readonly member is public, protected or protected internal, then no warning for you! Why, oh why?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-CSharp&#34; data-lang=&#34;CSharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Test1&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test1&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TRY_IT&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//OK: warning CS0649: Field is never assigned to, and will always have its default value 0  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//OK: warning CS0649: Field is never assigned to, and will always have its default value 0  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//OK: warning CS0649: Field is never assigned to, and will always have its default value 0  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//OK: warning CS0649: Field is never assigned to, and will always have its default value 0  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//OK: warning CS0649: Field is never assigned to, and will always have its default value 0  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Test1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//To avoid warning &amp;#39;The field is never used&amp;#39; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test2&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TRY_IT&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//OK: warning CS0649: Field is never assigned to, and will always have its default value 0  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//OK: warning CS0649: Field is never assigned to, and will always have its default value 0  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Test2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//To avoid warning &amp;#39;The field is never used&amp;#39; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#endif&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about field never assigned to.  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about field never assigned to.  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about field never assigned to. &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;sealed&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Test3&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Blooper: no warning about field never assigned to.  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;For a moment you might think &amp;ldquo;well, a descendant might initialize that member&amp;rdquo;, but that theory does not hold any water, for a number of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internal classes may also be subclassed, but the compiler does not fail to issue the warning in their case.&lt;/li&gt;
&lt;li&gt;Sealed classes may not be subclassed, but the compiler fails to issue the warning in their case, as Test3 in the sample code demonstrates.&lt;/li&gt;
&lt;li&gt;The warning makes sense for the sake of the integrity of the base class regardless of what a derived class may or may not do.&lt;/li&gt;
&lt;li&gt;Lastly but most importantly, the C# specification expressly prohibits a derived class from initializing a readonly member of a base class. You get Error CS0191: A readonly field cannot be assigned to (except in a constructor or a variable initializer) which, incidentally, is a little bit misleading, because you may be trying to assign the field from within a constructor, only it is the constructor of the wrong class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;According to &lt;a class=&#34;external&#34; 
   href=&#34;https://msdn.microsoft.com/en-us/library/03b5270t%28v=vs.71%29.aspx&#34; target=&#34;_blank&#34;
   &gt;MSDN Documentation&lt;/a&gt; about this warning, the exhibited behavior is to be expected:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compiler Warning (level 4) CS0649:
Field &amp;lsquo;field&amp;rsquo; is never assigned to, and will always have its default value &amp;lsquo;value&amp;rsquo;
The compiler detected an uninitialized private or internal field declaration that is never assigned a value.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The question is: why?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I posted this question on StackOverflow, and Eric Lippert himself answered it. The short answer is that it is an oversight of the compiler, but &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/questions/8688204/why-do-i-not-get-warnings-about-uninitialized-readonly-fields&#34; target=&#34;_blank&#34;
   &gt;the long answer is also quite interesting and worth reading&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Intertwine: Normalizing Interface Invocations</title>
        <link>//localhost:1313/p/intertwine-normalizing-interface-invocations/</link>
        <pubDate>Sun, 16 Oct 2011 18:42:25 +0000</pubDate>
        
        <guid>//localhost:1313/p/intertwine-normalizing-interface-invocations/</guid>
        <description>&lt;p&gt;Note: This post has been superseded by a new post in 2022. See &lt;a 
   href=&#34;//localhost:1313/p/intertwine/&#34;
   &gt;Intertwine&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a C# project that I did back in 2011. It consists of a (rather informal) white paper which describes the project, and a zip file containing the source code in the form of a Microsoft Visual Studio solution.&lt;/p&gt;
&lt;p&gt;Here is the abstract:&lt;/p&gt;
&lt;p&gt;A mechanism is proposed for converting (entwining) method call invocations of any  interface to a general purpose single-method normal form, and converting back (untwining) from the normal form to interface invocations, so that operations can be performed on the normal form in a way agnostic to the interface being invoked. The normal form is a delegate in C# or a functional interface in Java, realized as &lt;code&gt;object AnyCall( int selector,  object[] parameters )&lt;/code&gt;. A DotNet implementation is provided in C#, though the discussion also applies to Java.&lt;/p&gt;
&lt;p&gt;And here is the table of contents:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Abstract&lt;/strong&gt; (page 1)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Problem&lt;/strong&gt; (page 1)
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Why messages are bad&lt;/strong&gt; (page 2)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What is missing&lt;/strong&gt; (page 2)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The Solution&lt;/strong&gt; (page 2)
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A hand-crafted solution&lt;/strong&gt; (page 3)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automating with Intertwine&lt;/strong&gt; (page 6)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Appendix 1: A note about Dynamic Proxies&lt;/strong&gt; (page 6)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Appendix 2: An example: Interface multicasts (events)&lt;/strong&gt; (page 7)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Appendix 3: Things to fix&lt;/strong&gt; (page 8)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Download the white paper: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.dropbox.com/s/yjnkog3taradwz1/Intertwine%20v2.1.pdf?dl=0&#34; target=&#34;_blank&#34;
   &gt;Intertwine v2.1.pdf&lt;/a&gt;&lt;/strong&gt;
&lt;strong&gt;Download the source code: &lt;a class=&#34;external&#34; 
   href=&#34;https://www.dropbox.com/s/4cw2os83hv4iq91/Intertwine%20v2.0.zip&#34; target=&#34;_blank&#34;
   &gt;Intertwine v2.0.zip&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Preventing a file from being committed to SVN if it contains a certain keyword</title>
        <link>//localhost:1313/p/preventing-a-file-from-being-committed-to-svn-if-it-contains-a-certain-keyword/</link>
        <pubDate>Sat, 11 Jun 2011 18:11:46 +0000</pubDate>
        
        <guid>//localhost:1313/p/preventing-a-file-from-being-committed-to-svn-if-it-contains-a-certain-keyword/</guid>
        <description>&lt;p&gt;If you are a developer with any real-world experience to speak of, you have undoubtedly come across the following situation: you made a change which was not meant to be committed, (for instance, some debug statement or some mock-up of functionality meant to be filled-in later,) and then you forgot about it and went ahead and committed all of your code. This mishap can be a cause of severe frustration for your fellow co-workers, and the source for memorable &amp;ldquo;WTF moments&amp;rdquo; for the QA department.&lt;/p&gt;
&lt;p&gt;Now, if you are like me, you like to automate things. Why should I have to remember to do something on my computer, when my computer can be tasked with reminding me to do it?  Is a computer the ultimate automation tool or not?&lt;/p&gt;
&lt;p&gt;The interwebz abound with questions on precisely how to achieve this bit of automation:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/862950/773113&#34; target=&#34;_blank&#34;
   &gt;stackoverflow: Subversion: prevent local modifications to one file from being committed?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/2816892/773113&#34; target=&#34;_blank&#34;
   &gt;stackoverflow: SVN Pre-commit hook for temporarly commented out code (in java)?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/q/635446/773113&#34; target=&#34;_blank&#34;
   &gt;stackoverflow: SVN: Is there a way to mark a file as “do not commit”?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In short, if you are using SVN, here is how to do it:&lt;/p&gt;
&lt;p&gt;Have a pre-commit hook in the repository which checks to see whether any file contains the string &lt;code&gt;NOCOMMIT&lt;/code&gt;, and if so, it fails the commit.&lt;/p&gt;
&lt;p&gt;So, when I alter a source file in a way which is not meant to be committed, I append a &lt;code&gt;//NOCOMMIT&lt;/code&gt; comment right next to each change, and I do not have to worry about it anymore. If I do accidentally attempt to commit it, the pre-commit hook of the repository
will block my commit and let me know which files contain the
&lt;code&gt;NOCOMMIT&lt;/code&gt;  keyword, so I can go into each one of those files and fix it.&lt;/p&gt;
&lt;p&gt;I find this feature so useful that I honestly even use it when programming at home, where obviously, I am the only programmer in the team.&lt;/p&gt;
&lt;p&gt;If you are using SVN on windows, you can paste the following into a file called &lt;code&gt;pre-commit.bat&lt;/code&gt; in the &lt;code&gt;hooks&lt;/code&gt; folder of your SVN repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;: Stops commits that contain the NOCOMMIT keyword.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;setlocal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;REPOS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;TXN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SVNLook diff &lt;span class=&#34;nv&#34;&gt;%REPOS%&lt;/span&gt; -t &lt;span class=&#34;nv&#34;&gt;%TXN%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; findstr /I /M /L NOCOMMIT &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; nul
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%errorlevel%&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;gtr&lt;/span&gt; 0 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;exit&lt;/span&gt; 0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;echo&lt;/span&gt; Your commit has been blocked because it contains the keyword NOCOMMIT. &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;exit&lt;/span&gt; 1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;With SVN on Unix systems, something like the following will do the trick, though please note that I have not tested it.  (Note: suggestions from a comment by Georgi have been applied.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;REPOS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;TXN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/usr/local/bin/svnlook diff -t &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TXN&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$REPOS&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;NOCOMMIT&amp;#34;&lt;/span&gt; &amp;gt; /dev/null &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Your commit has been blocked because it contains the keyword NOCOMMIT.&amp;#34;&lt;/span&gt; 1&amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Georgi 2014-05-13 17:00:18 UTC&lt;/p&gt;
&lt;p&gt;Hi Michael,&lt;/p&gt;
&lt;p&gt;Thank you for the great article That&amp;rsquo;s what I needed. Just a few notes on the linux script:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;svnlook command should be &amp;ldquo;diff&amp;rdquo;, not &amp;ldquo;log&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;There should be opening bracket before &amp;ldquo;echo&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;I only got it to work when I added &amp;ldquo;exit 0;&amp;rdquo; at the end of the file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So my working script looks like:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;#!/bin/sh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;REPOS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;TXN&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;SVNLOOK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/bin/svnlook
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$SVNLOOK&lt;/span&gt; diff -t &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$TXN&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$REPOS&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -i &lt;span class=&#34;s2&#34;&gt;&amp;#34;NOCOMMIT&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;gt&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; /dev/null &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Your commit has been blocked because it contains the keyword NOCOMMIT.&amp;#34;&lt;/span&gt; 1&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;gt&lt;span class=&#34;p&#34;&gt;;&amp;amp;&lt;/span&gt;2&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; 0&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://michael.gr&#34; target=&#34;_blank&#34;
   &gt;michael.gr&lt;/a&gt; 2014-05-13 17:22:40 UTC&lt;/p&gt;
&lt;p&gt;Thank you for contributing, Georgi!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://www.henrysrodshop.com&#34; target=&#34;_blank&#34;
   &gt;Ben&lt;/a&gt; 2015-04-17 19:17:29 UTC&lt;/p&gt;
&lt;p&gt;Good call Michael: &lt;a class=&#34;external&#34; 
   href=&#34;http://stackoverflow.com/questions/29707649/svn-pre-commit-hook-how-to-block-a-keyword-in-certain-file-types&#34; target=&#34;_blank&#34;
   &gt;http://stackoverflow.com/questions/29707649/svn-pre-commit-hook-how-to-block-a-keyword-in-certain-file-types&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://www.henrysrodshop.com&#34; target=&#34;_blank&#34;
   &gt;Ben&lt;/a&gt; 2015-04-17 16:47:08 UTC&lt;/p&gt;
&lt;p&gt;This is soooo close to what I need, but not quite there. For some reason, I&amp;rsquo;ve been unable to do what I need, which is check for existence of a keyword in only certain filetypes. For instance, I do not want to allow .java files to have &amp;ldquo;http://&amp;rdquo; or &amp;ldquo;https://&amp;rdquo; in them. I&amp;rsquo;ve tried using &amp;ndash;include=*.java but it seems to get ignored in my pre-commit file (works fine on the command line). Thoughts? Thanks in advance!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;external&#34; 
   href=&#34;http://michael.gr&#34; target=&#34;_blank&#34;
   &gt;michael.gr&lt;/a&gt; 2015-04-17 18:38:00 UTC&lt;/p&gt;
&lt;p&gt;I do not know, Ben. But it sounds like a good question for stackoverflow.com&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Wonderful MSBuild</title>
        <link>//localhost:1313/p/wonderful-msbuild/</link>
        <pubDate>Sun, 29 May 2011 08:40:41 +0000</pubDate>
        
        <guid>//localhost:1313/p/wonderful-msbuild/</guid>
        <description>&lt;p&gt;So, for some time now, whenever I try to &amp;lsquo;batch build&amp;rsquo; from within Microsoft Visual Studio 2010, I get the following error:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Microsoft.Common.targets(2868,9): error MSB3021: Unable to copy file &amp;quot;x\Intermediate\y.dll&amp;quot; to &amp;quot;x\y.dll&amp;quot;. Could not find file &#39;x\Intermediate\y.dll&#39;.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Indeed, there is no file &amp;lsquo;x\Intermediate\y.dll&amp;rsquo;.  But when I switch configurations and try to build the regular (non-batch) way, it builds fine.&lt;/p&gt;
&lt;p&gt;Amused, and since I can live without the batch-build functionality, I have just let it be all this time, writing it off as one more of those weird wonders of Microsoft.&lt;/p&gt;
&lt;p&gt;Then today I figured out what the problem was.  I am to blame, because I brought this upon myself.  And I brought it upon myself while trying to circumvent some other, even more wonderful, weird wonder of Microsoft.&lt;/p&gt;
&lt;p&gt;My MSBuild woes begun years ago, on my very first day of C# programming, when I saw those &lt;code&gt;bin&lt;/code&gt; and &lt;code&gt;obj&lt;/code&gt; directories in my project folder, and my first reaction was, of course, to want to make them go away.&lt;/p&gt;
&lt;p&gt;There is an option in project properties to set the output folder, but not the intermediate folder. This takes care of the &lt;code&gt;bin&lt;/code&gt; folder, but the stupid tool keeps creating an &lt;code&gt;obj&lt;/code&gt; folder under the solution folder and puts all intermediate files in there, no matter what.&lt;/p&gt;
&lt;p&gt;As you might understand, I decided that I just would not have any of that. I was determined to never write a single line of C# if I did not first find a way to make that annoying &lt;code&gt;obj&lt;/code&gt; directory go away.&lt;/p&gt;
&lt;p&gt;Needless to say, on my first day of C# programming I did not write any C# at all. I just banged my head against the keyboard triyng to find a way to get that folder to go away.&lt;/p&gt;
&lt;p&gt;After a lot of googling around, I discovered allegations about the existence of some &lt;code&gt;&amp;lt;IntermediateOutputPath&amp;gt;&lt;/code&gt; tag that goes inside a project file.  So, I edited the &lt;code&gt;.csproj&lt;/code&gt; file with my text editor and after each &lt;code&gt;&amp;lt;OutputPath&amp;gt;&lt;/code&gt; tag I inserted an &lt;code&gt;&amp;lt;IntermediateOutputPath&amp;gt;&lt;/code&gt; tag as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;IntermediateOutputPath&amp;gt;x\Intermediate\&amp;lt;/IntermediateOutputPath&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(where x is my output path.)&lt;/p&gt;
&lt;p&gt;Now, MSBuild would put the intermediate files in the folder that I specified, but it kept ALSO putting them in &lt;code&gt;obj&lt;/code&gt; under my solution folder. That was just mind-blowing.&lt;/p&gt;
&lt;p&gt;So, I took a drastic measure: I deleted the &lt;code&gt;obj&lt;/code&gt; folder and I created an empty text file called &lt;code&gt;obj&lt;/code&gt; in its place, which I marked as read-only and hidden, and I added it in the ignored files in SVN.&lt;/p&gt;
&lt;p&gt;Strangely enough, this awful hack worked. Or at least it appeared to work. Just today I realized that it worked for the regular build, but it has been the reason why my batch-build does not work.&lt;/p&gt;
&lt;p&gt;So, it appears that the only way to have batch-build functionality in Visual Studio is to resign to having a stupid &lt;code&gt;obj&lt;/code&gt; folder under your project folder.  Oh, well!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Fixing the AutoCloseable interface of Java</title>
        <link>//localhost:1313/p/fixing-the-autocloseable-interface-of-java/</link>
        <pubDate>Sat, 17 Nov 2007 09:30:50 +0000</pubDate>
        
        <guid>//localhost:1313/p/fixing-the-autocloseable-interface-of-java/</guid>
        <description>&lt;p&gt;Java 7 introduced the &lt;code&gt;AutoCloseable&lt;/code&gt; interface, which is roughly equivalent to the &lt;code&gt;IDisposable&lt;/code&gt; interface of C#, to be used in synergy with the new try-with-resources statement, which is equivalent to the using-disposable construct of C#.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;The problem with Java&amp;rsquo;s &lt;code&gt;AutoCloseable&lt;/code&gt; interface is that its &lt;code&gt;close()&lt;/code&gt; method is declared to throw a checked exception:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Exception&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This is a problem if you are one of the many programmers who prefer unchecked exceptions over checked ones, because it forces you to deal with checked exceptions every time you write a try-with-resources statement, despite the fact that none of your classes ever throw any checked exceptions on &lt;code&gt;close()&lt;/code&gt;.  Simply declaring that your class implements &lt;code&gt;AutoCloseable&lt;/code&gt; forces checked exceptions upon you.&lt;/p&gt;
&lt;p&gt;Luckily, there is a fix for this.  Here it is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;AutoCloseable2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AutoCloseable&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nd&#34;&gt;@Override&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;There, I fixed it for you.&lt;/p&gt;
&lt;p&gt;By declaring a new interface which redefines the close() method as not throwing any checked exceptions, the problem goes away.&lt;/p&gt;
&lt;p&gt;P.S.&lt;/p&gt;
&lt;p&gt;I just looked at the &lt;a class=&#34;external&#34; 
   href=&#34;https://docs.oracle.com/javase/7/docs/technotes/guides/language/try-with-resources.html&#34; target=&#34;_blank&#34;
   &gt;Oracle documentation for the AutoCloseable interface&lt;/a&gt; and found out that this had already been anticipated:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] subclasses of the &lt;code&gt;AutoCloseable&lt;/code&gt; interface can override this behavior of the &lt;code&gt;close&lt;/code&gt; method to throw specialized exceptions, such as &lt;code&gt;IOException&lt;/code&gt;, or no exception at all.&amp;quot;&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
