<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>How-To on Michael&#39;s Blog</title>
        <link>//localhost:1313/tags/how-to/</link>
        <description>Recent content in How-To on Michael&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>Michael Belivanakis (a.k.a. Mike Nakis)</copyright>
        <lastBuildDate>Thu, 23 Oct 2025 19:35:16 +0200</lastBuildDate><atom:link href="//localhost:1313/tags/how-to/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>The Ju52 cocktail</title>
        <link>//localhost:1313/p/the-ju52-cocktail/</link>
        <pubDate>Fri, 12 Jul 2024 20:58:28 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-ju52-cocktail/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-ingredients.jpg&#34;
	width=&#34;2000&#34;
	height=&#34;1116&#34;
	srcset=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-ingredients_hu_9772d2a785c3d331.jpg 480w, //localhost:1313/p/the-ju52-cocktail/images/ju52-ingredients_hu_76babca988fb0459.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;430px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;How to make the Ju52 cocktail:&lt;/p&gt;
&lt;p&gt;In a tall glass with &lt;strong&gt;no ice&lt;/strong&gt;, mix the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 parts coffee liqueur (e.g. &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Kahl%C3%BAa&#34; target=&#34;_blank&#34;
   &gt;Kahlúa&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2 parts cream liqueur (e.g. &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Baileys_Irish_Cream&#34; target=&#34;_blank&#34;
   &gt;Baileys Irish Cream&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;1 part orange liqueur (e g. &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Grand_Marnier&#34; target=&#34;_blank&#34;
   &gt;Grand Marnier&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;4 parts cold milk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The special guy that I am, I had to go invent my own cocktail. As its name betrays, it is similar to &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/B-52_%28cocktail%29&#34; target=&#34;_blank&#34;
   &gt;the B52 cocktail&lt;/a&gt;. In fact, the Ju52 is just B52 with cold milk instead of ice.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;the-benefits&#34;&gt;The benefits
&lt;/h3&gt;&lt;p&gt;The replacement of ice with cold milk imparts the following benefits to the drink:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It is not as sweet as B52.&lt;/li&gt;
&lt;li&gt;It is not as potent, in alcohol, as B52.&lt;/li&gt;
&lt;li&gt;It retains a consistent taste until the end, instead of becoming watery due to melting ice.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many cocktails include some non-alcoholic ingredient such as  fruit juice, soda, tonic water, etc. to lower the potency and/or the sweetness of the drink, but the B52 contains no such thing; it is made of 3 liqueurs, all of which are sweet and potent. As a result, the B52 is perhaps a bit too concentrated. The milk in the Ju52 fixes this, giving the drink a level of sweetness and potency which is just right.&lt;/p&gt;
&lt;p&gt;B52 on the rocks also suffers from the melting of the ice: the first sips are nice and sweet and potent, but the last sips tend to be watered-down and tasteless. The Ju52 fixes that too: by removing the ice, the drink maintains a consistent taste until the last drop, while the addition of cold milk keeps the drink chilled.&lt;/p&gt;
&lt;p&gt;The milk in the Ju52 blends perfectly with the cream liqueur and the coffee liqueur, while at the same time maintaining the contrast with the orange liqueur, which results in the titillating incongruity between creaminess and acidity that gives the B52 its unique character.&lt;/p&gt;
&lt;p&gt;As a result, the successful recipe of B52 is not desecrated, which means that if you like the B52, you are probably going to also like the Ju52.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;the-name&#34;&gt;The name
&lt;/h3&gt;&lt;p&gt;The origin of the B52 cocktail is uncertain, but there is no question that it is named after the &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Boeing_B-52_Stratofortress&#34; target=&#34;_blank&#34;
   &gt;Boeing B-52 &amp;ldquo;Stratofortress&amp;rdquo;&lt;/a&gt; bomber of the U.S. Air Force.  (According to rumors, the B52 drink was actually named after the rock band &amp;ldquo;&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/The_B-52s&#34; target=&#34;_blank&#34;
   &gt;The B52&amp;rsquo;s&lt;/a&gt;&amp;rdquo;, but the band in turn got its name from the &amp;ldquo;&lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Beehive_%28hairstyle%29&#34; target=&#34;_blank&#34;
   &gt;B52 hairstyle&lt;/a&gt;&amp;rdquo;, which bears the name of the airplane; so, no matter how we look at it, the name of the drink is ultimately derived from the name of the plane.)&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/the-ju52-cocktail/images/b52-dropping-bombs.jpg&#34;
	width=&#34;1439&#34;
	height=&#34;1079&#34;
	srcset=&#34;//localhost:1313/p/the-ju52-cocktail/images/b52-dropping-bombs_hu_4d87f6cc6b0178dc.jpg 480w, //localhost:1313/p/the-ju52-cocktail/images/b52-dropping-bombs_hu_c558a526a70a76f8.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;A B-52 (&lt;a class=&#34;external&#34; 
   href=&#34;https://en.m.wikipedia.org/wiki/File:Boeing_B-52_dropping_bombs.jpg&#34; target=&#34;_blank&#34;
   &gt;Source&lt;/a&gt;)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Remaining true to the theme, the Ju52 cocktail is also named after an airplane, which was also used as a bomber, albeit one of far lesser destructive power than the B-52.&lt;/p&gt;
&lt;p&gt;I am of course talking about the &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Junkers_Ju_52&#34; target=&#34;_blank&#34;
   &gt;Junkers (pronounced &lt;strong&gt;yoon&lt;/strong&gt;-kers) Ju 52/3m&lt;/a&gt;, the iconic three-engine German transport plane of World War 2.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-restored.jpg&#34;
	width=&#34;1024&#34;
	height=&#34;512&#34;
	srcset=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-restored_hu_d7bd9f522dcf005f.jpg 480w, //localhost:1313/p/the-ju52-cocktail/images/ju52-restored_hu_e675a30b6fc60cd8.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;480px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;A restored Ju 52 in flight (&lt;a class=&#34;external&#34; 
   href=&#34;https://palmspringsairmuseum.org/junkers-ju-52-warbird-wednesday-episode-146/&#34; target=&#34;_blank&#34;
   &gt;Source&lt;/a&gt;)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;the-history&#34;&gt;The history
&lt;/h3&gt;&lt;p&gt;The Ju 52 was introduced as a civilian airliner in the early 1930s, and the Nazi regime forced the Junkers company to adapt it for military use, over the objections of the company&amp;rsquo;s founder, &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Hugo_Junkers&#34; target=&#34;_blank&#34;
   &gt;Hugo Junkers&lt;/a&gt;. During World War 2, the Ju 52 saw action mainly as a transport for supplies and troops. Almost 5000 units were built.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-crete.jpg&#34;
	width=&#34;2935&#34;
	height=&#34;2104&#34;
	srcset=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-crete_hu_1cede5c4202fb1fd.jpg 480w, //localhost:1313/p/the-ju52-cocktail/images/ju52-crete_hu_844bbb8d4401d2da.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;139&#34;
		data-flex-basis=&#34;334px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;A Ju 52 dropping parachutists in the &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Battle_of_Crete&#34; target=&#34;_blank&#34;
   &gt;battle of Crete&lt;/a&gt;, the largest airborne invasion of the war.&lt;br&gt; (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.asisbiz.com/il2/Ju-52/Crete/pages/Unternehmen-Merkur-Junkers-Ju-52-3m-dropping-paratroopers-over-Crete-1941-NIOD.html&#34; target=&#34;_blank&#34;
   &gt;Source&lt;/a&gt;)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-seaplane.jpg&#34;
	width=&#34;2000&#34;
	height=&#34;1389&#34;
	srcset=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-seaplane_hu_6d970d997e2cc70a.jpg 480w, //localhost:1313/p/the-ju52-cocktail/images/ju52-seaplane_hu_31610912d1c4d42c.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;143&#34;
		data-flex-basis=&#34;345px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;A seaplane variant of the Ju 52, fitted with floats. (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.asisbiz.com/il2/Ju-52/TrspSee1/pages/Junkers-Ju-52-3mg5eW-DR&amp;#43;WO-being-flight-tested-prior-to-delivery-to-a-Seetransportstaffel-01.html&#34; target=&#34;_blank&#34;
   &gt;Source&lt;/a&gt;)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-magnetic.jpg&#34;
	width=&#34;1550&#34;
	height=&#34;1050&#34;
	srcset=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-magnetic_hu_dd954cd336bf1669.jpg 480w, //localhost:1313/p/the-ju52-cocktail/images/ju52-magnetic_hu_849cc44c34e1a015.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;354px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;A Ju 52 fitted with a magnetic ring, used as a naval mine detonator. (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.reddit.com/r/WeirdWings/comments/sldjba/junkers_ju_52_minensuch_variant_with_a_14_meter/&#34; target=&#34;_blank&#34;
   &gt;Source&lt;/a&gt;)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-medevac.jpg&#34;
	width=&#34;1800&#34;
	height=&#34;1013&#34;
	srcset=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-medevac_hu_dccee09d1eb3a82c.jpg 480w, //localhost:1313/p/the-ju52-cocktail/images/ju52-medevac_hu_aac8445b297966de.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;A Ju 52 used as a medical evacuation / ambulance plane. (&lt;a class=&#34;external&#34; 
   href=&#34;https://www.asisbiz.com/il2/Ju-52/Junkers-Ju-52/pages/Ostfront-Junkers-Ju-52-air-ambulance-Stkz-NO&amp;#43;HJ-WNr-2999-ferrying-wounded-solders-Eastern-Front-01.html&#34; target=&#34;_blank&#34;
   &gt;Source&lt;/a&gt;)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-bomb&#34;&gt;The bomb
&lt;/h4&gt;&lt;p&gt;Adolf Hitler had a Ju 52 for traveling around, with Lufthansa&amp;rsquo;s civil aviation color scheme and call sign D-2600.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: center&#34;&gt;&lt;img src=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-d2600.png&#34;
	width=&#34;1986&#34;
	height=&#34;1113&#34;
	srcset=&#34;//localhost:1313/p/the-ju52-cocktail/images/ju52-d2600_hu_7a679b295db3d156.png 480w, //localhost:1313/p/the-ju52-cocktail/images/ju52-d2600_hu_f361162d956bed9a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;428px&#34;
	
&gt;
&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: center&#34;&gt;Hitler&amp;rsquo;s Ju 52, from the movie &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Valkyrie_%28film%29&#34; target=&#34;_blank&#34;
   &gt;&lt;em&gt;Valkyrie&lt;/em&gt; (2008)&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;One of the assassination attempts against Hitler took place on that plane. It was carried out by &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Fabian_von_Schlabrendorff&#34; target=&#34;_blank&#34;
   &gt;Fabian von Schlabrendorff&lt;/a&gt; on the 13th of March of 1943, and it involved a bomb which was carried into the plane disguised as bottles of Cointreau. Unfortunately, it failed to explode.&lt;/p&gt;
&lt;p&gt;Cointreau is an orange liqueur, so it can also be used in the B52 and Ju52 cocktails, but my personal preference is with Grand Marnier.&lt;/p&gt;
&lt;p&gt;On a few occasions the Ju 52 was used as a bomber, but it was rather lousy in that role.&lt;/p&gt;
&lt;p&gt;In other words, definitely not a B-52.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/B-52_%28cocktail%29&#34; target=&#34;_blank&#34;
   &gt;Wikipedia page for the B52&lt;/a&gt; cocktail.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&#34;external&#34; 
   href=&#34;https://en.wikipedia.org/wiki/Junkers_Ju_52&#34; target=&#34;_blank&#34;
   &gt;Wikipedia page for the Ju 52&lt;/a&gt; airplane.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&#34;external&#34; 
   href=&#34;https://www.youtube.com/watch?v=C_mLjyriW80&#34; target=&#34;_blank&#34;
   &gt;beginning of the movie Valkyrie (2008) on YouTube&lt;/a&gt;, depicting Fabian von Schlabrendorff&amp;rsquo;s attempt to assassinate Hitler in 1943, as an introduction to the main subject of the movie, which is Claus von Stauffenberg&amp;rsquo;s attempt to assassinate Hitler in 1944.&lt;/p&gt;</description>
        </item>
        <item>
        <title>How to organize a Visual Studio Solution</title>
        <link>//localhost:1313/p/how-to-organize-a-visual-studio-solution/</link>
        <pubDate>Fri, 07 Jun 2024 15:58:23 +0000</pubDate>
        
        <guid>//localhost:1313/p/how-to-organize-a-visual-studio-solution/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/how-to-organize-a-visual-studio-solution/images/microsoft-visual-studio-2022-logo.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;

Visual Studio is a capricious product, and its &amp;ldquo;Solution&amp;rdquo; subsystem is especially capricious. When you look at what options are available you might think you have a great degree of freedom to structure things the way you want, but as you will inevitably (and painfully) find out later, many things have to be done in precisely one, entirely undocumented way, or else there will be pain of the worst kind: Visual Studio will malfunction either without any error message, or with error messages that are completely unhelpful for locating and fixing the problem.&lt;/p&gt;
&lt;p&gt;Here is a list of things I have (painfully) found out over the years.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;h3 id=&#34;the-project-directory-structure-must-be-entirely-flat&#34;&gt;The project directory structure must be entirely flat.
&lt;/h3&gt;&lt;p&gt;All project files must reside in directories that are immediate sub-directories of the solution directory. When adding a project you are given the freedom to put it in a directory anywhere you want, but if you don&amp;rsquo;t put it in a directory exactly under the solution directory, you are going to run into trouble later.&lt;/p&gt;
&lt;p&gt;If you have hundreds of projects, and you are thinking that putting them all in one directory is insane, welcome to the Microsoft world, where insane is the order of the day.&lt;/p&gt;
&lt;p&gt;From within Visual Studio, you can create what Microsoft calls &amp;ldquo;Solution Folders&amp;rdquo; to arrange your projects in a hierarchy at least within Visual
Studio&amp;rsquo;s &amp;ldquo;Solution Explorer&amp;rdquo; panel, but even this has a caveat, keep reading.&lt;/p&gt;
&lt;h3 id=&#34;the-startup-project-must-be-listed-first-in-the-solution-file&#34;&gt;The startup project must be listed first in the solution file.
&lt;/h3&gt;&lt;p&gt;Solution files are, luckily, text files. Solution files with the .sln extension are in a ridiculous ad-hoc format consisting of, among other things, entries delimited with &amp;ldquo;Project&amp;rdquo; and &amp;ldquo;EndProject&amp;rdquo; and making use of GUIDs to discourage anyone from touching it or even looking at it. Luckily they have now introduced .slnx files, which are a bit more lean, but they are now in XML, (Microsoft seems to be stuck in the 1980&amp;rsquo;s,) so they are still far more verbose than necessary, and they still contain GUIDs here and there. Regardless of the file format, you are free to edit the solution file and re-order these entries in any way you like, and it seems to have absolutely no effect because the Visual Studio Solution Explorer will sort them alphabetically anyway, but there is one kind of re-ordering that you can do which actually matters: The entry which stands for your startup project must be the first entry.&lt;/p&gt;
&lt;p&gt;If you do not do this, then each time you delete the .vs directory, restart Visual Studio, and try to launch your solution, you will be greeted with the all too familiar, extremely annoying, and extremely stupid message which says that you cannot launch a project which builds a library instead of an executable. This is happening because when the .vs directory is deleted, Visual Studio forgets the startup project, and when Visual Studio is launched with no startup project configured it absolutely has to establish a startup project, and it absolutely has to do this automatically, without asking you. In doing so, it picks the first project that it finds in the solution file, and it is not smart enough to skip projects that build libraries instead of executables.&lt;/p&gt;
&lt;h3 id=&#34;the-startup-project-must-not-be-nested-in-a-solution-folder&#34;&gt;The startup project must not be nested in a solution folder.
&lt;/h3&gt;&lt;p&gt;As mentioned earlier, you can use &amp;ldquo;Solution Folders&amp;rdquo; to arrange your projects in a hierarchy; however, the project that you usually want to have as the startup project must not be nested in a solution folder, it must be placed right under the root node of the solution.&lt;/p&gt;
&lt;p&gt;If you nest your startup project in a solution folder, then Visual Studio will again, entirely capriciously, ignore it when automatically selecting a project as the startup project each time you delete the .vs directory.&lt;/p&gt;
&lt;h3 id=&#34;test-projects-must-be-given-names-that-end-in--test-yes-that-is-a-space&#34;&gt;Test projects must be given names that end in &amp;quot; Test&amp;quot;. (Yes, that is a space.)
&lt;/h3&gt;&lt;p&gt;Usually, projects come in pairs: there is a production project, and a test project. Usually, we give the test project the same name as the production
project, with a suitable suffix to indicate that this is a test project. If your production project is called &amp;ldquo;Covfefe&amp;rdquo;, you might think that you have
plenty of options to call your test project: &amp;ldquo;CovfefeTest&amp;rdquo;, &amp;ldquo;Covfefe.Test&amp;rdquo;, &amp;ldquo;Covfefe-Test&amp;rdquo;, &amp;ldquo;Covfefe_Test&amp;rdquo;, etc. Actually, none of these will work. You have to call it &amp;ldquo;Covfefe Test&amp;rdquo;, with a space before &amp;ldquo;Test&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This is because the Visual Studio Solution Explorer uses different sorting rules from Windows File Explorer, so if you use anything but &amp;quot; Test&amp;quot; as a suffix for test projects you will find your projects listed in a different order between the Solution Explorer and the File Explorer. Depending on what you choose, your test projects will appear either before or after your production projects, either in Solution Explorer or in File Explorer, but not in both. The only trick I have been able to find which causes the test projects to always be listed after the production projects both in Solution Explorer and in File Explorer is to make each test project name consist of the production project name suffixed with &amp;quot; Test&amp;quot; (with a space.)&lt;/p&gt;
&lt;p&gt;Aaaand, of course, even with this, there is a catch: if you name your projects as I suggested, they will appear in the wrong order when viewing your solution directory on GitHub. Because GitHub uses yet different sorting rules. So, there is no way to achieve a consistent look both in Windows File Explorer, and Visual Studio Solution Explorer, and GitHub.&lt;/p&gt;
&lt;h4 id=&#34;solution-items-must-be-placed-in-a-custom-_solution-items-folder&#34;&gt;Solution items must be placed in a custom &amp;ldquo;_Solution Items&amp;rdquo; folder.
&lt;/h4&gt;&lt;p&gt;Solution-level items are a fiasco to begin with; they only exist because the Visual Studio Solution Explorer capriciously hides solution-level files from the user. Instead, Visual Studio offers the &amp;ldquo;Solution Items&amp;rdquo; workaround, which is a solution folder under the solution node where you can manually place links to solution-level files that you want to be able to access. (Because having to manually create links to your own files so that you can access them is always fun.)&lt;/p&gt;
&lt;p&gt;The default name that Visual Studio gives to this folder is &amp;ldquo;Solution Items&amp;rdquo;. The first thing you must do with it is to rename it to &amp;ldquo;_Solution Items&amp;rdquo;, so that it will be sorted first in the list, otherwise it will be hidden among other solution folders.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Old comments&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anonymous 2024-12-27 16:05:14 UTC&lt;/p&gt;
&lt;p&gt;Thank you for sharing your experiences and all the useful info.
Visual Studio is increasingly becoming such a bloatware, while still missing quite a lot of basic fundamental functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        <item>
        <title>Simplification of triple-choice prompts to dual-choice</title>
        <link>//localhost:1313/p/simplification-of-triple-choice-prompts-to-dual-choice/</link>
        <pubDate>Fri, 31 May 2024 09:53:03 +0000</pubDate>
        
        <guid>//localhost:1313/p/simplification-of-triple-choice-prompts-to-dual-choice/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/simplification-of-triple-choice-prompts-to-dual-choice/images/image.png&#34;
	width=&#34;400&#34;
	height=&#34;132&#34;
	srcset=&#34;//localhost:1313/p/simplification-of-triple-choice-prompts-to-dual-choice/images/image_hu_f5edf689a035ac41.png 480w, //localhost:1313/p/simplification-of-triple-choice-prompts-to-dual-choice/images/image_hu_c6205dafb643c637.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;303&#34;
		data-flex-basis=&#34;727px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;I have a lot to say about the modern trend in graphical user interface design which aims to achieve an impossibly clean look at the expense of usability, but this is going to be the subject of another blog post. In this post, I want to talk about simplifying the user interface when the simplification is clearly a win, both from a usability point of view and, incidentally, from an aesthetics point of view. Specifically, I want to show how a yes/no/cancel prompt can be reduced to just a yes/cancel prompt.&lt;/p&gt;
&lt;p&gt;(Useful pre-reading: &lt;a 
   href=&#34;//localhost:1313/p/about-these-papers/&#34;
   &gt;About these papers&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;A typical example of such a prompt is when an application asks the user what to do when the user tries to quit the application while a file is unsaved.&lt;/p&gt;
&lt;p&gt;We have two boolean variables:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To save or not to save.&lt;/li&gt;
&lt;li&gt;To quit or not to quit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since there are two boolean variables, there is a total of four conceivable options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Save and quit.&lt;/li&gt;
&lt;li&gt;Quit without saving.&lt;/li&gt;
&lt;li&gt;Save without quitting.&lt;/li&gt;
&lt;li&gt;Do not save and do not quit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The very first programmers of interactive applications did not fail to notice that saving without quitting is not particularly useful, so in fact we only need three options, and this has given us the traditional triple-choice yes / no / cancel prompt, variations of which you see in almost all applications out there. One of the variations is as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Save the file before quitting? [Yes] / [No] / [Cancel]&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Needless to say, presenting the user with an application-modal prompt containing not one, not two, but three options is terrible. (If you think that
&amp;ldquo;terrible&amp;rdquo; is a harsh word for such a low-impact problem, then please read &lt;a 
   href=&#34;//localhost:1313/p/incident-impact-calculation-formula/&#34;
   &gt;Incident Impact Calculation Formula&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Note that the replacement of a generic &amp;ldquo;Yes&amp;rdquo; / &amp;ldquo;No&amp;rdquo; / &amp;ldquo;Cancel&amp;rdquo; prompt with a more specific &amp;ldquo;Save and exit&amp;rdquo; / &amp;ldquo;Exit without saving&amp;rdquo; / &amp;ldquo;Do not exit&amp;rdquo; prompt is probably an improvement, but this is not what I am discussing here. I would like to reduce the number of choices to less than three; once the number of choices has been reduced, finding some better wording for the remaining choices is all the better.&lt;/p&gt;
&lt;p&gt;Also note that the best solution to multiple choice application-modal prompts is of course to restructure software, to rethink software from scratch if need be, so that they can be completely eliminated. For example, all prompts about saving before quitting could be a thing of the past if we were to abandon the notion of saving, or even the notion of quitting. However, such exotic approaches are off-topic in this discussion.&lt;/p&gt;
&lt;p&gt;A blog author who has also examined the problem of triple-choice prompts, and explains it better than me, is &lt;a class=&#34;external&#34; 
   href=&#34;https://martin.kleppmann.com/2007/07/19/yes-no-cancel-causes-aspirin-sales-to-soar.html&#34; target=&#34;_blank&#34;
   &gt;Martin Kleppmann in &amp;ldquo;Yes/No/Cancel causes Aspirin sales to soar&amp;rdquo;&lt;/a&gt;.  Interestingly enough, Martin Kleppmann follows a thought process which is similar to mine, but does not present a proposal as to what to do instead.&lt;/p&gt;
&lt;p&gt;So, here is my contribution to the subject:&lt;/p&gt;
&lt;p&gt;Quite often, a triple choice prompt can be simplified to a dual-choice prompt!&lt;/p&gt;
&lt;p&gt;We can eliminate the option to save and quit because we offer the option to not quit, which, if chosen, makes saving or not saving irrelevant: for as long as the application is still running, the user can always achieve saving and quitting by simply saving, and then quitting. (Duh!)&lt;/p&gt;
&lt;p&gt;Thus, we can offer the following simplified prompt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quit without saving? [Yes] / [Cancel]&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The only way in which this could be further simplified would be to tell the user that they cannot quit because they have unsaved changes, and only show an [OK] button, but that would be annoying.&lt;/p&gt;
&lt;p&gt;The traditional triple-choice prompt may have been invented for the benefit of users who are in the habit of quitting while having unsaved changes that they intend to keep, but I hope that we can all agree that this is not a healthy habit worth facilitating, certainly not if facilitating it would add the slightest bit of inconvenience to other, more legitimate, (and I suspect more frequently occurring,) use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The user quits intending to revert changes.&lt;/li&gt;
&lt;li&gt;The user attempts to quit while unaware that they have made changes.&lt;/li&gt;
&lt;li&gt;The user does not intend to quit, but issues the quit command accidentally.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Special workflows can be facilitated by separate commands that specially target such workflows. For example, saving every single unmodified file can be accomplished with a &amp;ldquo;Save All&amp;rdquo; command, and this has the benefits of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Being useful at any time, not only when quitting, and&lt;/li&gt;
&lt;li&gt;Sparing the user from having to do one click per unmodified file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To summarize:&lt;/p&gt;
&lt;p&gt;Presenting the user with only two choices is immensely better than presenting the user with three choices, when the missing choice can be trivially accomplished by the user, in a way which is intuitively obvious to the user.&lt;/p&gt;</description>
        </item>
        <item>
        <title>Converting MSBuild project files from legacy-style to SDK-style</title>
        <link>//localhost:1313/p/converting-msbuild-project-files-from-legacy-style-to-sdk-style/</link>
        <pubDate>Tue, 05 Sep 2023 10:45:31 +0000</pubDate>
        
        <guid>//localhost:1313/p/converting-msbuild-project-files-from-legacy-style-to-sdk-style/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/converting-msbuild-project-files-from-legacy-style-to-sdk-style/images/legacy-style-csproj-to-sdk-style-csproj.png&#34;
	width=&#34;1173&#34;
	height=&#34;437&#34;
	srcset=&#34;//localhost:1313/p/converting-msbuild-project-files-from-legacy-style-to-sdk-style/images/legacy-style-csproj-to-sdk-style-csproj_hu_fe261eca00e97a56.png 480w, //localhost:1313/p/converting-msbuild-project-files-from-legacy-style-to-sdk-style/images/legacy-style-csproj-to-sdk-style-csproj_hu_9994cb08165f7ca6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;268&#34;
		data-flex-basis=&#34;644px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;I recently did this at work, and I decided to document the process here in the form of a how-to guide. Please note that I am not an expert, I am learning as I go along, so there may be mistakes.&lt;/p&gt;
&lt;p&gt;Sdk-style project files have existed since net5, but when they were introduced they were made compatible with earlier versions of dotnet, such as dotnet framework 4.7.2. The kind of project files we were using before can now be called legacy-style project files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Legacy-style project files begin with &lt;code&gt;&amp;lt;Project ToolsVersion=&amp;quot;...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Sdk-style project files begin with &lt;code&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sdk-style project files are necessary if you want to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start using the &lt;code&gt;dotnet&lt;/code&gt; command-line utility and all the functionality that it provides.&lt;/li&gt;
&lt;li&gt;Eventually migrate to a modern version of dotnet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: If your legacy project files are using packages.config, they first need to be converted to PackageReference-style. We live in the 3rd millennium, we should act like it. Converting from packages.config to PackageReference is beyond the scope of this guide.&lt;/p&gt;
&lt;p&gt;Here are the steps I followed:&lt;/p&gt;
&lt;p&gt;I replaced the &lt;code&gt;&amp;lt;Project ToolsVersion=...&lt;/code&gt; tag with &lt;code&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I replaced the &lt;code&gt;&amp;lt;TargetFrameworkVersion&amp;gt;v4.7.2&amp;lt;/...&lt;/code&gt; tag with &lt;code&gt;&amp;lt;TargetFramework&amp;gt;net472&amp;lt;/...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I removed the following tags:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;ProjectGuid&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;TargetFrameworkProfile&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;FileAlignment&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;AutoGenerateBindingRedirects&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;Deterministic&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;NuGetPackageImportStamp&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;AssemblyName&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;AppDesignerFolder&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;ProjectTypeGuids&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;XamlDebuggingInformation&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;Prefer32Bit&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;ErrorReport&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I left the following tags as they were:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;RootNamespace&amp;gt;&lt;/code&gt; (This is only necessary if the name of the project file does not exactly match the name of the root namespace.)&lt;br&gt;
&lt;code&gt;&amp;lt;OutputType&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;StartupObject&amp;gt;&lt;/code&gt; (if any)&lt;br&gt;
&lt;code&gt;&amp;lt;ApplicationIcon&amp;gt;&lt;/code&gt; (if any)&lt;br&gt;
&lt;code&gt;&amp;lt;PlatformTarget&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I added the following tags:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Platforms&amp;gt;AnyCPU;x64&amp;lt;/...&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&amp;lt;ImplicitUsings&amp;gt;disable&amp;lt;/...\ &lt;/code&gt;&lt;Nullable&gt;enable&amp;lt;/&amp;hellip;&lt;br&gt;
&lt;code&gt;&amp;lt;TreatWarningsAsErrors&amp;gt;True&amp;lt;/...\ &lt;/code&gt;&lt;NoWarn&gt;NU1701;NU1702&amp;lt;/&amp;hellip;&lt;code&gt;&#39; &lt;/code&gt;&lt;UseWPF&gt;true&amp;lt;/&amp;hellip;&lt;code&gt;(for a WPF project)\&lt;/code&gt;&lt;UseWindowsForms&gt;True&amp;lt;/&amp;hellip; (for a WPF project &amp;ndash; don&amp;rsquo;t ask.)&lt;/p&gt;
&lt;p&gt;Then, I arrived at the most enjoyable part:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dozens upon dozens of &lt;code&gt;&amp;lt;Reference Include=...&amp;gt;&lt;/code&gt; items for things like &amp;ldquo;System&amp;rdquo;, &amp;ldquo;System.Data&amp;rdquo;, &amp;ldquo;System.Xml&amp;rdquo; etc. were removed. A few had to stay, for example:
&lt;ul&gt;
&lt;li&gt;System.Printing&lt;/li&gt;
&lt;li&gt;ReachFramework&lt;/li&gt;
&lt;li&gt;System.IO.Compression&lt;/li&gt;
&lt;li&gt;Microsoft.VisualBasic&lt;/li&gt;
&lt;li&gt;System.ServiceProcess&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;All &lt;code&gt;&amp;lt;ProjectReference...&amp;gt;&lt;/code&gt; items became one-liners since neither project guid nor name is necessary anymore.&lt;/li&gt;
&lt;li&gt;All &lt;code&gt;&amp;lt;PackageReference...&amp;gt;&lt;/code&gt; items also became one-liners since the version does not have to be a nested tag, it can be an XML attribute.&lt;/li&gt;
&lt;li&gt;Hundreds of lines of XML that reference individual .cs and .xaml files, as well as the associations between them, were removed. In our case this resulted in a 12:1 reduction in project file size.&lt;/li&gt;
&lt;li&gt;References to included resources stayed of course, as well as references to anything else that needs special handling.&lt;/li&gt;
&lt;li&gt;The importing of Microsoft.common.props and Microsoft.CSharp.targets was removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once this is done, or even while doing it, various problems popped up, which I had to address. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At some point Visual Studio started skipping the building of a project, so the projects that depended on it would fail. If I tried to clean that project, Visual Studio would again skip that project, so it would not do any cleaning. Forcibly cleaning by deleting all the bin and obj directories had no effect; restarting Visual Studio had no effect; enabling more verbose build output (even diagnostic-level) did not reveal the slightest hint as to why Visual Studio was skipping the project. That was very frustrating. After some googling around, gathering a list of magical incantations, and trying them one after the other, the one that worked for me was unloading the project and then reloading it.&lt;/li&gt;
&lt;li&gt;At some point I was receiving an error telling me that one of my WPF applications was missing a &amp;ldquo;Main&amp;rdquo; entry point. However, its project file was for all practical purposes identical to the project file of another WPF application that was building just fine, and suffice it to say, neither of the two applications had a &amp;ldquo;Main&amp;rdquo; entry point. As it turns out, the application object must be called &amp;ldquo;App.xaml.cs&amp;rdquo; and &amp;ldquo;App.xaml&amp;rdquo;; if you rename it, the magic does not work anymore, or perhaps it needs an &lt;code&gt;&amp;lt;ApplicationDefinition Include=&amp;quot;MyCustomApp.xaml&amp;quot; /&amp;gt;&lt;/code&gt; in order to work.&lt;/li&gt;
&lt;li&gt;At some point Visual Studio was launching one of my console applications passing it all of its command-line arguments twice. Visual Studio stopped doing that after it was restarted.&lt;/li&gt;
&lt;li&gt;You may encounter different problems, or even if you encounter problems that seem similar, you may need different magical incantations to overcome them.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Once the above was done, it was time to try building. I did not really expect it to build, and in fact it did not build. There were a number of problems that needed to addressed on a case-by-case basis. Here are the build problems that I encountered, and how I solved them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: Referencing standard assemblies.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It turns out that in SDK-style projects not only we do not have to reference standard assemblies anymore, but we must actually refrain from referencing them. In our case this was fixed by editing our project file and removing the entire &lt;code&gt;&amp;lt;ItemGroup&amp;gt;&lt;/code&gt; with items like &lt;code&gt;&amp;lt;Reference Include=&amp;quot;System&amp;quot; /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Reference Include=&amp;quot;System.Xml&amp;quot; /&amp;gt;&lt;/code&gt; and the like.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: Duplicate attributes in AssemblyInfo.cs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most of the assembly attributes defined in AssemblyInfo.cs were causing duplicate attribute errors, because in SDK-style projects these are automagically generated for us. The solution was to remove those attributes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: PresentationUI assembly not found&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a very strange problem which I was unable to either understand or properly solve. It may be related to the following discussions:&lt;/p&gt;
&lt;p&gt;github/dotnet/wpf: &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/dotnet/wpf/issues/1423&#34; target=&#34;_blank&#34;
   &gt;&amp;ldquo;PresentationUI ref-assembly missing: Build fails because cannot find type PresentationUIStyleResources&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github/dotnet/runtime: &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/dotnet/runtime/issues/3651&#34; target=&#34;_blank&#34;
   &gt;&amp;ldquo;WPF has removed PresentationUI ref assembly&amp;rdquo;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Luckily, the assembly was not necessary, so I was able to remove it without losing any functionality.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: Other assemblies not found&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is another strange thing which I was also unable to understand.  Examples of assemblies that could not be found anymore: Microsoft.Bcl.HashCode, System.Collections.Immutable, and JetBrains.Annotations.&lt;/p&gt;
&lt;p&gt;I solved this problem by simply avoiding the use of those assemblies and either forfeiting their functionality or implementing it by myself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System.HashCode was very easy to re-implement.&lt;/li&gt;
&lt;li&gt;System.Collections.Immutable turned out to be unnecessary.&lt;/li&gt;
&lt;li&gt;JetBrains.Annotations turned out to also be unnecessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Once the build problems were resolved, it was time to try running. Again, I did not expect the application to run, and in fact it did not run. Here are the runtime problems I encountered, and how I resolved them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: Accessing native DLLs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our project we have a few natives DLLs which would fail to load under the SDK-style project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In one case, the solution was to modify the code that loads the DLL to look for it not only in &lt;code&gt;bin\x64\Debug&lt;/code&gt; but also in &lt;code&gt;bin\x64\Debug\runtimes\win-x64\native&lt;/code&gt; and in &lt;code&gt;bin\x64\Debug\runtimes\win-x64&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In another case, the solution was to add &lt;code&gt;&amp;lt;AppendTargetFrameworkToOutputPath&amp;gt;False&amp;lt;/...&lt;/code&gt; to the project file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In another case, the solution was to add the following tags to the project file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;RuntimeIdentifiers&amp;gt;win-x64&amp;lt;/...&lt;/code&gt;
&lt;code&gt;&amp;lt;RuntimeIdentifier&amp;gt;win-x64&amp;lt;/...&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And in an especially difficult case, the solution was to add a post-build step which copies everything from &lt;code&gt;bin\x64\Debug\runtimes\win-x64\native&lt;/code&gt; to &lt;code&gt;bin\x64\Debug&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: Custom-built resources&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In my application I have icons in SVG format. WPF has no built-in support for SVG, so conversion of SVG to XAML is necessary. A long time ago I decided to handle this as follows:&lt;/p&gt;
&lt;p&gt;I added a custom build target that would convert the SVG files to XAML during build, then these XAML files would be included as resources into my application in a kind of mysterious way which I did not quite understand myself, and then my application would have access to the icons as XAML.&lt;/p&gt;
&lt;p&gt;It is no surprise that clunky tricks like this break when you try to make a significant change, such as change the style of the project files. In our case, the custom build target did in fact run, but the XAML files that it generated were not being magically included as resources in our application anymore, so all of those icons failed to load, and they were completely blank on the screen. Furthermore, I had no idea how to fix this, and becoming an expert in this monstrosity known as MSBuild was not in my immediate or even long-term goals.&lt;/p&gt;
&lt;p&gt;The solution was to ditch the svg-to-xaml build target, to include the original SVG files as resources into the application, and to do the necessary conversions from SVG to XAML at runtime.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: no splash-screen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The solution to this problem, (which is described here: &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/62141464/773113&#34; target=&#34;_blank&#34;
   &gt;https://stackoverflow.com/a/62141464/773113&lt;/a&gt;) was to write a couple of lines of code in &lt;code&gt;Application.OnStartup()&lt;/code&gt; to create the splash-screen myself.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Once all of the runtime problems were resolved, I was able to perform the following additional improvements:&lt;/p&gt;
&lt;p&gt;Replaced a whole bunch of resource-include statements like &lt;code&gt;&amp;lt;Resource Include=&amp;quot;Art/Icon/Checkmark.svg&amp;quot; /&amp;gt;&lt;/code&gt; with a single resource include statement: &lt;code&gt;&amp;lt;Resource Include=&amp;quot;Art/Icon/\*.svg&amp;quot; /&amp;gt;&lt;/code&gt;. (And if I wanted to include all SVG files under &lt;code&gt;Art&lt;/code&gt;, I could have used &lt;code&gt;&amp;lt;Resource Include=&amp;quot;Art/**/*.svg&amp;quot; /&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;hr&gt;</description>
        </item>
        <item>
        <title>Migrating a project from DotNet Framework 4-7-2 to DotNet 7</title>
        <link>//localhost:1313/p/migrating-a-project-from-dotnet-framework-4-7-2-to-dotnet-7/</link>
        <pubDate>Fri, 21 Jul 2023 11:33:13 +0000</pubDate>
        
        <guid>//localhost:1313/p/migrating-a-project-from-dotnet-framework-4-7-2-to-dotnet-7/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/migrating-a-project-from-dotnet-framework-4-7-2-to-dotnet-7/images/dotnet-framework-4.7.2-to-dotnet-7.jpg&#34;
	width=&#34;1173&#34;
	height=&#34;437&#34;
	srcset=&#34;//localhost:1313/p/migrating-a-project-from-dotnet-framework-4-7-2-to-dotnet-7/images/dotnet-framework-4.7.2-to-dotnet-7_hu_2d9a765c8b8aca.jpg 480w, //localhost:1313/p/migrating-a-project-from-dotnet-framework-4-7-2-to-dotnet-7/images/dotnet-framework-4.7.2-to-dotnet-7_hu_cb08111c7a27c98f.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;268&#34;
		data-flex-basis=&#34;644px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;I recently did this at work, and I decided to document the process here in the form of a how-to guide. Please note that I am not an expert, I am learning as I go along, so there may be mistakes.&lt;/p&gt;
&lt;h3 id=&#34;convert-all-projects-to-sdk-style&#34;&gt;Convert all projects to sdk-style.
&lt;/h3&gt;&lt;p&gt;This is necessary for net7, and also a very useful thing to do even if we were staying in net472.  I cover it in another post: &lt;a 
   href=&#34;//localhost:1313/p/converting-msbuild-project-files-from-legacy-style-to-sdk-style/&#34;
   &gt;Converting MSBuild project files from legacy-style to SDK-style&lt;/a&gt; and it actually represents most of the work needed to migrate to net7.&lt;/p&gt;
&lt;h3 id=&#34;change-the-actual-version&#34;&gt;Change the actual version.
&lt;/h3&gt;&lt;p&gt;You might want to start migrating the projects one at a time, so that you do not migrate the entire solution at once. This will allow you to keep ensuring at each step that the entire solution still works.&lt;/p&gt;
&lt;p&gt;A dotnet project may depend on dotnet-framework projects, but a dotnet-framework project may not depend on dotnet projects; therefore, if we want to migrate projects one at a time instead of all of them at the same time, then the first project that we migrate must be one which constitutes a root of a project dependency tree.&lt;/p&gt;
&lt;p&gt;In our case, we are making a WPF application; so, in our solution we have one project which is a windows executable, and a multitude of other projects that are class libraries. The executable project directly or indirectly depends on the class libraries, but no class library depends on the executable project; therefore, the executable project is a root in the project dependency tree. So, that&amp;rsquo;s the first project to migrate.&lt;/p&gt;
&lt;p&gt;In your project file, replace the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;TargetFramework&amp;gt;net472&amp;lt;/TargetFramework&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;TargetFramework&amp;gt;net7.0&amp;lt;TargetFramework&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or, for a WPF project:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;TargetFramework&amp;gt;net7.0-windows&amp;lt;/TargetFramework&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it, you can now build. Of course, it will not build. There is a number of issues that will need to be fixed.&lt;/p&gt;
&lt;h3 id=&#34;resolve-build-problems&#34;&gt;Resolve build problems.
&lt;/h3&gt;&lt;p&gt;The issues that I encountered and had to fix are as follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: More nullability issues&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Net7 complains about nullability issues there were net472 did not. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In a class you may have had &lt;code&gt;public override string Equals( object other )&lt;/code&gt; and it may have worked fine, but you can&amp;rsquo;t do that anymore in net7: the base &lt;code&gt;Equals()&lt;/code&gt; method accepts a nullable parameter, and you cannot just waive the nullability of the original parameter in an override. So, it will now have to be &lt;code&gt;public override string Equals( object? other )&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Annoyingly, the same applies to the &lt;code&gt;Equals&lt;/code&gt; method of &lt;code&gt;IEquatable&amp;lt;T&amp;gt;&lt;/code&gt;, but in this case for absolutely no good reason. That&amp;rsquo;s just how it is, and we have to make do.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;At some place I was invoking &lt;code&gt;new System.Threading.Thread( threadProcedure );&lt;/code&gt; where &lt;code&gt;threadProcedure&lt;/code&gt; was defined as &lt;code&gt;void threadProcedure( object data )&lt;/code&gt;. The error was:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error CS8622: Nullability of reference types in type of parameter &#39;data&#39; of &#39;void ServerThread.threadProcedure(object data)&#39; doesn&#39;t match the target delegate &#39;ParameterizedThreadStart&#39; (possibly because of nullability attributes).&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the error message even includes a hint which points to the exact problem, and the fix is to simply declare &lt;code&gt;data&lt;/code&gt; as nullable:  &lt;code&gt;void threadProcedure( object? data )&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When declaring a new dictionary type of &lt;code&gt;&amp;lt;K,V&amp;gt;&lt;/code&gt; you have to add &lt;code&gt;where K: notnull&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Methods like &lt;code&gt;Dictionary.TryGetValue ( key, out T value )&lt;/code&gt; need to be changed to &lt;code&gt;Dictionary.TryGetValue( key, out T? value )&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: GlobalSuppressions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I used to have a GlobalSuppressions.cs file with a bunch of &lt;code&gt;[assembly: SuppressMessage( ... )]&lt;/code&gt; attributes for things like &amp;ldquo;ENC1003&amp;rdquo;, &amp;ldquo;IDE0063&amp;rdquo;, &amp;ldquo;IDE1006&amp;rdquo;, etc. I did not know what to pass as &amp;ldquo;category&amp;rdquo;, so I used to pass &lt;code&gt;null&lt;/code&gt;. This does not work anymore, due to global nullability checking.&lt;/p&gt;
&lt;p&gt;To resolve this problem, there are three options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find the proper values to pass for category. (#AintNoBodyGotNoTimeFoDat)&lt;/li&gt;
&lt;li&gt;Specify &lt;code&gt;#nullable disable&lt;/code&gt; for this particular file. (Meh.)&lt;/li&gt;
&lt;li&gt;Just delete this file, since we can now start making use of EditorConfig.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Needless to say, I picked the last option.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: Types &amp;ldquo;forwarded&amp;rdquo; to nuget assemblies&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had a piece of code which was obtaining a windows service in order to restart it, with a line like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var serviceController = new SysServiceProcess.ServiceController( serviceName );&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For this line, MSBuild started giving me the following error:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error CS1069: The type name &#39;ServiceController&#39; could not be found in the namespace &#39;System.ServiceProcess&#39;. This type has been forwarded to assembly &#39;System.ServiceProcess.ServiceController, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&#39; Consider adding a reference to that assembly.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the error message is quite descriptive, and even suggests a fix, which is almost correct. In this case, I had to add the following to my project file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;PackageReference Include=&amp;quot;System.ServiceProcess.ServiceController&amp;quot; Version=&amp;quot;4.1.0&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In another instance, I had a piece of code that played a sound, with a line like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var player = new System.Media.SoundPlayer( soundPathName );&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For this line, MSBuild started giving me the following error:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error CS1069: The type name &#39;SoundPlayer&#39; could not be found in the namespace &#39;System.Media&#39;. This type has been forwarded to assembly &#39;System.Windows.Extensions, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51&#39; Consider adding a reference to that assembly.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The fix was to add the following to my project file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;PackageReference Include=&amp;quot;System.Windows.Extensions&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In some other piece of code, MSBuild started complaining that there exists no &amp;ldquo;Bitmap&amp;rdquo; type, even though it was entirely unclear why it was looking for type &amp;ldquo;Bitmap&amp;rdquo;.  In any case, again it suggested to reference a particular assembly, and the problem went away.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: System.Range&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our solution we used to have a type called &lt;code&gt;Range&lt;/code&gt;. In modern dotnet a new type called &lt;code&gt;System.Range&lt;/code&gt; has been introduced, and this caused ambiguous reference errors.&lt;/p&gt;
&lt;p&gt;This can be solved either by renaming our own types, or by never directly importing external namespaces, and always using aliases instead. In other words, &lt;code&gt;using Sys = System;&lt;/code&gt; instead of &lt;code&gt;using System;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: warnings about assembly conflicts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not really an error, but I like my build to be issuing no warnings.&lt;/p&gt;
&lt;p&gt;MSBuild started complaining the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;warning MSB3243: No way to resolve conflict between &amp;quot;System.IO.Compression, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&amp;quot; and &amp;quot;System.IO.Compression&amp;quot;. Choosing &amp;quot;System.IO.Compression, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&amp;quot; arbitrarily.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;One way to solve this problem is to find all occurrences of the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Reference Include=&amp;quot;System.IO.Compression&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and replace them with the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;Reference Include=&amp;quot;System.IO.Compression&amp;quot; Version=&amp;quot;7.0.0.0&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, there is a better way to solve this problem: Just remove the reference! The build system is reporting a conflict between the assembly as referenced in the project file and the already-existing assembly in net7, so obviously, the assembly already exists, so the project does not need to explicitly reference it anymore.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: System.Diagnostics.Debug.Listeners&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I had a line like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System.Diagnostics.TraceListener listener = System.Diagnostics.Debug.Listeners[0];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;MSBuild started complaining as follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;error CS0117: &#39;Debug&#39; does not contain a definition for &#39;Listeners&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The solution was to replace the above line with the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System.Diagnostics.TraceListener listener = System.Diagnostics.Trace.Listeners[0];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: Thread.Abort() is obsolete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Code that makes use of &amp;lsquo;Thread.Abort()&amp;rsquo; started giving the following warning:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;warning SYSLIB0006: &#39;Thread.Abort()&#39; is obsolete: &#39;Thread.Abort is not supported and throws PlatformNotSupportedException.&#39; https://aka.ms/dotnet-warnings/SYSLIB0006&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The solution was to fix the code so that it does not use &lt;code&gt;Thread.Abort()&lt;/code&gt;. (It was a bad idea anyway.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Build Problem: Empty macros in Post-Build-Step&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My post-build-step was failing, because the macro $(ProjectDir) was empty. There are two possible solutions to this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the post-build-step, the correct magical incantation to use is $(MSBuildProjectDirectory) instead of $(ProjectDir).&lt;/li&gt;
&lt;li&gt;Better yet, drop post-build steps, and instead go to project settings, and add a post-build target, which is the new dotnet way of specifying post-build steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;resolve-runtime-problems&#34;&gt;Resolve runtime problems.
&lt;/h3&gt;&lt;p&gt;Once the build problems were resolved, it was time to try running. Again, I did not expect the application to run, and in fact it did not run.&lt;/p&gt;
&lt;p&gt;Here are the runtime problems I encountered, and how I resolved them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: App.config/system.data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My application would fail during startup with a &amp;ldquo;System.Windows.Data Error 17&amp;rdquo; saying that it could not get some value from some settings file. The stack trace was followed by the good old familiar nonsense: &lt;code&gt;TargetInvocationException:&#39;System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation&lt;/code&gt; which essentially means &amp;ldquo;please keep reading&amp;rdquo;.
The next line was &lt;code&gt;System.Configuration.ConfigurationErrorsException: Configuration system failed to initialize&lt;/code&gt;, which again says pretty much nothing, bringing us, finally, to the next line that mentions the actual problem: `System.Configuration.ConfigurationErrorsException: Unrecognized configuration section system.data. (my-application.config line 12)&lt;/p&gt;
&lt;p&gt;So, it turns out that modern dotnet does not like the &lt;code&gt;&amp;lt;system.data&amp;gt;&lt;/code&gt; section in App.config. In my case this section was empty, so all I had to do was remove the section.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: non-null EventArgs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I am a control freak, so my System.AppDomain.CurrentDomain.ProcessExit event handler contained an assertion that the eventArgs parameter of that event is null, because I had observed it to be null under dotnet-framework.&lt;/p&gt;
&lt;p&gt;As it turns out, in modern dotnet this parameter is not null anymore; it is a default instance of &lt;code&gt;EventArgs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The fix for this was to change the assertion to expect a non-null eventArgs from now on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: Accessing native DLLs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our project we have a native DLL, which used to be placed in the same directory as the executable, but under dotnet-framework native DLLs are, by default, placed in special locations. In our case, our DLL was placed in &amp;lt;executable-location&amp;gt;/runtimes/win-x64/native, so it could not be
loaded.&lt;/p&gt;
&lt;p&gt;I could update the code to go looking for the DLL in that new location, but I decided to do something more simple; I added the following line to the project file:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;AppendTargetFrameworkToOutputPath&amp;gt;False&amp;lt;;/AppendTargetFrameworkToOutputPath&amp;amp;gt&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runtime Problem: Splash-screen weirdness&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As soon as I managed to get my WPF application to run, I noticed something weird with the splash-screen: as our application was loading, the splash-screen would first appear stretched (in an ugly way) to a size that was larger than normal, and then it would shrink to its normal size but it would move to a location slightly to the left, and slightly above the center of the screen, where it would stay until our application would finally complete loading and the splash-screen would disappear.&lt;/p&gt;
&lt;p&gt;As it turns out, this is a known bug in WPF see &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/dotnet/wpf/issues/947&#34; target=&#34;_blank&#34;
   &gt;github dotnet wpf issue 947&lt;/a&gt; and &lt;a class=&#34;external&#34; 
   href=&#34;https://github.com/dotnet/wpf/issues/5070&#34; target=&#34;_blank&#34;
   &gt;github dotnet wpf issue 5070&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The solution, (which is described here: &lt;a class=&#34;external&#34; 
   href=&#34;https://stackoverflow.com/a/62141464/773113&#34; target=&#34;_blank&#34;
   &gt;https://stackoverflow.com/a/62141464/773113&lt;/a&gt;) was to write a couple of lines of code in &lt;code&gt;Application.OnStartup()&lt;/code&gt; to create the splash-screen myself.&lt;/p&gt;
&lt;h3 id=&#34;resolve-release-build-problems&#34;&gt;Resolve release build problems.
&lt;/h3&gt;&lt;p&gt;Once all of the above was done, it was time to try building the release version of our application. Here, I ran into the biggest problem:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Release Build Problem: ConfuserEx does not work anymore&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In our application we use obfuscation. So far, this has caused us a lot of trouble: first we used to employ a tool called Confuser, which was later abandoned and re-incarnated as ConfuserEx, so we had to start using that one. Then, that one was abandoned too, so we had to find a fork of it that was still being maintained by someone.&lt;/p&gt;
&lt;p&gt;Now with DotNet 7, ConfuserEx does not work for us anymore: it fails with a message saying that it does not know the executable file format. There is a question-and-answer where someone asks the author for a solution, and the author points them to an alpha build of some version 2.0 of that tool, but that was a long time ago, and the artifacts of that alpha build do not exist anymore.&lt;/p&gt;
&lt;p&gt;There is a new tool called Dotfuscator, which is bundled with Visual Studio, but there are all kinds of serious problems with it, see another post of mine about that: &lt;a 
   href=&#34;//localhost:1313/p/on-dotfuscator-by-preemptive-solutions/&#34;
   &gt;On Dotfuscator by PreEmptive Solutions&lt;/a&gt;. I am currently working on this, when I find a solution I will update this article with my findings.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This guide will be updated during the following days as I complete the migration of the entire application from DotNet Framework 4.6.2 to DotNet 7.&lt;/p&gt;</description>
        </item>
        <item>
        <title>The Trouble with XAML Hot Reload in WPF</title>
        <link>//localhost:1313/p/the-trouble-with-xaml-hot-reload-in-wpf/</link>
        <pubDate>Mon, 12 Jun 2023 06:11:58 +0000</pubDate>
        
        <guid>//localhost:1313/p/the-trouble-with-xaml-hot-reload-in-wpf/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/the-trouble-with-xaml-hot-reload-in-wpf/images/wpf-xaml-3.png&#34;
	width=&#34;1000&#34;
	height=&#34;557&#34;
	srcset=&#34;//localhost:1313/p/the-trouble-with-xaml-hot-reload-in-wpf/images/wpf-xaml-3_hu_efeded7c868b7b8.png 480w, //localhost:1313/p/the-trouble-with-xaml-hot-reload-in-wpf/images/wpf-xaml-3_hu_19f7cd65cd18e904.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;430px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;The XAML Hot Reload feature of WPF is extremely useful because GUI work often involves tweaking visual aspects of an application, so being able to modify XAML, save it, and immediately see the changes on the screen saves a huge amount of time as opposed to having to terminate the application, modify the code, re-compile, re-run, and go clickety-clickety-click to navigate to the same page and finally see your changes.&lt;/p&gt;
&lt;p&gt;Unfortunately, as a WPF project grows, the XAML Hot Reload feature inevitably one day stops working: You modify your XAML, you save the XAML file, and yet nothing changes on the screen. The message &amp;ldquo;No changes were found&amp;rdquo; appears in the Hot Reload tab of the Visual Studio Output Window, but it is a damned lie, because you just made changes. This can really be a problem.&lt;/p&gt;
&lt;p&gt;When you find yourself in this extremely unpleasant situation, here is a list of things to try:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First of all, the usual:
&lt;ul&gt;
&lt;li&gt;Exit Visual Studio and re-launch Visual Studio.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Then, the all too familiar:
&lt;ul&gt;
&lt;li&gt;Exit Visual Studio, delete the &lt;code&gt;.vs&lt;/code&gt; directory in your solution, and
re-launch Visual Studio.&lt;/li&gt;
&lt;li&gt;Exit Visual Studio, delete the &lt;code&gt;.vs&lt;/code&gt; directory, clean all output directories, and re-launch Visual Studio.
&lt;ul&gt;
&lt;li&gt;No, you cannot just go to the Build menu
and select &amp;ldquo;Clean Solution&amp;rdquo;; &lt;em&gt;that would make too much sense&lt;/em&gt;. The &amp;ldquo;Clean Solution&amp;rdquo; option is a joke that never fixes anything; instead, you have
to have a script that actually visits every bin and obj directory and deletes its
contents, and you also have to make sure that Visual Studio is not running when you run this script.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;And then, the arcane:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make sure all your dependency properties are done properly. What constitutes &amp;ldquo;properly&amp;rdquo; for Microsoft is actually quite counter-intuitive and quite preposterous: every dependency property &lt;strong&gt;must&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;be backed by a field of type &lt;code&gt;System.Windows.DependencyProperty&lt;/code&gt; which &lt;strong&gt;must&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;be &lt;code&gt;public static&lt;/code&gt;, and whose name &lt;strong&gt;must&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;start with the name of the corresponding C# property, and &lt;strong&gt;must&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;end with the suffix &lt;code&gt;Property&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All this magic must be done exactly right every single time, or else all sorts of other magic do not work anymore, for example the XAML Hot Reload magic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have any styles where you had to specify the type of the data context so as to enjoy type safety and auto-completion when editing, (and to avoid ReSharper warings,) make sure that you do not use the &lt;code&gt;d:DataContext=&amp;quot;{d:DesignInstance ...&lt;/code&gt; magical incantation suggested by some folks out there. If something like that appears outside of the root XAML element, XAML Hot Reload will stop working. Instead, use the following magical incantation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;Style TargetType=&amp;#34;{x:Type ...}&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;d:Style.DataContext&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;lt;x:Type Type=&amp;#34;SomeViewModel&amp;#34; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;/d:Style.DataContext&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ultimately, all problems with XAML Hot Reload can be traced down to the fact that it embraces silent failure. In my experience any feature that involves silent failure is a failure as a whole, because:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In general, anything that can break will at some point break;&lt;br&gt;
if it gives you some hint as to why it broke,&lt;br&gt;
or even just a hint that it just now broke,&lt;br&gt;
then you can fix it;&lt;br&gt;
but if it gives no hint, then you can&amp;rsquo;t fix it.&lt;/p&gt;&lt;/blockquote&gt;</description>
        </item>
        <item>
        <title>Mouse Wheel Natural Scrolling in Windows</title>
        <link>//localhost:1313/p/mouse-wheel-natural-scrolling-in-windows/</link>
        <pubDate>Wed, 16 Mar 2022 09:55:12 +0000</pubDate>
        
        <guid>//localhost:1313/p/mouse-wheel-natural-scrolling-in-windows/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;//localhost:1313/p/mouse-wheel-natural-scrolling-in-windows/media/mouse-and-wheel.jpg&#34;
	width=&#34;640&#34;
	height=&#34;225&#34;
	srcset=&#34;//localhost:1313/p/mouse-wheel-natural-scrolling-in-windows/media/mouse-and-wheel_hu_e10eea3d8d8f8ad3.jpg 480w, //localhost:1313/p/mouse-wheel-natural-scrolling-in-windows/media/mouse-and-wheel_hu_c6a8fcd1fcd7c75f.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;284&#34;
		data-flex-basis=&#34;682px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;Some time ago and for about a year I used a Mac, which had natural scrolling by default. I decided to resist the urge to immediately configure it to work like Windows, and instead I made it a point to give natural scrolling a try for at least a while before making up my mind as to whether to keep it or lose it. While giving it a try, I was surprised to see that it was very easy for me to adjust to it, despite the fact that I have been using the unnatural Windows scrolling mode for nearly 30 years. (Ever since the mouse wheel became a thing.) I found that natural scrolling was indeed&amp;hellip; natural. So, I kept using it, and I became addicted to it. Ever since then, I always have to configure natural scrolling on any Windows machine that I get my hands on before I can start using that machine.&lt;/p&gt;
&lt;p&gt;Windows is so poor that it does not offer any user interface through which a novice user can change the mouse wheel scrolling mode. To do that you have to edit the registry, and the setting you are going to be modifying is a machine setting, so you will be affecting the mouse wheel mode for all users, not just for yourself. This is unbelievably lame, but hey, that&amp;rsquo;s Windows, we are totally used to lame.&lt;/p&gt;
&lt;p&gt;There exists a procedure for finding a specific mouse device and modifying the wheel mode of only that device, but it is a hassle, and it does not even guarantee that you will be modifying the settings for the right device, so we will be skipping that procedure and modifying the setting for all mouse devices that are currently connected or have ever been connected. If a new mouse is connected to the system, the procedure will need to be repeated.&lt;/p&gt;
&lt;p&gt;Luckily, I do not have any contractual obligations to give warnings regarding the alleged dangers of modifying the registry; so, without further ado, here is what you need to do in order to configure natural scrolling under Windows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open up RegEdit, and navigate to the following key:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Enum\HID&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search for values named FlipFlopWheel&lt;/li&gt;
&lt;li&gt;For each value you find, if the data is 0, change the data to 1.&lt;/li&gt;
&lt;li&gt;You are done when &lt;em&gt;Find Next&lt;/em&gt; (F3) starts yielding results that are outside of the above key. (i.e. when you reach Computer\HKEY_LOCAL_MACHINE\SYSTEM\DriverDatabase.)&lt;/li&gt;
&lt;li&gt;Restart Windows.  (Logging out and back in will not work, because remember, this is a Windows-wide setting, not a per-user setting.)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Cover image: Artwork by michael.gr based on original mouse-15887 by Arkthus from the Noun Project&lt;/p&gt;</description>
        </item>
        <item>
        <title>How to get a raise</title>
        <link>//localhost:1313/p/how-to-get-a-raise/</link>
        <pubDate>Fri, 09 Nov 2012 16:19:29 +0000</pubDate>
        
        <guid>//localhost:1313/p/how-to-get-a-raise/</guid>
        <description>&lt;p&gt;Once upon a time I was dissatisfied with my salary at my workplace, and I let it show. The boss, fearing that he was about to lose me, placed an ad in the newspaper for my exact job description. Since I was looking for a job, I saw the ad in the newspaper. What I did was to reply to that ad, sending my boss my resume, which of course included precisely those qualifications that the job required. The boss got the message.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
